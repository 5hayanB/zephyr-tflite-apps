
zephyr.elf:     file format elf64-littleriscv


Disassembly of section vector:

0000000080000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
    80000000:	000ac197          	auipc	gp,0xac
    80000004:	dc818193          	addi	gp,gp,-568 # 800abdc8 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to __irq_wrapper.
	 */
	la t0, __irq_wrapper
    80000008:	00000297          	auipc	t0,0x0
    8000000c:	02028293          	addi	t0,t0,32 # 80000028 <__irq_wrapper>
#endif

	csrw mtvec, t0
    80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
    80000014:	a031                	j	80000020 <__reset>
	...

Disassembly of section reset:

0000000080000020 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
    80000020:	655010ef          	jal	ra,80001e74 <__initialize>
	...

Disassembly of section exceptions:

0000000080000028 <__irq_wrapper>:
#endif /* CONFIG_SMP */
1:
#endif /* CONFIG_USERSPACE */

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
    80000028:	7135                	addi	sp,sp,-160
	DO_CALLER_SAVED_T0T1(sr)		;
    8000002a:	e416                	sd	t0,8(sp)
    8000002c:	e81a                	sd	t1,16(sp)
3:	DO_CALLER_SAVED_REST(sr)		;
    8000002e:	ec1e                	sd	t2,24(sp)
    80000030:	f072                	sd	t3,32(sp)
    80000032:	f476                	sd	t4,40(sp)
    80000034:	f87a                	sd	t5,48(sp)
    80000036:	fc7e                	sd	t6,56(sp)
    80000038:	e0aa                	sd	a0,64(sp)
    8000003a:	e4ae                	sd	a1,72(sp)
    8000003c:	e8b2                	sd	a2,80(sp)
    8000003e:	ecb6                	sd	a3,88(sp)
    80000040:	f0ba                	sd	a4,96(sp)
    80000042:	f4be                	sd	a5,104(sp)
    80000044:	f8c2                	sd	a6,112(sp)
    80000046:	fcc6                	sd	a7,120(sp)
    80000048:	ed12                	sd	tp,152(sp)
    8000004a:	e006                	sd	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
    8000004c:	e922                	sd	s0,144(sp)
	GET_CURRENT_CPU(s0, t0)
    8000004e:	f14022f3          	csrr	t0,mhartid
    80000052:	000a7417          	auipc	s0,0xa7
    80000056:	11e40413          	addi	s0,s0,286 # 800a7170 <_kernel>
    8000005a:	00028663          	beqz	t0,80000066 <__irq_wrapper+0x3e>
    8000005e:	028e                	slli	t0,t0,0x3
    80000060:	9416                	add	s0,s0,t0
    80000062:	028a                	slli	t0,t0,0x2
    80000064:	9416                	add	s0,s0,t0
	sw zero, 0(t0)
#endif
#endif

	/* Save MEPC register */
	csrr t0, mepc
    80000066:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
    8000006a:	e116                	sd	t0,128(sp)

	/* Save MSTATUS register */
	csrr t4, mstatus
    8000006c:	30002ef3          	csrr	t4,mstatus
	sr t4, __z_arch_esf_t_mstatus_OFFSET(sp)
    80000070:	e576                	sd	t4,136(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
    80000072:	116000ef          	jal	ra,80000188 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
    80000076:	ed1d                	bnez	a0,800000b4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
    80000078:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
    8000007c:	fff0039b          	addiw	t2,zero,-1
    80000080:	13fe                	slli	t2,t2,0x3f
    80000082:	13fd                	addi	t2,t2,-1
	and t0, t0, t2
    80000084:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
    80000088:	432d                	li	t1,11
	beq t0, t1, is_kernel_syscall
    8000008a:	00628963          	beq	t0,t1,8000009c <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
    8000008e:	850a                	mv	a0,sp
	la ra, no_reschedule
    80000090:	00000097          	auipc	ra,0x0
    80000094:	0ae08093          	addi	ra,ra,174 # 8000013e <no_reschedule>
	tail _Fault
    80000098:	11a0306f          	j	800031b2 <_Fault>

000000008000009c <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
    8000009c:	628a                	ld	t0,128(sp)
	addi t0, t0, 4
    8000009e:	0291                	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
    800000a0:	e116                	sd	t0,128(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in a7. */
	lr a7, __z_arch_esf_t_a7_OFFSET(sp)
    800000a2:	78e6                	ld	a7,120(sp)

	ASSUME_EQUAL(RV_ECALL_RUNTIME_EXCEPT, 0)
	beqz a7, do_fault
    800000a4:	00088463          	beqz	a7,800000ac <do_fault>
	ASSUME_EQUAL(RV_ECALL_IRQ_OFFLOAD, 1)
	beqz a7, do_irq_offload
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
    800000a8:	450d                	li	a0,3
	j 1f
    800000aa:	a011                	j	800000ae <do_fault+0x2>

00000000800000ac <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
    800000ac:	6506                	ld	a0,64(sp)
1:	mv a1, sp
    800000ae:	858a                	mv	a1,sp
	tail z_riscv_fatal_error
    800000b0:	0fa0306f          	j	800031aa <z_riscv_fatal_error>

00000000800000b4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t3, ___cpu_t_nested_OFFSET(s0)
    800000b4:	00042e03          	lw	t3,0(s0)
	addi t4, t3, 1
    800000b8:	001e0e93          	addi	t4,t3,1
	sw t4, ___cpu_t_nested_OFFSET(s0)
    800000bc:	01d42023          	sw	t4,0(s0)
	bnez t3, on_irq_stack
    800000c0:	000e1763          	bnez	t3,800000ce <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
    800000c4:	828a                	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
    800000c6:	00843103          	ld	sp,8(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
    800000ca:	1141                	addi	sp,sp,-16
	sr t0, 0(sp)
    800000cc:	e016                	sd	t0,0(sp)

00000000800000ce <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
    800000ce:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
    800000d2:	fff0029b          	addiw	t0,zero,-1
    800000d6:	12fe                	slli	t0,t0,0x3f
    800000d8:	12fd                	addi	t0,t0,-1
	and a0, a0, t0
    800000da:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
    800000de:	09a000ef          	jal	ra,80000178 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
    800000e2:	0000f297          	auipc	t0,0xf
    800000e6:	cbe28293          	addi	t0,t0,-834 # 8000eda0 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
    800000ea:	0512                	slli	a0,a0,0x4
	add t0, t0, a0
    800000ec:	92aa                	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
    800000ee:	0002b503          	ld	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
    800000f2:	0082b303          	ld	t1,8(t0)

	/* Call ISR function */
	jalr ra, t1, 0
    800000f6:	000300e7          	jalr	t1

00000000800000fa <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
    800000fa:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
    800000fe:	13fd                	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
    80000100:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
    80000104:	02039d63          	bnez	t2,8000013e <no_reschedule>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
    80000108:	6102                	ld	sp,0(sp)

#ifdef CONFIG_STACK_SENTINEL
	call z_check_stack_sentinel
    8000010a:	68c0b0ef          	jal	ra,8000b796 <z_check_stack_sentinel>

000000008000010e <reschedule>:
#endif

reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
    8000010e:	680c                	ld	a1,16(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
    80000110:	1141                	addi	sp,sp,-16
	sr a1, 0(sp)
    80000112:	e02e                	sd	a1,0(sp)
	mv a0, zero
    80000114:	00000513          	li	a0,0
	call z_get_next_switch_handle
    80000118:	7ce0c0ef          	jal	ra,8000c8e6 <z_get_next_switch_handle>
	lr a1, 0(sp)
    8000011c:	6582                	ld	a1,0(sp)
	addi sp, sp, 16
    8000011e:	0141                	addi	sp,sp,16
	beqz a0, no_reschedule
    80000120:	cd19                	beqz	a0,8000013e <no_reschedule>
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
    80000122:	5a7010ef          	jal	ra,80001ec8 <z_riscv_switch>

0000000080000126 <z_riscv_thread_start>:

z_riscv_thread_start:
might_have_rescheduled:
#ifdef CONFIG_SMP
	/* reload s0 with &_current_cpu as it might have changed */
	GET_CURRENT_CPU(s0, t0)
    80000126:	f14022f3          	csrr	t0,mhartid
    8000012a:	000a7417          	auipc	s0,0xa7
    8000012e:	04640413          	addi	s0,s0,70 # 800a7170 <_kernel>
    80000132:	00028663          	beqz	t0,8000013e <no_reschedule>
    80000136:	028e                	slli	t0,t0,0x3
    80000138:	9416                	add	s0,s0,t0
    8000013a:	028a                	slli	t0,t0,0x2
    8000013c:	9416                	add	s0,s0,t0

000000008000013e <no_reschedule>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
    8000013e:	628a                	ld	t0,128(sp)
	csrw mepc, t0
    80000140:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t4, __z_arch_esf_t_mstatus_OFFSET(sp)
    80000144:	6eaa                	ld	t4,136(sp)
	csrrw t5, mstatus, t4
    80000146:	300e9f73          	csrrw	t5,mstatus,t4
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
    8000014a:	644a                	ld	s0,144(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED_T0T1(lr)
    8000014c:	62a2                	ld	t0,8(sp)
    8000014e:	6342                	ld	t1,16(sp)
	DO_CALLER_SAVED_REST(lr)
    80000150:	63e2                	ld	t2,24(sp)
    80000152:	7e02                	ld	t3,32(sp)
    80000154:	7ea2                	ld	t4,40(sp)
    80000156:	7f42                	ld	t5,48(sp)
    80000158:	7fe2                	ld	t6,56(sp)
    8000015a:	6506                	ld	a0,64(sp)
    8000015c:	65a6                	ld	a1,72(sp)
    8000015e:	6646                	ld	a2,80(sp)
    80000160:	66e6                	ld	a3,88(sp)
    80000162:	7706                	ld	a4,96(sp)
    80000164:	77a6                	ld	a5,104(sp)
    80000166:	7846                	ld	a6,112(sp)
    80000168:	78e6                	ld	a7,120(sp)
    8000016a:	626a                	ld	tp,152(sp)
    8000016c:	6082                	ld	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
    8000016e:	610d                	addi	sp,sp,160
#endif

	/* Call SOC_ERET to exit ISR */
	SOC_ERET
    80000170:	30200073          	mret
    80000174:	0000                	unimp
	...

0000000080000178 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
    80000178:	4305                	li	t1,1
	sll t0, t1, a0
    8000017a:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
    8000017e:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
    80000182:	8082                	ret
    80000184:	0000                	unimp
	...

0000000080000188 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
    80000188:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
    8000018c:	fff0031b          	addiw	t1,zero,-1
    80000190:	137e                	slli	t1,t1,0x3f
	and t0, t0, t1
    80000192:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
    80000196:	4501                	li	a0,0
	beqz t0, not_interrupt
    80000198:	00028363          	beqz	t0,8000019e <not_interrupt>
	addi a0, a0, 1
    8000019c:	0505                	addi	a0,a0,1

000000008000019e <not_interrupt>:

not_interrupt:
	/* return */
	ret
    8000019e:	8082                	ret
	...

Disassembly of section text:

00000000800001a4 <__clzdi2>:
    800001a4:	03800793          	li	a5,56
    800001a8:	00f55733          	srl	a4,a0,a5
    800001ac:	0ff77713          	andi	a4,a4,255
    800001b0:	e319                	bnez	a4,800001b6 <__clzdi2+0x12>
    800001b2:	17e1                	addi	a5,a5,-8
    800001b4:	fbf5                	bnez	a5,800001a8 <__clzdi2+0x4>
    800001b6:	04000713          	li	a4,64
    800001ba:	8f1d                	sub	a4,a4,a5
    800001bc:	00f55533          	srl	a0,a0,a5
    800001c0:	0000f797          	auipc	a5,0xf
    800001c4:	2c078793          	addi	a5,a5,704 # 8000f480 <__clz_tab>
    800001c8:	953e                	add	a0,a0,a5
    800001ca:	00054503          	lbu	a0,0(a0)
    800001ce:	40a7053b          	subw	a0,a4,a0
    800001d2:	8082                	ret

00000000800001d4 <__adddf3>:
    800001d4:	587d                	li	a6,-1
    800001d6:	1101                	addi	sp,sp,-32
    800001d8:	00c85793          	srli	a5,a6,0xc
    800001dc:	00a7f733          	and	a4,a5,a0
    800001e0:	e822                	sd	s0,16(sp)
    800001e2:	e426                	sd	s1,8(sp)
    800001e4:	03455413          	srli	s0,a0,0x34
    800001e8:	03f55493          	srli	s1,a0,0x3f
    800001ec:	0345d513          	srli	a0,a1,0x34
    800001f0:	7ff47413          	andi	s0,s0,2047
    800001f4:	7ff57513          	andi	a0,a0,2047
    800001f8:	8fed                	and	a5,a5,a1
    800001fa:	40a406bb          	subw	a3,s0,a0
    800001fe:	ec06                	sd	ra,24(sp)
    80000200:	e04a                	sd	s2,0(sp)
    80000202:	91fd                	srli	a1,a1,0x3f
    80000204:	070e                	slli	a4,a4,0x3
    80000206:	078e                	slli	a5,a5,0x3
    80000208:	0006861b          	sext.w	a2,a3
    8000020c:	12b49663          	bne	s1,a1,80000338 <__adddf3+0x164>
    80000210:	06c05c63          	blez	a2,80000288 <__adddf3+0xb4>
    80000214:	ed1d                	bnez	a0,80000252 <__adddf3+0x7e>
    80000216:	cf85                	beqz	a5,8000024e <__adddf3+0x7a>
    80000218:	fff6861b          	addiw	a2,a3,-1
    8000021c:	e60d                	bnez	a2,80000246 <__adddf3+0x72>
    8000021e:	97ba                	add	a5,a5,a4
    80000220:	0377d713          	srli	a4,a5,0x37
    80000224:	8b05                	andi	a4,a4,1
    80000226:	c36d                	beqz	a4,80000308 <__adddf3+0x134>
    80000228:	0405                	addi	s0,s0,1
    8000022a:	7ff00713          	li	a4,2047
    8000022e:	26e40c63          	beq	s0,a4,800004a6 <__adddf3+0x2d2>
    80000232:	1ff00713          	li	a4,511
    80000236:	175a                	slli	a4,a4,0x36
    80000238:	0017f693          	andi	a3,a5,1
    8000023c:	177d                	addi	a4,a4,-1
    8000023e:	8385                	srli	a5,a5,0x1
    80000240:	8ff9                	and	a5,a5,a4
    80000242:	8fd5                	or	a5,a5,a3
    80000244:	a0d1                	j	80000308 <__adddf3+0x134>
    80000246:	7ff00693          	li	a3,2047
    8000024a:	00d41b63          	bne	s0,a3,80000260 <__adddf3+0x8c>
    8000024e:	87ba                	mv	a5,a4
    80000250:	a865                	j	80000308 <__adddf3+0x134>
    80000252:	7ff00693          	li	a3,2047
    80000256:	fed40ce3          	beq	s0,a3,8000024e <__adddf3+0x7a>
    8000025a:	4685                	li	a3,1
    8000025c:	16de                	slli	a3,a3,0x37
    8000025e:	8fd5                	or	a5,a5,a3
    80000260:	03800593          	li	a1,56
    80000264:	4685                	li	a3,1
    80000266:	00c5ce63          	blt	a1,a2,80000282 <__adddf3+0xae>
    8000026a:	04000693          	li	a3,64
    8000026e:	00c7d5b3          	srl	a1,a5,a2
    80000272:	40c6863b          	subw	a2,a3,a2
    80000276:	00c797b3          	sll	a5,a5,a2
    8000027a:	00f037b3          	snez	a5,a5
    8000027e:	00f5e6b3          	or	a3,a1,a5
    80000282:	00e687b3          	add	a5,a3,a4
    80000286:	bf69                	j	80000220 <__adddf3+0x4c>
    80000288:	ce31                	beqz	a2,800002e4 <__adddf3+0x110>
    8000028a:	e00d                	bnez	s0,800002ac <__adddf3+0xd8>
    8000028c:	20070963          	beqz	a4,8000049e <__adddf3+0x2ca>
    80000290:	fff6c693          	not	a3,a3
    80000294:	2681                	sext.w	a3,a3
    80000296:	e681                	bnez	a3,8000029e <__adddf3+0xca>
    80000298:	97ba                	add	a5,a5,a4
    8000029a:	842a                	mv	s0,a0
    8000029c:	b751                	j	80000220 <__adddf3+0x4c>
    8000029e:	7ff00613          	li	a2,2047
    800002a2:	00c51e63          	bne	a0,a2,800002be <__adddf3+0xea>
    800002a6:	7ff00413          	li	s0,2047
    800002aa:	a8b9                	j	80000308 <__adddf3+0x134>
    800002ac:	7ff00613          	li	a2,2047
    800002b0:	fec50be3          	beq	a0,a2,800002a6 <__adddf3+0xd2>
    800002b4:	4605                	li	a2,1
    800002b6:	165e                	slli	a2,a2,0x37
    800002b8:	40d006bb          	negw	a3,a3
    800002bc:	8f51                	or	a4,a4,a2
    800002be:	03800593          	li	a1,56
    800002c2:	4605                	li	a2,1
    800002c4:	00d5ce63          	blt	a1,a3,800002e0 <__adddf3+0x10c>
    800002c8:	04000613          	li	a2,64
    800002cc:	00d755b3          	srl	a1,a4,a3
    800002d0:	40d606bb          	subw	a3,a2,a3
    800002d4:	00d71733          	sll	a4,a4,a3
    800002d8:	00e03733          	snez	a4,a4
    800002dc:	00e5e633          	or	a2,a1,a4
    800002e0:	97b2                	add	a5,a5,a2
    800002e2:	bf65                	j	8000029a <__adddf3+0xc6>
    800002e4:	00140693          	addi	a3,s0,1
    800002e8:	7fe6f613          	andi	a2,a3,2046
    800002ec:	ee15                	bnez	a2,80000328 <__adddf3+0x154>
    800002ee:	e805                	bnez	s0,8000031e <__adddf3+0x14a>
    800002f0:	cf01                	beqz	a4,80000308 <__adddf3+0x134>
    800002f2:	dfb1                	beqz	a5,8000024e <__adddf3+0x7a>
    800002f4:	97ba                	add	a5,a5,a4
    800002f6:	0377d713          	srli	a4,a5,0x37
    800002fa:	8b05                	andi	a4,a4,1
    800002fc:	c711                	beqz	a4,80000308 <__adddf3+0x134>
    800002fe:	185e                	slli	a6,a6,0x37
    80000300:	187d                	addi	a6,a6,-1
    80000302:	0107f7b3          	and	a5,a5,a6
    80000306:	4405                	li	s0,1
    80000308:	0077f713          	andi	a4,a5,7
    8000030c:	18070e63          	beqz	a4,800004a8 <__adddf3+0x2d4>
    80000310:	00f7f713          	andi	a4,a5,15
    80000314:	4691                	li	a3,4
    80000316:	18d70963          	beq	a4,a3,800004a8 <__adddf3+0x2d4>
    8000031a:	0791                	addi	a5,a5,4
    8000031c:	a271                	j	800004a8 <__adddf3+0x2d4>
    8000031e:	d741                	beqz	a4,800002a6 <__adddf3+0xd2>
    80000320:	10079963          	bnez	a5,80000432 <__adddf3+0x25e>
    80000324:	87ba                	mv	a5,a4
    80000326:	b741                	j	800002a6 <__adddf3+0xd2>
    80000328:	7ff00613          	li	a2,2047
    8000032c:	16c68b63          	beq	a3,a2,800004a2 <__adddf3+0x2ce>
    80000330:	97ba                	add	a5,a5,a4
    80000332:	8385                	srli	a5,a5,0x1
    80000334:	8436                	mv	s0,a3
    80000336:	bfc9                	j	80000308 <__adddf3+0x134>
    80000338:	06c05163          	blez	a2,8000039a <__adddf3+0x1c6>
    8000033c:	e539                	bnez	a0,8000038a <__adddf3+0x1b6>
    8000033e:	db81                	beqz	a5,8000024e <__adddf3+0x7a>
    80000340:	fff6861b          	addiw	a2,a3,-1
    80000344:	ea19                	bnez	a2,8000035a <__adddf3+0x186>
    80000346:	40f707b3          	sub	a5,a4,a5
    8000034a:	0377d713          	srli	a4,a5,0x37
    8000034e:	8b05                	andi	a4,a4,1
    80000350:	df45                	beqz	a4,80000308 <__adddf3+0x134>
    80000352:	07a6                	slli	a5,a5,0x9
    80000354:	0097d913          	srli	s2,a5,0x9
    80000358:	a8e5                	j	80000450 <__adddf3+0x27c>
    8000035a:	7ff00693          	li	a3,2047
    8000035e:	eed408e3          	beq	s0,a3,8000024e <__adddf3+0x7a>
    80000362:	03800593          	li	a1,56
    80000366:	4685                	li	a3,1
    80000368:	00c5ce63          	blt	a1,a2,80000384 <__adddf3+0x1b0>
    8000036c:	04000693          	li	a3,64
    80000370:	00c7d5b3          	srl	a1,a5,a2
    80000374:	40c6863b          	subw	a2,a3,a2
    80000378:	00c797b3          	sll	a5,a5,a2
    8000037c:	00f037b3          	snez	a5,a5
    80000380:	00f5e6b3          	or	a3,a1,a5
    80000384:	40d707b3          	sub	a5,a4,a3
    80000388:	b7c9                	j	8000034a <__adddf3+0x176>
    8000038a:	7ff00693          	li	a3,2047
    8000038e:	ecd400e3          	beq	s0,a3,8000024e <__adddf3+0x7a>
    80000392:	4685                	li	a3,1
    80000394:	16de                	slli	a3,a3,0x37
    80000396:	8fd5                	or	a5,a5,a3
    80000398:	b7e9                	j	80000362 <__adddf3+0x18e>
    8000039a:	ce39                	beqz	a2,800003f8 <__adddf3+0x224>
    8000039c:	e015                	bnez	s0,800003c0 <__adddf3+0x1ec>
    8000039e:	14070a63          	beqz	a4,800004f2 <__adddf3+0x31e>
    800003a2:	fff6c693          	not	a3,a3
    800003a6:	2681                	sext.w	a3,a3
    800003a8:	e689                	bnez	a3,800003b2 <__adddf3+0x1de>
    800003aa:	8f99                	sub	a5,a5,a4
    800003ac:	842a                	mv	s0,a0
    800003ae:	84ae                	mv	s1,a1
    800003b0:	bf69                	j	8000034a <__adddf3+0x176>
    800003b2:	7ff00613          	li	a2,2047
    800003b6:	00c51e63          	bne	a0,a2,800003d2 <__adddf3+0x1fe>
    800003ba:	7ff00413          	li	s0,2047
    800003be:	a0b1                	j	8000040a <__adddf3+0x236>
    800003c0:	7ff00613          	li	a2,2047
    800003c4:	fec50be3          	beq	a0,a2,800003ba <__adddf3+0x1e6>
    800003c8:	4605                	li	a2,1
    800003ca:	165e                	slli	a2,a2,0x37
    800003cc:	40d006bb          	negw	a3,a3
    800003d0:	8f51                	or	a4,a4,a2
    800003d2:	03800813          	li	a6,56
    800003d6:	4605                	li	a2,1
    800003d8:	00d84e63          	blt	a6,a3,800003f4 <__adddf3+0x220>
    800003dc:	04000613          	li	a2,64
    800003e0:	00d75833          	srl	a6,a4,a3
    800003e4:	40d606bb          	subw	a3,a2,a3
    800003e8:	00d71733          	sll	a4,a4,a3
    800003ec:	00e03733          	snez	a4,a4
    800003f0:	00e86633          	or	a2,a6,a4
    800003f4:	8f91                	sub	a5,a5,a2
    800003f6:	bf5d                	j	800003ac <__adddf3+0x1d8>
    800003f8:	00140693          	addi	a3,s0,1
    800003fc:	7fe6f693          	andi	a3,a3,2046
    80000400:	ee9d                	bnez	a3,8000043e <__adddf3+0x26a>
    80000402:	e01d                	bnez	s0,80000428 <__adddf3+0x254>
    80000404:	e709                	bnez	a4,8000040e <__adddf3+0x23a>
    80000406:	4481                	li	s1,0
    80000408:	c3c5                	beqz	a5,800004a8 <__adddf3+0x2d4>
    8000040a:	84ae                	mv	s1,a1
    8000040c:	bdf5                	j	80000308 <__adddf3+0x134>
    8000040e:	e40780e3          	beqz	a5,8000024e <__adddf3+0x7a>
    80000412:	40f706b3          	sub	a3,a4,a5
    80000416:	0376d613          	srli	a2,a3,0x37
    8000041a:	8a05                	andi	a2,a2,1
    8000041c:	8f99                	sub	a5,a5,a4
    8000041e:	f675                	bnez	a2,8000040a <__adddf3+0x236>
    80000420:	4781                	li	a5,0
    80000422:	c6ad                	beqz	a3,8000048c <__adddf3+0x2b8>
    80000424:	87b6                	mv	a5,a3
    80000426:	b5cd                	j	80000308 <__adddf3+0x134>
    80000428:	ee071ce3          	bnez	a4,80000320 <__adddf3+0x14c>
    8000042c:	84ae                	mv	s1,a1
    8000042e:	e6079ce3          	bnez	a5,800002a6 <__adddf3+0xd2>
    80000432:	4785                	li	a5,1
    80000434:	4481                	li	s1,0
    80000436:	17da                	slli	a5,a5,0x36
    80000438:	7ff00413          	li	s0,2047
    8000043c:	a0b5                	j	800004a8 <__adddf3+0x2d4>
    8000043e:	40f70933          	sub	s2,a4,a5
    80000442:	03795693          	srli	a3,s2,0x37
    80000446:	8a85                	andi	a3,a3,1
    80000448:	ce95                	beqz	a3,80000484 <__adddf3+0x2b0>
    8000044a:	40e78933          	sub	s2,a5,a4
    8000044e:	84ae                	mv	s1,a1
    80000450:	854a                	mv	a0,s2
    80000452:	d53ff0ef          	jal	ra,800001a4 <__clzdi2>
    80000456:	ff85079b          	addiw	a5,a0,-8
    8000045a:	00f91933          	sll	s2,s2,a5
    8000045e:	0287c963          	blt	a5,s0,80000490 <__adddf3+0x2bc>
    80000462:	4087853b          	subw	a0,a5,s0
    80000466:	2505                	addiw	a0,a0,1
    80000468:	04000413          	li	s0,64
    8000046c:	00a957b3          	srl	a5,s2,a0
    80000470:	40a4053b          	subw	a0,s0,a0
    80000474:	00a91933          	sll	s2,s2,a0
    80000478:	01203933          	snez	s2,s2
    8000047c:	0127e7b3          	or	a5,a5,s2
    80000480:	4401                	li	s0,0
    80000482:	b559                	j	80000308 <__adddf3+0x134>
    80000484:	fc0916e3          	bnez	s2,80000450 <__adddf3+0x27c>
    80000488:	4781                	li	a5,0
    8000048a:	4401                	li	s0,0
    8000048c:	4481                	li	s1,0
    8000048e:	a829                	j	800004a8 <__adddf3+0x2d4>
    80000490:	8c1d                	sub	s0,s0,a5
    80000492:	57fd                	li	a5,-1
    80000494:	17de                	slli	a5,a5,0x37
    80000496:	17fd                	addi	a5,a5,-1
    80000498:	00f977b3          	and	a5,s2,a5
    8000049c:	b5b5                	j	80000308 <__adddf3+0x134>
    8000049e:	842a                	mv	s0,a0
    800004a0:	b5a5                	j	80000308 <__adddf3+0x134>
    800004a2:	7ff00413          	li	s0,2047
    800004a6:	4781                	li	a5,0
    800004a8:	0377d713          	srli	a4,a5,0x37
    800004ac:	8b05                	andi	a4,a4,1
    800004ae:	cb11                	beqz	a4,800004c2 <__adddf3+0x2ee>
    800004b0:	0405                	addi	s0,s0,1
    800004b2:	7ff00713          	li	a4,2047
    800004b6:	04e40063          	beq	s0,a4,800004f6 <__adddf3+0x322>
    800004ba:	577d                	li	a4,-1
    800004bc:	175e                	slli	a4,a4,0x37
    800004be:	177d                	addi	a4,a4,-1
    800004c0:	8ff9                	and	a5,a5,a4
    800004c2:	7ff00713          	li	a4,2047
    800004c6:	838d                	srli	a5,a5,0x3
    800004c8:	00e41663          	bne	s0,a4,800004d4 <__adddf3+0x300>
    800004cc:	c781                	beqz	a5,800004d4 <__adddf3+0x300>
    800004ce:	4785                	li	a5,1
    800004d0:	17ce                	slli	a5,a5,0x33
    800004d2:	4481                	li	s1,0
    800004d4:	7ff47413          	andi	s0,s0,2047
    800004d8:	07b2                	slli	a5,a5,0xc
    800004da:	1452                	slli	s0,s0,0x34
    800004dc:	83b1                	srli	a5,a5,0xc
    800004de:	60e2                	ld	ra,24(sp)
    800004e0:	8fc1                	or	a5,a5,s0
    800004e2:	6442                	ld	s0,16(sp)
    800004e4:	03f49513          	slli	a0,s1,0x3f
    800004e8:	6902                	ld	s2,0(sp)
    800004ea:	64a2                	ld	s1,8(sp)
    800004ec:	8d5d                	or	a0,a0,a5
    800004ee:	6105                	addi	sp,sp,32
    800004f0:	8082                	ret
    800004f2:	842a                	mv	s0,a0
    800004f4:	bf19                	j	8000040a <__adddf3+0x236>
    800004f6:	4781                	li	a5,0
    800004f8:	b7e9                	j	800004c2 <__adddf3+0x2ee>

00000000800004fa <__divdf3>:
    800004fa:	7139                	addi	sp,sp,-64
    800004fc:	f426                	sd	s1,40(sp)
    800004fe:	03455493          	srli	s1,a0,0x34
    80000502:	f04a                	sd	s2,32(sp)
    80000504:	ec4e                	sd	s3,24(sp)
    80000506:	e852                	sd	s4,16(sp)
    80000508:	00c51993          	slli	s3,a0,0xc
    8000050c:	fc06                	sd	ra,56(sp)
    8000050e:	f822                	sd	s0,48(sp)
    80000510:	e456                	sd	s5,8(sp)
    80000512:	7ff4f493          	andi	s1,s1,2047
    80000516:	8a2e                	mv	s4,a1
    80000518:	00c9d993          	srli	s3,s3,0xc
    8000051c:	03f55913          	srli	s2,a0,0x3f
    80000520:	c4ad                	beqz	s1,8000058a <__divdf3+0x90>
    80000522:	7ff00793          	li	a5,2047
    80000526:	08f48063          	beq	s1,a5,800005a6 <__divdf3+0xac>
    8000052a:	4785                	li	a5,1
    8000052c:	098e                	slli	s3,s3,0x3
    8000052e:	17de                	slli	a5,a5,0x37
    80000530:	00f9e9b3          	or	s3,s3,a5
    80000534:	c0148493          	addi	s1,s1,-1023
    80000538:	4a81                	li	s5,0
    8000053a:	034a5793          	srli	a5,s4,0x34
    8000053e:	00ca1413          	slli	s0,s4,0xc
    80000542:	7ff7f793          	andi	a5,a5,2047
    80000546:	8031                	srli	s0,s0,0xc
    80000548:	03fa5a13          	srli	s4,s4,0x3f
    8000054c:	c7bd                	beqz	a5,800005ba <__divdf3+0xc0>
    8000054e:	7ff00713          	li	a4,2047
    80000552:	08e78163          	beq	a5,a4,800005d4 <__divdf3+0xda>
    80000556:	4705                	li	a4,1
    80000558:	040e                	slli	s0,s0,0x3
    8000055a:	175e                	slli	a4,a4,0x37
    8000055c:	8c59                	or	s0,s0,a4
    8000055e:	c0178793          	addi	a5,a5,-1023
    80000562:	4681                	li	a3,0
    80000564:	002a9613          	slli	a2,s5,0x2
    80000568:	8e55                	or	a2,a2,a3
    8000056a:	8c9d                	sub	s1,s1,a5
    8000056c:	167d                	addi	a2,a2,-1
    8000056e:	47b9                	li	a5,14
    80000570:	01494533          	xor	a0,s2,s4
    80000574:	06c7e963          	bltu	a5,a2,800005e6 <__divdf3+0xec>
    80000578:	0000f717          	auipc	a4,0xf
    8000057c:	00870713          	addi	a4,a4,8 # 8000f580 <__clz_tab+0x100>
    80000580:	060a                	slli	a2,a2,0x2
    80000582:	963a                	add	a2,a2,a4
    80000584:	421c                	lw	a5,0(a2)
    80000586:	97ba                	add	a5,a5,a4
    80000588:	8782                	jr	a5
    8000058a:	02098563          	beqz	s3,800005b4 <__divdf3+0xba>
    8000058e:	854e                	mv	a0,s3
    80000590:	c15ff0ef          	jal	ra,800001a4 <__clzdi2>
    80000594:	ff85079b          	addiw	a5,a0,-8
    80000598:	3f35051b          	addiw	a0,a0,1011
    8000059c:	00f999b3          	sll	s3,s3,a5
    800005a0:	40a004b3          	neg	s1,a0
    800005a4:	bf51                	j	80000538 <__divdf3+0x3e>
    800005a6:	7ff00493          	li	s1,2047
    800005aa:	4a89                	li	s5,2
    800005ac:	f80987e3          	beqz	s3,8000053a <__divdf3+0x40>
    800005b0:	4a8d                	li	s5,3
    800005b2:	b761                	j	8000053a <__divdf3+0x40>
    800005b4:	4481                	li	s1,0
    800005b6:	4a85                	li	s5,1
    800005b8:	b749                	j	8000053a <__divdf3+0x40>
    800005ba:	c01d                	beqz	s0,800005e0 <__divdf3+0xe6>
    800005bc:	8522                	mv	a0,s0
    800005be:	be7ff0ef          	jal	ra,800001a4 <__clzdi2>
    800005c2:	ff85079b          	addiw	a5,a0,-8
    800005c6:	3f35051b          	addiw	a0,a0,1011
    800005ca:	00f41433          	sll	s0,s0,a5
    800005ce:	40a007b3          	neg	a5,a0
    800005d2:	bf41                	j	80000562 <__divdf3+0x68>
    800005d4:	7ff00793          	li	a5,2047
    800005d8:	4689                	li	a3,2
    800005da:	d449                	beqz	s0,80000564 <__divdf3+0x6a>
    800005dc:	468d                	li	a3,3
    800005de:	b759                	j	80000564 <__divdf3+0x6a>
    800005e0:	4781                	li	a5,0
    800005e2:	4685                	li	a3,1
    800005e4:	b741                	j	80000564 <__divdf3+0x6a>
    800005e6:	00841593          	slli	a1,s0,0x8
    800005ea:	0c89fa63          	bgeu	s3,s0,800006be <__divdf3+0x1c4>
    800005ee:	14fd                	addi	s1,s1,-1
    800005f0:	4681                	li	a3,0
    800005f2:	0205d413          	srli	s0,a1,0x20
    800005f6:	0289d8b3          	divu	a7,s3,s0
    800005fa:	57fd                	li	a5,-1
    800005fc:	9381                	srli	a5,a5,0x20
    800005fe:	8fed                	and	a5,a5,a1
    80000600:	9281                	srli	a3,a3,0x20
    80000602:	0289f733          	remu	a4,s3,s0
    80000606:	8646                	mv	a2,a7
    80000608:	03178833          	mul	a6,a5,a7
    8000060c:	1702                	slli	a4,a4,0x20
    8000060e:	8f55                	or	a4,a4,a3
    80000610:	01077c63          	bgeu	a4,a6,80000628 <__divdf3+0x12e>
    80000614:	972e                	add	a4,a4,a1
    80000616:	fff88613          	addi	a2,a7,-1
    8000061a:	00b76763          	bltu	a4,a1,80000628 <__divdf3+0x12e>
    8000061e:	01077563          	bgeu	a4,a6,80000628 <__divdf3+0x12e>
    80000622:	ffe88613          	addi	a2,a7,-2
    80000626:	972e                	add	a4,a4,a1
    80000628:	41070733          	sub	a4,a4,a6
    8000062c:	02875833          	divu	a6,a4,s0
    80000630:	02877733          	remu	a4,a4,s0
    80000634:	030786b3          	mul	a3,a5,a6
    80000638:	02071793          	slli	a5,a4,0x20
    8000063c:	8742                	mv	a4,a6
    8000063e:	00d7fc63          	bgeu	a5,a3,80000656 <__divdf3+0x15c>
    80000642:	97ae                	add	a5,a5,a1
    80000644:	fff80713          	addi	a4,a6,-1
    80000648:	00b7e763          	bltu	a5,a1,80000656 <__divdf3+0x15c>
    8000064c:	00d7f563          	bgeu	a5,a3,80000656 <__divdf3+0x15c>
    80000650:	ffe80713          	addi	a4,a6,-2
    80000654:	97ae                	add	a5,a5,a1
    80000656:	02061413          	slli	s0,a2,0x20
    8000065a:	8f95                	sub	a5,a5,a3
    8000065c:	8c59                	or	s0,s0,a4
    8000065e:	00f037b3          	snez	a5,a5
    80000662:	8c5d                	or	s0,s0,a5
    80000664:	3ff48793          	addi	a5,s1,1023
    80000668:	08f05763          	blez	a5,800006f6 <__divdf3+0x1fc>
    8000066c:	00747713          	andi	a4,s0,7
    80000670:	c719                	beqz	a4,8000067e <__divdf3+0x184>
    80000672:	00f47713          	andi	a4,s0,15
    80000676:	4691                	li	a3,4
    80000678:	00d70363          	beq	a4,a3,8000067e <__divdf3+0x184>
    8000067c:	0411                	addi	s0,s0,4
    8000067e:	03845713          	srli	a4,s0,0x38
    80000682:	8b05                	andi	a4,a4,1
    80000684:	c719                	beqz	a4,80000692 <__divdf3+0x198>
    80000686:	57fd                	li	a5,-1
    80000688:	17e2                	slli	a5,a5,0x38
    8000068a:	17fd                	addi	a5,a5,-1
    8000068c:	8c7d                	and	s0,s0,a5
    8000068e:	40048793          	addi	a5,s1,1024
    80000692:	7fe00713          	li	a4,2046
    80000696:	04f74563          	blt	a4,a5,800006e0 <__divdf3+0x1e6>
    8000069a:	800d                	srli	s0,s0,0x3
    8000069c:	7ff7f793          	andi	a5,a5,2047
    800006a0:	0432                	slli	s0,s0,0xc
    800006a2:	17d2                	slli	a5,a5,0x34
    800006a4:	8031                	srli	s0,s0,0xc
    800006a6:	8c5d                	or	s0,s0,a5
    800006a8:	157e                	slli	a0,a0,0x3f
    800006aa:	70e2                	ld	ra,56(sp)
    800006ac:	8d41                	or	a0,a0,s0
    800006ae:	7442                	ld	s0,48(sp)
    800006b0:	74a2                	ld	s1,40(sp)
    800006b2:	7902                	ld	s2,32(sp)
    800006b4:	69e2                	ld	s3,24(sp)
    800006b6:	6a42                	ld	s4,16(sp)
    800006b8:	6aa2                	ld	s5,8(sp)
    800006ba:	6121                	addi	sp,sp,64
    800006bc:	8082                	ret
    800006be:	03f99693          	slli	a3,s3,0x3f
    800006c2:	0019d993          	srli	s3,s3,0x1
    800006c6:	b735                	j	800005f2 <__divdf3+0xf8>
    800006c8:	854a                	mv	a0,s2
    800006ca:	844e                	mv	s0,s3
    800006cc:	86d6                	mv	a3,s5
    800006ce:	478d                	li	a5,3
    800006d0:	06f68463          	beq	a3,a5,80000738 <__divdf3+0x23e>
    800006d4:	4785                	li	a5,1
    800006d6:	06f68763          	beq	a3,a5,80000744 <__divdf3+0x24a>
    800006da:	4789                	li	a5,2
    800006dc:	f8f694e3          	bne	a3,a5,80000664 <__divdf3+0x16a>
    800006e0:	4401                	li	s0,0
    800006e2:	7ff00793          	li	a5,2047
    800006e6:	bf5d                	j	8000069c <__divdf3+0x1a2>
    800006e8:	8552                	mv	a0,s4
    800006ea:	b7d5                	j	800006ce <__divdf3+0x1d4>
    800006ec:	4405                	li	s0,1
    800006ee:	144e                	slli	s0,s0,0x33
    800006f0:	4501                	li	a0,0
    800006f2:	468d                	li	a3,3
    800006f4:	bfe9                	j	800006ce <__divdf3+0x1d4>
    800006f6:	4705                	li	a4,1
    800006f8:	8f1d                	sub	a4,a4,a5
    800006fa:	03800793          	li	a5,56
    800006fe:	04e7c363          	blt	a5,a4,80000744 <__divdf3+0x24a>
    80000702:	04000693          	li	a3,64
    80000706:	00e457b3          	srl	a5,s0,a4
    8000070a:	40e6873b          	subw	a4,a3,a4
    8000070e:	00e41433          	sll	s0,s0,a4
    80000712:	00803433          	snez	s0,s0
    80000716:	8c5d                	or	s0,s0,a5
    80000718:	00747793          	andi	a5,s0,7
    8000071c:	c799                	beqz	a5,8000072a <__divdf3+0x230>
    8000071e:	00f47793          	andi	a5,s0,15
    80000722:	4711                	li	a4,4
    80000724:	00e78363          	beq	a5,a4,8000072a <__divdf3+0x230>
    80000728:	0411                	addi	s0,s0,4
    8000072a:	03745793          	srli	a5,s0,0x37
    8000072e:	8b85                	andi	a5,a5,1
    80000730:	d7ad                	beqz	a5,8000069a <__divdf3+0x1a0>
    80000732:	4401                	li	s0,0
    80000734:	4785                	li	a5,1
    80000736:	b79d                	j	8000069c <__divdf3+0x1a2>
    80000738:	4405                	li	s0,1
    8000073a:	144e                	slli	s0,s0,0x33
    8000073c:	7ff00793          	li	a5,2047
    80000740:	4501                	li	a0,0
    80000742:	bfa9                	j	8000069c <__divdf3+0x1a2>
    80000744:	4401                	li	s0,0
    80000746:	4781                	li	a5,0
    80000748:	bf91                	j	8000069c <__divdf3+0x1a2>

000000008000074a <__eqdf2>:
    8000074a:	57fd                	li	a5,-1
    8000074c:	03455613          	srli	a2,a0,0x34
    80000750:	83b1                	srli	a5,a5,0xc
    80000752:	0345d813          	srli	a6,a1,0x34
    80000756:	7ff67613          	andi	a2,a2,2047
    8000075a:	7ff00693          	li	a3,2047
    8000075e:	00a7f8b3          	and	a7,a5,a0
    80000762:	03f55713          	srli	a4,a0,0x3f
    80000766:	8fed                	and	a5,a5,a1
    80000768:	7ff87813          	andi	a6,a6,2047
    8000076c:	91fd                	srli	a1,a1,0x3f
    8000076e:	00d61a63          	bne	a2,a3,80000782 <__eqdf2+0x38>
    80000772:	4505                	li	a0,1
    80000774:	02089a63          	bnez	a7,800007a8 <__eqdf2+0x5e>
    80000778:	4685                	li	a3,1
    8000077a:	02c81263          	bne	a6,a2,8000079e <__eqdf2+0x54>
    8000077e:	cb89                	beqz	a5,80000790 <__eqdf2+0x46>
    80000780:	8082                	ret
    80000782:	02d80063          	beq	a6,a3,800007a2 <__eqdf2+0x58>
    80000786:	4685                	li	a3,1
    80000788:	01061b63          	bne	a2,a6,8000079e <__eqdf2+0x54>
    8000078c:	00f89963          	bne	a7,a5,8000079e <__eqdf2+0x54>
    80000790:	4681                	li	a3,0
    80000792:	00b70663          	beq	a4,a1,8000079e <__eqdf2+0x54>
    80000796:	4685                	li	a3,1
    80000798:	e219                	bnez	a2,8000079e <__eqdf2+0x54>
    8000079a:	011036b3          	snez	a3,a7
    8000079e:	8536                	mv	a0,a3
    800007a0:	8082                	ret
    800007a2:	4505                	li	a0,1
    800007a4:	4685                	li	a3,1
    800007a6:	dfe5                	beqz	a5,8000079e <__eqdf2+0x54>
    800007a8:	8082                	ret

00000000800007aa <__gedf2>:
    800007aa:	03455693          	srli	a3,a0,0x34
    800007ae:	57fd                	li	a5,-1
    800007b0:	83b1                	srli	a5,a5,0xc
    800007b2:	0345d713          	srli	a4,a1,0x34
    800007b6:	7ff6f693          	andi	a3,a3,2047
    800007ba:	7ff00813          	li	a6,2047
    800007be:	00a7f633          	and	a2,a5,a0
    800007c2:	7ff77713          	andi	a4,a4,2047
    800007c6:	8fed                	and	a5,a5,a1
    800007c8:	917d                	srli	a0,a0,0x3f
    800007ca:	91fd                	srli	a1,a1,0x3f
    800007cc:	01069563          	bne	a3,a6,800007d6 <__gedf2+0x2c>
    800007d0:	c239                	beqz	a2,80000816 <__gedf2+0x6c>
    800007d2:	5579                	li	a0,-2
    800007d4:	8082                	ret
    800007d6:	01071363          	bne	a4,a6,800007dc <__gedf2+0x32>
    800007da:	ffe5                	bnez	a5,800007d2 <__gedf2+0x28>
    800007dc:	ee9d                	bnez	a3,8000081a <__gedf2+0x70>
    800007de:	e311                	bnez	a4,800007e2 <__gedf2+0x38>
    800007e0:	cb8d                	beqz	a5,80000812 <__gedf2+0x68>
    800007e2:	ca01                	beqz	a2,800007f2 <__gedf2+0x48>
    800007e4:	00b51463          	bne	a0,a1,800007ec <__gedf2+0x42>
    800007e8:	00d75963          	bge	a4,a3,800007fa <__gedf2+0x50>
    800007ec:	c10d                	beqz	a0,8000080e <__gedf2+0x64>
    800007ee:	557d                	li	a0,-1
    800007f0:	8082                	ret
    800007f2:	557d                	li	a0,-1
    800007f4:	c591                	beqz	a1,80000800 <__gedf2+0x56>
    800007f6:	852e                	mv	a0,a1
    800007f8:	8082                	ret
    800007fa:	00e6d463          	bge	a3,a4,80000802 <__gedf2+0x58>
    800007fe:	d965                	beqz	a0,800007ee <__gedf2+0x44>
    80000800:	8082                	ret
    80000802:	fec7e5e3          	bltu	a5,a2,800007ec <__gedf2+0x42>
    80000806:	fef66ce3          	bltu	a2,a5,800007fe <__gedf2+0x54>
    8000080a:	4501                	li	a0,0
    8000080c:	8082                	ret
    8000080e:	4505                	li	a0,1
    80000810:	8082                	ret
    80000812:	de65                	beqz	a2,8000080a <__gedf2+0x60>
    80000814:	bfe1                	j	800007ec <__gedf2+0x42>
    80000816:	fcd702e3          	beq	a4,a3,800007da <__gedf2+0x30>
    8000081a:	f769                	bnez	a4,800007e4 <__gedf2+0x3a>
    8000081c:	dbe1                	beqz	a5,800007ec <__gedf2+0x42>
    8000081e:	b7d9                	j	800007e4 <__gedf2+0x3a>

0000000080000820 <__ledf2>:
    80000820:	03455693          	srli	a3,a0,0x34
    80000824:	57fd                	li	a5,-1
    80000826:	83b1                	srli	a5,a5,0xc
    80000828:	0345d713          	srli	a4,a1,0x34
    8000082c:	7ff6f693          	andi	a3,a3,2047
    80000830:	7ff00813          	li	a6,2047
    80000834:	00a7f633          	and	a2,a5,a0
    80000838:	7ff77713          	andi	a4,a4,2047
    8000083c:	8fed                	and	a5,a5,a1
    8000083e:	917d                	srli	a0,a0,0x3f
    80000840:	91fd                	srli	a1,a1,0x3f
    80000842:	01069563          	bne	a3,a6,8000084c <__ledf2+0x2c>
    80000846:	c239                	beqz	a2,8000088c <__ledf2+0x6c>
    80000848:	4509                	li	a0,2
    8000084a:	8082                	ret
    8000084c:	01071363          	bne	a4,a6,80000852 <__ledf2+0x32>
    80000850:	ffe5                	bnez	a5,80000848 <__ledf2+0x28>
    80000852:	ee9d                	bnez	a3,80000890 <__ledf2+0x70>
    80000854:	e311                	bnez	a4,80000858 <__ledf2+0x38>
    80000856:	cb8d                	beqz	a5,80000888 <__ledf2+0x68>
    80000858:	ca01                	beqz	a2,80000868 <__ledf2+0x48>
    8000085a:	00b51463          	bne	a0,a1,80000862 <__ledf2+0x42>
    8000085e:	00d75963          	bge	a4,a3,80000870 <__ledf2+0x50>
    80000862:	c10d                	beqz	a0,80000884 <__ledf2+0x64>
    80000864:	557d                	li	a0,-1
    80000866:	8082                	ret
    80000868:	557d                	li	a0,-1
    8000086a:	c591                	beqz	a1,80000876 <__ledf2+0x56>
    8000086c:	852e                	mv	a0,a1
    8000086e:	8082                	ret
    80000870:	00e6d463          	bge	a3,a4,80000878 <__ledf2+0x58>
    80000874:	d965                	beqz	a0,80000864 <__ledf2+0x44>
    80000876:	8082                	ret
    80000878:	fec7e5e3          	bltu	a5,a2,80000862 <__ledf2+0x42>
    8000087c:	fef66ce3          	bltu	a2,a5,80000874 <__ledf2+0x54>
    80000880:	4501                	li	a0,0
    80000882:	8082                	ret
    80000884:	4505                	li	a0,1
    80000886:	8082                	ret
    80000888:	de65                	beqz	a2,80000880 <__ledf2+0x60>
    8000088a:	bfe1                	j	80000862 <__ledf2+0x42>
    8000088c:	fcd702e3          	beq	a4,a3,80000850 <__ledf2+0x30>
    80000890:	f769                	bnez	a4,8000085a <__ledf2+0x3a>
    80000892:	dbe1                	beqz	a5,80000862 <__ledf2+0x42>
    80000894:	b7d9                	j	8000085a <__ledf2+0x3a>

0000000080000896 <__muldf3>:
    80000896:	7139                	addi	sp,sp,-64
    80000898:	f426                	sd	s1,40(sp)
    8000089a:	03455493          	srli	s1,a0,0x34
    8000089e:	f04a                	sd	s2,32(sp)
    800008a0:	ec4e                	sd	s3,24(sp)
    800008a2:	e852                	sd	s4,16(sp)
    800008a4:	00c51993          	slli	s3,a0,0xc
    800008a8:	fc06                	sd	ra,56(sp)
    800008aa:	f822                	sd	s0,48(sp)
    800008ac:	e456                	sd	s5,8(sp)
    800008ae:	7ff4f493          	andi	s1,s1,2047
    800008b2:	8a2e                	mv	s4,a1
    800008b4:	00c9d993          	srli	s3,s3,0xc
    800008b8:	03f55913          	srli	s2,a0,0x3f
    800008bc:	c4bd                	beqz	s1,8000092a <__muldf3+0x94>
    800008be:	7ff00793          	li	a5,2047
    800008c2:	08f48263          	beq	s1,a5,80000946 <__muldf3+0xb0>
    800008c6:	4785                	li	a5,1
    800008c8:	098e                	slli	s3,s3,0x3
    800008ca:	17de                	slli	a5,a5,0x37
    800008cc:	00f9e9b3          	or	s3,s3,a5
    800008d0:	c0148493          	addi	s1,s1,-1023
    800008d4:	4a81                	li	s5,0
    800008d6:	034a5793          	srli	a5,s4,0x34
    800008da:	00ca1413          	slli	s0,s4,0xc
    800008de:	7ff7f793          	andi	a5,a5,2047
    800008e2:	8031                	srli	s0,s0,0xc
    800008e4:	03fa5a13          	srli	s4,s4,0x3f
    800008e8:	cbad                	beqz	a5,8000095a <__muldf3+0xc4>
    800008ea:	7ff00713          	li	a4,2047
    800008ee:	08e78363          	beq	a5,a4,80000974 <__muldf3+0xde>
    800008f2:	4705                	li	a4,1
    800008f4:	040e                	slli	s0,s0,0x3
    800008f6:	175e                	slli	a4,a4,0x37
    800008f8:	8c59                	or	s0,s0,a4
    800008fa:	c0178793          	addi	a5,a5,-1023
    800008fe:	4701                	li	a4,0
    80000900:	002a9693          	slli	a3,s5,0x2
    80000904:	8ed9                	or	a3,a3,a4
    80000906:	97a6                	add	a5,a5,s1
    80000908:	16fd                	addi	a3,a3,-1
    8000090a:	45b9                	li	a1,14
    8000090c:	01494533          	xor	a0,s2,s4
    80000910:	00178613          	addi	a2,a5,1
    80000914:	06d5e963          	bltu	a1,a3,80000986 <__muldf3+0xf0>
    80000918:	0000f597          	auipc	a1,0xf
    8000091c:	ca458593          	addi	a1,a1,-860 # 8000f5bc <__clz_tab+0x13c>
    80000920:	068a                	slli	a3,a3,0x2
    80000922:	96ae                	add	a3,a3,a1
    80000924:	429c                	lw	a5,0(a3)
    80000926:	97ae                	add	a5,a5,a1
    80000928:	8782                	jr	a5
    8000092a:	02098563          	beqz	s3,80000954 <__muldf3+0xbe>
    8000092e:	854e                	mv	a0,s3
    80000930:	875ff0ef          	jal	ra,800001a4 <__clzdi2>
    80000934:	ff85079b          	addiw	a5,a0,-8
    80000938:	3f35051b          	addiw	a0,a0,1011
    8000093c:	00f999b3          	sll	s3,s3,a5
    80000940:	40a004b3          	neg	s1,a0
    80000944:	bf41                	j	800008d4 <__muldf3+0x3e>
    80000946:	7ff00493          	li	s1,2047
    8000094a:	4a89                	li	s5,2
    8000094c:	f80985e3          	beqz	s3,800008d6 <__muldf3+0x40>
    80000950:	4a8d                	li	s5,3
    80000952:	b751                	j	800008d6 <__muldf3+0x40>
    80000954:	4481                	li	s1,0
    80000956:	4a85                	li	s5,1
    80000958:	bfbd                	j	800008d6 <__muldf3+0x40>
    8000095a:	c01d                	beqz	s0,80000980 <__muldf3+0xea>
    8000095c:	8522                	mv	a0,s0
    8000095e:	847ff0ef          	jal	ra,800001a4 <__clzdi2>
    80000962:	ff85079b          	addiw	a5,a0,-8
    80000966:	3f35051b          	addiw	a0,a0,1011
    8000096a:	00f41433          	sll	s0,s0,a5
    8000096e:	40a007b3          	neg	a5,a0
    80000972:	b771                	j	800008fe <__muldf3+0x68>
    80000974:	7ff00793          	li	a5,2047
    80000978:	4709                	li	a4,2
    8000097a:	d059                	beqz	s0,80000900 <__muldf3+0x6a>
    8000097c:	470d                	li	a4,3
    8000097e:	b749                	j	80000900 <__muldf3+0x6a>
    80000980:	4781                	li	a5,0
    80000982:	4705                	li	a4,1
    80000984:	bfb5                	j	80000900 <__muldf3+0x6a>
    80000986:	577d                	li	a4,-1
    80000988:	9301                	srli	a4,a4,0x20
    8000098a:	0209d693          	srli	a3,s3,0x20
    8000098e:	02045593          	srli	a1,s0,0x20
    80000992:	00e9f9b3          	and	s3,s3,a4
    80000996:	8c79                	and	s0,s0,a4
    80000998:	03340833          	mul	a6,s0,s3
    8000099c:	02868433          	mul	s0,a3,s0
    800009a0:	02b686b3          	mul	a3,a3,a1
    800009a4:	033585b3          	mul	a1,a1,s3
    800009a8:	02085993          	srli	s3,a6,0x20
    800009ac:	95a2                	add	a1,a1,s0
    800009ae:	99ae                	add	s3,s3,a1
    800009b0:	0089f563          	bgeu	s3,s0,800009ba <__muldf3+0x124>
    800009b4:	4705                	li	a4,1
    800009b6:	1702                	slli	a4,a4,0x20
    800009b8:	96ba                	add	a3,a3,a4
    800009ba:	547d                	li	s0,-1
    800009bc:	9001                	srli	s0,s0,0x20
    800009be:	0089f733          	and	a4,s3,s0
    800009c2:	00887833          	and	a6,a6,s0
    800009c6:	1702                	slli	a4,a4,0x20
    800009c8:	9742                	add	a4,a4,a6
    800009ca:	00971413          	slli	s0,a4,0x9
    800009ce:	0209d993          	srli	s3,s3,0x20
    800009d2:	00803433          	snez	s0,s0
    800009d6:	935d                	srli	a4,a4,0x37
    800009d8:	99b6                	add	s3,s3,a3
    800009da:	09a6                	slli	s3,s3,0x9
    800009dc:	8f41                	or	a4,a4,s0
    800009de:	00e9e433          	or	s0,s3,a4
    800009e2:	0389d993          	srli	s3,s3,0x38
    800009e6:	0019f993          	andi	s3,s3,1
    800009ea:	08098463          	beqz	s3,80000a72 <__muldf3+0x1dc>
    800009ee:	00145793          	srli	a5,s0,0x1
    800009f2:	8805                	andi	s0,s0,1
    800009f4:	8c5d                	or	s0,s0,a5
    800009f6:	3ff60793          	addi	a5,a2,1023
    800009fa:	06f05e63          	blez	a5,80000a76 <__muldf3+0x1e0>
    800009fe:	00747713          	andi	a4,s0,7
    80000a02:	c719                	beqz	a4,80000a10 <__muldf3+0x17a>
    80000a04:	00f47713          	andi	a4,s0,15
    80000a08:	4691                	li	a3,4
    80000a0a:	00d70363          	beq	a4,a3,80000a10 <__muldf3+0x17a>
    80000a0e:	0411                	addi	s0,s0,4
    80000a10:	03845713          	srli	a4,s0,0x38
    80000a14:	8b05                	andi	a4,a4,1
    80000a16:	c719                	beqz	a4,80000a24 <__muldf3+0x18e>
    80000a18:	57fd                	li	a5,-1
    80000a1a:	17e2                	slli	a5,a5,0x38
    80000a1c:	17fd                	addi	a5,a5,-1
    80000a1e:	8c7d                	and	s0,s0,a5
    80000a20:	40060793          	addi	a5,a2,1024
    80000a24:	7fe00713          	li	a4,2046
    80000a28:	08f74e63          	blt	a4,a5,80000ac4 <__muldf3+0x22e>
    80000a2c:	800d                	srli	s0,s0,0x3
    80000a2e:	7ff7f793          	andi	a5,a5,2047
    80000a32:	0432                	slli	s0,s0,0xc
    80000a34:	17d2                	slli	a5,a5,0x34
    80000a36:	8031                	srli	s0,s0,0xc
    80000a38:	8c5d                	or	s0,s0,a5
    80000a3a:	157e                	slli	a0,a0,0x3f
    80000a3c:	70e2                	ld	ra,56(sp)
    80000a3e:	8d41                	or	a0,a0,s0
    80000a40:	7442                	ld	s0,48(sp)
    80000a42:	74a2                	ld	s1,40(sp)
    80000a44:	7902                	ld	s2,32(sp)
    80000a46:	69e2                	ld	s3,24(sp)
    80000a48:	6a42                	ld	s4,16(sp)
    80000a4a:	6aa2                	ld	s5,8(sp)
    80000a4c:	6121                	addi	sp,sp,64
    80000a4e:	8082                	ret
    80000a50:	854a                	mv	a0,s2
    80000a52:	844e                	mv	s0,s3
    80000a54:	8756                	mv	a4,s5
    80000a56:	4789                	li	a5,2
    80000a58:	06f70663          	beq	a4,a5,80000ac4 <__muldf3+0x22e>
    80000a5c:	478d                	li	a5,3
    80000a5e:	04f70d63          	beq	a4,a5,80000ab8 <__muldf3+0x222>
    80000a62:	4785                	li	a5,1
    80000a64:	f8f719e3          	bne	a4,a5,800009f6 <__muldf3+0x160>
    80000a68:	4401                	li	s0,0
    80000a6a:	4781                	li	a5,0
    80000a6c:	b7c9                	j	80000a2e <__muldf3+0x198>
    80000a6e:	8552                	mv	a0,s4
    80000a70:	b7dd                	j	80000a56 <__muldf3+0x1c0>
    80000a72:	863e                	mv	a2,a5
    80000a74:	b749                	j	800009f6 <__muldf3+0x160>
    80000a76:	4705                	li	a4,1
    80000a78:	8f1d                	sub	a4,a4,a5
    80000a7a:	03800793          	li	a5,56
    80000a7e:	fee7c5e3          	blt	a5,a4,80000a68 <__muldf3+0x1d2>
    80000a82:	04000693          	li	a3,64
    80000a86:	00e457b3          	srl	a5,s0,a4
    80000a8a:	40e6873b          	subw	a4,a3,a4
    80000a8e:	00e41433          	sll	s0,s0,a4
    80000a92:	00803433          	snez	s0,s0
    80000a96:	8c5d                	or	s0,s0,a5
    80000a98:	00747793          	andi	a5,s0,7
    80000a9c:	c799                	beqz	a5,80000aaa <__muldf3+0x214>
    80000a9e:	00f47793          	andi	a5,s0,15
    80000aa2:	4711                	li	a4,4
    80000aa4:	00e78363          	beq	a5,a4,80000aaa <__muldf3+0x214>
    80000aa8:	0411                	addi	s0,s0,4
    80000aaa:	03745793          	srli	a5,s0,0x37
    80000aae:	8b85                	andi	a5,a5,1
    80000ab0:	dfb5                	beqz	a5,80000a2c <__muldf3+0x196>
    80000ab2:	4401                	li	s0,0
    80000ab4:	4785                	li	a5,1
    80000ab6:	bfa5                	j	80000a2e <__muldf3+0x198>
    80000ab8:	4405                	li	s0,1
    80000aba:	144e                	slli	s0,s0,0x33
    80000abc:	7ff00793          	li	a5,2047
    80000ac0:	4501                	li	a0,0
    80000ac2:	b7b5                	j	80000a2e <__muldf3+0x198>
    80000ac4:	4401                	li	s0,0
    80000ac6:	7ff00793          	li	a5,2047
    80000aca:	b795                	j	80000a2e <__muldf3+0x198>

0000000080000acc <__subdf3>:
    80000acc:	577d                	li	a4,-1
    80000ace:	1101                	addi	sp,sp,-32
    80000ad0:	8331                	srli	a4,a4,0xc
    80000ad2:	0345d813          	srli	a6,a1,0x34
    80000ad6:	03455613          	srli	a2,a0,0x34
    80000ada:	00a777b3          	and	a5,a4,a0
    80000ade:	e822                	sd	s0,16(sp)
    80000ae0:	8f6d                	and	a4,a4,a1
    80000ae2:	e426                	sd	s1,8(sp)
    80000ae4:	7ff67613          	andi	a2,a2,2047
    80000ae8:	ec06                	sd	ra,24(sp)
    80000aea:	e04a                	sd	s2,0(sp)
    80000aec:	7ff87813          	andi	a6,a6,2047
    80000af0:	7ff00693          	li	a3,2047
    80000af4:	8432                	mv	s0,a2
    80000af6:	03f55493          	srli	s1,a0,0x3f
    80000afa:	078e                	slli	a5,a5,0x3
    80000afc:	91fd                	srli	a1,a1,0x3f
    80000afe:	070e                	slli	a4,a4,0x3
    80000b00:	00d81363          	bne	a6,a3,80000b06 <__subdf3+0x3a>
    80000b04:	e319                	bnez	a4,80000b0a <__subdf3+0x3e>
    80000b06:	0015c593          	xori	a1,a1,1
    80000b0a:	410606bb          	subw	a3,a2,a6
    80000b0e:	0006851b          	sext.w	a0,a3
    80000b12:	12959a63          	bne	a1,s1,80000c46 <__subdf3+0x17a>
    80000b16:	08a05563          	blez	a0,80000ba0 <__subdf3+0xd4>
    80000b1a:	04081963          	bnez	a6,80000b6c <__subdf3+0xa0>
    80000b1e:	cf05                	beqz	a4,80000b56 <__subdf3+0x8a>
    80000b20:	fff6851b          	addiw	a0,a3,-1
    80000b24:	e50d                	bnez	a0,80000b4e <__subdf3+0x82>
    80000b26:	97ba                	add	a5,a5,a4
    80000b28:	0377d713          	srli	a4,a5,0x37
    80000b2c:	8b05                	andi	a4,a4,1
    80000b2e:	c705                	beqz	a4,80000b56 <__subdf3+0x8a>
    80000b30:	0405                	addi	s0,s0,1
    80000b32:	7ff00713          	li	a4,2047
    80000b36:	28e40563          	beq	s0,a4,80000dc0 <__subdf3+0x2f4>
    80000b3a:	1ff00713          	li	a4,511
    80000b3e:	175a                	slli	a4,a4,0x36
    80000b40:	0017f693          	andi	a3,a5,1
    80000b44:	177d                	addi	a4,a4,-1
    80000b46:	8385                	srli	a5,a5,0x1
    80000b48:	8ff9                	and	a5,a5,a4
    80000b4a:	8fd5                	or	a5,a5,a3
    80000b4c:	a029                	j	80000b56 <__subdf3+0x8a>
    80000b4e:	7ff00693          	li	a3,2047
    80000b52:	02d61463          	bne	a2,a3,80000b7a <__subdf3+0xae>
    80000b56:	0077f713          	andi	a4,a5,7
    80000b5a:	26070463          	beqz	a4,80000dc2 <__subdf3+0x2f6>
    80000b5e:	00f7f713          	andi	a4,a5,15
    80000b62:	4691                	li	a3,4
    80000b64:	24d70f63          	beq	a4,a3,80000dc2 <__subdf3+0x2f6>
    80000b68:	0791                	addi	a5,a5,4
    80000b6a:	aca1                	j	80000dc2 <__subdf3+0x2f6>
    80000b6c:	7ff00693          	li	a3,2047
    80000b70:	fed603e3          	beq	a2,a3,80000b56 <__subdf3+0x8a>
    80000b74:	4685                	li	a3,1
    80000b76:	16de                	slli	a3,a3,0x37
    80000b78:	8f55                	or	a4,a4,a3
    80000b7a:	03800613          	li	a2,56
    80000b7e:	4685                	li	a3,1
    80000b80:	00a64e63          	blt	a2,a0,80000b9c <__subdf3+0xd0>
    80000b84:	04000693          	li	a3,64
    80000b88:	00a75633          	srl	a2,a4,a0
    80000b8c:	40a6853b          	subw	a0,a3,a0
    80000b90:	00a71733          	sll	a4,a4,a0
    80000b94:	00e03733          	snez	a4,a4
    80000b98:	00e666b3          	or	a3,a2,a4
    80000b9c:	97b6                	add	a5,a5,a3
    80000b9e:	b769                	j	80000b28 <__subdf3+0x5c>
    80000ba0:	cd31                	beqz	a0,80000bfc <__subdf3+0x130>
    80000ba2:	e205                	bnez	a2,80000bc2 <__subdf3+0xf6>
    80000ba4:	20078763          	beqz	a5,80000db2 <__subdf3+0x2e6>
    80000ba8:	fff6c693          	not	a3,a3
    80000bac:	2681                	sext.w	a3,a3
    80000bae:	e681                	bnez	a3,80000bb6 <__subdf3+0xea>
    80000bb0:	97ba                	add	a5,a5,a4
    80000bb2:	8442                	mv	s0,a6
    80000bb4:	bf95                	j	80000b28 <__subdf3+0x5c>
    80000bb6:	7ff00613          	li	a2,2047
    80000bba:	00c81d63          	bne	a6,a2,80000bd4 <__subdf3+0x108>
    80000bbe:	87ba                	mv	a5,a4
    80000bc0:	a271                	j	80000d4c <__subdf3+0x280>
    80000bc2:	7ff00613          	li	a2,2047
    80000bc6:	fec80ce3          	beq	a6,a2,80000bbe <__subdf3+0xf2>
    80000bca:	4605                	li	a2,1
    80000bcc:	165e                	slli	a2,a2,0x37
    80000bce:	40d006bb          	negw	a3,a3
    80000bd2:	8fd1                	or	a5,a5,a2
    80000bd4:	03800593          	li	a1,56
    80000bd8:	4605                	li	a2,1
    80000bda:	00d5ce63          	blt	a1,a3,80000bf6 <__subdf3+0x12a>
    80000bde:	04000613          	li	a2,64
    80000be2:	00d7d5b3          	srl	a1,a5,a3
    80000be6:	40d606bb          	subw	a3,a2,a3
    80000bea:	00d797b3          	sll	a5,a5,a3
    80000bee:	00f037b3          	snez	a5,a5
    80000bf2:	00f5e633          	or	a2,a1,a5
    80000bf6:	00e607b3          	add	a5,a2,a4
    80000bfa:	bf65                	j	80000bb2 <__subdf3+0xe6>
    80000bfc:	00160693          	addi	a3,a2,1
    80000c00:	7fe6f593          	andi	a1,a3,2046
    80000c04:	e98d                	bnez	a1,80000c36 <__subdf3+0x16a>
    80000c06:	ee19                	bnez	a2,80000c24 <__subdf3+0x158>
    80000c08:	1a078863          	beqz	a5,80000db8 <__subdf3+0x2ec>
    80000c0c:	d729                	beqz	a4,80000b56 <__subdf3+0x8a>
    80000c0e:	97ba                	add	a5,a5,a4
    80000c10:	0377d713          	srli	a4,a5,0x37
    80000c14:	8b05                	andi	a4,a4,1
    80000c16:	d321                	beqz	a4,80000b56 <__subdf3+0x8a>
    80000c18:	577d                	li	a4,-1
    80000c1a:	175e                	slli	a4,a4,0x37
    80000c1c:	177d                	addi	a4,a4,-1
    80000c1e:	8ff9                	and	a5,a5,a4
    80000c20:	4405                	li	s0,1
    80000c22:	bf15                	j	80000b56 <__subdf3+0x8a>
    80000c24:	dfc9                	beqz	a5,80000bbe <__subdf3+0xf2>
    80000c26:	12070363          	beqz	a4,80000d4c <__subdf3+0x280>
    80000c2a:	4785                	li	a5,1
    80000c2c:	4481                	li	s1,0
    80000c2e:	17da                	slli	a5,a5,0x36
    80000c30:	7ff00413          	li	s0,2047
    80000c34:	a279                	j	80000dc2 <__subdf3+0x2f6>
    80000c36:	7ff00613          	li	a2,2047
    80000c3a:	18c68163          	beq	a3,a2,80000dbc <__subdf3+0x2f0>
    80000c3e:	97ba                	add	a5,a5,a4
    80000c40:	8385                	srli	a5,a5,0x1
    80000c42:	8436                	mv	s0,a3
    80000c44:	bf09                	j	80000b56 <__subdf3+0x8a>
    80000c46:	06a05163          	blez	a0,80000ca8 <__subdf3+0x1dc>
    80000c4a:	04081763          	bnez	a6,80000c98 <__subdf3+0x1cc>
    80000c4e:	d701                	beqz	a4,80000b56 <__subdf3+0x8a>
    80000c50:	fff6851b          	addiw	a0,a3,-1
    80000c54:	e919                	bnez	a0,80000c6a <__subdf3+0x19e>
    80000c56:	8f99                	sub	a5,a5,a4
    80000c58:	0377d713          	srli	a4,a5,0x37
    80000c5c:	8b05                	andi	a4,a4,1
    80000c5e:	ee070ce3          	beqz	a4,80000b56 <__subdf3+0x8a>
    80000c62:	07a6                	slli	a5,a5,0x9
    80000c64:	0097d913          	srli	s2,a5,0x9
    80000c68:	a8f5                	j	80000d64 <__subdf3+0x298>
    80000c6a:	7ff00693          	li	a3,2047
    80000c6e:	eed604e3          	beq	a2,a3,80000b56 <__subdf3+0x8a>
    80000c72:	03800613          	li	a2,56
    80000c76:	4685                	li	a3,1
    80000c78:	00a64e63          	blt	a2,a0,80000c94 <__subdf3+0x1c8>
    80000c7c:	04000693          	li	a3,64
    80000c80:	00a75633          	srl	a2,a4,a0
    80000c84:	40a6853b          	subw	a0,a3,a0
    80000c88:	00a71733          	sll	a4,a4,a0
    80000c8c:	00e03733          	snez	a4,a4
    80000c90:	00e666b3          	or	a3,a2,a4
    80000c94:	8f95                	sub	a5,a5,a3
    80000c96:	b7c9                	j	80000c58 <__subdf3+0x18c>
    80000c98:	7ff00693          	li	a3,2047
    80000c9c:	ead60de3          	beq	a2,a3,80000b56 <__subdf3+0x8a>
    80000ca0:	4685                	li	a3,1
    80000ca2:	16de                	slli	a3,a3,0x37
    80000ca4:	8f55                	or	a4,a4,a3
    80000ca6:	b7f1                	j	80000c72 <__subdf3+0x1a6>
    80000ca8:	c135                	beqz	a0,80000d0c <__subdf3+0x240>
    80000caa:	e605                	bnez	a2,80000cd2 <__subdf3+0x206>
    80000cac:	16078063          	beqz	a5,80000e0c <__subdf3+0x340>
    80000cb0:	fff6c693          	not	a3,a3
    80000cb4:	2681                	sext.w	a3,a3
    80000cb6:	e691                	bnez	a3,80000cc2 <__subdf3+0x1f6>
    80000cb8:	40f707b3          	sub	a5,a4,a5
    80000cbc:	8442                	mv	s0,a6
    80000cbe:	84ae                	mv	s1,a1
    80000cc0:	bf61                	j	80000c58 <__subdf3+0x18c>
    80000cc2:	7ff00613          	li	a2,2047
    80000cc6:	00c81f63          	bne	a6,a2,80000ce4 <__subdf3+0x218>
    80000cca:	87ba                	mv	a5,a4
    80000ccc:	7ff00413          	li	s0,2047
    80000cd0:	a881                	j	80000d20 <__subdf3+0x254>
    80000cd2:	7ff00613          	li	a2,2047
    80000cd6:	fec80ae3          	beq	a6,a2,80000cca <__subdf3+0x1fe>
    80000cda:	4605                	li	a2,1
    80000cdc:	165e                	slli	a2,a2,0x37
    80000cde:	40d006bb          	negw	a3,a3
    80000ce2:	8fd1                	or	a5,a5,a2
    80000ce4:	03800513          	li	a0,56
    80000ce8:	4605                	li	a2,1
    80000cea:	00d54e63          	blt	a0,a3,80000d06 <__subdf3+0x23a>
    80000cee:	04000613          	li	a2,64
    80000cf2:	00d7d533          	srl	a0,a5,a3
    80000cf6:	40d606bb          	subw	a3,a2,a3
    80000cfa:	00d797b3          	sll	a5,a5,a3
    80000cfe:	00f037b3          	snez	a5,a5
    80000d02:	00f56633          	or	a2,a0,a5
    80000d06:	40c707b3          	sub	a5,a4,a2
    80000d0a:	bf4d                	j	80000cbc <__subdf3+0x1f0>
    80000d0c:	00160693          	addi	a3,a2,1
    80000d10:	7fe6f693          	andi	a3,a3,2046
    80000d14:	ee9d                	bnez	a3,80000d52 <__subdf3+0x286>
    80000d16:	e60d                	bnez	a2,80000d40 <__subdf3+0x274>
    80000d18:	e791                	bnez	a5,80000d24 <__subdf3+0x258>
    80000d1a:	4481                	li	s1,0
    80000d1c:	c35d                	beqz	a4,80000dc2 <__subdf3+0x2f6>
    80000d1e:	87ba                	mv	a5,a4
    80000d20:	84ae                	mv	s1,a1
    80000d22:	bd15                	j	80000b56 <__subdf3+0x8a>
    80000d24:	e20709e3          	beqz	a4,80000b56 <__subdf3+0x8a>
    80000d28:	40e786b3          	sub	a3,a5,a4
    80000d2c:	0376d613          	srli	a2,a3,0x37
    80000d30:	8a05                	andi	a2,a2,1
    80000d32:	40f707b3          	sub	a5,a4,a5
    80000d36:	f66d                	bnez	a2,80000d20 <__subdf3+0x254>
    80000d38:	4781                	li	a5,0
    80000d3a:	c2bd                	beqz	a3,80000da0 <__subdf3+0x2d4>
    80000d3c:	87b6                	mv	a5,a3
    80000d3e:	bd21                	j	80000b56 <__subdf3+0x8a>
    80000d40:	ee0793e3          	bnez	a5,80000c26 <__subdf3+0x15a>
    80000d44:	ee0703e3          	beqz	a4,80000c2a <__subdf3+0x15e>
    80000d48:	87ba                	mv	a5,a4
    80000d4a:	84ae                	mv	s1,a1
    80000d4c:	7ff00413          	li	s0,2047
    80000d50:	b519                	j	80000b56 <__subdf3+0x8a>
    80000d52:	40e78933          	sub	s2,a5,a4
    80000d56:	03795693          	srli	a3,s2,0x37
    80000d5a:	8a85                	andi	a3,a3,1
    80000d5c:	ce95                	beqz	a3,80000d98 <__subdf3+0x2cc>
    80000d5e:	40f70933          	sub	s2,a4,a5
    80000d62:	84ae                	mv	s1,a1
    80000d64:	854a                	mv	a0,s2
    80000d66:	c3eff0ef          	jal	ra,800001a4 <__clzdi2>
    80000d6a:	ff85079b          	addiw	a5,a0,-8
    80000d6e:	00f91933          	sll	s2,s2,a5
    80000d72:	0287c963          	blt	a5,s0,80000da4 <__subdf3+0x2d8>
    80000d76:	4087853b          	subw	a0,a5,s0
    80000d7a:	2505                	addiw	a0,a0,1
    80000d7c:	04000413          	li	s0,64
    80000d80:	00a957b3          	srl	a5,s2,a0
    80000d84:	40a4053b          	subw	a0,s0,a0
    80000d88:	00a91933          	sll	s2,s2,a0
    80000d8c:	01203933          	snez	s2,s2
    80000d90:	0127e7b3          	or	a5,a5,s2
    80000d94:	4401                	li	s0,0
    80000d96:	b3c1                	j	80000b56 <__subdf3+0x8a>
    80000d98:	fc0916e3          	bnez	s2,80000d64 <__subdf3+0x298>
    80000d9c:	4781                	li	a5,0
    80000d9e:	4401                	li	s0,0
    80000da0:	4481                	li	s1,0
    80000da2:	a005                	j	80000dc2 <__subdf3+0x2f6>
    80000da4:	8c1d                	sub	s0,s0,a5
    80000da6:	57fd                	li	a5,-1
    80000da8:	17de                	slli	a5,a5,0x37
    80000daa:	17fd                	addi	a5,a5,-1
    80000dac:	00f977b3          	and	a5,s2,a5
    80000db0:	b35d                	j	80000b56 <__subdf3+0x8a>
    80000db2:	87ba                	mv	a5,a4
    80000db4:	8442                	mv	s0,a6
    80000db6:	b345                	j	80000b56 <__subdf3+0x8a>
    80000db8:	87ba                	mv	a5,a4
    80000dba:	bb71                	j	80000b56 <__subdf3+0x8a>
    80000dbc:	7ff00413          	li	s0,2047
    80000dc0:	4781                	li	a5,0
    80000dc2:	0377d713          	srli	a4,a5,0x37
    80000dc6:	8b05                	andi	a4,a4,1
    80000dc8:	cb11                	beqz	a4,80000ddc <__subdf3+0x310>
    80000dca:	0405                	addi	s0,s0,1
    80000dcc:	7ff00713          	li	a4,2047
    80000dd0:	04e40163          	beq	s0,a4,80000e12 <__subdf3+0x346>
    80000dd4:	577d                	li	a4,-1
    80000dd6:	175e                	slli	a4,a4,0x37
    80000dd8:	177d                	addi	a4,a4,-1
    80000dda:	8ff9                	and	a5,a5,a4
    80000ddc:	7ff00713          	li	a4,2047
    80000de0:	838d                	srli	a5,a5,0x3
    80000de2:	00e41663          	bne	s0,a4,80000dee <__subdf3+0x322>
    80000de6:	c781                	beqz	a5,80000dee <__subdf3+0x322>
    80000de8:	4785                	li	a5,1
    80000dea:	17ce                	slli	a5,a5,0x33
    80000dec:	4481                	li	s1,0
    80000dee:	7ff47413          	andi	s0,s0,2047
    80000df2:	07b2                	slli	a5,a5,0xc
    80000df4:	1452                	slli	s0,s0,0x34
    80000df6:	83b1                	srli	a5,a5,0xc
    80000df8:	60e2                	ld	ra,24(sp)
    80000dfa:	8fc1                	or	a5,a5,s0
    80000dfc:	6442                	ld	s0,16(sp)
    80000dfe:	03f49513          	slli	a0,s1,0x3f
    80000e02:	6902                	ld	s2,0(sp)
    80000e04:	64a2                	ld	s1,8(sp)
    80000e06:	8d5d                	or	a0,a0,a5
    80000e08:	6105                	addi	sp,sp,32
    80000e0a:	8082                	ret
    80000e0c:	87ba                	mv	a5,a4
    80000e0e:	8442                	mv	s0,a6
    80000e10:	bf01                	j	80000d20 <__subdf3+0x254>
    80000e12:	4781                	li	a5,0
    80000e14:	b7e1                	j	80000ddc <__subdf3+0x310>

0000000080000e16 <__fixdfsi>:
    80000e16:	03455693          	srli	a3,a0,0x34
    80000e1a:	00c51793          	slli	a5,a0,0xc
    80000e1e:	7ff6f693          	andi	a3,a3,2047
    80000e22:	3fe00613          	li	a2,1022
    80000e26:	83b1                	srli	a5,a5,0xc
    80000e28:	03f55713          	srli	a4,a0,0x3f
    80000e2c:	02d65a63          	bge	a2,a3,80000e60 <__fixdfsi+0x4a>
    80000e30:	41d00613          	li	a2,1053
    80000e34:	00d65863          	bge	a2,a3,80000e44 <__fixdfsi+0x2e>
    80000e38:	80000537          	lui	a0,0x80000
    80000e3c:	fff54513          	not	a0,a0
    80000e40:	9d39                	addw	a0,a0,a4
    80000e42:	8082                	ret
    80000e44:	4505                	li	a0,1
    80000e46:	1552                	slli	a0,a0,0x34
    80000e48:	8d5d                	or	a0,a0,a5
    80000e4a:	43300793          	li	a5,1075
    80000e4e:	40d786bb          	subw	a3,a5,a3
    80000e52:	00d55533          	srl	a0,a0,a3
    80000e56:	2501                	sext.w	a0,a0
    80000e58:	c709                	beqz	a4,80000e62 <__fixdfsi+0x4c>
    80000e5a:	40a0053b          	negw	a0,a0
    80000e5e:	8082                	ret
    80000e60:	4501                	li	a0,0
    80000e62:	8082                	ret

0000000080000e64 <__floatsidf>:
    80000e64:	1101                	addi	sp,sp,-32
    80000e66:	ec06                	sd	ra,24(sp)
    80000e68:	e822                	sd	s0,16(sp)
    80000e6a:	e426                	sd	s1,8(sp)
    80000e6c:	c131                	beqz	a0,80000eb0 <__floatsidf+0x4c>
    80000e6e:	0005079b          	sext.w	a5,a0
    80000e72:	03f55493          	srli	s1,a0,0x3f
    80000e76:	00055463          	bgez	a0,80000e7e <__floatsidf+0x1a>
    80000e7a:	40f007bb          	negw	a5,a5
    80000e7e:	02079413          	slli	s0,a5,0x20
    80000e82:	9001                	srli	s0,s0,0x20
    80000e84:	8522                	mv	a0,s0
    80000e86:	b1eff0ef          	jal	ra,800001a4 <__clzdi2>
    80000e8a:	43e00713          	li	a4,1086
    80000e8e:	ff55079b          	addiw	a5,a0,-11
    80000e92:	9f09                	subw	a4,a4,a0
    80000e94:	00f417b3          	sll	a5,s0,a5
    80000e98:	60e2                	ld	ra,24(sp)
    80000e9a:	6442                	ld	s0,16(sp)
    80000e9c:	07b2                	slli	a5,a5,0xc
    80000e9e:	1752                	slli	a4,a4,0x34
    80000ea0:	83b1                	srli	a5,a5,0xc
    80000ea2:	03f49513          	slli	a0,s1,0x3f
    80000ea6:	8fd9                	or	a5,a5,a4
    80000ea8:	64a2                	ld	s1,8(sp)
    80000eaa:	8d5d                	or	a0,a0,a5
    80000eac:	6105                	addi	sp,sp,32
    80000eae:	8082                	ret
    80000eb0:	4781                	li	a5,0
    80000eb2:	4701                	li	a4,0
    80000eb4:	4481                	li	s1,0
    80000eb6:	b7cd                	j	80000e98 <__floatsidf+0x34>

0000000080000eb8 <__fixdfdi>:
    80000eb8:	567d                	li	a2,-1
    80000eba:	03455693          	srli	a3,a0,0x34
    80000ebe:	00c65793          	srli	a5,a2,0xc
    80000ec2:	7ff6f693          	andi	a3,a3,2047
    80000ec6:	3fe00593          	li	a1,1022
    80000eca:	8fe9                	and	a5,a5,a0
    80000ecc:	03f55713          	srli	a4,a0,0x3f
    80000ed0:	04d5d263          	bge	a1,a3,80000f14 <__fixdfdi+0x5c>
    80000ed4:	43d00593          	li	a1,1085
    80000ed8:	00d5d663          	bge	a1,a3,80000ee4 <__fixdfdi+0x2c>
    80000edc:	00165513          	srli	a0,a2,0x1
    80000ee0:	953a                	add	a0,a0,a4
    80000ee2:	8082                	ret
    80000ee4:	4505                	li	a0,1
    80000ee6:	1552                	slli	a0,a0,0x34
    80000ee8:	43200613          	li	a2,1074
    80000eec:	8d5d                	or	a0,a0,a5
    80000eee:	0006879b          	sext.w	a5,a3
    80000ef2:	00d65a63          	bge	a2,a3,80000f06 <__fixdfdi+0x4e>
    80000ef6:	bcd7879b          	addiw	a5,a5,-1075
    80000efa:	00f51533          	sll	a0,a0,a5
    80000efe:	cf01                	beqz	a4,80000f16 <__fixdfdi+0x5e>
    80000f00:	40a00533          	neg	a0,a0
    80000f04:	8082                	ret
    80000f06:	43300693          	li	a3,1075
    80000f0a:	40f687bb          	subw	a5,a3,a5
    80000f0e:	00f55533          	srl	a0,a0,a5
    80000f12:	b7f5                	j	80000efe <__fixdfdi+0x46>
    80000f14:	4501                	li	a0,0
    80000f16:	8082                	ret

0000000080000f18 <__floatdidf>:
    80000f18:	1101                	addi	sp,sp,-32
    80000f1a:	ec06                	sd	ra,24(sp)
    80000f1c:	e822                	sd	s0,16(sp)
    80000f1e:	e426                	sd	s1,8(sp)
    80000f20:	c555                	beqz	a0,80000fcc <__floatdidf+0xb4>
    80000f22:	43f55793          	srai	a5,a0,0x3f
    80000f26:	00a7c433          	xor	s0,a5,a0
    80000f2a:	8c1d                	sub	s0,s0,a5
    80000f2c:	03f55493          	srli	s1,a0,0x3f
    80000f30:	8522                	mv	a0,s0
    80000f32:	a72ff0ef          	jal	ra,800001a4 <__clzdi2>
    80000f36:	43e00793          	li	a5,1086
    80000f3a:	86aa                	mv	a3,a0
    80000f3c:	40a7853b          	subw	a0,a5,a0
    80000f40:	43300793          	li	a5,1075
    80000f44:	02a7c363          	blt	a5,a0,80000f6a <__floatdidf+0x52>
    80000f48:	00f50563          	beq	a0,a5,80000f52 <__floatdidf+0x3a>
    80000f4c:	36d5                	addiw	a3,a3,-11
    80000f4e:	00d41433          	sll	s0,s0,a3
    80000f52:	0432                	slli	s0,s0,0xc
    80000f54:	1552                	slli	a0,a0,0x34
    80000f56:	8031                	srli	s0,s0,0xc
    80000f58:	8c49                	or	s0,s0,a0
    80000f5a:	03f49513          	slli	a0,s1,0x3f
    80000f5e:	60e2                	ld	ra,24(sp)
    80000f60:	8d41                	or	a0,a0,s0
    80000f62:	6442                	ld	s0,16(sp)
    80000f64:	64a2                	ld	s1,8(sp)
    80000f66:	6105                	addi	sp,sp,32
    80000f68:	8082                	ret
    80000f6a:	43600793          	li	a5,1078
    80000f6e:	04a7d863          	bge	a5,a0,80000fbe <__floatdidf+0xa6>
    80000f72:	47a1                	li	a5,8
    80000f74:	9f95                	subw	a5,a5,a3
    80000f76:	0386871b          	addiw	a4,a3,56
    80000f7a:	00f457b3          	srl	a5,s0,a5
    80000f7e:	00e41433          	sll	s0,s0,a4
    80000f82:	00803433          	snez	s0,s0
    80000f86:	8c5d                	or	s0,s0,a5
    80000f88:	577d                	li	a4,-1
    80000f8a:	175e                	slli	a4,a4,0x37
    80000f8c:	177d                	addi	a4,a4,-1
    80000f8e:	00747793          	andi	a5,s0,7
    80000f92:	8f61                	and	a4,a4,s0
    80000f94:	c791                	beqz	a5,80000fa0 <__floatdidf+0x88>
    80000f96:	883d                	andi	s0,s0,15
    80000f98:	4791                	li	a5,4
    80000f9a:	00f40363          	beq	s0,a5,80000fa0 <__floatdidf+0x88>
    80000f9e:	0711                	addi	a4,a4,4
    80000fa0:	03775793          	srli	a5,a4,0x37
    80000fa4:	8b85                	andi	a5,a5,1
    80000fa6:	cb89                	beqz	a5,80000fb8 <__floatdidf+0xa0>
    80000fa8:	57fd                	li	a5,-1
    80000faa:	17de                	slli	a5,a5,0x37
    80000fac:	17fd                	addi	a5,a5,-1
    80000fae:	8f7d                	and	a4,a4,a5
    80000fb0:	43f00793          	li	a5,1087
    80000fb4:	40d7853b          	subw	a0,a5,a3
    80000fb8:	00375413          	srli	s0,a4,0x3
    80000fbc:	bf59                	j	80000f52 <__floatdidf+0x3a>
    80000fbe:	fcf505e3          	beq	a0,a5,80000f88 <__floatdidf+0x70>
    80000fc2:	ff86879b          	addiw	a5,a3,-8
    80000fc6:	00f41433          	sll	s0,s0,a5
    80000fca:	bf7d                	j	80000f88 <__floatdidf+0x70>
    80000fcc:	4481                	li	s1,0
    80000fce:	4401                	li	s0,0
    80000fd0:	b749                	j	80000f52 <__floatdidf+0x3a>

0000000080000fd2 <__addsf3>:
    80000fd2:	00800737          	lui	a4,0x800
    80000fd6:	177d                	addi	a4,a4,-1
    80000fd8:	1101                	addi	sp,sp,-32
    80000fda:	00a777b3          	and	a5,a4,a0
    80000fde:	02079693          	slli	a3,a5,0x20
    80000fe2:	8f6d                	and	a4,a4,a1
    80000fe4:	e822                	sd	s0,16(sp)
    80000fe6:	e426                	sd	s1,8(sp)
    80000fe8:	0175541b          	srliw	s0,a0,0x17
    80000fec:	01f5549b          	srliw	s1,a0,0x1f
    80000ff0:	0175d51b          	srliw	a0,a1,0x17
    80000ff4:	0ff47413          	andi	s0,s0,255
    80000ff8:	01d6d793          	srli	a5,a3,0x1d
    80000ffc:	0ff57513          	andi	a0,a0,255
    80001000:	02071693          	slli	a3,a4,0x20
    80001004:	01d6d713          	srli	a4,a3,0x1d
    80001008:	ec06                	sd	ra,24(sp)
    8000100a:	40a406bb          	subw	a3,s0,a0
    8000100e:	e04a                	sd	s2,0(sp)
    80001010:	01f5d59b          	srliw	a1,a1,0x1f
    80001014:	0006861b          	sext.w	a2,a3
    80001018:	12b49663          	bne	s1,a1,80001144 <__addsf3+0x172>
    8000101c:	08c05263          	blez	a2,800010a0 <__addsf3+0xce>
    80001020:	e539                	bnez	a0,8000106e <__addsf3+0x9c>
    80001022:	cb1d                	beqz	a4,80001058 <__addsf3+0x86>
    80001024:	fff6861b          	addiw	a2,a3,-1
    80001028:	e605                	bnez	a2,80001050 <__addsf3+0x7e>
    8000102a:	97ba                	add	a5,a5,a4
    8000102c:	04000737          	lui	a4,0x4000
    80001030:	8f7d                	and	a4,a4,a5
    80001032:	c31d                	beqz	a4,80001058 <__addsf3+0x86>
    80001034:	0405                	addi	s0,s0,1
    80001036:	0ff00713          	li	a4,255
    8000103a:	28e40163          	beq	s0,a4,800012bc <__addsf3+0x2ea>
    8000103e:	fc000737          	lui	a4,0xfc000
    80001042:	177d                	addi	a4,a4,-1
    80001044:	0017f693          	andi	a3,a5,1
    80001048:	8ff9                	and	a5,a5,a4
    8000104a:	8385                	srli	a5,a5,0x1
    8000104c:	8fd5                	or	a5,a5,a3
    8000104e:	a029                	j	80001058 <__addsf3+0x86>
    80001050:	0ff00693          	li	a3,255
    80001054:	02d41463          	bne	s0,a3,8000107c <__addsf3+0xaa>
    80001058:	0077f713          	andi	a4,a5,7
    8000105c:	26070163          	beqz	a4,800012be <__addsf3+0x2ec>
    80001060:	00f7f713          	andi	a4,a5,15
    80001064:	4691                	li	a3,4
    80001066:	24d70c63          	beq	a4,a3,800012be <__addsf3+0x2ec>
    8000106a:	0791                	addi	a5,a5,4
    8000106c:	ac89                	j	800012be <__addsf3+0x2ec>
    8000106e:	0ff00693          	li	a3,255
    80001072:	fed403e3          	beq	s0,a3,80001058 <__addsf3+0x86>
    80001076:	040006b7          	lui	a3,0x4000
    8000107a:	8f55                	or	a4,a4,a3
    8000107c:	45ed                	li	a1,27
    8000107e:	4685                	li	a3,1
    80001080:	00c5ce63          	blt	a1,a2,8000109c <__addsf3+0xca>
    80001084:	04000693          	li	a3,64
    80001088:	00c755b3          	srl	a1,a4,a2
    8000108c:	40c6863b          	subw	a2,a3,a2
    80001090:	00c71733          	sll	a4,a4,a2
    80001094:	00e03733          	snez	a4,a4
    80001098:	00e5e6b3          	or	a3,a1,a4
    8000109c:	97b6                	add	a5,a5,a3
    8000109e:	b779                	j	8000102c <__addsf3+0x5a>
    800010a0:	ce29                	beqz	a2,800010fa <__addsf3+0x128>
    800010a2:	e005                	bnez	s0,800010c2 <__addsf3+0xf0>
    800010a4:	20078563          	beqz	a5,800012ae <__addsf3+0x2dc>
    800010a8:	fff6c693          	not	a3,a3
    800010ac:	2681                	sext.w	a3,a3
    800010ae:	e681                	bnez	a3,800010b6 <__addsf3+0xe4>
    800010b0:	97ba                	add	a5,a5,a4
    800010b2:	842a                	mv	s0,a0
    800010b4:	bfa5                	j	8000102c <__addsf3+0x5a>
    800010b6:	0ff00613          	li	a2,255
    800010ba:	00c51d63          	bne	a0,a2,800010d4 <__addsf3+0x102>
    800010be:	87ba                	mv	a5,a4
    800010c0:	a259                	j	80001246 <__addsf3+0x274>
    800010c2:	0ff00613          	li	a2,255
    800010c6:	fec50ce3          	beq	a0,a2,800010be <__addsf3+0xec>
    800010ca:	04000637          	lui	a2,0x4000
    800010ce:	40d006bb          	negw	a3,a3
    800010d2:	8fd1                	or	a5,a5,a2
    800010d4:	45ed                	li	a1,27
    800010d6:	4605                	li	a2,1
    800010d8:	00d5ce63          	blt	a1,a3,800010f4 <__addsf3+0x122>
    800010dc:	04000613          	li	a2,64
    800010e0:	00d7d5b3          	srl	a1,a5,a3
    800010e4:	40d606bb          	subw	a3,a2,a3
    800010e8:	00d797b3          	sll	a5,a5,a3
    800010ec:	00f037b3          	snez	a5,a5
    800010f0:	00f5e633          	or	a2,a1,a5
    800010f4:	00e607b3          	add	a5,a2,a4
    800010f8:	bf6d                	j	800010b2 <__addsf3+0xe0>
    800010fa:	00140693          	addi	a3,s0,1
    800010fe:	0fe6f613          	andi	a2,a3,254
    80001102:	ea0d                	bnez	a2,80001134 <__addsf3+0x162>
    80001104:	ec19                	bnez	s0,80001122 <__addsf3+0x150>
    80001106:	1a078763          	beqz	a5,800012b4 <__addsf3+0x2e2>
    8000110a:	d739                	beqz	a4,80001058 <__addsf3+0x86>
    8000110c:	97ba                	add	a5,a5,a4
    8000110e:	04000737          	lui	a4,0x4000
    80001112:	8f7d                	and	a4,a4,a5
    80001114:	d331                	beqz	a4,80001058 <__addsf3+0x86>
    80001116:	fc000737          	lui	a4,0xfc000
    8000111a:	177d                	addi	a4,a4,-1
    8000111c:	8ff9                	and	a5,a5,a4
    8000111e:	4405                	li	s0,1
    80001120:	bf25                	j	80001058 <__addsf3+0x86>
    80001122:	dfd1                	beqz	a5,800010be <__addsf3+0xec>
    80001124:	12070163          	beqz	a4,80001246 <__addsf3+0x274>
    80001128:	4481                	li	s1,0
    8000112a:	020007b7          	lui	a5,0x2000
    8000112e:	0ff00413          	li	s0,255
    80001132:	a271                	j	800012be <__addsf3+0x2ec>
    80001134:	0ff00613          	li	a2,255
    80001138:	18c68063          	beq	a3,a2,800012b8 <__addsf3+0x2e6>
    8000113c:	97ba                	add	a5,a5,a4
    8000113e:	8385                	srli	a5,a5,0x1
    80001140:	8436                	mv	s0,a3
    80001142:	bf19                	j	80001058 <__addsf3+0x86>
    80001144:	06c05063          	blez	a2,800011a4 <__addsf3+0x1d2>
    80001148:	e531                	bnez	a0,80001194 <__addsf3+0x1c2>
    8000114a:	d719                	beqz	a4,80001058 <__addsf3+0x86>
    8000114c:	fff6861b          	addiw	a2,a3,-1
    80001150:	ee01                	bnez	a2,80001168 <__addsf3+0x196>
    80001152:	8f99                	sub	a5,a5,a4
    80001154:	04000937          	lui	s2,0x4000
    80001158:	0127f733          	and	a4,a5,s2
    8000115c:	ee070ee3          	beqz	a4,80001058 <__addsf3+0x86>
    80001160:	197d                	addi	s2,s2,-1
    80001162:	0127f933          	and	s2,a5,s2
    80001166:	a8ed                	j	80001260 <__addsf3+0x28e>
    80001168:	0ff00693          	li	a3,255
    8000116c:	eed406e3          	beq	s0,a3,80001058 <__addsf3+0x86>
    80001170:	45ed                	li	a1,27
    80001172:	4685                	li	a3,1
    80001174:	00c5ce63          	blt	a1,a2,80001190 <__addsf3+0x1be>
    80001178:	04000693          	li	a3,64
    8000117c:	00c755b3          	srl	a1,a4,a2
    80001180:	40c6863b          	subw	a2,a3,a2
    80001184:	00c71733          	sll	a4,a4,a2
    80001188:	00e03733          	snez	a4,a4
    8000118c:	00e5e6b3          	or	a3,a1,a4
    80001190:	8f95                	sub	a5,a5,a3
    80001192:	b7c9                	j	80001154 <__addsf3+0x182>
    80001194:	0ff00693          	li	a3,255
    80001198:	ecd400e3          	beq	s0,a3,80001058 <__addsf3+0x86>
    8000119c:	040006b7          	lui	a3,0x4000
    800011a0:	8f55                	or	a4,a4,a3
    800011a2:	b7f9                	j	80001170 <__addsf3+0x19e>
    800011a4:	c22d                	beqz	a2,80001206 <__addsf3+0x234>
    800011a6:	e405                	bnez	s0,800011ce <__addsf3+0x1fc>
    800011a8:	16078163          	beqz	a5,8000130a <__addsf3+0x338>
    800011ac:	fff6c693          	not	a3,a3
    800011b0:	2681                	sext.w	a3,a3
    800011b2:	e691                	bnez	a3,800011be <__addsf3+0x1ec>
    800011b4:	40f707b3          	sub	a5,a4,a5
    800011b8:	842a                	mv	s0,a0
    800011ba:	84ae                	mv	s1,a1
    800011bc:	bf61                	j	80001154 <__addsf3+0x182>
    800011be:	0ff00613          	li	a2,255
    800011c2:	00c51f63          	bne	a0,a2,800011e0 <__addsf3+0x20e>
    800011c6:	87ba                	mv	a5,a4
    800011c8:	0ff00413          	li	s0,255
    800011cc:	a0b9                	j	8000121a <__addsf3+0x248>
    800011ce:	0ff00613          	li	a2,255
    800011d2:	fec50ae3          	beq	a0,a2,800011c6 <__addsf3+0x1f4>
    800011d6:	04000637          	lui	a2,0x4000
    800011da:	40d006bb          	negw	a3,a3
    800011de:	8fd1                	or	a5,a5,a2
    800011e0:	486d                	li	a6,27
    800011e2:	4605                	li	a2,1
    800011e4:	00d84e63          	blt	a6,a3,80001200 <__addsf3+0x22e>
    800011e8:	04000613          	li	a2,64
    800011ec:	00d7d833          	srl	a6,a5,a3
    800011f0:	40d606bb          	subw	a3,a2,a3
    800011f4:	00d797b3          	sll	a5,a5,a3
    800011f8:	00f037b3          	snez	a5,a5
    800011fc:	00f86633          	or	a2,a6,a5
    80001200:	40c707b3          	sub	a5,a4,a2
    80001204:	bf55                	j	800011b8 <__addsf3+0x1e6>
    80001206:	00140693          	addi	a3,s0,1
    8000120a:	0fe6f693          	andi	a3,a3,254
    8000120e:	ee9d                	bnez	a3,8000124c <__addsf3+0x27a>
    80001210:	e40d                	bnez	s0,8000123a <__addsf3+0x268>
    80001212:	e791                	bnez	a5,8000121e <__addsf3+0x24c>
    80001214:	4481                	li	s1,0
    80001216:	c745                	beqz	a4,800012be <__addsf3+0x2ec>
    80001218:	87ba                	mv	a5,a4
    8000121a:	84ae                	mv	s1,a1
    8000121c:	bd35                	j	80001058 <__addsf3+0x86>
    8000121e:	e2070de3          	beqz	a4,80001058 <__addsf3+0x86>
    80001222:	40e786b3          	sub	a3,a5,a4
    80001226:	04000637          	lui	a2,0x4000
    8000122a:	8e75                	and	a2,a2,a3
    8000122c:	40f707b3          	sub	a5,a4,a5
    80001230:	f66d                	bnez	a2,8000121a <__addsf3+0x248>
    80001232:	4781                	li	a5,0
    80001234:	c6a5                	beqz	a3,8000129c <__addsf3+0x2ca>
    80001236:	87b6                	mv	a5,a3
    80001238:	b505                	j	80001058 <__addsf3+0x86>
    8000123a:	ee0795e3          	bnez	a5,80001124 <__addsf3+0x152>
    8000123e:	ee0705e3          	beqz	a4,80001128 <__addsf3+0x156>
    80001242:	87ba                	mv	a5,a4
    80001244:	84ae                	mv	s1,a1
    80001246:	0ff00413          	li	s0,255
    8000124a:	b539                	j	80001058 <__addsf3+0x86>
    8000124c:	40e78933          	sub	s2,a5,a4
    80001250:	040006b7          	lui	a3,0x4000
    80001254:	00d976b3          	and	a3,s2,a3
    80001258:	ce95                	beqz	a3,80001294 <__addsf3+0x2c2>
    8000125a:	40f70933          	sub	s2,a4,a5
    8000125e:	84ae                	mv	s1,a1
    80001260:	854a                	mv	a0,s2
    80001262:	f43fe0ef          	jal	ra,800001a4 <__clzdi2>
    80001266:	fdb5079b          	addiw	a5,a0,-37
    8000126a:	00f91933          	sll	s2,s2,a5
    8000126e:	0287c963          	blt	a5,s0,800012a0 <__addsf3+0x2ce>
    80001272:	4087853b          	subw	a0,a5,s0
    80001276:	2505                	addiw	a0,a0,1
    80001278:	04000413          	li	s0,64
    8000127c:	00a957b3          	srl	a5,s2,a0
    80001280:	40a4053b          	subw	a0,s0,a0
    80001284:	00a91933          	sll	s2,s2,a0
    80001288:	01203933          	snez	s2,s2
    8000128c:	0127e7b3          	or	a5,a5,s2
    80001290:	4401                	li	s0,0
    80001292:	b3d9                	j	80001058 <__addsf3+0x86>
    80001294:	fc0916e3          	bnez	s2,80001260 <__addsf3+0x28e>
    80001298:	4781                	li	a5,0
    8000129a:	4401                	li	s0,0
    8000129c:	4481                	li	s1,0
    8000129e:	a005                	j	800012be <__addsf3+0x2ec>
    800012a0:	8c1d                	sub	s0,s0,a5
    800012a2:	fc0007b7          	lui	a5,0xfc000
    800012a6:	17fd                	addi	a5,a5,-1
    800012a8:	00f977b3          	and	a5,s2,a5
    800012ac:	b375                	j	80001058 <__addsf3+0x86>
    800012ae:	87ba                	mv	a5,a4
    800012b0:	842a                	mv	s0,a0
    800012b2:	b35d                	j	80001058 <__addsf3+0x86>
    800012b4:	87ba                	mv	a5,a4
    800012b6:	b34d                	j	80001058 <__addsf3+0x86>
    800012b8:	0ff00413          	li	s0,255
    800012bc:	4781                	li	a5,0
    800012be:	04000737          	lui	a4,0x4000
    800012c2:	8f7d                	and	a4,a4,a5
    800012c4:	cb11                	beqz	a4,800012d8 <__addsf3+0x306>
    800012c6:	0405                	addi	s0,s0,1
    800012c8:	0ff00713          	li	a4,255
    800012cc:	04e40263          	beq	s0,a4,80001310 <__addsf3+0x33e>
    800012d0:	fc000737          	lui	a4,0xfc000
    800012d4:	177d                	addi	a4,a4,-1
    800012d6:	8ff9                	and	a5,a5,a4
    800012d8:	0ff00713          	li	a4,255
    800012dc:	838d                	srli	a5,a5,0x3
    800012de:	00e41663          	bne	s0,a4,800012ea <__addsf3+0x318>
    800012e2:	c781                	beqz	a5,800012ea <__addsf3+0x318>
    800012e4:	004007b7          	lui	a5,0x400
    800012e8:	4481                	li	s1,0
    800012ea:	0ff47413          	andi	s0,s0,255
    800012ee:	17a6                	slli	a5,a5,0x29
    800012f0:	0174141b          	slliw	s0,s0,0x17
    800012f4:	93a5                	srli	a5,a5,0x29
    800012f6:	60e2                	ld	ra,24(sp)
    800012f8:	8fc1                	or	a5,a5,s0
    800012fa:	6442                	ld	s0,16(sp)
    800012fc:	01f4951b          	slliw	a0,s1,0x1f
    80001300:	6902                	ld	s2,0(sp)
    80001302:	64a2                	ld	s1,8(sp)
    80001304:	8d5d                	or	a0,a0,a5
    80001306:	6105                	addi	sp,sp,32
    80001308:	8082                	ret
    8000130a:	87ba                	mv	a5,a4
    8000130c:	842a                	mv	s0,a0
    8000130e:	b731                	j	8000121a <__addsf3+0x248>
    80001310:	4781                	li	a5,0
    80001312:	b7d9                	j	800012d8 <__addsf3+0x306>

0000000080001314 <__divsf3>:
    80001314:	7139                	addi	sp,sp,-64
    80001316:	f426                	sd	s1,40(sp)
    80001318:	0175549b          	srliw	s1,a0,0x17
    8000131c:	f04a                	sd	s2,32(sp)
    8000131e:	ec4e                	sd	s3,24(sp)
    80001320:	e852                	sd	s4,16(sp)
    80001322:	02951993          	slli	s3,a0,0x29
    80001326:	fc06                	sd	ra,56(sp)
    80001328:	f822                	sd	s0,48(sp)
    8000132a:	e456                	sd	s5,8(sp)
    8000132c:	0ff4f493          	andi	s1,s1,255
    80001330:	8a2e                	mv	s4,a1
    80001332:	0299d993          	srli	s3,s3,0x29
    80001336:	01f5591b          	srliw	s2,a0,0x1f
    8000133a:	c4ad                	beqz	s1,800013a4 <__divsf3+0x90>
    8000133c:	0ff00793          	li	a5,255
    80001340:	08f48063          	beq	s1,a5,800013c0 <__divsf3+0xac>
    80001344:	098e                	slli	s3,s3,0x3
    80001346:	040007b7          	lui	a5,0x4000
    8000134a:	00f9e9b3          	or	s3,s3,a5
    8000134e:	f8148493          	addi	s1,s1,-127
    80001352:	4a81                	li	s5,0
    80001354:	017a579b          	srliw	a5,s4,0x17
    80001358:	029a1413          	slli	s0,s4,0x29
    8000135c:	0ff7f793          	andi	a5,a5,255
    80001360:	9025                	srli	s0,s0,0x29
    80001362:	01fa5a1b          	srliw	s4,s4,0x1f
    80001366:	c7bd                	beqz	a5,800013d4 <__divsf3+0xc0>
    80001368:	0ff00713          	li	a4,255
    8000136c:	08e78163          	beq	a5,a4,800013ee <__divsf3+0xda>
    80001370:	040e                	slli	s0,s0,0x3
    80001372:	04000737          	lui	a4,0x4000
    80001376:	8c59                	or	s0,s0,a4
    80001378:	f8178793          	addi	a5,a5,-127 # 3ffff81 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676901>
    8000137c:	4701                	li	a4,0
    8000137e:	8c9d                	sub	s1,s1,a5
    80001380:	002a9793          	slli	a5,s5,0x2
    80001384:	8fd9                	or	a5,a5,a4
    80001386:	17fd                	addi	a5,a5,-1
    80001388:	46b9                	li	a3,14
    8000138a:	01494533          	xor	a0,s2,s4
    8000138e:	06f6e963          	bltu	a3,a5,80001400 <__divsf3+0xec>
    80001392:	0000e697          	auipc	a3,0xe
    80001396:	26668693          	addi	a3,a3,614 # 8000f5f8 <__clz_tab+0x178>
    8000139a:	078a                	slli	a5,a5,0x2
    8000139c:	97b6                	add	a5,a5,a3
    8000139e:	439c                	lw	a5,0(a5)
    800013a0:	97b6                	add	a5,a5,a3
    800013a2:	8782                	jr	a5
    800013a4:	02098563          	beqz	s3,800013ce <__divsf3+0xba>
    800013a8:	854e                	mv	a0,s3
    800013aa:	dfbfe0ef          	jal	ra,800001a4 <__clzdi2>
    800013ae:	fdb5079b          	addiw	a5,a0,-37
    800013b2:	0565051b          	addiw	a0,a0,86
    800013b6:	00f999b3          	sll	s3,s3,a5
    800013ba:	40a004b3          	neg	s1,a0
    800013be:	bf51                	j	80001352 <__divsf3+0x3e>
    800013c0:	0ff00493          	li	s1,255
    800013c4:	4a89                	li	s5,2
    800013c6:	f80987e3          	beqz	s3,80001354 <__divsf3+0x40>
    800013ca:	4a8d                	li	s5,3
    800013cc:	b761                	j	80001354 <__divsf3+0x40>
    800013ce:	4481                	li	s1,0
    800013d0:	4a85                	li	s5,1
    800013d2:	b749                	j	80001354 <__divsf3+0x40>
    800013d4:	c01d                	beqz	s0,800013fa <__divsf3+0xe6>
    800013d6:	8522                	mv	a0,s0
    800013d8:	dcdfe0ef          	jal	ra,800001a4 <__clzdi2>
    800013dc:	fdb5079b          	addiw	a5,a0,-37
    800013e0:	0565051b          	addiw	a0,a0,86
    800013e4:	00f41433          	sll	s0,s0,a5
    800013e8:	40a007b3          	neg	a5,a0
    800013ec:	bf41                	j	8000137c <__divsf3+0x68>
    800013ee:	0ff00793          	li	a5,255
    800013f2:	4709                	li	a4,2
    800013f4:	d449                	beqz	s0,8000137e <__divsf3+0x6a>
    800013f6:	470d                	li	a4,3
    800013f8:	b759                	j	8000137e <__divsf3+0x6a>
    800013fa:	4781                	li	a5,0
    800013fc:	4705                	li	a4,1
    800013fe:	b741                	j	8000137e <__divsf3+0x6a>
    80001400:	47e9                	li	a5,26
    80001402:	0089f463          	bgeu	s3,s0,8000140a <__divsf3+0xf6>
    80001406:	14fd                	addi	s1,s1,-1
    80001408:	47ed                	li	a5,27
    8000140a:	00f999b3          	sll	s3,s3,a5
    8000140e:	0289f7b3          	remu	a5,s3,s0
    80001412:	0289d9b3          	divu	s3,s3,s0
    80001416:	00f037b3          	snez	a5,a5
    8000141a:	0137e433          	or	s0,a5,s3
    8000141e:	07f48793          	addi	a5,s1,127
    80001422:	08f05463          	blez	a5,800014aa <__divsf3+0x196>
    80001426:	00747713          	andi	a4,s0,7
    8000142a:	c719                	beqz	a4,80001438 <__divsf3+0x124>
    8000142c:	00f47713          	andi	a4,s0,15
    80001430:	4691                	li	a3,4
    80001432:	00d70363          	beq	a4,a3,80001438 <__divsf3+0x124>
    80001436:	0411                	addi	s0,s0,4
    80001438:	08000737          	lui	a4,0x8000
    8000143c:	8f61                	and	a4,a4,s0
    8000143e:	c719                	beqz	a4,8000144c <__divsf3+0x138>
    80001440:	f80007b7          	lui	a5,0xf8000
    80001444:	17fd                	addi	a5,a5,-1
    80001446:	8c7d                	and	s0,s0,a5
    80001448:	08048793          	addi	a5,s1,128
    8000144c:	0fe00713          	li	a4,254
    80001450:	04f74263          	blt	a4,a5,80001494 <__divsf3+0x180>
    80001454:	800d                	srli	s0,s0,0x3
    80001456:	0ff7f793          	andi	a5,a5,255
    8000145a:	1426                	slli	s0,s0,0x29
    8000145c:	0177979b          	slliw	a5,a5,0x17
    80001460:	9025                	srli	s0,s0,0x29
    80001462:	8c5d                	or	s0,s0,a5
    80001464:	01f5151b          	slliw	a0,a0,0x1f
    80001468:	70e2                	ld	ra,56(sp)
    8000146a:	8d41                	or	a0,a0,s0
    8000146c:	7442                	ld	s0,48(sp)
    8000146e:	74a2                	ld	s1,40(sp)
    80001470:	7902                	ld	s2,32(sp)
    80001472:	69e2                	ld	s3,24(sp)
    80001474:	6a42                	ld	s4,16(sp)
    80001476:	6aa2                	ld	s5,8(sp)
    80001478:	6121                	addi	sp,sp,64
    8000147a:	8082                	ret
    8000147c:	854a                	mv	a0,s2
    8000147e:	844e                	mv	s0,s3
    80001480:	8756                	mv	a4,s5
    80001482:	478d                	li	a5,3
    80001484:	06f70363          	beq	a4,a5,800014ea <__divsf3+0x1d6>
    80001488:	4785                	li	a5,1
    8000148a:	06f70663          	beq	a4,a5,800014f6 <__divsf3+0x1e2>
    8000148e:	4789                	li	a5,2
    80001490:	f8f717e3          	bne	a4,a5,8000141e <__divsf3+0x10a>
    80001494:	4401                	li	s0,0
    80001496:	0ff00793          	li	a5,255
    8000149a:	bf75                	j	80001456 <__divsf3+0x142>
    8000149c:	8552                	mv	a0,s4
    8000149e:	b7d5                	j	80001482 <__divsf3+0x16e>
    800014a0:	00400437          	lui	s0,0x400
    800014a4:	4501                	li	a0,0
    800014a6:	470d                	li	a4,3
    800014a8:	bfe9                	j	80001482 <__divsf3+0x16e>
    800014aa:	4705                	li	a4,1
    800014ac:	8f1d                	sub	a4,a4,a5
    800014ae:	47ed                	li	a5,27
    800014b0:	04e7c363          	blt	a5,a4,800014f6 <__divsf3+0x1e2>
    800014b4:	04000693          	li	a3,64
    800014b8:	00e457b3          	srl	a5,s0,a4
    800014bc:	40e6873b          	subw	a4,a3,a4
    800014c0:	00e41433          	sll	s0,s0,a4
    800014c4:	00803433          	snez	s0,s0
    800014c8:	8c5d                	or	s0,s0,a5
    800014ca:	00747793          	andi	a5,s0,7
    800014ce:	c799                	beqz	a5,800014dc <__divsf3+0x1c8>
    800014d0:	00f47793          	andi	a5,s0,15
    800014d4:	4711                	li	a4,4
    800014d6:	00e78363          	beq	a5,a4,800014dc <__divsf3+0x1c8>
    800014da:	0411                	addi	s0,s0,4
    800014dc:	040007b7          	lui	a5,0x4000
    800014e0:	8fe1                	and	a5,a5,s0
    800014e2:	dbad                	beqz	a5,80001454 <__divsf3+0x140>
    800014e4:	4401                	li	s0,0
    800014e6:	4785                	li	a5,1
    800014e8:	b7bd                	j	80001456 <__divsf3+0x142>
    800014ea:	00400437          	lui	s0,0x400
    800014ee:	0ff00793          	li	a5,255
    800014f2:	4501                	li	a0,0
    800014f4:	b78d                	j	80001456 <__divsf3+0x142>
    800014f6:	4401                	li	s0,0
    800014f8:	4781                	li	a5,0
    800014fa:	bfb1                	j	80001456 <__divsf3+0x142>

00000000800014fc <__eqsf2>:
    800014fc:	008007b7          	lui	a5,0x800
    80001500:	17fd                	addi	a5,a5,-1
    80001502:	00a7f833          	and	a6,a5,a0
    80001506:	0175561b          	srliw	a2,a0,0x17
    8000150a:	8fed                	and	a5,a5,a1
    8000150c:	0175d89b          	srliw	a7,a1,0x17
    80001510:	1802                	slli	a6,a6,0x20
    80001512:	1782                	slli	a5,a5,0x20
    80001514:	0ff67613          	andi	a2,a2,255
    80001518:	0ff00693          	li	a3,255
    8000151c:	02085813          	srli	a6,a6,0x20
    80001520:	01f5571b          	srliw	a4,a0,0x1f
    80001524:	9381                	srli	a5,a5,0x20
    80001526:	0ff8f893          	andi	a7,a7,255
    8000152a:	01f5d59b          	srliw	a1,a1,0x1f
    8000152e:	00d61a63          	bne	a2,a3,80001542 <__eqsf2+0x46>
    80001532:	4505                	li	a0,1
    80001534:	02081a63          	bnez	a6,80001568 <__eqsf2+0x6c>
    80001538:	4685                	li	a3,1
    8000153a:	02c89263          	bne	a7,a2,8000155e <__eqsf2+0x62>
    8000153e:	cb89                	beqz	a5,80001550 <__eqsf2+0x54>
    80001540:	8082                	ret
    80001542:	02d88063          	beq	a7,a3,80001562 <__eqsf2+0x66>
    80001546:	4685                	li	a3,1
    80001548:	01161b63          	bne	a2,a7,8000155e <__eqsf2+0x62>
    8000154c:	00f81963          	bne	a6,a5,8000155e <__eqsf2+0x62>
    80001550:	4681                	li	a3,0
    80001552:	00b70663          	beq	a4,a1,8000155e <__eqsf2+0x62>
    80001556:	4685                	li	a3,1
    80001558:	e219                	bnez	a2,8000155e <__eqsf2+0x62>
    8000155a:	010036b3          	snez	a3,a6
    8000155e:	8536                	mv	a0,a3
    80001560:	8082                	ret
    80001562:	4505                	li	a0,1
    80001564:	4685                	li	a3,1
    80001566:	dfe5                	beqz	a5,8000155e <__eqsf2+0x62>
    80001568:	8082                	ret

000000008000156a <__gesf2>:
    8000156a:	008007b7          	lui	a5,0x800
    8000156e:	17fd                	addi	a5,a5,-1
    80001570:	00a7f6b3          	and	a3,a5,a0
    80001574:	0175561b          	srliw	a2,a0,0x17
    80001578:	8fed                	and	a5,a5,a1
    8000157a:	0175d71b          	srliw	a4,a1,0x17
    8000157e:	1682                	slli	a3,a3,0x20
    80001580:	1782                	slli	a5,a5,0x20
    80001582:	0ff67613          	andi	a2,a2,255
    80001586:	0ff00813          	li	a6,255
    8000158a:	9281                	srli	a3,a3,0x20
    8000158c:	01f5551b          	srliw	a0,a0,0x1f
    80001590:	9381                	srli	a5,a5,0x20
    80001592:	0ff77713          	andi	a4,a4,255
    80001596:	01f5d59b          	srliw	a1,a1,0x1f
    8000159a:	01061563          	bne	a2,a6,800015a4 <__gesf2+0x3a>
    8000159e:	c2b9                	beqz	a3,800015e4 <__gesf2+0x7a>
    800015a0:	5579                	li	a0,-2
    800015a2:	8082                	ret
    800015a4:	01071363          	bne	a4,a6,800015aa <__gesf2+0x40>
    800015a8:	ffe5                	bnez	a5,800015a0 <__gesf2+0x36>
    800015aa:	ee1d                	bnez	a2,800015e8 <__gesf2+0x7e>
    800015ac:	e311                	bnez	a4,800015b0 <__gesf2+0x46>
    800015ae:	cb8d                	beqz	a5,800015e0 <__gesf2+0x76>
    800015b0:	ca81                	beqz	a3,800015c0 <__gesf2+0x56>
    800015b2:	00b51463          	bne	a0,a1,800015ba <__gesf2+0x50>
    800015b6:	00c75963          	bge	a4,a2,800015c8 <__gesf2+0x5e>
    800015ba:	c10d                	beqz	a0,800015dc <__gesf2+0x72>
    800015bc:	557d                	li	a0,-1
    800015be:	8082                	ret
    800015c0:	557d                	li	a0,-1
    800015c2:	c591                	beqz	a1,800015ce <__gesf2+0x64>
    800015c4:	852e                	mv	a0,a1
    800015c6:	8082                	ret
    800015c8:	00e65463          	bge	a2,a4,800015d0 <__gesf2+0x66>
    800015cc:	d965                	beqz	a0,800015bc <__gesf2+0x52>
    800015ce:	8082                	ret
    800015d0:	fed7e5e3          	bltu	a5,a3,800015ba <__gesf2+0x50>
    800015d4:	fef6ece3          	bltu	a3,a5,800015cc <__gesf2+0x62>
    800015d8:	4501                	li	a0,0
    800015da:	8082                	ret
    800015dc:	4505                	li	a0,1
    800015de:	8082                	ret
    800015e0:	dee5                	beqz	a3,800015d8 <__gesf2+0x6e>
    800015e2:	bfe1                	j	800015ba <__gesf2+0x50>
    800015e4:	fcc702e3          	beq	a4,a2,800015a8 <__gesf2+0x3e>
    800015e8:	f769                	bnez	a4,800015b2 <__gesf2+0x48>
    800015ea:	dbe1                	beqz	a5,800015ba <__gesf2+0x50>
    800015ec:	b7d9                	j	800015b2 <__gesf2+0x48>

00000000800015ee <__lesf2>:
    800015ee:	008007b7          	lui	a5,0x800
    800015f2:	17fd                	addi	a5,a5,-1
    800015f4:	00a7f6b3          	and	a3,a5,a0
    800015f8:	0175561b          	srliw	a2,a0,0x17
    800015fc:	8fed                	and	a5,a5,a1
    800015fe:	0175d71b          	srliw	a4,a1,0x17
    80001602:	1682                	slli	a3,a3,0x20
    80001604:	1782                	slli	a5,a5,0x20
    80001606:	0ff67613          	andi	a2,a2,255
    8000160a:	0ff00813          	li	a6,255
    8000160e:	9281                	srli	a3,a3,0x20
    80001610:	01f5551b          	srliw	a0,a0,0x1f
    80001614:	9381                	srli	a5,a5,0x20
    80001616:	0ff77713          	andi	a4,a4,255
    8000161a:	01f5d59b          	srliw	a1,a1,0x1f
    8000161e:	01061563          	bne	a2,a6,80001628 <__lesf2+0x3a>
    80001622:	c2b9                	beqz	a3,80001668 <__lesf2+0x7a>
    80001624:	4509                	li	a0,2
    80001626:	8082                	ret
    80001628:	01071363          	bne	a4,a6,8000162e <__lesf2+0x40>
    8000162c:	ffe5                	bnez	a5,80001624 <__lesf2+0x36>
    8000162e:	ee1d                	bnez	a2,8000166c <__lesf2+0x7e>
    80001630:	e311                	bnez	a4,80001634 <__lesf2+0x46>
    80001632:	cb8d                	beqz	a5,80001664 <__lesf2+0x76>
    80001634:	ca81                	beqz	a3,80001644 <__lesf2+0x56>
    80001636:	00b51463          	bne	a0,a1,8000163e <__lesf2+0x50>
    8000163a:	00c75963          	bge	a4,a2,8000164c <__lesf2+0x5e>
    8000163e:	c10d                	beqz	a0,80001660 <__lesf2+0x72>
    80001640:	557d                	li	a0,-1
    80001642:	8082                	ret
    80001644:	557d                	li	a0,-1
    80001646:	c591                	beqz	a1,80001652 <__lesf2+0x64>
    80001648:	852e                	mv	a0,a1
    8000164a:	8082                	ret
    8000164c:	00e65463          	bge	a2,a4,80001654 <__lesf2+0x66>
    80001650:	d965                	beqz	a0,80001640 <__lesf2+0x52>
    80001652:	8082                	ret
    80001654:	fed7e5e3          	bltu	a5,a3,8000163e <__lesf2+0x50>
    80001658:	fef6ece3          	bltu	a3,a5,80001650 <__lesf2+0x62>
    8000165c:	4501                	li	a0,0
    8000165e:	8082                	ret
    80001660:	4505                	li	a0,1
    80001662:	8082                	ret
    80001664:	dee5                	beqz	a3,8000165c <__lesf2+0x6e>
    80001666:	bfe1                	j	8000163e <__lesf2+0x50>
    80001668:	fcc702e3          	beq	a4,a2,8000162c <__lesf2+0x3e>
    8000166c:	f769                	bnez	a4,80001636 <__lesf2+0x48>
    8000166e:	dbe1                	beqz	a5,8000163e <__lesf2+0x50>
    80001670:	b7d9                	j	80001636 <__lesf2+0x48>

0000000080001672 <__mulsf3>:
    80001672:	7139                	addi	sp,sp,-64
    80001674:	f426                	sd	s1,40(sp)
    80001676:	0175549b          	srliw	s1,a0,0x17
    8000167a:	f822                	sd	s0,48(sp)
    8000167c:	f04a                	sd	s2,32(sp)
    8000167e:	ec4e                	sd	s3,24(sp)
    80001680:	e852                	sd	s4,16(sp)
    80001682:	02951413          	slli	s0,a0,0x29
    80001686:	fc06                	sd	ra,56(sp)
    80001688:	e456                	sd	s5,8(sp)
    8000168a:	0ff4f493          	andi	s1,s1,255
    8000168e:	8a2e                	mv	s4,a1
    80001690:	02945993          	srli	s3,s0,0x29
    80001694:	01f5591b          	srliw	s2,a0,0x1f
    80001698:	c8a5                	beqz	s1,80001708 <__mulsf3+0x96>
    8000169a:	0ff00793          	li	a5,255
    8000169e:	08f48363          	beq	s1,a5,80001724 <__mulsf3+0xb2>
    800016a2:	00399413          	slli	s0,s3,0x3
    800016a6:	040007b7          	lui	a5,0x4000
    800016aa:	00f469b3          	or	s3,s0,a5
    800016ae:	f8148493          	addi	s1,s1,-127
    800016b2:	4a81                	li	s5,0
    800016b4:	017a579b          	srliw	a5,s4,0x17
    800016b8:	029a1413          	slli	s0,s4,0x29
    800016bc:	0ff7f793          	andi	a5,a5,255
    800016c0:	9025                	srli	s0,s0,0x29
    800016c2:	01fa5a1b          	srliw	s4,s4,0x1f
    800016c6:	cbad                	beqz	a5,80001738 <__mulsf3+0xc6>
    800016c8:	0ff00713          	li	a4,255
    800016cc:	08e78363          	beq	a5,a4,80001752 <__mulsf3+0xe0>
    800016d0:	040e                	slli	s0,s0,0x3
    800016d2:	04000737          	lui	a4,0x4000
    800016d6:	8c59                	or	s0,s0,a4
    800016d8:	f8178793          	addi	a5,a5,-127 # 3ffff81 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676901>
    800016dc:	4701                	li	a4,0
    800016de:	94be                	add	s1,s1,a5
    800016e0:	002a9793          	slli	a5,s5,0x2
    800016e4:	8fd9                	or	a5,a5,a4
    800016e6:	17fd                	addi	a5,a5,-1
    800016e8:	4639                	li	a2,14
    800016ea:	01494533          	xor	a0,s2,s4
    800016ee:	00148693          	addi	a3,s1,1
    800016f2:	06f66963          	bltu	a2,a5,80001764 <__mulsf3+0xf2>
    800016f6:	0000e617          	auipc	a2,0xe
    800016fa:	f3e60613          	addi	a2,a2,-194 # 8000f634 <__clz_tab+0x1b4>
    800016fe:	078a                	slli	a5,a5,0x2
    80001700:	97b2                	add	a5,a5,a2
    80001702:	439c                	lw	a5,0(a5)
    80001704:	97b2                	add	a5,a5,a2
    80001706:	8782                	jr	a5
    80001708:	02098563          	beqz	s3,80001732 <__mulsf3+0xc0>
    8000170c:	854e                	mv	a0,s3
    8000170e:	a97fe0ef          	jal	ra,800001a4 <__clzdi2>
    80001712:	fdb5079b          	addiw	a5,a0,-37
    80001716:	0565051b          	addiw	a0,a0,86
    8000171a:	00f999b3          	sll	s3,s3,a5
    8000171e:	40a004b3          	neg	s1,a0
    80001722:	bf41                	j	800016b2 <__mulsf3+0x40>
    80001724:	0ff00493          	li	s1,255
    80001728:	4a89                	li	s5,2
    8000172a:	f80985e3          	beqz	s3,800016b4 <__mulsf3+0x42>
    8000172e:	4a8d                	li	s5,3
    80001730:	b751                	j	800016b4 <__mulsf3+0x42>
    80001732:	4481                	li	s1,0
    80001734:	4a85                	li	s5,1
    80001736:	bfbd                	j	800016b4 <__mulsf3+0x42>
    80001738:	c01d                	beqz	s0,8000175e <__mulsf3+0xec>
    8000173a:	8522                	mv	a0,s0
    8000173c:	a69fe0ef          	jal	ra,800001a4 <__clzdi2>
    80001740:	fdb5079b          	addiw	a5,a0,-37
    80001744:	0565051b          	addiw	a0,a0,86
    80001748:	00f41433          	sll	s0,s0,a5
    8000174c:	40a007b3          	neg	a5,a0
    80001750:	b771                	j	800016dc <__mulsf3+0x6a>
    80001752:	0ff00793          	li	a5,255
    80001756:	4709                	li	a4,2
    80001758:	d059                	beqz	s0,800016de <__mulsf3+0x6c>
    8000175a:	470d                	li	a4,3
    8000175c:	b749                	j	800016de <__mulsf3+0x6c>
    8000175e:	4781                	li	a5,0
    80001760:	4705                	li	a4,1
    80001762:	bfb5                	j	800016de <__mulsf3+0x6c>
    80001764:	02898433          	mul	s0,s3,s0
    80001768:	01a45793          	srli	a5,s0,0x1a
    8000176c:	141a                	slli	s0,s0,0x26
    8000176e:	00803433          	snez	s0,s0
    80001772:	8c5d                	or	s0,s0,a5
    80001774:	080007b7          	lui	a5,0x8000
    80001778:	8fe1                	and	a5,a5,s0
    8000177a:	c7c9                	beqz	a5,80001804 <__mulsf3+0x192>
    8000177c:	00145793          	srli	a5,s0,0x1
    80001780:	8805                	andi	s0,s0,1
    80001782:	8c5d                	or	s0,s0,a5
    80001784:	07f68793          	addi	a5,a3,127
    80001788:	08f05063          	blez	a5,80001808 <__mulsf3+0x196>
    8000178c:	00747713          	andi	a4,s0,7
    80001790:	c719                	beqz	a4,8000179e <__mulsf3+0x12c>
    80001792:	00f47713          	andi	a4,s0,15
    80001796:	4611                	li	a2,4
    80001798:	00c70363          	beq	a4,a2,8000179e <__mulsf3+0x12c>
    8000179c:	0411                	addi	s0,s0,4
    8000179e:	08000737          	lui	a4,0x8000
    800017a2:	8f61                	and	a4,a4,s0
    800017a4:	c719                	beqz	a4,800017b2 <__mulsf3+0x140>
    800017a6:	f80007b7          	lui	a5,0xf8000
    800017aa:	17fd                	addi	a5,a5,-1
    800017ac:	8c7d                	and	s0,s0,a5
    800017ae:	08068793          	addi	a5,a3,128
    800017b2:	0fe00713          	li	a4,254
    800017b6:	08f74f63          	blt	a4,a5,80001854 <__mulsf3+0x1e2>
    800017ba:	800d                	srli	s0,s0,0x3
    800017bc:	0ff7f793          	andi	a5,a5,255
    800017c0:	1426                	slli	s0,s0,0x29
    800017c2:	0177979b          	slliw	a5,a5,0x17
    800017c6:	9025                	srli	s0,s0,0x29
    800017c8:	8c5d                	or	s0,s0,a5
    800017ca:	01f5151b          	slliw	a0,a0,0x1f
    800017ce:	70e2                	ld	ra,56(sp)
    800017d0:	8d41                	or	a0,a0,s0
    800017d2:	7442                	ld	s0,48(sp)
    800017d4:	74a2                	ld	s1,40(sp)
    800017d6:	7902                	ld	s2,32(sp)
    800017d8:	69e2                	ld	s3,24(sp)
    800017da:	6a42                	ld	s4,16(sp)
    800017dc:	6aa2                	ld	s5,8(sp)
    800017de:	6121                	addi	sp,sp,64
    800017e0:	8082                	ret
    800017e2:	854a                	mv	a0,s2
    800017e4:	844e                	mv	s0,s3
    800017e6:	8756                	mv	a4,s5
    800017e8:	4789                	li	a5,2
    800017ea:	06f70563          	beq	a4,a5,80001854 <__mulsf3+0x1e2>
    800017ee:	478d                	li	a5,3
    800017f0:	04f70c63          	beq	a4,a5,80001848 <__mulsf3+0x1d6>
    800017f4:	4785                	li	a5,1
    800017f6:	f8f717e3          	bne	a4,a5,80001784 <__mulsf3+0x112>
    800017fa:	4401                	li	s0,0
    800017fc:	4781                	li	a5,0
    800017fe:	bf7d                	j	800017bc <__mulsf3+0x14a>
    80001800:	8552                	mv	a0,s4
    80001802:	b7dd                	j	800017e8 <__mulsf3+0x176>
    80001804:	86a6                	mv	a3,s1
    80001806:	bfbd                	j	80001784 <__mulsf3+0x112>
    80001808:	4705                	li	a4,1
    8000180a:	8f1d                	sub	a4,a4,a5
    8000180c:	47ed                	li	a5,27
    8000180e:	fee7c6e3          	blt	a5,a4,800017fa <__mulsf3+0x188>
    80001812:	04000693          	li	a3,64
    80001816:	00e457b3          	srl	a5,s0,a4
    8000181a:	40e6873b          	subw	a4,a3,a4
    8000181e:	00e41433          	sll	s0,s0,a4
    80001822:	00803433          	snez	s0,s0
    80001826:	8c5d                	or	s0,s0,a5
    80001828:	00747793          	andi	a5,s0,7
    8000182c:	c799                	beqz	a5,8000183a <__mulsf3+0x1c8>
    8000182e:	00f47793          	andi	a5,s0,15
    80001832:	4711                	li	a4,4
    80001834:	00e78363          	beq	a5,a4,8000183a <__mulsf3+0x1c8>
    80001838:	0411                	addi	s0,s0,4
    8000183a:	040007b7          	lui	a5,0x4000
    8000183e:	8fe1                	and	a5,a5,s0
    80001840:	dfad                	beqz	a5,800017ba <__mulsf3+0x148>
    80001842:	4401                	li	s0,0
    80001844:	4785                	li	a5,1
    80001846:	bf9d                	j	800017bc <__mulsf3+0x14a>
    80001848:	00400437          	lui	s0,0x400
    8000184c:	0ff00793          	li	a5,255
    80001850:	4501                	li	a0,0
    80001852:	b7ad                	j	800017bc <__mulsf3+0x14a>
    80001854:	4401                	li	s0,0
    80001856:	0ff00793          	li	a5,255
    8000185a:	b78d                	j	800017bc <__mulsf3+0x14a>

000000008000185c <__subsf3>:
    8000185c:	00800737          	lui	a4,0x800
    80001860:	177d                	addi	a4,a4,-1
    80001862:	00a777b3          	and	a5,a4,a0
    80001866:	02079693          	slli	a3,a5,0x20
    8000186a:	8f6d                	and	a4,a4,a1
    8000186c:	1101                	addi	sp,sp,-32
    8000186e:	0175d81b          	srliw	a6,a1,0x17
    80001872:	0175561b          	srliw	a2,a0,0x17
    80001876:	01d6d793          	srli	a5,a3,0x1d
    8000187a:	02071693          	slli	a3,a4,0x20
    8000187e:	e822                	sd	s0,16(sp)
    80001880:	e426                	sd	s1,8(sp)
    80001882:	0ff67613          	andi	a2,a2,255
    80001886:	01d6d713          	srli	a4,a3,0x1d
    8000188a:	ec06                	sd	ra,24(sp)
    8000188c:	e04a                	sd	s2,0(sp)
    8000188e:	0ff87813          	andi	a6,a6,255
    80001892:	0ff00693          	li	a3,255
    80001896:	8432                	mv	s0,a2
    80001898:	01f5549b          	srliw	s1,a0,0x1f
    8000189c:	01f5d59b          	srliw	a1,a1,0x1f
    800018a0:	00d81363          	bne	a6,a3,800018a6 <__subsf3+0x4a>
    800018a4:	e319                	bnez	a4,800018aa <__subsf3+0x4e>
    800018a6:	0015c593          	xori	a1,a1,1
    800018aa:	410606bb          	subw	a3,a2,a6
    800018ae:	0006851b          	sext.w	a0,a3
    800018b2:	12959763          	bne	a1,s1,800019e0 <__subsf3+0x184>
    800018b6:	08a05363          	blez	a0,8000193c <__subsf3+0xe0>
    800018ba:	04081863          	bnez	a6,8000190a <__subsf3+0xae>
    800018be:	cb1d                	beqz	a4,800018f4 <__subsf3+0x98>
    800018c0:	fff6851b          	addiw	a0,a3,-1
    800018c4:	e505                	bnez	a0,800018ec <__subsf3+0x90>
    800018c6:	97ba                	add	a5,a5,a4
    800018c8:	04000737          	lui	a4,0x4000
    800018cc:	8f7d                	and	a4,a4,a5
    800018ce:	c31d                	beqz	a4,800018f4 <__subsf3+0x98>
    800018d0:	0405                	addi	s0,s0,1
    800018d2:	0ff00713          	li	a4,255
    800018d6:	28e40263          	beq	s0,a4,80001b5a <__subsf3+0x2fe>
    800018da:	fc000737          	lui	a4,0xfc000
    800018de:	177d                	addi	a4,a4,-1
    800018e0:	0017f693          	andi	a3,a5,1
    800018e4:	8ff9                	and	a5,a5,a4
    800018e6:	8385                	srli	a5,a5,0x1
    800018e8:	8fd5                	or	a5,a5,a3
    800018ea:	a029                	j	800018f4 <__subsf3+0x98>
    800018ec:	0ff00693          	li	a3,255
    800018f0:	02d61463          	bne	a2,a3,80001918 <__subsf3+0xbc>
    800018f4:	0077f713          	andi	a4,a5,7
    800018f8:	26070263          	beqz	a4,80001b5c <__subsf3+0x300>
    800018fc:	00f7f713          	andi	a4,a5,15
    80001900:	4691                	li	a3,4
    80001902:	24d70d63          	beq	a4,a3,80001b5c <__subsf3+0x300>
    80001906:	0791                	addi	a5,a5,4
    80001908:	ac91                	j	80001b5c <__subsf3+0x300>
    8000190a:	0ff00693          	li	a3,255
    8000190e:	fed603e3          	beq	a2,a3,800018f4 <__subsf3+0x98>
    80001912:	040006b7          	lui	a3,0x4000
    80001916:	8f55                	or	a4,a4,a3
    80001918:	466d                	li	a2,27
    8000191a:	4685                	li	a3,1
    8000191c:	00a64e63          	blt	a2,a0,80001938 <__subsf3+0xdc>
    80001920:	04000693          	li	a3,64
    80001924:	00a75633          	srl	a2,a4,a0
    80001928:	40a6853b          	subw	a0,a3,a0
    8000192c:	00a71733          	sll	a4,a4,a0
    80001930:	00e03733          	snez	a4,a4
    80001934:	00e666b3          	or	a3,a2,a4
    80001938:	97b6                	add	a5,a5,a3
    8000193a:	b779                	j	800018c8 <__subsf3+0x6c>
    8000193c:	cd29                	beqz	a0,80001996 <__subsf3+0x13a>
    8000193e:	e205                	bnez	a2,8000195e <__subsf3+0x102>
    80001940:	20078663          	beqz	a5,80001b4c <__subsf3+0x2f0>
    80001944:	fff6c693          	not	a3,a3
    80001948:	2681                	sext.w	a3,a3
    8000194a:	e681                	bnez	a3,80001952 <__subsf3+0xf6>
    8000194c:	97ba                	add	a5,a5,a4
    8000194e:	8442                	mv	s0,a6
    80001950:	bfa5                	j	800018c8 <__subsf3+0x6c>
    80001952:	0ff00613          	li	a2,255
    80001956:	00c81d63          	bne	a6,a2,80001970 <__subsf3+0x114>
    8000195a:	87ba                	mv	a5,a4
    8000195c:	a261                	j	80001ae4 <__subsf3+0x288>
    8000195e:	0ff00613          	li	a2,255
    80001962:	fec80ce3          	beq	a6,a2,8000195a <__subsf3+0xfe>
    80001966:	04000637          	lui	a2,0x4000
    8000196a:	40d006bb          	negw	a3,a3
    8000196e:	8fd1                	or	a5,a5,a2
    80001970:	45ed                	li	a1,27
    80001972:	4605                	li	a2,1
    80001974:	00d5ce63          	blt	a1,a3,80001990 <__subsf3+0x134>
    80001978:	04000613          	li	a2,64
    8000197c:	00d7d5b3          	srl	a1,a5,a3
    80001980:	40d606bb          	subw	a3,a2,a3
    80001984:	00d797b3          	sll	a5,a5,a3
    80001988:	00f037b3          	snez	a5,a5
    8000198c:	00f5e633          	or	a2,a1,a5
    80001990:	00e607b3          	add	a5,a2,a4
    80001994:	bf6d                	j	8000194e <__subsf3+0xf2>
    80001996:	00160693          	addi	a3,a2,1 # 4000001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676981>
    8000199a:	0fe6f593          	andi	a1,a3,254
    8000199e:	e98d                	bnez	a1,800019d0 <__subsf3+0x174>
    800019a0:	ee19                	bnez	a2,800019be <__subsf3+0x162>
    800019a2:	1a078863          	beqz	a5,80001b52 <__subsf3+0x2f6>
    800019a6:	d739                	beqz	a4,800018f4 <__subsf3+0x98>
    800019a8:	97ba                	add	a5,a5,a4
    800019aa:	04000737          	lui	a4,0x4000
    800019ae:	8f7d                	and	a4,a4,a5
    800019b0:	d331                	beqz	a4,800018f4 <__subsf3+0x98>
    800019b2:	fc000737          	lui	a4,0xfc000
    800019b6:	177d                	addi	a4,a4,-1
    800019b8:	8ff9                	and	a5,a5,a4
    800019ba:	4405                	li	s0,1
    800019bc:	bf25                	j	800018f4 <__subsf3+0x98>
    800019be:	dfd1                	beqz	a5,8000195a <__subsf3+0xfe>
    800019c0:	12070263          	beqz	a4,80001ae4 <__subsf3+0x288>
    800019c4:	4481                	li	s1,0
    800019c6:	020007b7          	lui	a5,0x2000
    800019ca:	0ff00413          	li	s0,255
    800019ce:	a279                	j	80001b5c <__subsf3+0x300>
    800019d0:	0ff00613          	li	a2,255
    800019d4:	18c68163          	beq	a3,a2,80001b56 <__subsf3+0x2fa>
    800019d8:	97ba                	add	a5,a5,a4
    800019da:	8385                	srli	a5,a5,0x1
    800019dc:	8436                	mv	s0,a3
    800019de:	bf19                	j	800018f4 <__subsf3+0x98>
    800019e0:	06a05163          	blez	a0,80001a42 <__subsf3+0x1e6>
    800019e4:	04081763          	bnez	a6,80001a32 <__subsf3+0x1d6>
    800019e8:	d711                	beqz	a4,800018f4 <__subsf3+0x98>
    800019ea:	fff6851b          	addiw	a0,a3,-1
    800019ee:	ed01                	bnez	a0,80001a06 <__subsf3+0x1aa>
    800019f0:	8f99                	sub	a5,a5,a4
    800019f2:	04000937          	lui	s2,0x4000
    800019f6:	0127f733          	and	a4,a5,s2
    800019fa:	ee070de3          	beqz	a4,800018f4 <__subsf3+0x98>
    800019fe:	197d                	addi	s2,s2,-1
    80001a00:	0127f933          	and	s2,a5,s2
    80001a04:	a8ed                	j	80001afe <__subsf3+0x2a2>
    80001a06:	0ff00693          	li	a3,255
    80001a0a:	eed605e3          	beq	a2,a3,800018f4 <__subsf3+0x98>
    80001a0e:	466d                	li	a2,27
    80001a10:	4685                	li	a3,1
    80001a12:	00a64e63          	blt	a2,a0,80001a2e <__subsf3+0x1d2>
    80001a16:	04000693          	li	a3,64
    80001a1a:	00a75633          	srl	a2,a4,a0
    80001a1e:	40a6853b          	subw	a0,a3,a0
    80001a22:	00a71733          	sll	a4,a4,a0
    80001a26:	00e03733          	snez	a4,a4
    80001a2a:	00e666b3          	or	a3,a2,a4
    80001a2e:	8f95                	sub	a5,a5,a3
    80001a30:	b7c9                	j	800019f2 <__subsf3+0x196>
    80001a32:	0ff00693          	li	a3,255
    80001a36:	ead60fe3          	beq	a2,a3,800018f4 <__subsf3+0x98>
    80001a3a:	040006b7          	lui	a3,0x4000
    80001a3e:	8f55                	or	a4,a4,a3
    80001a40:	b7f9                	j	80001a0e <__subsf3+0x1b2>
    80001a42:	c12d                	beqz	a0,80001aa4 <__subsf3+0x248>
    80001a44:	e605                	bnez	a2,80001a6c <__subsf3+0x210>
    80001a46:	16078163          	beqz	a5,80001ba8 <__subsf3+0x34c>
    80001a4a:	fff6c693          	not	a3,a3
    80001a4e:	2681                	sext.w	a3,a3
    80001a50:	e691                	bnez	a3,80001a5c <__subsf3+0x200>
    80001a52:	40f707b3          	sub	a5,a4,a5
    80001a56:	8442                	mv	s0,a6
    80001a58:	84ae                	mv	s1,a1
    80001a5a:	bf61                	j	800019f2 <__subsf3+0x196>
    80001a5c:	0ff00613          	li	a2,255
    80001a60:	00c81f63          	bne	a6,a2,80001a7e <__subsf3+0x222>
    80001a64:	87ba                	mv	a5,a4
    80001a66:	0ff00413          	li	s0,255
    80001a6a:	a0b9                	j	80001ab8 <__subsf3+0x25c>
    80001a6c:	0ff00613          	li	a2,255
    80001a70:	fec80ae3          	beq	a6,a2,80001a64 <__subsf3+0x208>
    80001a74:	04000637          	lui	a2,0x4000
    80001a78:	40d006bb          	negw	a3,a3
    80001a7c:	8fd1                	or	a5,a5,a2
    80001a7e:	456d                	li	a0,27
    80001a80:	4605                	li	a2,1
    80001a82:	00d54e63          	blt	a0,a3,80001a9e <__subsf3+0x242>
    80001a86:	04000613          	li	a2,64
    80001a8a:	00d7d533          	srl	a0,a5,a3
    80001a8e:	40d606bb          	subw	a3,a2,a3
    80001a92:	00d797b3          	sll	a5,a5,a3
    80001a96:	00f037b3          	snez	a5,a5
    80001a9a:	00f56633          	or	a2,a0,a5
    80001a9e:	40c707b3          	sub	a5,a4,a2
    80001aa2:	bf55                	j	80001a56 <__subsf3+0x1fa>
    80001aa4:	00160693          	addi	a3,a2,1 # 4000001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676981>
    80001aa8:	0fe6f693          	andi	a3,a3,254
    80001aac:	ee9d                	bnez	a3,80001aea <__subsf3+0x28e>
    80001aae:	e60d                	bnez	a2,80001ad8 <__subsf3+0x27c>
    80001ab0:	e791                	bnez	a5,80001abc <__subsf3+0x260>
    80001ab2:	4481                	li	s1,0
    80001ab4:	c745                	beqz	a4,80001b5c <__subsf3+0x300>
    80001ab6:	87ba                	mv	a5,a4
    80001ab8:	84ae                	mv	s1,a1
    80001aba:	bd2d                	j	800018f4 <__subsf3+0x98>
    80001abc:	e2070ce3          	beqz	a4,800018f4 <__subsf3+0x98>
    80001ac0:	40e786b3          	sub	a3,a5,a4
    80001ac4:	04000637          	lui	a2,0x4000
    80001ac8:	8e75                	and	a2,a2,a3
    80001aca:	40f707b3          	sub	a5,a4,a5
    80001ace:	f66d                	bnez	a2,80001ab8 <__subsf3+0x25c>
    80001ad0:	4781                	li	a5,0
    80001ad2:	c6a5                	beqz	a3,80001b3a <__subsf3+0x2de>
    80001ad4:	87b6                	mv	a5,a3
    80001ad6:	bd39                	j	800018f4 <__subsf3+0x98>
    80001ad8:	ee0794e3          	bnez	a5,800019c0 <__subsf3+0x164>
    80001adc:	ee0704e3          	beqz	a4,800019c4 <__subsf3+0x168>
    80001ae0:	87ba                	mv	a5,a4
    80001ae2:	84ae                	mv	s1,a1
    80001ae4:	0ff00413          	li	s0,255
    80001ae8:	b531                	j	800018f4 <__subsf3+0x98>
    80001aea:	40e78933          	sub	s2,a5,a4
    80001aee:	040006b7          	lui	a3,0x4000
    80001af2:	00d976b3          	and	a3,s2,a3
    80001af6:	ce95                	beqz	a3,80001b32 <__subsf3+0x2d6>
    80001af8:	40f70933          	sub	s2,a4,a5
    80001afc:	84ae                	mv	s1,a1
    80001afe:	854a                	mv	a0,s2
    80001b00:	ea4fe0ef          	jal	ra,800001a4 <__clzdi2>
    80001b04:	fdb5079b          	addiw	a5,a0,-37
    80001b08:	00f91933          	sll	s2,s2,a5
    80001b0c:	0287c963          	blt	a5,s0,80001b3e <__subsf3+0x2e2>
    80001b10:	4087853b          	subw	a0,a5,s0
    80001b14:	2505                	addiw	a0,a0,1
    80001b16:	04000413          	li	s0,64
    80001b1a:	00a957b3          	srl	a5,s2,a0
    80001b1e:	40a4053b          	subw	a0,s0,a0
    80001b22:	00a91933          	sll	s2,s2,a0
    80001b26:	01203933          	snez	s2,s2
    80001b2a:	0127e7b3          	or	a5,a5,s2
    80001b2e:	4401                	li	s0,0
    80001b30:	b3d1                	j	800018f4 <__subsf3+0x98>
    80001b32:	fc0916e3          	bnez	s2,80001afe <__subsf3+0x2a2>
    80001b36:	4781                	li	a5,0
    80001b38:	4401                	li	s0,0
    80001b3a:	4481                	li	s1,0
    80001b3c:	a005                	j	80001b5c <__subsf3+0x300>
    80001b3e:	8c1d                	sub	s0,s0,a5
    80001b40:	fc0007b7          	lui	a5,0xfc000
    80001b44:	17fd                	addi	a5,a5,-1
    80001b46:	00f977b3          	and	a5,s2,a5
    80001b4a:	b36d                	j	800018f4 <__subsf3+0x98>
    80001b4c:	87ba                	mv	a5,a4
    80001b4e:	8442                	mv	s0,a6
    80001b50:	b355                	j	800018f4 <__subsf3+0x98>
    80001b52:	87ba                	mv	a5,a4
    80001b54:	b345                	j	800018f4 <__subsf3+0x98>
    80001b56:	0ff00413          	li	s0,255
    80001b5a:	4781                	li	a5,0
    80001b5c:	04000737          	lui	a4,0x4000
    80001b60:	8f7d                	and	a4,a4,a5
    80001b62:	cb11                	beqz	a4,80001b76 <__subsf3+0x31a>
    80001b64:	0405                	addi	s0,s0,1
    80001b66:	0ff00713          	li	a4,255
    80001b6a:	04e40263          	beq	s0,a4,80001bae <__subsf3+0x352>
    80001b6e:	fc000737          	lui	a4,0xfc000
    80001b72:	177d                	addi	a4,a4,-1
    80001b74:	8ff9                	and	a5,a5,a4
    80001b76:	0ff00713          	li	a4,255
    80001b7a:	838d                	srli	a5,a5,0x3
    80001b7c:	00e41663          	bne	s0,a4,80001b88 <__subsf3+0x32c>
    80001b80:	c781                	beqz	a5,80001b88 <__subsf3+0x32c>
    80001b82:	004007b7          	lui	a5,0x400
    80001b86:	4481                	li	s1,0
    80001b88:	0ff47413          	andi	s0,s0,255
    80001b8c:	17a6                	slli	a5,a5,0x29
    80001b8e:	0174141b          	slliw	s0,s0,0x17
    80001b92:	93a5                	srli	a5,a5,0x29
    80001b94:	60e2                	ld	ra,24(sp)
    80001b96:	8fc1                	or	a5,a5,s0
    80001b98:	6442                	ld	s0,16(sp)
    80001b9a:	01f4951b          	slliw	a0,s1,0x1f
    80001b9e:	6902                	ld	s2,0(sp)
    80001ba0:	64a2                	ld	s1,8(sp)
    80001ba2:	8d5d                	or	a0,a0,a5
    80001ba4:	6105                	addi	sp,sp,32
    80001ba6:	8082                	ret
    80001ba8:	87ba                	mv	a5,a4
    80001baa:	8442                	mv	s0,a6
    80001bac:	b731                	j	80001ab8 <__subsf3+0x25c>
    80001bae:	4781                	li	a5,0
    80001bb0:	b7d9                	j	80001b76 <__subsf3+0x31a>

0000000080001bb2 <__fixsfsi>:
    80001bb2:	87aa                	mv	a5,a0
    80001bb4:	008006b7          	lui	a3,0x800
    80001bb8:	0177d71b          	srliw	a4,a5,0x17
    80001bbc:	fff68513          	addi	a0,a3,-1 # 7fffff <__rom_region_size+0x7725d3>
    80001bc0:	8d7d                	and	a0,a0,a5
    80001bc2:	0ff77713          	andi	a4,a4,255
    80001bc6:	07e00613          	li	a2,126
    80001bca:	2501                	sext.w	a0,a0
    80001bcc:	01f7d79b          	srliw	a5,a5,0x1f
    80001bd0:	04e65563          	bge	a2,a4,80001c1a <__fixsfsi+0x68>
    80001bd4:	09d00613          	li	a2,157
    80001bd8:	00e65863          	bge	a2,a4,80001be8 <__fixsfsi+0x36>
    80001bdc:	80000537          	lui	a0,0x80000
    80001be0:	fff54513          	not	a0,a0
    80001be4:	9d3d                	addw	a0,a0,a5
    80001be6:	8082                	ret
    80001be8:	1502                	slli	a0,a0,0x20
    80001bea:	9101                	srli	a0,a0,0x20
    80001bec:	09500613          	li	a2,149
    80001bf0:	8d55                	or	a0,a0,a3
    80001bf2:	0007069b          	sext.w	a3,a4
    80001bf6:	00e65a63          	bge	a2,a4,80001c0a <__fixsfsi+0x58>
    80001bfa:	f6a6869b          	addiw	a3,a3,-150
    80001bfe:	00d5153b          	sllw	a0,a0,a3
    80001c02:	cf89                	beqz	a5,80001c1c <__fixsfsi+0x6a>
    80001c04:	40a0053b          	negw	a0,a0
    80001c08:	8082                	ret
    80001c0a:	09600713          	li	a4,150
    80001c0e:	40d706bb          	subw	a3,a4,a3
    80001c12:	00d55533          	srl	a0,a0,a3
    80001c16:	2501                	sext.w	a0,a0
    80001c18:	b7ed                	j	80001c02 <__fixsfsi+0x50>
    80001c1a:	4501                	li	a0,0
    80001c1c:	8082                	ret

0000000080001c1e <__floatsisf>:
    80001c1e:	1101                	addi	sp,sp,-32
    80001c20:	ec06                	sd	ra,24(sp)
    80001c22:	e822                	sd	s0,16(sp)
    80001c24:	e426                	sd	s1,8(sp)
    80001c26:	e04a                	sd	s2,0(sp)
    80001c28:	cd5d                	beqz	a0,80001ce6 <__floatsisf+0xc8>
    80001c2a:	0005049b          	sext.w	s1,a0
    80001c2e:	03f55913          	srli	s2,a0,0x3f
    80001c32:	00055463          	bgez	a0,80001c3a <__floatsisf+0x1c>
    80001c36:	409004bb          	negw	s1,s1
    80001c3a:	02049413          	slli	s0,s1,0x20
    80001c3e:	9001                	srli	s0,s0,0x20
    80001c40:	8522                	mv	a0,s0
    80001c42:	d62fe0ef          	jal	ra,800001a4 <__clzdi2>
    80001c46:	0be00793          	li	a5,190
    80001c4a:	9f89                	subw	a5,a5,a0
    80001c4c:	09600713          	li	a4,150
    80001c50:	02f74663          	blt	a4,a5,80001c7c <__floatsisf+0x5e>
    80001c54:	00e78663          	beq	a5,a4,80001c60 <__floatsisf+0x42>
    80001c58:	fd85051b          	addiw	a0,a0,-40
    80001c5c:	00a41433          	sll	s0,s0,a0
    80001c60:	1426                	slli	s0,s0,0x29
    80001c62:	0177979b          	slliw	a5,a5,0x17
    80001c66:	9025                	srli	s0,s0,0x29
    80001c68:	8c5d                	or	s0,s0,a5
    80001c6a:	01f9151b          	slliw	a0,s2,0x1f
    80001c6e:	60e2                	ld	ra,24(sp)
    80001c70:	8d41                	or	a0,a0,s0
    80001c72:	6442                	ld	s0,16(sp)
    80001c74:	64a2                	ld	s1,8(sp)
    80001c76:	6902                	ld	s2,0(sp)
    80001c78:	6105                	addi	sp,sp,32
    80001c7a:	8082                	ret
    80001c7c:	09900713          	li	a4,153
    80001c80:	00f75f63          	bge	a4,a5,80001c9e <__floatsisf+0x80>
    80001c84:	02500713          	li	a4,37
    80001c88:	9f09                	subw	a4,a4,a0
    80001c8a:	ffb5069b          	addiw	a3,a0,-5
    80001c8e:	00e4d73b          	srlw	a4,s1,a4
    80001c92:	00d494bb          	sllw	s1,s1,a3
    80001c96:	009034b3          	snez	s1,s1
    80001c9a:	8cd9                	or	s1,s1,a4
    80001c9c:	2481                	sext.w	s1,s1
    80001c9e:	09900713          	li	a4,153
    80001ca2:	1482                	slli	s1,s1,0x20
    80001ca4:	8f1d                	sub	a4,a4,a5
    80001ca6:	9081                	srli	s1,s1,0x20
    80001ca8:	00e05663          	blez	a4,80001cb4 <__floatsisf+0x96>
    80001cac:	fdb5071b          	addiw	a4,a0,-37
    80001cb0:	00e494b3          	sll	s1,s1,a4
    80001cb4:	fc000437          	lui	s0,0xfc000
    80001cb8:	147d                	addi	s0,s0,-1
    80001cba:	0074f713          	andi	a4,s1,7
    80001cbe:	8c65                	and	s0,s0,s1
    80001cc0:	c711                	beqz	a4,80001ccc <__floatsisf+0xae>
    80001cc2:	88bd                	andi	s1,s1,15
    80001cc4:	4711                	li	a4,4
    80001cc6:	00e48363          	beq	s1,a4,80001ccc <__floatsisf+0xae>
    80001cca:	0411                	addi	s0,s0,4
    80001ccc:	04000737          	lui	a4,0x4000
    80001cd0:	8f61                	and	a4,a4,s0
    80001cd2:	cb01                	beqz	a4,80001ce2 <__floatsisf+0xc4>
    80001cd4:	fc0007b7          	lui	a5,0xfc000
    80001cd8:	17fd                	addi	a5,a5,-1
    80001cda:	8c7d                	and	s0,s0,a5
    80001cdc:	0bf00793          	li	a5,191
    80001ce0:	9f89                	subw	a5,a5,a0
    80001ce2:	800d                	srli	s0,s0,0x3
    80001ce4:	bfb5                	j	80001c60 <__floatsisf+0x42>
    80001ce6:	4401                	li	s0,0
    80001ce8:	4781                	li	a5,0
    80001cea:	4901                	li	s2,0
    80001cec:	bf95                	j	80001c60 <__floatsisf+0x42>

0000000080001cee <__extendsfdf2>:
    80001cee:	0175579b          	srliw	a5,a0,0x17
    80001cf2:	0ff7f793          	andi	a5,a5,255
    80001cf6:	1101                	addi	sp,sp,-32
    80001cf8:	00178713          	addi	a4,a5,1 # fffffffffc000001 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7ffffffffc000002>
    80001cfc:	e822                	sd	s0,16(sp)
    80001cfe:	e426                	sd	s1,8(sp)
    80001d00:	02951413          	slli	s0,a0,0x29
    80001d04:	ec06                	sd	ra,24(sp)
    80001d06:	0fe77713          	andi	a4,a4,254
    80001d0a:	9025                	srli	s0,s0,0x29
    80001d0c:	01f5549b          	srliw	s1,a0,0x1f
    80001d10:	c305                	beqz	a4,80001d30 <__extendsfdf2+0x42>
    80001d12:	38078793          	addi	a5,a5,896
    80001d16:	0476                	slli	s0,s0,0x1d
    80001d18:	0432                	slli	s0,s0,0xc
    80001d1a:	17d2                	slli	a5,a5,0x34
    80001d1c:	8031                	srli	s0,s0,0xc
    80001d1e:	8c5d                	or	s0,s0,a5
    80001d20:	03f49513          	slli	a0,s1,0x3f
    80001d24:	60e2                	ld	ra,24(sp)
    80001d26:	8d41                	or	a0,a0,s0
    80001d28:	6442                	ld	s0,16(sp)
    80001d2a:	64a2                	ld	s1,8(sp)
    80001d2c:	6105                	addi	sp,sp,32
    80001d2e:	8082                	ret
    80001d30:	ef89                	bnez	a5,80001d4a <__extendsfdf2+0x5c>
    80001d32:	d07d                	beqz	s0,80001d18 <__extendsfdf2+0x2a>
    80001d34:	8522                	mv	a0,s0
    80001d36:	c6efe0ef          	jal	ra,800001a4 <__clzdi2>
    80001d3a:	ff55079b          	addiw	a5,a0,-11
    80001d3e:	00f41433          	sll	s0,s0,a5
    80001d42:	3a900793          	li	a5,937
    80001d46:	9f89                	subw	a5,a5,a0
    80001d48:	bfc1                	j	80001d18 <__extendsfdf2+0x2a>
    80001d4a:	7ff00793          	li	a5,2047
    80001d4e:	d469                	beqz	s0,80001d18 <__extendsfdf2+0x2a>
    80001d50:	4505                	li	a0,1
    80001d52:	0476                	slli	s0,s0,0x1d
    80001d54:	154e                	slli	a0,a0,0x33
    80001d56:	8c49                	or	s0,s0,a0
    80001d58:	b7c1                	j	80001d18 <__extendsfdf2+0x2a>

0000000080001d5a <__truncdfsf2>:
    80001d5a:	03455713          	srli	a4,a0,0x34
    80001d5e:	7ff77713          	andi	a4,a4,2047
    80001d62:	00170613          	addi	a2,a4,1 # 4000001 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676981>
    80001d66:	00c51793          	slli	a5,a0,0xc
    80001d6a:	7fe67613          	andi	a2,a2,2046
    80001d6e:	00c7d693          	srli	a3,a5,0xc
    80001d72:	917d                	srli	a0,a0,0x3f
    80001d74:	83a5                	srli	a5,a5,0x9
    80001d76:	c629                	beqz	a2,80001dc0 <__truncdfsf2+0x66>
    80001d78:	c8070713          	addi	a4,a4,-896
    80001d7c:	0fe00613          	li	a2,254
    80001d80:	04e64c63          	blt	a2,a4,80001dd8 <__truncdfsf2+0x7e>
    80001d84:	02e04863          	bgtz	a4,80001db4 <__truncdfsf2+0x5a>
    80001d88:	56a5                	li	a3,-23
    80001d8a:	08d74b63          	blt	a4,a3,80001e20 <__truncdfsf2+0xc6>
    80001d8e:	4685                	li	a3,1
    80001d90:	16de                	slli	a3,a3,0x37
    80001d92:	8fd5                	or	a5,a5,a3
    80001d94:	46f9                	li	a3,30
    80001d96:	9e99                	subw	a3,a3,a4
    80001d98:	0227071b          	addiw	a4,a4,34
    80001d9c:	00d7d6b3          	srl	a3,a5,a3
    80001da0:	00e797b3          	sll	a5,a5,a4
    80001da4:	00f037b3          	snez	a5,a5
    80001da8:	8fd5                	or	a5,a5,a3
    80001daa:	4701                	li	a4,0
    80001dac:	0077f693          	andi	a3,a5,7
    80001db0:	c69d                	beqz	a3,80001dde <__truncdfsf2+0x84>
    80001db2:	a88d                	j	80001e24 <__truncdfsf2+0xca>
    80001db4:	169a                	slli	a3,a3,0x26
    80001db6:	83f5                	srli	a5,a5,0x1d
    80001db8:	00d036b3          	snez	a3,a3
    80001dbc:	8fd5                	or	a5,a5,a3
    80001dbe:	b7fd                	j	80001dac <__truncdfsf2+0x52>
    80001dc0:	e701                	bnez	a4,80001dc8 <__truncdfsf2+0x6e>
    80001dc2:	00f037b3          	snez	a5,a5
    80001dc6:	b7dd                	j	80001dac <__truncdfsf2+0x52>
    80001dc8:	0ff00713          	li	a4,255
    80001dcc:	cb89                	beqz	a5,80001dde <__truncdfsf2+0x84>
    80001dce:	83f5                	srli	a5,a5,0x1d
    80001dd0:	9be1                	andi	a5,a5,-8
    80001dd2:	020006b7          	lui	a3,0x2000
    80001dd6:	b7dd                	j	80001dbc <__truncdfsf2+0x62>
    80001dd8:	4781                	li	a5,0
    80001dda:	0ff00713          	li	a4,255
    80001dde:	040006b7          	lui	a3,0x4000
    80001de2:	8efd                	and	a3,a3,a5
    80001de4:	ca91                	beqz	a3,80001df8 <__truncdfsf2+0x9e>
    80001de6:	0705                	addi	a4,a4,1
    80001de8:	0ff00693          	li	a3,255
    80001dec:	04d70363          	beq	a4,a3,80001e32 <__truncdfsf2+0xd8>
    80001df0:	fc0006b7          	lui	a3,0xfc000
    80001df4:	16fd                	addi	a3,a3,-1
    80001df6:	8ff5                	and	a5,a5,a3
    80001df8:	0ff00693          	li	a3,255
    80001dfc:	838d                	srli	a5,a5,0x3
    80001dfe:	00d71663          	bne	a4,a3,80001e0a <__truncdfsf2+0xb0>
    80001e02:	c781                	beqz	a5,80001e0a <__truncdfsf2+0xb0>
    80001e04:	004007b7          	lui	a5,0x400
    80001e08:	4501                	li	a0,0
    80001e0a:	0ff77713          	andi	a4,a4,255
    80001e0e:	17a6                	slli	a5,a5,0x29
    80001e10:	0177171b          	slliw	a4,a4,0x17
    80001e14:	93a5                	srli	a5,a5,0x29
    80001e16:	8fd9                	or	a5,a5,a4
    80001e18:	01f5151b          	slliw	a0,a0,0x1f
    80001e1c:	8d5d                	or	a0,a0,a5
    80001e1e:	8082                	ret
    80001e20:	4785                	li	a5,1
    80001e22:	4701                	li	a4,0
    80001e24:	00f7f693          	andi	a3,a5,15
    80001e28:	4611                	li	a2,4
    80001e2a:	fac68ae3          	beq	a3,a2,80001dde <__truncdfsf2+0x84>
    80001e2e:	0791                	addi	a5,a5,4
    80001e30:	b77d                	j	80001dde <__truncdfsf2+0x84>
    80001e32:	4781                	li	a5,0
    80001e34:	b7d1                	j	80001df8 <__truncdfsf2+0x9e>

0000000080001e36 <memcpy>:
    80001e36:	832a                	mv	t1,a0
    80001e38:	ca09                	beqz	a2,80001e4a <memcpy+0x14>
    80001e3a:	00058383          	lb	t2,0(a1)
    80001e3e:	00730023          	sb	t2,0(t1)
    80001e42:	167d                	addi	a2,a2,-1
    80001e44:	0305                	addi	t1,t1,1
    80001e46:	0585                	addi	a1,a1,1
    80001e48:	fa6d                	bnez	a2,80001e3a <memcpy+0x4>
    80001e4a:	8082                	ret

0000000080001e4c <memset>:
    80001e4c:	832a                	mv	t1,a0
    80001e4e:	c611                	beqz	a2,80001e5a <memset+0xe>
    80001e50:	00b30023          	sb	a1,0(t1)
    80001e54:	167d                	addi	a2,a2,-1
    80001e56:	0305                	addi	t1,t1,1
    80001e58:	fe65                	bnez	a2,80001e50 <memset+0x4>
    80001e5a:	8082                	ret

0000000080001e5c <strcmp>:
    80001e5c:	00054603          	lbu	a2,0(a0) # ffffffff80000000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000001>
    80001e60:	0005c683          	lbu	a3,0(a1)
    80001e64:	0505                	addi	a0,a0,1
    80001e66:	0585                	addi	a1,a1,1
    80001e68:	00d61363          	bne	a2,a3,80001e6e <strcmp+0x12>
    80001e6c:	fa65                	bnez	a2,80001e5c <strcmp>
    80001e6e:	40d60533          	sub	a0,a2,a3
    80001e72:	8082                	ret

0000000080001e74 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
    80001e74:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
    80001e78:	c519                	beqz	a0,80001e86 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
    80001e7a:	4289                	li	t0,2
	blt a0, t0, boot_secondary_core
    80001e7c:	00554f63          	blt	a0,t0,80001e9a <boot_secondary_core>

0000000080001e80 <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
    80001e80:	10500073          	wfi
	j loop_unconfigured_cores
    80001e84:	bff5                	j	80001e80 <loop_unconfigured_cores>

0000000080001e86 <boot_first_core>:

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + CONFIG_ISR_STACK_SIZE
	 */
	la sp, z_interrupt_stacks
    80001e86:	000a8117          	auipc	sp,0xa8
    80001e8a:	66a10113          	addi	sp,sp,1642 # 800aa4f0 <z_interrupt_stacks>
	li t0, CONFIG_ISR_STACK_SIZE
    80001e8e:	6285                	lui	t0,0x1
    80001e90:	8002829b          	addiw	t0,t0,-2048
	add sp, sp, t0
    80001e94:	9116                	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
    80001e96:	340010ef          	jal	ra,800031d6 <_PrepC>

0000000080001e9a <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
    80001e9a:	0008c297          	auipc	t0,0x8c
    80001e9e:	be628293          	addi	t0,t0,-1050 # 8008da80 <riscv_cpu_wake_flag>
	lr t0, 0(t0)
    80001ea2:	0002b283          	ld	t0,0(t0)
	bne a0, t0, boot_secondary_core
    80001ea6:	fe551ae3          	bne	a0,t0,80001e9a <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
    80001eaa:	0008c297          	auipc	t0,0x8c
    80001eae:	bce28293          	addi	t0,t0,-1074 # 8008da78 <riscv_cpu_sp>
	lr sp, 0(t0)
    80001eb2:	0002b103          	ld	sp,0(t0)

	la t0, riscv_cpu_wake_flag
    80001eb6:	0008c297          	auipc	t0,0x8c
    80001eba:	bca28293          	addi	t0,t0,-1078 # 8008da80 <riscv_cpu_wake_flag>
	sr zero, 0(t0)
    80001ebe:	0002b023          	sd	zero,0(t0)
	j z_riscv_secondary_cpu_init
    80001ec2:	39a0106f          	j	8000325c <z_riscv_secondary_cpu_init>
	...

0000000080001ec8 <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
    80001ec8:	0415bc23          	sd	ra,88(a1)
    80001ecc:	0645b023          	sd	tp,96(a1)
    80001ed0:	f5a0                	sd	s0,104(a1)
    80001ed2:	f9a4                	sd	s1,112(a1)
    80001ed4:	0725bc23          	sd	s2,120(a1)
    80001ed8:	0935b023          	sd	s3,128(a1)
    80001edc:	0945b423          	sd	s4,136(a1)
    80001ee0:	0955b823          	sd	s5,144(a1)
    80001ee4:	0965bc23          	sd	s6,152(a1)
    80001ee8:	0b75b023          	sd	s7,160(a1)
    80001eec:	0b85b423          	sd	s8,168(a1)
    80001ef0:	0b95b823          	sd	s9,176(a1)
    80001ef4:	0ba5bc23          	sd	s10,184(a1)
    80001ef8:	0db5b023          	sd	s11,192(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
    80001efc:	0425b823          	sd	sp,80(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
    80001f00:	10b5b423          	sd	a1,264(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
    80001f04:	05053103          	ld	sp,80(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
    80001f08:	05853083          	ld	ra,88(a0)
    80001f0c:	06053203          	ld	tp,96(a0)
    80001f10:	7520                	ld	s0,104(a0)
    80001f12:	7924                	ld	s1,112(a0)
    80001f14:	07853903          	ld	s2,120(a0)
    80001f18:	08053983          	ld	s3,128(a0)
    80001f1c:	08853a03          	ld	s4,136(a0)
    80001f20:	09053a83          	ld	s5,144(a0)
    80001f24:	09853b03          	ld	s6,152(a0)
    80001f28:	0a053b83          	ld	s7,160(a0)
    80001f2c:	0a853c03          	ld	s8,168(a0)
    80001f30:	0b053c83          	ld	s9,176(a0)
    80001f34:	0b853d03          	ld	s10,184(a0)
    80001f38:	0c053d83          	ld	s11,192(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
    80001f3c:	8082                	ret

0000000080001f3e <_OffsetAbsSyms>:
GEN_SOC_OFFSET_SYMS();
#endif

GEN_ABSOLUTE_SYM(__z_arch_esf_t_SIZEOF, sizeof(z_arch_esf_t));

GEN_ABS_SYM_END
    80001f3e:	8082                	ret

0000000080001f40 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
    80001f40:	00053023          	sd	zero,0(a0)
    80001f44:	00053423          	sd	zero,8(a0)
    80001f48:	00053823          	sd	zero,16(a0)
  }
    80001f4c:	8082                	ret

0000000080001f4e <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
    80001f4e:	4505                	li	a0,1
    80001f50:	8082                	ret

0000000080001f52 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
    80001f52:	611c                	ld	a5,0(a0)
    80001f54:	7b9c                	ld	a5,48(a5)
    80001f56:	8782                	jr	a5

0000000080001f58 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
    80001f58:	611c                	ld	a5,0(a0)
    80001f5a:	7f9c                	ld	a5,56(a5)
    80001f5c:	8782                	jr	a5

0000000080001f5e <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
    80001f5e:	8082                	ret

0000000080001f60 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:

namespace tflite {
TfLiteRegistration* Register_DETECTION_POSTPROCESS();

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
    80001f60:	8082                	ret

0000000080001f62 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    80001f62:	18852683          	lw	a3,392(a0)
    80001f66:	4795                	li	a5,5
    80001f68:	02d7e363          	bltu	a5,a3,80001f8e <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    80001f6c:	14c50713          	addi	a4,a0,332
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    80001f70:	4781                	li	a5,0
    80001f72:	02f68463          	beq	a3,a5,80001f9a <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x38>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
    80001f76:	4310                	lw	a2,0(a4)
    80001f78:	0711                	addi	a4,a4,4
    80001f7a:	00b61e63          	bne	a2,a1,80001f96 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x34>
    80001f7e:	02079713          	slli	a4,a5,0x20
    80001f82:	01d75793          	srli	a5,a4,0x1d
    80001f86:	953e                	add	a0,a0,a5
    80001f88:	16053503          	ld	a0,352(a0)
    80001f8c:	8082                	ret
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
    80001f8e:	1141                	addi	sp,sp,-16
    80001f90:	e406                	sd	ra,8(sp)
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    80001f92:	1fd0b0ef          	jal	ra,8000d98e <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    80001f96:	2785                	addiw	a5,a5,1
    80001f98:	bfe9                	j	80001f72 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    }
    return nullptr;
    80001f9a:	4501                	li	a0,0
  }
    80001f9c:	8082                	ret

0000000080001f9e <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
    80001f9e:	7179                	addi	sp,sp,-48
    80001fa0:	f022                	sd	s0,32(sp)
    80001fa2:	ec26                	sd	s1,24(sp)
    80001fa4:	e84a                	sd	s2,16(sp)
    80001fa6:	e44e                	sd	s3,8(sp)
    80001fa8:	e052                	sd	s4,0(sp)
    80001faa:	f406                	sd	ra,40(sp)
    80001fac:	842a                	mv	s0,a0
    80001fae:	89ae                	mv	s3,a1
    80001fb0:	03050913          	addi	s2,a0,48
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    80001fb4:	4481                	li	s1,0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    80001fb6:	02000a13          	li	s4,32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    80001fba:	14842783          	lw	a5,328(s0) # fffffffffc000148 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7ffffffffc000149>
    80001fbe:	02f4fe63          	bgeu	s1,a5,80001ffa <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x5c>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    80001fc2:	00092783          	lw	a5,0(s2) # 4000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3676980>
    80001fc6:	01478663          	beq	a5,s4,80001fd2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x34>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    80001fca:	2485                	addiw	s1,s1,1
    80001fcc:	04090913          	addi	s2,s2,64
    80001fd0:	b7ed                	j	80001fba <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x1c>
          (strcmp(registration.custom_name, op) == 0)) {
    80001fd2:	00893503          	ld	a0,8(s2)
    80001fd6:	85ce                	mv	a1,s3
    80001fd8:	e85ff0ef          	jal	ra,80001e5c <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    80001fdc:	f57d                	bnez	a0,80001fca <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x2c>
      const TfLiteRegistration& registration = registrations_[i];
    80001fde:	02049793          	slli	a5,s1,0x20
    80001fe2:	01a7d513          	srli	a0,a5,0x1a
    80001fe6:	0521                	addi	a0,a0,8
    80001fe8:	9522                	add	a0,a0,s0
  }
    80001fea:	70a2                	ld	ra,40(sp)
    80001fec:	7402                	ld	s0,32(sp)
    80001fee:	64e2                	ld	s1,24(sp)
    80001ff0:	6942                	ld	s2,16(sp)
    80001ff2:	69a2                	ld	s3,8(sp)
    80001ff4:	6a02                	ld	s4,0(sp)
    80001ff6:	6145                	addi	sp,sp,48
    80001ff8:	8082                	ret
    return nullptr;
    80001ffa:	4501                	li	a0,0
    80001ffc:	b7fd                	j	80001fea <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x4c>

0000000080001ffe <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    80001ffe:	3d60b06f          	j	8000d3d4 <_ZdlPv>

0000000080002002 <k_uptime_get>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
    80002002:	1141                	addi	sp,sp,-16
    80002004:	e406                	sd	ra,8(sp)
	if (z_syscall_trap()) {
		return (int64_t) arch_syscall_invoke0(K_SYSCALL_K_UPTIME_TICKS);
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    80002006:	3660b0ef          	jal	ra,8000d36c <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
}
    8000200a:	60a2                	ld	ra,8(sp)
    8000200c:	47a9                	li	a5,10
    8000200e:	02f50533          	mul	a0,a0,a5
    80002012:	0141                	addi	sp,sp,16
    80002014:	8082                	ret

0000000080002016 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    80002016:	02000793          	li	a5,32
    8000201a:	02f58863          	beq	a1,a5,8000204a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    8000201e:	14852683          	lw	a3,328(a0)
    80002022:	03050713          	addi	a4,a0,48
    80002026:	4781                	li	a5,0
      if (registration.builtin_code == op) {
    80002028:	2581                	sext.w	a1,a1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    8000202a:	02f68063          	beq	a3,a5,8000204a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x34>
      if (registration.builtin_code == op) {
    8000202e:	4310                	lw	a2,0(a4)
    80002030:	04070713          	addi	a4,a4,64
    80002034:	00b61963          	bne	a2,a1,80002046 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x30>
      const TfLiteRegistration& registration = registrations_[i];
    80002038:	02079713          	slli	a4,a5,0x20
    8000203c:	01a75793          	srli	a5,a4,0x1a
    80002040:	07a1                	addi	a5,a5,8
    80002042:	953e                	add	a0,a0,a5
    80002044:	8082                	ret
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    80002046:	2785                	addiw	a5,a5,1
    80002048:	b7cd                	j	8000202a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x14>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    8000204a:	4501                	li	a0,0
  }
    8000204c:	8082                	ret

000000008000204e <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh>:
        return kTfLiteOk;
    }
    void loop(
            const char* thread_name,   struct k_sem* my_sem, struct k_sem* other_sem,
            const uint8_t* image_list[]
    ){
    8000204e:	7135                	addi	sp,sp,-160
    80002050:	e922                	sd	s0,144(sp)
    80002052:	e526                	sd	s1,136(sp)
    80002054:	e14a                	sd	s2,128(sp)
    80002056:	f8d2                	sd	s4,112(sp)
    80002058:	f4d6                	sd	s5,104(sp)
    8000205a:	f0da                	sd	s6,96(sp)
    8000205c:	ecde                	sd	s7,88(sp)
    8000205e:	e8e2                	sd	s8,80(sp)
    80002060:	e4e6                	sd	s9,72(sp)
    80002062:	e0ea                	sd	s10,64(sp)
    80002064:	fc6e                	sd	s11,56(sp)
    80002066:	ed06                	sd	ra,152(sp)
    80002068:	fcce                	sd	s3,120(sp)
    8000206a:	84aa                	mv	s1,a0
    8000206c:	e82e                	sd	a1,16(sp)
    8000206e:	ec32                	sd	a2,24(sp)
    80002070:	8936                	mv	s2,a3
    80002072:	4401                	li	s0,0
        for (int i = 0; i < img_list_len; ++i)
        {
            k_sem_take(my_sem, K_FOREVER);
            int64_t t_initial = k_uptime_get();
            printk("%s thread\n", thread_name);
    80002074:	00088d17          	auipc	s10,0x88
    80002078:	41cd0d13          	addi	s10,s10,1052 # 8008a490 <space4_img+0x2400>
            const uint8_t* image = image_list[i];
            if (kTfLiteOk != GetImage(
    8000207c:	0008cc97          	auipc	s9,0x8c
    80002080:	9dcc8c93          	addi	s9,s9,-1572 # 8008da58 <_ZN12_GLOBAL__N_15inputE>
                error_reporter,   image_width, image_height, channels,
                input->data.int8, image,       input->bytes
            )){
                TF_LITE_REPORT_ERROR(error_reporter, "GetImage() failed");
            }
            if (kTfLiteOk != interpreter->Invoke())
    80002084:	0008ca17          	auipc	s4,0x8c
    80002088:	9c4a0a13          	addi	s4,s4,-1596 # 8008da48 <_ZN12_GLOBAL__N_111interpreterE>
    8000208c:	0008ca97          	auipc	s5,0x8c
    80002090:	9c4a8a93          	addi	s5,s5,-1596 # 8008da50 <_ZN12_GLOBAL__N_114error_reporterE>
            {
                TF_LITE_REPORT_ERROR(error_reporter, "Invoke() failed");
    80002094:	00088d97          	auipc	s11,0x88
    80002098:	40cd8d93          	addi	s11,s11,1036 # 8008a4a0 <space4_img+0x2410>
                ++not_person_count;
                printk("Picture %d is not a person\n", i);
            }
            else
            {
                ++other_count;
    8000209c:	0008cb17          	auipc	s6,0x8c
    800020a0:	a64b0b13          	addi	s6,s6,-1436 # 8008db00 <_ZN12_GLOBAL__N_111other_countE>
                ++not_person_count;
    800020a4:	0008cb97          	auipc	s7,0x8c
    800020a8:	a64b8b93          	addi	s7,s7,-1436 # 8008db08 <_ZN12_GLOBAL__N_116not_person_countE>
                ++person_count;
    800020ac:	0008cc17          	auipc	s8,0x8c
    800020b0:	a58c0c13          	addi	s8,s8,-1448 # 8008db04 <_ZN12_GLOBAL__N_112person_countE>
    800020b4:	0004099b          	sext.w	s3,s0
		union { uintptr_t x; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    800020b8:	6542                	ld	a0,16(sp)
    800020ba:	55fd                	li	a1,-1
    800020bc:	2f3090ef          	jal	ra,8000bbae <z_impl_k_sem_take>
            int64_t t_initial = k_uptime_get();
    800020c0:	f43ff0ef          	jal	ra,80002002 <k_uptime_get>
    800020c4:	e42a                	sd	a0,8(sp)
            printk("%s thread\n", thread_name);
    800020c6:	85a6                	mv	a1,s1
    800020c8:	856a                	mv	a0,s10
    800020ca:	726000ef          	jal	ra,800027f0 <printk>
            if (kTfLiteOk != GetImage(
    800020ce:	000cb703          	ld	a4,0(s9)
            const uint8_t* image = image_list[i];
    800020d2:	00341793          	slli	a5,s0,0x3
    800020d6:	97ca                	add	a5,a5,s2
        memcpy(data, image, bytes);
    800020d8:	7710                	ld	a2,40(a4)
    800020da:	638c                	ld	a1,0(a5)
    800020dc:	6708                	ld	a0,8(a4)
    800020de:	d59ff0ef          	jal	ra,80001e36 <memcpy>
            if (kTfLiteOk != interpreter->Invoke())
    800020e2:	000a3503          	ld	a0,0(s4)
    800020e6:	6dd020ef          	jal	ra,80004fc2 <_ZN6tflite16MicroInterpreter6InvokeEv>
    800020ea:	c511                	beqz	a0,800020f6 <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0xa8>
                TF_LITE_REPORT_ERROR(error_reporter, "Invoke() failed");
    800020ec:	000ab503          	ld	a0,0(s5)
    800020f0:	85ee                	mv	a1,s11
    800020f2:	7bb040ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
            output = interpreter->output(0);
    800020f6:	000a3503          	ld	a0,0(s4)
    800020fa:	4581                	li	a1,0
    800020fc:	207020ef          	jal	ra,80004b02 <_ZN6tflite16MicroInterpreter6outputEm>
            uint8_t person_score = output->data.uint8[personIndex];
    80002100:	651c                	ld	a5,8(a0)
        TF_LITE_REPORT_ERROR(
    80002102:	000ab503          	ld	a0,0(s5)
    80002106:	00088597          	auipc	a1,0x88
    8000210a:	3aa58593          	addi	a1,a1,938 # 8008a4b0 <space4_img+0x2420>
            uint8_t person_score = output->data.uint8[personIndex];
    8000210e:	0017c603          	lbu	a2,1(a5) # 400001 <__rom_region_size+0x3725d5>
            uint8_t not_person_score = output->data.uint8[notPersonIndex];
    80002112:	0007c683          	lbu	a3,0(a5)
        TF_LITE_REPORT_ERROR(
    80002116:	f032                	sd	a2,32(sp)
    80002118:	f436                	sd	a3,40(sp)
    8000211a:	793040ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
            if (person_score > not_person_score)
    8000211e:	7602                	ld	a2,32(sp)
    80002120:	76a2                	ld	a3,40(sp)
    80002122:	06c6f363          	bgeu	a3,a2,80002188 <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0x13a>
                ++person_count;
    80002126:	000c2783          	lw	a5,0(s8)
                printk("Picture %d is a person\n", i);
    8000212a:	85ce                	mv	a1,s3
    8000212c:	00088517          	auipc	a0,0x88
    80002130:	3b450513          	addi	a0,a0,948 # 8008a4e0 <space4_img+0x2450>
                ++person_count;
    80002134:	2785                	addiw	a5,a5,1
    80002136:	00fc2023          	sw	a5,0(s8)
                printk("Could not identify picture %d\n", i);
    8000213a:	6b6000ef          	jal	ra,800027f0 <printk>
            }
            int64_t t_final = k_uptime_get();
    8000213e:	ec5ff0ef          	jal	ra,80002002 <k_uptime_get>
            printk(
                "Time taken for %s thread: %lld seconds\n\n",
                thread_name,
                (t_final - t_initial) / 1000
    80002142:	67a2                	ld	a5,8(sp)
            printk(
    80002144:	3e800613          	li	a2,1000
    80002148:	85a6                	mv	a1,s1
                (t_final - t_initial) / 1000
    8000214a:	8d1d                	sub	a0,a0,a5
            printk(
    8000214c:	02c54633          	div	a2,a0,a2
    80002150:	00088517          	auipc	a0,0x88
    80002154:	3e850513          	addi	a0,a0,1000 # 8008a538 <space4_img+0x24a8>
    80002158:	698000ef          	jal	ra,800027f0 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8000215c:	6562                	ld	a0,24(sp)
        for (int i = 0; i < img_list_len; ++i)
    8000215e:	0405                	addi	s0,s0,1
    80002160:	1ef090ef          	jal	ra,8000bb4e <z_impl_k_sem_give>
    80002164:	47ad                	li	a5,11
    80002166:	f4f417e3          	bne	s0,a5,800020b4 <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0x66>
            );
            k_sem_give(other_sem);
        }
    }
    8000216a:	60ea                	ld	ra,152(sp)
    8000216c:	644a                	ld	s0,144(sp)
    8000216e:	64aa                	ld	s1,136(sp)
    80002170:	690a                	ld	s2,128(sp)
    80002172:	79e6                	ld	s3,120(sp)
    80002174:	7a46                	ld	s4,112(sp)
    80002176:	7aa6                	ld	s5,104(sp)
    80002178:	7b06                	ld	s6,96(sp)
    8000217a:	6be6                	ld	s7,88(sp)
    8000217c:	6c46                	ld	s8,80(sp)
    8000217e:	6ca6                	ld	s9,72(sp)
    80002180:	6d06                	ld	s10,64(sp)
    80002182:	7de2                	ld	s11,56(sp)
    80002184:	610d                	addi	sp,sp,160
    80002186:	8082                	ret
            else if (person_score < not_person_score)
    80002188:	00d67d63          	bgeu	a2,a3,800021a2 <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0x154>
                ++not_person_count;
    8000218c:	000ba783          	lw	a5,0(s7)
                printk("Picture %d is not a person\n", i);
    80002190:	85ce                	mv	a1,s3
    80002192:	00088517          	auipc	a0,0x88
    80002196:	36650513          	addi	a0,a0,870 # 8008a4f8 <space4_img+0x2468>
                ++not_person_count;
    8000219a:	2785                	addiw	a5,a5,1
    8000219c:	00fba023          	sw	a5,0(s7)
                printk("Picture %d is not a person\n", i);
    800021a0:	bf69                	j	8000213a <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0xec>
                ++other_count;
    800021a2:	000b2783          	lw	a5,0(s6)
                printk("Could not identify picture %d\n", i);
    800021a6:	85ce                	mv	a1,s3
    800021a8:	00088517          	auipc	a0,0x88
    800021ac:	37050513          	addi	a0,a0,880 # 8008a518 <space4_img+0x2488>
                ++other_count;
    800021b0:	2785                	addiw	a5,a5,1
    800021b2:	00fb2023          	sw	a5,0(s6)
                printk("Could not identify picture %d\n", i);
    800021b6:	b751                	j	8000213a <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh+0xec>

00000000800021b8 <_Z5loop1PvS_S_>:
        return;
    }
    input = interpreter->input(0);
}
void loop1(void* dummy1, void* dummy2, void* dummy3)
{
    800021b8:	7159                	addi	sp,sp,-112
	ARG_UNUSED(dummy3);

    const uint8_t* img_list[img_list_len] = {
        person1, person2, car1,    car2,    car3, space1,
        space2,  space3,  person3, person4, mask1
    };
    800021ba:	00069797          	auipc	a5,0x69
    800021be:	ad678793          	addi	a5,a5,-1322 # 8006ac90 <person1_img>
    800021c2:	e43e                	sd	a5,8(sp)
    800021c4:	0006d797          	auipc	a5,0x6d
    800021c8:	2cc78793          	addi	a5,a5,716 # 8006f490 <person2_img>
    800021cc:	e83e                	sd	a5,16(sp)
    800021ce:	0000d797          	auipc	a5,0xd
    800021d2:	4a278793          	addi	a5,a5,1186 # 8000f670 <car1_img>
    800021d6:	ec3e                	sd	a5,24(sp)
    800021d8:	00010797          	auipc	a5,0x10
    800021dc:	89878793          	addi	a5,a5,-1896 # 80011a70 <car2_img>
    800021e0:	f03e                	sd	a5,32(sp)
    800021e2:	00012797          	auipc	a5,0x12
    800021e6:	c8e78793          	addi	a5,a5,-882 # 80013e70 <car3_img>
    800021ea:	f43e                	sd	a5,40(sp)
    800021ec:	0007f797          	auipc	a5,0x7f
    800021f0:	2a478793          	addi	a5,a5,676 # 80081490 <space1_img>
    800021f4:	f83e                	sd	a5,48(sp)
    800021f6:	00081797          	auipc	a5,0x81
    800021fa:	69a78793          	addi	a5,a5,1690 # 80083890 <space2_img>
    800021fe:	fc3e                	sd	a5,56(sp)
    80002200:	00084797          	auipc	a5,0x84
    80002204:	a9078793          	addi	a5,a5,-1392 # 80085c90 <space3_img>
    80002208:	e0be                	sd	a5,64(sp)
    8000220a:	0006f797          	auipc	a5,0x6f
    8000220e:	68678793          	addi	a5,a5,1670 # 80071890 <person3_img>
    80002212:	e4be                	sd	a5,72(sp)
    80002214:	00072797          	auipc	a5,0x72
    80002218:	a7c78793          	addi	a5,a5,-1412 # 80073c90 <person4_img>
    8000221c:	e8be                	sd	a5,80(sp)
    loop(
    8000221e:	0034                	addi	a3,sp,8
    };
    80002220:	00019797          	auipc	a5,0x19
    80002224:	85078793          	addi	a5,a5,-1968 # 8001aa70 <mask1_img>
    loop(
    80002228:	8b018613          	addi	a2,gp,-1872 # 800ab678 <_ZN12_GLOBAL__N_19loop2_semE>
    8000222c:	89818593          	addi	a1,gp,-1896 # 800ab660 <_ZN12_GLOBAL__N_19loop1_semE>
    80002230:	00088517          	auipc	a0,0x88
    80002234:	33850513          	addi	a0,a0,824 # 8008a568 <space4_img+0x24d8>
{
    80002238:	f486                	sd	ra,104(sp)
    };
    8000223a:	ecbe                	sd	a5,88(sp)
    loop(
    8000223c:	e13ff0ef          	jal	ra,8000204e <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh>
        __func__, &loop1_sem, &loop2_sem, img_list
    );
}
    80002240:	70a6                	ld	ra,104(sp)
    80002242:	6165                	addi	sp,sp,112
    80002244:	8082                	ret

0000000080002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
    80002246:	7139                	addi	sp,sp,-64
    80002248:	f822                	sd	s0,48(sp)
    8000224a:	fc06                	sd	ra,56(sp)
    8000224c:	f426                	sd	s1,40(sp)
    8000224e:	f04a                	sd	s2,32(sp)
    80002250:	ec4e                	sd	s3,24(sp)
    80002252:	e852                	sd	s4,16(sp)
    80002254:	e456                	sd	s5,8(sp)
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
    80002256:	02000793          	li	a5,32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
    8000225a:	842a                	mv	s0,a0
    if (op == BuiltinOperator_CUSTOM) {
    8000225c:	02f59363          	bne	a1,a5,80002282 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x3c>
      if (error_reporter_ != nullptr) {
    80002260:	19053503          	ld	a0,400(a0)
    80002264:	c561                	beqz	a0,8000232c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe6>
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
    80002266:	7442                	ld	s0,48(sp)
    80002268:	70e2                	ld	ra,56(sp)
    8000226a:	74a2                	ld	s1,40(sp)
    8000226c:	7902                	ld	s2,32(sp)
    8000226e:	69e2                	ld	s3,24(sp)
    80002270:	6a42                	ld	s4,16(sp)
    80002272:	6aa2                	ld	s5,8(sp)
        TF_LITE_REPORT_ERROR(error_reporter_,
    80002274:	00088597          	auipc	a1,0x88
    80002278:	2fc58593          	addi	a1,a1,764 # 8008a570 <space4_img+0x24e0>
  }
    8000227c:	6121                	addi	sp,sp,64
        TF_LITE_REPORT_ERROR(error_reporter_,
    8000227e:	62f0406f          	j	800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (FindOp(op) != nullptr) {
    80002282:	611c                	ld	a5,0(a0)
    80002284:	84ae                	mv	s1,a1
    80002286:	8ab2                	mv	s5,a2
    80002288:	7b9c                	ld	a5,48(a5)
    8000228a:	89b6                	mv	s3,a3
    8000228c:	9782                	jalr	a5
    8000228e:	c11d                	beqz	a0,800022b4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x6e>
      if (error_reporter_ != nullptr) {
    80002290:	19043503          	ld	a0,400(s0)
    80002294:	cd41                	beqz	a0,8000232c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe6>
  }
    80002296:	7442                	ld	s0,48(sp)
    80002298:	70e2                	ld	ra,56(sp)
    8000229a:	7902                	ld	s2,32(sp)
    8000229c:	69e2                	ld	s3,24(sp)
    8000229e:	6a42                	ld	s4,16(sp)
    800022a0:	6aa2                	ld	s5,8(sp)
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022a2:	8626                	mv	a2,s1
  }
    800022a4:	74a2                	ld	s1,40(sp)
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022a6:	00088597          	auipc	a1,0x88
    800022aa:	31258593          	addi	a1,a1,786 # 8008a5b8 <space4_img+0x2528>
  }
    800022ae:	6121                	addi	sp,sp,64
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022b0:	5fd0406f          	j	800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (registrations_len_ >= tOpCount) {
    800022b4:	14842903          	lw	s2,328(s0)
    800022b8:	4791                	li	a5,4
    800022ba:	0327f563          	bgeu	a5,s2,800022e4 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x9e>
    800022be:	19043503          	ld	a0,400(s0)
      if (error_reporter_) {
    800022c2:	c52d                	beqz	a0,8000232c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe6>
  }
    800022c4:	7442                	ld	s0,48(sp)
    800022c6:	70e2                	ld	ra,56(sp)
    800022c8:	7902                	ld	s2,32(sp)
    800022ca:	69e2                	ld	s3,24(sp)
    800022cc:	6a42                	ld	s4,16(sp)
    800022ce:	6aa2                	ld	s5,8(sp)
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022d0:	8626                	mv	a2,s1
  }
    800022d2:	74a2                	ld	s1,40(sp)
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022d4:	4695                	li	a3,5
    800022d6:	00088597          	auipc	a1,0x88
    800022da:	33258593          	addi	a1,a1,818 # 8008a608 <space4_img+0x2578>
  }
    800022de:	6121                	addi	sp,sp,64
        TF_LITE_REPORT_ERROR(error_reporter_,
    800022e0:	5cd0406f          	j	800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    registrations_[registrations_len_] = registration;
    800022e4:	02091793          	slli	a5,s2,0x20
    800022e8:	01a7da13          	srli	s4,a5,0x1a
    800022ec:	9a22                	add	s4,s4,s0
    800022ee:	04000613          	li	a2,64
    800022f2:	85d6                	mv	a1,s5
    800022f4:	008a0513          	addi	a0,s4,8
    800022f8:	b3fff0ef          	jal	ra,80001e36 <memcpy>
    builtin_codes_[num_buitin_ops_] = op;
    800022fc:	18842683          	lw	a3,392(s0)
    registrations_[registrations_len_].builtin_code = op;
    80002300:	029a2823          	sw	s1,48(s4)
    registrations_len_++;
    80002304:	2905                	addiw	s2,s2,1
    builtin_codes_[num_buitin_ops_] = op;
    80002306:	02069793          	slli	a5,a3,0x20
    8000230a:	9381                	srli	a5,a5,0x20
    8000230c:	05078713          	addi	a4,a5,80
    80002310:	070a                	slli	a4,a4,0x2
    builtin_parsers_[num_buitin_ops_] = parser;
    80002312:	02c78793          	addi	a5,a5,44
    registrations_len_++;
    80002316:	15242423          	sw	s2,328(s0)
    builtin_codes_[num_buitin_ops_] = op;
    8000231a:	9722                	add	a4,a4,s0
    builtin_parsers_[num_buitin_ops_] = parser;
    8000231c:	078e                	slli	a5,a5,0x3
    builtin_codes_[num_buitin_ops_] = op;
    8000231e:	c744                	sw	s1,12(a4)
    builtin_parsers_[num_buitin_ops_] = parser;
    80002320:	97a2                	add	a5,a5,s0
    80002322:	0137b023          	sd	s3,0(a5)
    num_buitin_ops_++;
    80002326:	2685                	addiw	a3,a3,1
    80002328:	18d42423          	sw	a3,392(s0)
  }
    8000232c:	70e2                	ld	ra,56(sp)
    8000232e:	7442                	ld	s0,48(sp)
    80002330:	74a2                	ld	s1,40(sp)
    80002332:	7902                	ld	s2,32(sp)
    80002334:	69e2                	ld	s3,24(sp)
    80002336:	6a42                	ld	s4,16(sp)
    80002338:	6aa2                	ld	s5,8(sp)
    8000233a:	6121                	addi	sp,sp,64
    8000233c:	8082                	ret

000000008000233e <_Z3outPvS_S_>:
        __func__, &loop2_sem, &loop1_sem, img_list
    );
    k_sem_give(&out_sem);
}
void out(void* dummy1, void* dummy2, void* dummy3)
{
    8000233e:	1101                	addi	sp,sp,-32
    80002340:	ec06                	sd	ra,24(sp)
    80002342:	e822                	sd	s0,16(sp)
    80002344:	e426                	sd	s1,8(sp)
	return z_impl_k_sem_take(sem, timeout);
    80002346:	8c818493          	addi	s1,gp,-1848 # 800ab690 <_ZN12_GLOBAL__N_17out_semE>
    8000234a:	55fd                	li	a1,-1
    8000234c:	8526                	mv	a0,s1
    8000234e:	061090ef          	jal	ra,8000bbae <z_impl_k_sem_take>
    ARG_UNUSED(dummy1);
    ARG_UNUSED(dummy2);
    ARG_UNUSED(dummy3);

    k_sem_take(&out_sem, K_FOREVER);
    int64_t p_initial = k_uptime_get();
    80002352:	cb1ff0ef          	jal	ra,80002002 <k_uptime_get>
    80002356:	842a                	mv	s0,a0
	z_impl_k_sem_give(sem);
    80002358:	89818513          	addi	a0,gp,-1896 # 800ab660 <_ZN12_GLOBAL__N_19loop1_semE>
    8000235c:	7f2090ef          	jal	ra,8000bb4e <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    80002360:	55fd                	li	a1,-1
    80002362:	8526                	mv	a0,s1
    80002364:	04b090ef          	jal	ra,8000bbae <z_impl_k_sem_take>
    k_sem_give(&loop1_sem);
    k_sem_take(&out_sem, K_FOREVER);
    printk(
    80002368:	00088597          	auipc	a1,0x88
    8000236c:	2e858593          	addi	a1,a1,744 # 8008a650 <space4_img+0x25c0>
    80002370:	0008b717          	auipc	a4,0x8b
    80002374:	79072703          	lw	a4,1936(a4) # 8008db00 <_ZN12_GLOBAL__N_111other_countE>
    80002378:	0008b697          	auipc	a3,0x8b
    8000237c:	7906a683          	lw	a3,1936(a3) # 8008db08 <_ZN12_GLOBAL__N_116not_person_countE>
    80002380:	0008b617          	auipc	a2,0x8b
    80002384:	78462603          	lw	a2,1924(a2) # 8008db04 <_ZN12_GLOBAL__N_112person_countE>
    80002388:	00088517          	auipc	a0,0x88
    8000238c:	2d050513          	addi	a0,a0,720 # 8008a658 <space4_img+0x25c8>
    80002390:	460000ef          	jal	ra,800027f0 <printk>
        "Person Count = %d\n"
        "No Person Count = %d\n"
        "Other Count = %d\n\n",
        __func__, person_count, not_person_count, other_count
    );
    int64_t p_final = k_uptime_get();
    80002394:	c6fff0ef          	jal	ra,80002002 <k_uptime_get>
    printk(
        "Time taken for whole program: %lld seconds\n\n"
        "PROGRAM ENDED\n",
        (p_final - p_initial) / 1000
    80002398:	8d01                	sub	a0,a0,s0
    printk(
    8000239a:	3e800593          	li	a1,1000
    8000239e:	02b545b3          	div	a1,a0,a1
    );
}
    800023a2:	6442                	ld	s0,16(sp)
    800023a4:	60e2                	ld	ra,24(sp)
    800023a6:	64a2                	ld	s1,8(sp)
    printk(
    800023a8:	00088517          	auipc	a0,0x88
    800023ac:	2f850513          	addi	a0,a0,760 # 8008a6a0 <space4_img+0x2610>
}
    800023b0:	6105                	addi	sp,sp,32
    printk(
    800023b2:	a93d                	j	800027f0 <printk>

00000000800023b4 <_Z5loop2PvS_S_>:
{
    800023b4:	7159                	addi	sp,sp,-112
    };
    800023b6:	00074797          	auipc	a5,0x74
    800023ba:	cda78793          	addi	a5,a5,-806 # 80076090 <person5_img>
    800023be:	e43e                	sd	a5,8(sp)
    800023c0:	00076797          	auipc	a5,0x76
    800023c4:	0d078793          	addi	a5,a5,208 # 80078490 <person6_img>
    800023c8:	e83e                	sd	a5,16(sp)
    800023ca:	00014797          	auipc	a5,0x14
    800023ce:	ea678793          	addi	a5,a5,-346 # 80016270 <car4_img>
    800023d2:	ec3e                	sd	a5,24(sp)
    800023d4:	00016797          	auipc	a5,0x16
    800023d8:	29c78793          	addi	a5,a5,668 # 80018670 <car5_img>
    800023dc:	f03e                	sd	a5,32(sp)
    800023de:	00086797          	auipc	a5,0x86
    800023e2:	cb278793          	addi	a5,a5,-846 # 80088090 <space4_img>
    800023e6:	f43e                	sd	a5,40(sp)
    800023e8:	00078797          	auipc	a5,0x78
    800023ec:	4a878793          	addi	a5,a5,1192 # 8007a890 <person7_img>
    800023f0:	f83e                	sd	a5,48(sp)
    800023f2:	0007b797          	auipc	a5,0x7b
    800023f6:	89e78793          	addi	a5,a5,-1890 # 8007cc90 <person8_img>
    800023fa:	fc3e                	sd	a5,56(sp)
    800023fc:	0007d797          	auipc	a5,0x7d
    80002400:	c9478793          	addi	a5,a5,-876 # 8007f090 <person9_img>
    80002404:	e0be                	sd	a5,64(sp)
    80002406:	0006b797          	auipc	a5,0x6b
    8000240a:	c8a78793          	addi	a5,a5,-886 # 8006d090 <person10_img>
    8000240e:	e4be                	sd	a5,72(sp)
    80002410:	00066797          	auipc	a5,0x66
    80002414:	48078793          	addi	a5,a5,1152 # 80068890 <monkey_img>
    80002418:	e8be                	sd	a5,80(sp)
    loop(
    8000241a:	0034                	addi	a3,sp,8
    };
    8000241c:	0001b797          	auipc	a5,0x1b
    80002420:	a5478793          	addi	a5,a5,-1452 # 8001ce70 <mask2_img>
    loop(
    80002424:	89818613          	addi	a2,gp,-1896 # 800ab660 <_ZN12_GLOBAL__N_19loop1_semE>
    80002428:	8b018593          	addi	a1,gp,-1872 # 800ab678 <_ZN12_GLOBAL__N_19loop2_semE>
    8000242c:	00088517          	auipc	a0,0x88
    80002430:	2b450513          	addi	a0,a0,692 # 8008a6e0 <space4_img+0x2650>
{
    80002434:	f486                	sd	ra,104(sp)
    };
    80002436:	ecbe                	sd	a5,88(sp)
    loop(
    80002438:	c17ff0ef          	jal	ra,8000204e <_ZN12_GLOBAL__N_14loopEPKcP5k_semS3_PPKh>
	z_impl_k_sem_give(sem);
    8000243c:	8c818513          	addi	a0,gp,-1848 # 800ab690 <_ZN12_GLOBAL__N_17out_semE>
    80002440:	70e090ef          	jal	ra,8000bb4e <z_impl_k_sem_give>
}
    80002444:	70a6                	ld	ra,104(sp)
    80002446:	6165                	addi	sp,sp,112
    80002448:	8082                	ret

000000008000244a <_ZN6tflite18MicroErrorReporterD0Ev>:
    8000244a:	78b0a06f          	j	8000d3d4 <_ZdlPv>

000000008000244e <_Z5setupv>:
{
    8000244e:	711d                	addi	sp,sp,-96
    80002450:	ec86                	sd	ra,88(sp)
    80002452:	e8a2                	sd	s0,80(sp)
    80002454:	e4a6                	sd	s1,72(sp)
    80002456:	e0ca                	sd	s2,64(sp)
    static tflite::MicroErrorReporter micro_error_reporter;
    80002458:	0008b797          	auipc	a5,0x8b
    8000245c:	5e878793          	addi	a5,a5,1512 # 8008da40 <_ZGVZ5setupvE20micro_error_reporter>
    80002460:	0007c703          	lbu	a4,0(a5)
    80002464:	e315                	bnez	a4,80002488 <_Z5setupv+0x3a>
    80002466:	4705                	li	a4,1
    80002468:	00e78023          	sb	a4,0(a5)
    8000246c:	0008b617          	auipc	a2,0x8b
    80002470:	60460613          	addi	a2,a2,1540 # 8008da70 <__dso_handle>
    80002474:	000a9597          	auipc	a1,0xa9
    80002478:	15458593          	addi	a1,a1,340 # 800ab5c8 <_ZZ5setupvE20micro_error_reporter>
    8000247c:	00000517          	auipc	a0,0x0
    80002480:	ae250513          	addi	a0,a0,-1310 # 80001f5e <_ZN6tflite18MicroErrorReporterD1Ev>
    80002484:	521000ef          	jal	ra,800031a4 <__cxa_atexit>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    80002488:	0001d717          	auipc	a4,0x1d
    8000248c:	de870713          	addi	a4,a4,-536 # 8001f270 <person_detect>
    80002490:	00174683          	lbu	a3,1(a4)
    error_reporter = &micro_error_reporter;
    80002494:	000a9797          	auipc	a5,0xa9
    80002498:	13478793          	addi	a5,a5,308 # 800ab5c8 <_ZZ5setupvE20micro_error_reporter>
    8000249c:	0008b417          	auipc	s0,0x8b
    800024a0:	5b440413          	addi	s0,s0,1460 # 8008da50 <_ZN12_GLOBAL__N_114error_reporterE>
    800024a4:	e01c                	sd	a5,0(s0)
    800024a6:	00074783          	lbu	a5,0(a4)
    800024aa:	06a2                	slli	a3,a3,0x8
    model = tflite::GetModel(person_detect);
    800024ac:	0008b917          	auipc	s2,0x8b
    800024b0:	5b490913          	addi	s2,s2,1460 # 8008da60 <_ZN12_GLOBAL__N_15modelE>
    800024b4:	8edd                	or	a3,a3,a5
    800024b6:	00274783          	lbu	a5,2(a4)
    800024ba:	07c2                	slli	a5,a5,0x10
    800024bc:	8edd                	or	a3,a3,a5
    800024be:	00374783          	lbu	a5,3(a4)
    800024c2:	07e2                	slli	a5,a5,0x18
    800024c4:	8fd5                	or	a5,a5,a3
    800024c6:	97ba                	add	a5,a5,a4
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    800024c8:	4398                	lw	a4,0(a5)
    800024ca:	00f93023          	sd	a5,0(s2)
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800024ce:	4691                	li	a3,4
    return data_ - ReadScalar<soffset_t>(data_);
    800024d0:	40e78733          	sub	a4,a5,a4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800024d4:	00075603          	lhu	a2,0(a4)
    800024d8:	02c6fa63          	bgeu	a3,a2,8000250c <_Z5setupv+0xbe>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    800024dc:	00475703          	lhu	a4,4(a4)
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    800024e0:	c715                	beqz	a4,8000250c <_Z5setupv+0xbe>
    800024e2:	97ba                	add	a5,a5,a4
    800024e4:	4390                	lw	a2,0(a5)
    if (model->version() != TFLITE_SCHEMA_VERSION)
    800024e6:	478d                	li	a5,3
    800024e8:	02f60463          	beq	a2,a5,80002510 <_Z5setupv+0xc2>
}
    800024ec:	6446                	ld	s0,80(sp)
    800024ee:	60e6                	ld	ra,88(sp)
    800024f0:	64a6                	ld	s1,72(sp)
    800024f2:	6906                	ld	s2,64(sp)
        error_reporter->Report(
    800024f4:	468d                	li	a3,3
    800024f6:	00088597          	auipc	a1,0x88
    800024fa:	1f258593          	addi	a1,a1,498 # 8008a6e8 <space4_img+0x2658>
    800024fe:	000a9517          	auipc	a0,0xa9
    80002502:	0ca50513          	addi	a0,a0,202 # 800ab5c8 <_ZZ5setupvE20micro_error_reporter>
}
    80002506:	6125                	addi	sp,sp,96
        error_reporter->Report(
    80002508:	3a50406f          	j	800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    8000250c:	4601                	li	a2,0
    8000250e:	bff9                	j	800024ec <_Z5setupv+0x9e>
    static tflite::MicroMutableOpResolver<5> micro_op_resolver;
    80002510:	0008b797          	auipc	a5,0x8b
    80002514:	52078793          	addi	a5,a5,1312 # 8008da30 <_ZGVZ5setupvE17micro_op_resolver>
    80002518:	0007c703          	lbu	a4,0(a5)
    8000251c:	000a5597          	auipc	a1,0xa5
    80002520:	96c58593          	addi	a1,a1,-1684 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    80002524:	ef1d                	bnez	a4,80002562 <_Z5setupv+0x114>
      : error_reporter_(error_reporter) {}
    80002526:	00088717          	auipc	a4,0x88
    8000252a:	29270713          	addi	a4,a4,658 # 8008a7b8 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE+0x10>
    8000252e:	e198                	sd	a4,0(a1)
    80002530:	000a5717          	auipc	a4,0xa5
    80002534:	aa072023          	sw	zero,-1376(a4) # 800a6fd0 <_ZZ5setupvE17micro_op_resolver+0x148>
    80002538:	000a5717          	auipc	a4,0xa5
    8000253c:	ac072c23          	sw	zero,-1320(a4) # 800a7010 <_ZZ5setupvE17micro_op_resolver+0x188>
    80002540:	000a5717          	auipc	a4,0xa5
    80002544:	ac073c23          	sd	zero,-1320(a4) # 800a7018 <_ZZ5setupvE17micro_op_resolver+0x190>
    80002548:	4705                	li	a4,1
    8000254a:	00e78023          	sb	a4,0(a5)
    8000254e:	0008b617          	auipc	a2,0x8b
    80002552:	52260613          	addi	a2,a2,1314 # 8008da70 <__dso_handle>
    80002556:	00000517          	auipc	a0,0x0
    8000255a:	a0a50513          	addi	a0,a0,-1526 # 80001f60 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
    8000255e:	447000ef          	jal	ra,800031a4 <__cxa_atexit>
    micro_op_resolver.AddConv2D();
    80002562:	850a                	mv	a0,sp
    80002564:	0fd050ef          	jal	ra,80007e60 <_ZN6tflite16Register_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
    80002568:	00004697          	auipc	a3,0x4
    8000256c:	7e468693          	addi	a3,a3,2020 # 80006d4c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    80002570:	860a                	mv	a2,sp
    80002572:	458d                	li	a1,3
    80002574:	000a5517          	auipc	a0,0xa5
    80002578:	91450513          	addi	a0,a0,-1772 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    8000257c:	ccbff0ef          	jal	ra,80002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    80002580:	850a                	mv	a0,sp
    80002582:	5ca060ef          	jal	ra,80008b4c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
    80002586:	00005697          	auipc	a3,0x5
    8000258a:	8b268693          	addi	a3,a3,-1870 # 80006e38 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    8000258e:	860a                	mv	a2,sp
    80002590:	4591                	li	a1,4
    80002592:	000a5517          	auipc	a0,0xa5
    80002596:	8f650513          	addi	a0,a0,-1802 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    8000259a:	cadff0ef          	jal	ra,80002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    8000259e:	850a                	mv	a0,sp
    800025a0:	126070ef          	jal	ra,800096c6 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
    800025a4:	00005697          	auipc	a3,0x5
    800025a8:	97c68693          	addi	a3,a3,-1668 # 80006f20 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    800025ac:	860a                	mv	a2,sp
    800025ae:	4585                	li	a1,1
    800025b0:	000a5517          	auipc	a0,0xa5
    800025b4:	8d850513          	addi	a0,a0,-1832 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    800025b8:	c8fff0ef          	jal	ra,80002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    800025bc:	850a                	mv	a0,sp
    800025be:	71f070ef          	jal	ra,8000a4dc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    return AddBuiltin(BuiltinOperator_RESHAPE,
    800025c2:	00004697          	auipc	a3,0x4
    800025c6:	67c68693          	addi	a3,a3,1660 # 80006c3e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    800025ca:	860a                	mv	a2,sp
    800025cc:	45d9                	li	a1,22
    800025ce:	000a5517          	auipc	a0,0xa5
    800025d2:	8ba50513          	addi	a0,a0,-1862 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    800025d6:	c71ff0ef          	jal	ra,80002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    micro_op_resolver.AddSoftmax();
    800025da:	850a                	mv	a0,sp
    800025dc:	080080ef          	jal	ra,8000a65c <_ZN6tflite16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
    800025e0:	00005697          	auipc	a3,0x5
    800025e4:	a4268693          	addi	a3,a3,-1470 # 80007022 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    800025e8:	860a                	mv	a2,sp
    800025ea:	45e5                	li	a1,25
    800025ec:	000a5517          	auipc	a0,0xa5
    800025f0:	89c50513          	addi	a0,a0,-1892 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    800025f4:	c53ff0ef          	jal	ra,80002246 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    );
    800025f8:	0008b497          	auipc	s1,0x8b
    800025fc:	44048493          	addi	s1,s1,1088 # 8008da38 <_ZGVZ5setupvE18static_interpreter>
    80002600:	0004c783          	lbu	a5,0(s1)
    80002604:	e7a9                	bnez	a5,8000264e <_Z5setupv+0x200>
    80002606:	601c                	ld	a5,0(s0)
    80002608:	00093583          	ld	a1,0(s2)
    8000260c:	000a5617          	auipc	a2,0xa5
    80002610:	87c60613          	addi	a2,a2,-1924 # 800a6e88 <_ZZ5setupvE17micro_op_resolver>
    80002614:	000a5517          	auipc	a0,0xa5
    80002618:	a0c50513          	addi	a0,a0,-1524 # 800a7020 <_ZZ5setupvE18static_interpreter>
    8000261c:	4801                	li	a6,0
    8000261e:	6765                	lui	a4,0x19
    80002620:	0008b697          	auipc	a3,0x8b
    80002624:	74868693          	addi	a3,a3,1864 # 8008dd68 <_ZN12_GLOBAL__N_1L12tensor_arenaE>
    80002628:	3c8020ef          	jal	ra,800049f0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhmPNS_13ErrorReporterEPNS_13MicroProfilerE>
    8000262c:	4785                	li	a5,1
    8000262e:	00f48023          	sb	a5,0(s1)
    80002632:	0008b617          	auipc	a2,0x8b
    80002636:	43e60613          	addi	a2,a2,1086 # 8008da70 <__dso_handle>
    8000263a:	000a5597          	auipc	a1,0xa5
    8000263e:	9e658593          	addi	a1,a1,-1562 # 800a7020 <_ZZ5setupvE18static_interpreter>
    80002642:	00002517          	auipc	a0,0x2
    80002646:	4fc50513          	addi	a0,a0,1276 # 80004b3e <_ZN6tflite16MicroInterpreterD1Ev>
    8000264a:	35b000ef          	jal	ra,800031a4 <__cxa_atexit>
    interpreter = &static_interpreter;
    8000264e:	0008b497          	auipc	s1,0x8b
    80002652:	3fa48493          	addi	s1,s1,1018 # 8008da48 <_ZN12_GLOBAL__N_111interpreterE>
    80002656:	000a5517          	auipc	a0,0xa5
    8000265a:	9ca50513          	addi	a0,a0,-1590 # 800a7020 <_ZZ5setupvE18static_interpreter>
    8000265e:	e088                	sd	a0,0(s1)
    TfLiteStatus allocate_status = interpreter->AllocateTensors();
    80002660:	76a020ef          	jal	ra,80004dca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    if (allocate_status != kTfLiteOk)
    80002664:	cd09                	beqz	a0,8000267e <_Z5setupv+0x230>
        TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    80002666:	6008                	ld	a0,0(s0)
}
    80002668:	6446                	ld	s0,80(sp)
    8000266a:	60e6                	ld	ra,88(sp)
    8000266c:	64a6                	ld	s1,72(sp)
    8000266e:	6906                	ld	s2,64(sp)
        TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    80002670:	00088597          	auipc	a1,0x88
    80002674:	0b858593          	addi	a1,a1,184 # 8008a728 <space4_img+0x2698>
}
    80002678:	6125                	addi	sp,sp,96
        TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    8000267a:	2330406f          	j	800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    input = interpreter->input(0);
    8000267e:	6088                	ld	a0,0(s1)
    80002680:	4581                	li	a1,0
    80002682:	426020ef          	jal	ra,80004aa8 <_ZN6tflite16MicroInterpreter5inputEm>
}
    80002686:	60e6                	ld	ra,88(sp)
    80002688:	6446                	ld	s0,80(sp)
    input = interpreter->input(0);
    8000268a:	0008b797          	auipc	a5,0x8b
    8000268e:	3ca7b723          	sd	a0,974(a5) # 8008da58 <_ZN12_GLOBAL__N_15inputE>
}
    80002692:	64a6                	ld	s1,72(sp)
    80002694:	6906                	ld	s2,64(sp)
    80002696:	6125                	addi	sp,sp,96
    80002698:	8082                	ret

000000008000269a <main>:
int main()
{
    8000269a:	7179                	addi	sp,sp,-48
    8000269c:	f022                	sd	s0,32(sp)
    8000269e:	f406                	sd	ra,40(sp)
    800026a0:	ec26                	sd	s1,24(sp)
    800026a2:	e84a                	sd	s2,16(sp)
    800026a4:	547d                	li	s0,-1
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    800026a6:	000a4497          	auipc	s1,0xa4
    800026aa:	6c248493          	addi	s1,s1,1730 # 800a6d68 <_ZN12_GLOBAL__N_1L8out_dataE>
    800026ae:	e422                	sd	s0,8(sp)
    800026b0:	e002                	sd	zero,0(sp)
    800026b2:	4889                	li	a7,2
    800026b4:	4801                	li	a6,0
    800026b6:	4781                	li	a5,0
    800026b8:	4701                	li	a4,0
    800026ba:	00000697          	auipc	a3,0x0
    800026be:	c8468693          	addi	a3,a3,-892 # 8000233e <_Z3outPvS_S_>
    800026c2:	7f000613          	li	a2,2032
    800026c6:	000a6597          	auipc	a1,0xa6
    800026ca:	e3a58593          	addi	a1,a1,-454 # 800a8500 <_ZN12_GLOBAL__N_114out_stack_areaE>
    800026ce:	8526                	mv	a0,s1
    800026d0:	176090ef          	jal	ra,8000b846 <z_impl_k_thread_create>
	z_impl_k_thread_start(thread);
    800026d4:	8526                	mv	a0,s1
    800026d6:	0f0090ef          	jal	ra,8000b7c6 <z_impl_k_thread_start>
    k_thread_create(
        &out_data, out_stack_area, K_THREAD_STACK_SIZEOF(out_stack_area),
        out, NULL, NULL, NULL, 2, 0, K_FOREVER
    );
    k_thread_start(&out_data);
    printk("STARTING PROGRAM\n\n");
    800026da:	00088517          	auipc	a0,0x88
    800026de:	06e50513          	addi	a0,a0,110 # 8008a748 <space4_img+0x26b8>
    800026e2:	10e000ef          	jal	ra,800027f0 <printk>
    setup();
    800026e6:	d69ff0ef          	jal	ra,8000244e <_Z5setupv>
    printk("Setup completed\n\n");
    800026ea:	00088517          	auipc	a0,0x88
    800026ee:	07650513          	addi	a0,a0,118 # 8008a760 <space4_img+0x26d0>
    800026f2:	0fe000ef          	jal	ra,800027f0 <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    800026f6:	0008b917          	auipc	s2,0x8b
    800026fa:	43290913          	addi	s2,s2,1074 # 8008db28 <_ZN12_GLOBAL__N_1L10loop1_dataE>
    800026fe:	e422                	sd	s0,8(sp)
    80002700:	e002                	sd	zero,0(sp)
    80002702:	4885                	li	a7,1
    80002704:	4801                	li	a6,0
    80002706:	4781                	li	a5,0
    80002708:	4701                	li	a4,0
    8000270a:	00000697          	auipc	a3,0x0
    8000270e:	aae68693          	addi	a3,a3,-1362 # 800021b8 <_Z5loop1PvS_S_>
    80002712:	7f000613          	li	a2,2032
    80002716:	000a5597          	auipc	a1,0xa5
    8000271a:	e0a58593          	addi	a1,a1,-502 # 800a7520 <_ZN12_GLOBAL__N_116loop1_stack_areaE>
    8000271e:	854a                	mv	a0,s2
    80002720:	126090ef          	jal	ra,8000b846 <z_impl_k_thread_create>
    80002724:	0008b497          	auipc	s1,0x8b
    80002728:	52448493          	addi	s1,s1,1316 # 8008dc48 <_ZN12_GLOBAL__N_1L10loop2_dataE>
    8000272c:	4885                	li	a7,1
    8000272e:	4801                	li	a6,0
    80002730:	4781                	li	a5,0
    80002732:	4701                	li	a4,0
    80002734:	00000697          	auipc	a3,0x0
    80002738:	c8068693          	addi	a3,a3,-896 # 800023b4 <_Z5loop2PvS_S_>
    8000273c:	7f000613          	li	a2,2032
    80002740:	000a5597          	auipc	a1,0xa5
    80002744:	5d058593          	addi	a1,a1,1488 # 800a7d10 <_ZN12_GLOBAL__N_116loop2_stack_areaE>
    80002748:	e422                	sd	s0,8(sp)
    8000274a:	e002                	sd	zero,0(sp)
    8000274c:	8526                	mv	a0,s1
    8000274e:	0f8090ef          	jal	ra,8000b846 <z_impl_k_thread_create>
    );
    k_thread_create(
        &loop2_data, loop2_stack_area, K_THREAD_STACK_SIZEOF(loop2_stack_area),
        loop2, NULL, NULL, NULL, PRIORITY, 0, K_FOREVER
    );
    printk("Starting loop1 thread\n\n");
    80002752:	00088517          	auipc	a0,0x88
    80002756:	02650513          	addi	a0,a0,38 # 8008a778 <space4_img+0x26e8>
    8000275a:	096000ef          	jal	ra,800027f0 <printk>
	z_impl_k_thread_start(thread);
    8000275e:	854a                	mv	a0,s2
    80002760:	066090ef          	jal	ra,8000b7c6 <z_impl_k_thread_start>
    k_thread_start(&loop1_data);
    printk("Starting loop2 thread\n\n");
    80002764:	00088517          	auipc	a0,0x88
    80002768:	02c50513          	addi	a0,a0,44 # 8008a790 <space4_img+0x2700>
    8000276c:	084000ef          	jal	ra,800027f0 <printk>
    80002770:	8526                	mv	a0,s1
    80002772:	054090ef          	jal	ra,8000b7c6 <z_impl_k_thread_start>
    k_thread_start(&loop2_data);
    return 0;
}
    80002776:	70a2                	ld	ra,40(sp)
    80002778:	7402                	ld	s0,32(sp)
    8000277a:	64e2                	ld	s1,24(sp)
    8000277c:	6942                	ld	s2,16(sp)
    8000277e:	4501                	li	a0,0
    80002780:	6145                	addi	sp,sp,48
    80002782:	8082                	ret

0000000080002784 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    80002784:	4501                	li	a0,0
    80002786:	8082                	ret

0000000080002788 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    80002788:	419c                	lw	a5,0(a1)
    8000278a:	2785                	addiw	a5,a5,1
    8000278c:	c19c                	sw	a5,0(a1)
	return _char_out(c);
    8000278e:	8081b783          	ld	a5,-2040(gp) # 800ab5d0 <_char_out>
    80002792:	8782                	jr	a5

0000000080002794 <__printk_hook_install>:
	_char_out = fn;
    80002794:	80a1b423          	sd	a0,-2040(gp) # 800ab5d0 <_char_out>
}
    80002798:	8082                	ret

000000008000279a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    8000279a:	7179                	addi	sp,sp,-48
    8000279c:	f406                	sd	ra,40(sp)
    8000279e:	f022                	sd	s0,32(sp)
    800027a0:	ec26                	sd	s1,24(sp)
    800027a2:	862a                	mv	a2,a0
    800027a4:	86ae                	mv	a3,a1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    800027a6:	c402                	sw	zero,8(sp)
 */
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile ("csrrc %0, mstatus, %1"
    800027a8:	300474f3          	csrrci	s1,mstatus,8
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    800027ac:	0008b417          	auipc	s0,0x8b
    800027b0:	2bc40413          	addi	s0,s0,700 # 8008da68 <lock>
    800027b4:	4705                	li	a4,1
    800027b6:	0f50000f          	fence	iorw,ow
    800027ba:	140437af          	lr.d.aq	a5,(s0)
    800027be:	e781                	bnez	a5,800027c6 <vprintk+0x2c>
    800027c0:	1ce435af          	sc.d.aq	a1,a4,(s0)
    800027c4:	f9fd                	bnez	a1,800027ba <vprintk+0x20>
	__ASSERT_NO_MSG(z_spin_lock_mem_coherent(l));
# endif
#endif

#ifdef CONFIG_SMP
	while (!atomic_cas(&l->locked, 0, 1)) {
    800027c6:	fbe5                	bnez	a5,800027b6 <vprintk+0x1c>
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    800027c8:	002c                	addi	a1,sp,8
    800027ca:	00000517          	auipc	a0,0x0
    800027ce:	fbe50513          	addi	a0,a0,-66 # 80002788 <char_out>
    800027d2:	178000ef          	jal	ra,8000294a <cbvprintf>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    800027d6:	4781                	li	a5,0
    800027d8:	0f50000f          	fence	iorw,ow
    800027dc:	0cf437af          	amoswap.d.aq	a5,a5,(s0)
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
			  :
			  : "r" (key & MSTATUS_IEN)
    800027e0:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    800027e2:	3004a073          	csrs	mstatus,s1

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    800027e6:	70a2                	ld	ra,40(sp)
    800027e8:	7402                	ld	s0,32(sp)
    800027ea:	64e2                	ld	s1,24(sp)
    800027ec:	6145                	addi	sp,sp,48
    800027ee:	8082                	ret

00000000800027f0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    800027f0:	711d                	addi	sp,sp,-96
    800027f2:	f42e                	sd	a1,40(sp)
	va_list ap;

	va_start(ap, fmt);
    800027f4:	102c                	addi	a1,sp,40
{
    800027f6:	ec06                	sd	ra,24(sp)
    800027f8:	f832                	sd	a2,48(sp)
    800027fa:	fc36                	sd	a3,56(sp)
    800027fc:	e0ba                	sd	a4,64(sp)
    800027fe:	e4be                	sd	a5,72(sp)
    80002800:	e8c2                	sd	a6,80(sp)
    80002802:	ecc6                	sd	a7,88(sp)
	va_start(ap, fmt);
    80002804:	e42e                	sd	a1,8(sp)

	vprintk(fmt, ap);
    80002806:	f95ff0ef          	jal	ra,8000279a <vprintk>

	va_end(ap);
}
    8000280a:	60e2                	ld	ra,24(sp)
    8000280c:	6125                	addi	sp,sp,96
    8000280e:	8082                	ret

0000000080002810 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    80002810:	1141                	addi	sp,sp,-16
    80002812:	87aa                	mv	a5,a0
    80002814:	852e                	mv	a0,a1
    80002816:	85b2                	mv	a1,a2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    80002818:	8636                	mv	a2,a3
{
    8000281a:	e406                	sd	ra,8(sp)
	entry(p1, p2, p3);
    8000281c:	9782                	jalr	a5
	return z_impl_z_current_get();
    8000281e:	646090ef          	jal	ra,8000be64 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    80002822:	5120a0ef          	jal	ra,8000cd34 <z_impl_k_thread_abort>

0000000080002826 <extract_decimal>:
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
    80002826:	6114                	ld	a3,0(a0)
{
    80002828:	872a                	mv	a4,a0
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    8000282a:	0008b597          	auipc	a1,0x8b
    8000282e:	e3758593          	addi	a1,a1,-457 # 8008d661 <_ctype_+0x1>
	size_t val = 0;
    80002832:	4501                	li	a0,0
		val = 10U * val + *sp++ - '0';
    80002834:	4829                	li	a6,10
	while (isdigit((int)(unsigned char)*sp)) {
    80002836:	0006c603          	lbu	a2,0(a3)
    8000283a:	00b607b3          	add	a5,a2,a1
    8000283e:	0007c783          	lbu	a5,0(a5)
    80002842:	8b91                	andi	a5,a5,4
    80002844:	e399                	bnez	a5,8000284a <extract_decimal+0x24>
	}
	*str = sp;
    80002846:	e314                	sd	a3,0(a4)
	return val;
}
    80002848:	8082                	ret
		val = 10U * val + *sp++ - '0';
    8000284a:	03050533          	mul	a0,a0,a6
    8000284e:	0685                	addi	a3,a3,1
    80002850:	fd050793          	addi	a5,a0,-48
    80002854:	00c78533          	add	a0,a5,a2
    80002858:	bff9                	j	80002836 <extract_decimal+0x10>

000000008000285a <encode_uint>:
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
	bool upcase = isupper((int)conv->specifier);
    8000285a:	0035c703          	lbu	a4,3(a1)
    8000285e:	0008b797          	auipc	a5,0x8b
    80002862:	e0378793          	addi	a5,a5,-509 # 8008d661 <_ctype_+0x1>
{
    80002866:	882a                	mv	a6,a0
	bool upcase = isupper((int)conv->specifier);
    80002868:	97ba                	add	a5,a5,a4
{
    8000286a:	8536                	mv	a0,a3
    8000286c:	0007c683          	lbu	a3,0(a5)
	switch (specifier) {
    80002870:	06f00893          	li	a7,111
    80002874:	47a1                	li	a5,8
    80002876:	8a8d                	andi	a3,a3,3
    80002878:	01170a63          	beq	a4,a7,8000288c <encode_uint+0x32>
    8000287c:	04e8ea63          	bltu	a7,a4,800028d0 <encode_uint+0x76>
    80002880:	05800893          	li	a7,88
		return 10;
    80002884:	47a9                	li	a5,10
	switch (specifier) {
    80002886:	01171363          	bne	a4,a7,8000288c <encode_uint+0x32>
		return 16;
    8000288a:	47c1                	li	a5,16
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    8000288c:	4325                	li	t1,9
    8000288e:	4e05                	li	t3,1
		unsigned int lsv = (unsigned int)(value % radix);
    80002890:	02f87733          	remu	a4,a6,a5
		*--bp = (lsv <= 9) ? ('0' + lsv)
    80002894:	0ff77893          	andi	a7,a4,255
    80002898:	04e36363          	bltu	t1,a4,800028de <encode_uint+0x84>
    8000289c:	03088713          	addi	a4,a7,48
    800028a0:	fee50fa3          	sb	a4,-1(a0)
    800028a4:	157d                	addi	a0,a0,-1
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    800028a6:	02f85733          	divu	a4,a6,a5
	} while ((value != 0) && (bps < bp));
    800028aa:	00f86463          	bltu	a6,a5,800028b2 <encode_uint+0x58>
    800028ae:	02a66663          	bltu	a2,a0,800028da <encode_uint+0x80>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    800028b2:	0005d703          	lhu	a4,0(a1)
    800028b6:	02077713          	andi	a4,a4,32
    800028ba:	cb11                	beqz	a4,800028ce <encode_uint+0x74>
		if (radix == 8) {
    800028bc:	4721                	li	a4,8
    800028be:	02e79763          	bne	a5,a4,800028ec <encode_uint+0x92>
			conv->altform_0 = true;
    800028c2:	0025c783          	lbu	a5,2(a1)
    800028c6:	0087e793          	ori	a5,a5,8
		} else if (radix == 16) {
			conv->altform_0c = true;
    800028ca:	00f58123          	sb	a5,2(a1)
			;
		}
	}

	return bp;
}
    800028ce:	8082                	ret
	switch (specifier) {
    800028d0:	0f777713          	andi	a4,a4,247
    800028d4:	07000893          	li	a7,112
    800028d8:	b775                	j	80002884 <encode_uint+0x2a>
		value /= radix;
    800028da:	883a                	mv	a6,a4
    800028dc:	bf55                	j	80002890 <encode_uint+0x36>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    800028de:	05788713          	addi	a4,a7,87
    800028e2:	fbc69fe3          	bne	a3,t3,800028a0 <encode_uint+0x46>
    800028e6:	03788713          	addi	a4,a7,55
    800028ea:	bf5d                	j	800028a0 <encode_uint+0x46>
		} else if (radix == 16) {
    800028ec:	4741                	li	a4,16
    800028ee:	fee790e3          	bne	a5,a4,800028ce <encode_uint+0x74>
			conv->altform_0c = true;
    800028f2:	0025c783          	lbu	a5,2(a1)
    800028f6:	0107e793          	ori	a5,a5,16
    800028fa:	bfc1                	j	800028ca <encode_uint+0x70>

00000000800028fc <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    800028fc:	7179                	addi	sp,sp,-48
    800028fe:	f022                	sd	s0,32(sp)
    80002900:	ec26                	sd	s1,24(sp)
    80002902:	e84a                	sd	s2,16(sp)
    80002904:	e44e                	sd	s3,8(sp)
    80002906:	e052                	sd	s4,0(sp)
    80002908:	f406                	sd	ra,40(sp)
    8000290a:	89aa                	mv	s3,a0
    8000290c:	8a2e                	mv	s4,a1
    8000290e:	84b2                	mv	s1,a2
    80002910:	8936                	mv	s2,a3
	size_t count = 0;

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    80002912:	8432                	mv	s0,a2
    80002914:	409407b3          	sub	a5,s0,s1
    80002918:	01246a63          	bltu	s0,s2,8000292c <outs+0x30>
    8000291c:	00090563          	beqz	s2,80002926 <outs+0x2a>
			return rc;
		}
		++count;
	}

	return (int)count;
    80002920:	0007851b          	sext.w	a0,a5
    80002924:	a819                	j	8000293a <outs+0x3e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    80002926:	00044703          	lbu	a4,0(s0)
    8000292a:	db7d                	beqz	a4,80002920 <outs+0x24>
		int rc = out((int)*sp++, ctx);
    8000292c:	00044503          	lbu	a0,0(s0)
    80002930:	85d2                	mv	a1,s4
    80002932:	0405                	addi	s0,s0,1
    80002934:	9982                	jalr	s3
		if (rc < 0) {
    80002936:	fc055fe3          	bgez	a0,80002914 <outs+0x18>
}
    8000293a:	70a2                	ld	ra,40(sp)
    8000293c:	7402                	ld	s0,32(sp)
    8000293e:	64e2                	ld	s1,24(sp)
    80002940:	6942                	ld	s2,16(sp)
    80002942:	69a2                	ld	s3,8(sp)
    80002944:	6a02                	ld	s4,0(sp)
    80002946:	6145                	addi	sp,sp,48
    80002948:	8082                	ret

000000008000294a <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    8000294a:	7131                	addi	sp,sp,-192
		if (conv->length_mod != LENGTH_NONE) {
    8000294c:	67a1                	lui	a5,0x8
{
    8000294e:	f4e6                	sd	s9,104(sp)
		if (conv->length_mod != LENGTH_NONE) {
    80002950:	80078c93          	addi	s9,a5,-2048 # 7800 <CONFIG_MAIN_STACK_SIZE+0x6800>
    80002954:	77e1                	lui	a5,0xffff8
{
    80002956:	f8e2                	sd	s8,112(sp)
    80002958:	7ff78c13          	addi	s8,a5,2047 # ffffffffffff87ff <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff8800>
			conv->length_mod = LENGTH_L;
    8000295c:	6789                	lui	a5,0x2
    8000295e:	80078793          	addi	a5,a5,-2048 # 1800 <CONFIG_MAIN_STACK_SIZE+0x800>
{
    80002962:	f922                	sd	s0,176(sp)
    80002964:	ed4e                	sd	s3,152(sp)
    80002966:	e952                	sd	s4,144(sp)
    80002968:	e556                	sd	s5,136(sp)
    8000296a:	e15a                	sd	s6,128(sp)
    8000296c:	f0ea                	sd	s10,96(sp)
    8000296e:	fd06                	sd	ra,184(sp)
    80002970:	f526                	sd	s1,168(sp)
    80002972:	f14a                	sd	s2,160(sp)
    80002974:	fcde                	sd	s7,120(sp)
    80002976:	ecee                	sd	s11,88(sp)
    80002978:	8a2a                	mv	s4,a0
    8000297a:	8aae                	mv	s5,a1
    8000297c:	89b2                	mv	s3,a2
    8000297e:	8b36                	mv	s6,a3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    80002980:	4401                	li	s0,0
		if (conv->length_mod == LENGTH_UPPER_L) {
    80002982:	6d11                	lui	s10,0x4
			conv->length_mod = LENGTH_L;
    80002984:	e03e                	sd	a5,0(sp)
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    80002986:	0009c503          	lbu	a0,0(s3)
    8000298a:	e115                	bnez	a0,800029ae <cbvprintf+0x64>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8000298c:	0004051b          	sext.w	a0,s0
#undef OUTS
#undef OUTC
}
    80002990:	70ea                	ld	ra,184(sp)
    80002992:	744a                	ld	s0,176(sp)
    80002994:	74aa                	ld	s1,168(sp)
    80002996:	790a                	ld	s2,160(sp)
    80002998:	69ea                	ld	s3,152(sp)
    8000299a:	6a4a                	ld	s4,144(sp)
    8000299c:	6aaa                	ld	s5,136(sp)
    8000299e:	6b0a                	ld	s6,128(sp)
    800029a0:	7be6                	ld	s7,120(sp)
    800029a2:	7c46                	ld	s8,112(sp)
    800029a4:	7ca6                	ld	s9,104(sp)
    800029a6:	7d06                	ld	s10,96(sp)
    800029a8:	6de6                	ld	s11,88(sp)
    800029aa:	6129                	addi	sp,sp,192
    800029ac:	8082                	ret
		if (*fp != '%') {
    800029ae:	02500793          	li	a5,37
			OUTC(*fp++);
    800029b2:	00198493          	addi	s1,s3,1
    800029b6:	85d6                	mv	a1,s5
		if (*fp != '%') {
    800029b8:	4ef51e63          	bne	a0,a5,80002eb4 <cbvprintf+0x56a>
		} state = {
    800029bc:	f802                	sd	zero,48(sp)
    800029be:	fc02                	sd	zero,56(sp)
    800029c0:	e082                	sd	zero,64(sp)
    800029c2:	e482                	sd	zero,72(sp)
	if (*sp == '%') {
    800029c4:	0019c783          	lbu	a5,1(s3)
    800029c8:	0ea78563          	beq	a5,a0,80002ab2 <cbvprintf+0x168>
		switch (*sp) {
    800029cc:	02b00693          	li	a3,43
    800029d0:	02d00613          	li	a2,45
    800029d4:	03000593          	li	a1,48
    800029d8:	02000513          	li	a0,32
    800029dc:	02300813          	li	a6,35
    800029e0:	0004c703          	lbu	a4,0(s1)
    800029e4:	04015783          	lhu	a5,64(sp)
    800029e8:	12d70a63          	beq	a4,a3,80002b1c <cbvprintf+0x1d2>
    800029ec:	10e6eb63          	bltu	a3,a4,80002b02 <cbvprintf+0x1b8>
    800029f0:	12a70963          	beq	a4,a0,80002b22 <cbvprintf+0x1d8>
    800029f4:	13070a63          	beq	a4,a6,80002b28 <cbvprintf+0x1de>
	if (conv->flag_zero && conv->flag_dash) {
    800029f8:	4706                	lw	a4,64(sp)
    800029fa:	04400693          	li	a3,68
    800029fe:	04477713          	andi	a4,a4,68
    80002a02:	00d71663          	bne	a4,a3,80002a0e <cbvprintf+0xc4>
		conv->flag_zero = false;
    80002a06:	fbf7f793          	andi	a5,a5,-65
    80002a0a:	04f11023          	sh	a5,64(sp)
	conv->width_present = true;
    80002a0e:	04015783          	lhu	a5,64(sp)
    80002a12:	e826                	sd	s1,16(sp)
    80002a14:	0807e713          	ori	a4,a5,128
    80002a18:	04e11023          	sh	a4,64(sp)
	if (*sp == '*') {
    80002a1c:	0004c683          	lbu	a3,0(s1)
    80002a20:	02a00713          	li	a4,42
    80002a24:	10e69563          	bne	a3,a4,80002b2e <cbvprintf+0x1e4>
		conv->width_star = true;
    80002a28:	1807e793          	ori	a5,a5,384
    80002a2c:	04f11023          	sh	a5,64(sp)
		return ++sp;
    80002a30:	0485                	addi	s1,s1,1
	sp = extract_prec(conv, sp);
    80002a32:	e826                	sd	s1,16(sp)
	conv->prec_present = (*sp == '.');
    80002a34:	0004c683          	lbu	a3,0(s1)
    80002a38:	02e00613          	li	a2,46
    80002a3c:	fd268793          	addi	a5,a3,-46
    80002a40:	0017b793          	seqz	a5,a5
    80002a44:	0097971b          	slliw	a4,a5,0x9
    80002a48:	04015783          	lhu	a5,64(sp)
    80002a4c:	dff7f793          	andi	a5,a5,-513
    80002a50:	8fd9                	or	a5,a5,a4
    80002a52:	04f11023          	sh	a5,64(sp)
	if (!conv->prec_present) {
    80002a56:	02c69063          	bne	a3,a2,80002a76 <cbvprintf+0x12c>
	++sp;
    80002a5a:	00148713          	addi	a4,s1,1
    80002a5e:	e83a                	sd	a4,16(sp)
	if (*sp == '*') {
    80002a60:	0014c683          	lbu	a3,1(s1)
    80002a64:	02a00713          	li	a4,42
    80002a68:	10e69663          	bne	a3,a4,80002b74 <cbvprintf+0x22a>
		conv->prec_star = true;
    80002a6c:	4007e793          	ori	a5,a5,1024
    80002a70:	04f11023          	sh	a5,64(sp)
		return ++sp;
    80002a74:	0489                	addi	s1,s1,2
	switch (*sp) {
    80002a76:	0004c703          	lbu	a4,0(s1)
    80002a7a:	06c00793          	li	a5,108
		if (*++sp == 'h') {
    80002a7e:	00148693          	addi	a3,s1,1
	switch (*sp) {
    80002a82:	1cf70463          	beq	a4,a5,80002c4a <cbvprintf+0x300>
    80002a86:	12e7e163          	bltu	a5,a4,80002ba8 <cbvprintf+0x25e>
    80002a8a:	06800793          	li	a5,104
    80002a8e:	12f70b63          	beq	a4,a5,80002bc4 <cbvprintf+0x27a>
    80002a92:	06a00793          	li	a5,106
    80002a96:	1cf70663          	beq	a4,a5,80002c62 <cbvprintf+0x318>
    80002a9a:	04c00793          	li	a5,76
    80002a9e:	1cf70e63          	beq	a4,a5,80002c7a <cbvprintf+0x330>
		conv->length_mod = LENGTH_NONE;
    80002aa2:	04015783          	lhu	a5,64(sp)
		break;
    80002aa6:	86a6                	mv	a3,s1
		conv->length_mod = LENGTH_NONE;
    80002aa8:	0187f7b3          	and	a5,a5,s8
    80002aac:	04f11023          	sh	a5,64(sp)
		break;
    80002ab0:	aa15                	j	80002be4 <cbvprintf+0x29a>
		conv->specifier = *sp++;
    80002ab2:	00298493          	addi	s1,s3,2
    80002ab6:	04f101a3          	sb	a5,67(sp)
		if (conv->width_star) {
    80002aba:	04015783          	lhu	a5,64(sp)
    80002abe:	1007f713          	andi	a4,a5,256
    80002ac2:	26070d63          	beqz	a4,80002d3c <cbvprintf+0x3f2>
			width = va_arg(ap, int);
    80002ac6:	000b2903          	lw	s2,0(s6)
    80002aca:	008b0693          	addi	a3,s6,8
			if (width < 0) {
    80002ace:	00095863          	bgez	s2,80002ade <cbvprintf+0x194>
				conv->flag_dash = true;
    80002ad2:	0047e793          	ori	a5,a5,4
    80002ad6:	04f11023          	sh	a5,64(sp)
				width = -width;
    80002ada:	4120093b          	negw	s2,s2
		if (conv->prec_star) {
    80002ade:	04015703          	lhu	a4,64(sp)
    80002ae2:	40077793          	andi	a5,a4,1024
    80002ae6:	26078463          	beqz	a5,80002d4e <cbvprintf+0x404>
			int arg = va_arg(ap, int);
    80002aea:	0006a803          	lw	a6,0(a3)
    80002aee:	00868793          	addi	a5,a3,8
			if (arg < 0) {
    80002af2:	26085363          	bgez	a6,80002d58 <cbvprintf+0x40e>
				conv->prec_present = false;
    80002af6:	dff77713          	andi	a4,a4,-513
    80002afa:	04e11023          	sh	a4,64(sp)
		int precision = -1;
    80002afe:	587d                	li	a6,-1
    80002b00:	aca1                	j	80002d58 <cbvprintf+0x40e>
		switch (*sp) {
    80002b02:	00c70763          	beq	a4,a2,80002b10 <cbvprintf+0x1c6>
    80002b06:	eeb719e3          	bne	a4,a1,800029f8 <cbvprintf+0xae>
			conv->flag_zero = true;
    80002b0a:	0407e793          	ori	a5,a5,64
    80002b0e:	a019                	j	80002b14 <cbvprintf+0x1ca>
			conv->flag_dash = true;
    80002b10:	0047e793          	ori	a5,a5,4
			conv->flag_zero = true;
    80002b14:	04f11023          	sh	a5,64(sp)
			++sp;
    80002b18:	0485                	addi	s1,s1,1
	} while (loop);
    80002b1a:	b5d9                	j	800029e0 <cbvprintf+0x96>
			conv->flag_plus = true;
    80002b1c:	0087e793          	ori	a5,a5,8
    80002b20:	bfd5                	j	80002b14 <cbvprintf+0x1ca>
			conv->flag_space = true;
    80002b22:	0107e793          	ori	a5,a5,16
    80002b26:	b7fd                	j	80002b14 <cbvprintf+0x1ca>
			conv->flag_hash = true;
    80002b28:	0207e793          	ori	a5,a5,32
    80002b2c:	b7e5                	j	80002b14 <cbvprintf+0x1ca>
	size_t width = extract_decimal(&sp);
    80002b2e:	0808                	addi	a0,sp,16
    80002b30:	cf7ff0ef          	jal	ra,80002826 <extract_decimal>
	if (sp != wp) {
    80002b34:	66c2                	ld	a3,16(sp)
    80002b36:	ee968ee3          	beq	a3,s1,80002a32 <cbvprintf+0xe8>
		conv->width_present = true;
    80002b3a:	04015783          	lhu	a5,64(sp)
		conv->width_value = width;
    80002b3e:	0005071b          	sext.w	a4,a0
    80002b42:	c2ba                	sw	a4,68(sp)
		conv->width_present = true;
    80002b44:	0807e793          	ori	a5,a5,128
    80002b48:	04f11023          	sh	a5,64(sp)
		conv->unsupported |= ((conv->width_value < 0)
    80002b4c:	6786                	ld	a5,64(sp)
				      || (width != (size_t)conv->width_value));
    80002b4e:	4605                	li	a2,1
		conv->unsupported |= ((conv->width_value < 0)
    80002b50:	8385                	srli	a5,a5,0x1
    80002b52:	8b85                	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
    80002b54:	00074563          	bltz	a4,80002b5e <cbvprintf+0x214>
    80002b58:	8f09                	sub	a4,a4,a0
    80002b5a:	00e03633          	snez	a2,a4
		conv->unsupported |= ((conv->width_value < 0)
    80002b5e:	04015703          	lhu	a4,64(sp)
    80002b62:	8fd1                	or	a5,a5,a2
    80002b64:	0017979b          	slliw	a5,a5,0x1
    80002b68:	9b75                	andi	a4,a4,-3
    80002b6a:	8fd9                	or	a5,a5,a4
    80002b6c:	04f11023          	sh	a5,64(sp)
    80002b70:	84b6                	mv	s1,a3
    80002b72:	b5c1                	j	80002a32 <cbvprintf+0xe8>
	size_t prec = extract_decimal(&sp);
    80002b74:	0808                	addi	a0,sp,16
    80002b76:	cb1ff0ef          	jal	ra,80002826 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    80002b7a:	6786                	ld	a5,64(sp)
	conv->prec_value = prec;
    80002b7c:	0005071b          	sext.w	a4,a0
    80002b80:	c4ba                	sw	a4,72(sp)
	conv->unsupported |= ((conv->prec_value < 0)
    80002b82:	8385                	srli	a5,a5,0x1
    80002b84:	8b85                	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
    80002b86:	4685                	li	a3,1
    80002b88:	00074563          	bltz	a4,80002b92 <cbvprintf+0x248>
    80002b8c:	8f09                	sub	a4,a4,a0
    80002b8e:	00e036b3          	snez	a3,a4
	conv->unsupported |= ((conv->prec_value < 0)
    80002b92:	04015703          	lhu	a4,64(sp)
    80002b96:	8fd5                	or	a5,a5,a3
    80002b98:	0017979b          	slliw	a5,a5,0x1
    80002b9c:	9b75                	andi	a4,a4,-3
    80002b9e:	8fd9                	or	a5,a5,a4
	return sp;
    80002ba0:	64c2                	ld	s1,16(sp)
	conv->unsupported |= ((conv->prec_value < 0)
    80002ba2:	04f11023          	sh	a5,64(sp)
	return sp;
    80002ba6:	bdc1                	j	80002a76 <cbvprintf+0x12c>
	switch (*sp) {
    80002ba8:	07400613          	li	a2,116
    80002bac:	04015783          	lhu	a5,64(sp)
    80002bb0:	0cc70163          	beq	a4,a2,80002c72 <cbvprintf+0x328>
    80002bb4:	07a00613          	li	a2,122
    80002bb8:	eec715e3          	bne	a4,a2,80002aa2 <cbvprintf+0x158>
		conv->length_mod = LENGTH_Z;
    80002bbc:	00fc77b3          	and	a5,s8,a5
    80002bc0:	670d                	lui	a4,0x3
    80002bc2:	a041                	j	80002c42 <cbvprintf+0x2f8>
		if (*++sp == 'h') {
    80002bc4:	04015783          	lhu	a5,64(sp)
    80002bc8:	0014c603          	lbu	a2,1(s1)
			conv->length_mod = LENGTH_HH;
    80002bcc:	00fc77b3          	and	a5,s8,a5
		if (*++sp == 'h') {
    80002bd0:	06e61863          	bne	a2,a4,80002c40 <cbvprintf+0x2f6>
			conv->length_mod = LENGTH_HH;
    80002bd4:	6705                	lui	a4,0x1
    80002bd6:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
			conv->length_mod = LENGTH_LL;
    80002bda:	8fd9                	or	a5,a5,a4
    80002bdc:	04f11023          	sh	a5,64(sp)
			++sp;
    80002be0:	00248693          	addi	a3,s1,2
	conv->specifier = *sp++;
    80002be4:	0006c703          	lbu	a4,0(a3)
	switch (conv->specifier) {
    80002be8:	07800793          	li	a5,120
	conv->specifier = *sp++;
    80002bec:	00168493          	addi	s1,a3,1
    80002bf0:	04e101a3          	sb	a4,67(sp)
	switch (conv->specifier) {
    80002bf4:	12e7ec63          	bltu	a5,a4,80002d2c <cbvprintf+0x3e2>
    80002bf8:	05700793          	li	a5,87
    80002bfc:	08e7e863          	bltu	a5,a4,80002c8c <cbvprintf+0x342>
    80002c00:	04100793          	li	a5,65
    80002c04:	00f70963          	beq	a4,a5,80002c16 <cbvprintf+0x2cc>
    80002c08:	fbb7071b          	addiw	a4,a4,-69
    80002c0c:	0ff77713          	andi	a4,a4,255
    80002c10:	4789                	li	a5,2
    80002c12:	10e7ed63          	bltu	a5,a4,80002d2c <cbvprintf+0x3e2>
		conv->specifier_cat = SPECIFIER_FP;
    80002c16:	04214783          	lbu	a5,66(sp)
    80002c1a:	9be1                	andi	a5,a5,-8
    80002c1c:	0047e793          	ori	a5,a5,4
    80002c20:	04f10123          	sb	a5,66(sp)
			unsupported = true;
    80002c24:	4785                	li	a5,1
	conv->unsupported |= unsupported;
    80002c26:	6706                	ld	a4,64(sp)
    80002c28:	8305                	srli	a4,a4,0x1
    80002c2a:	8b05                	andi	a4,a4,1
    80002c2c:	8fd9                	or	a5,a5,a4
    80002c2e:	04015703          	lhu	a4,64(sp)
    80002c32:	0017979b          	slliw	a5,a5,0x1
    80002c36:	9b75                	andi	a4,a4,-3
    80002c38:	8fd9                	or	a5,a5,a4
    80002c3a:	04f11023          	sh	a5,64(sp)
	return sp;
    80002c3e:	bdb5                	j	80002aba <cbvprintf+0x170>
			conv->length_mod = LENGTH_H;
    80002c40:	6705                	lui	a4,0x1
		conv->unsupported = true;
    80002c42:	8fd9                	or	a5,a5,a4
    80002c44:	04f11023          	sh	a5,64(sp)
		break;
    80002c48:	bf71                	j	80002be4 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    80002c4a:	04015783          	lhu	a5,64(sp)
    80002c4e:	0014c603          	lbu	a2,1(s1)
			conv->length_mod = LENGTH_LL;
    80002c52:	00fc77b3          	and	a5,s8,a5
		if (*++sp == 'l') {
    80002c56:	00e61463          	bne	a2,a4,80002c5e <cbvprintf+0x314>
			conv->length_mod = LENGTH_LL;
    80002c5a:	6709                	lui	a4,0x2
    80002c5c:	bfbd                	j	80002bda <cbvprintf+0x290>
			conv->length_mod = LENGTH_L;
    80002c5e:	6702                	ld	a4,0(sp)
    80002c60:	b7cd                	j	80002c42 <cbvprintf+0x2f8>
		conv->length_mod = LENGTH_J;
    80002c62:	04015783          	lhu	a5,64(sp)
    80002c66:	670d                	lui	a4,0x3
    80002c68:	0187f7b3          	and	a5,a5,s8
		conv->length_mod = LENGTH_T;
    80002c6c:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_MAIN_STACK_SIZE+0x1800>
    80002c70:	bfc9                	j	80002c42 <cbvprintf+0x2f8>
    80002c72:	00fc77b3          	and	a5,s8,a5
    80002c76:	6711                	lui	a4,0x4
    80002c78:	bfd5                	j	80002c6c <cbvprintf+0x322>
		conv->unsupported = true;
    80002c7a:	04015783          	lhu	a5,64(sp)
    80002c7e:	7761                	lui	a4,0xffff8
    80002c80:	7fd70713          	addi	a4,a4,2045 # ffffffffffff87fd <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff87fe>
    80002c84:	8ff9                	and	a5,a5,a4
    80002c86:	002d0713          	addi	a4,s10,2 # 4002 <CONFIG_MAIN_STACK_SIZE+0x3002>
    80002c8a:	bf65                	j	80002c42 <cbvprintf+0x2f8>
	switch (conv->specifier) {
    80002c8c:	fa87079b          	addiw	a5,a4,-88
    80002c90:	0ff7f793          	andi	a5,a5,255
    80002c94:	02000693          	li	a3,32
    80002c98:	08f6ea63          	bltu	a3,a5,80002d2c <cbvprintf+0x3e2>
    80002c9c:	0008b697          	auipc	a3,0x8b
    80002ca0:	bbc68693          	addi	a3,a3,-1092 # 8008d858 <__sf_fake_stdout+0x38>
    80002ca4:	078a                	slli	a5,a5,0x2
    80002ca6:	97b6                	add	a5,a5,a3
    80002ca8:	439c                	lw	a5,0(a5)
    80002caa:	97b6                	add	a5,a5,a3
    80002cac:	8782                	jr	a5
		conv->specifier_cat = SPECIFIER_SINT;
    80002cae:	04214783          	lbu	a5,66(sp)
    80002cb2:	9be1                	andi	a5,a5,-8
    80002cb4:	0017e793          	ori	a5,a5,1
		if (conv->length_mod == LENGTH_UPPER_L) {
    80002cb8:	04015683          	lhu	a3,64(sp)
		conv->specifier_cat = SPECIFIER_UINT;
    80002cbc:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    80002cc0:	0196f7b3          	and	a5,a3,s9
    80002cc4:	0107979b          	slliw	a5,a5,0x10
    80002cc8:	0107d79b          	srliw	a5,a5,0x10
    80002ccc:	01a79663          	bne	a5,s10,80002cd8 <cbvprintf+0x38e>
			conv->invalid = true;
    80002cd0:	0016e693          	ori	a3,a3,1
    80002cd4:	04d11023          	sh	a3,64(sp)
		if (conv->specifier == 'c') {
    80002cd8:	06300693          	li	a3,99
	bool unsupported = false;
    80002cdc:	4781                	li	a5,0
		if (conv->specifier == 'c') {
    80002cde:	f4d714e3          	bne	a4,a3,80002c26 <cbvprintf+0x2dc>
		if (conv->length_mod != LENGTH_NONE) {
    80002ce2:	04015783          	lhu	a5,64(sp)
    80002ce6:	00fcf7b3          	and	a5,s9,a5
    80002cea:	00f037b3          	snez	a5,a5
    80002cee:	bf25                	j	80002c26 <cbvprintf+0x2dc>
		conv->specifier_cat = SPECIFIER_UINT;
    80002cf0:	04214783          	lbu	a5,66(sp)
    80002cf4:	9be1                	andi	a5,a5,-8
    80002cf6:	0027e793          	ori	a5,a5,2
    80002cfa:	bf7d                	j	80002cb8 <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
    80002cfc:	04214783          	lbu	a5,66(sp)
    80002d00:	9be1                	andi	a5,a5,-8
    80002d02:	0037e793          	ori	a5,a5,3
    80002d06:	04f10123          	sb	a5,66(sp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    80002d0a:	04015783          	lhu	a5,64(sp)
    80002d0e:	00fcf7b3          	and	a5,s9,a5
    80002d12:	41a787b3          	sub	a5,a5,s10
    80002d16:	0017b793          	seqz	a5,a5
    80002d1a:	b731                	j	80002c26 <cbvprintf+0x2dc>
		conv->specifier_cat = SPECIFIER_PTR;
    80002d1c:	04214783          	lbu	a5,66(sp)
    80002d20:	9be1                	andi	a5,a5,-8
    80002d22:	0037e793          	ori	a5,a5,3
    80002d26:	04f10123          	sb	a5,66(sp)
    80002d2a:	bf65                	j	80002ce2 <cbvprintf+0x398>
		conv->invalid = true;
    80002d2c:	04015783          	lhu	a5,64(sp)
    80002d30:	0017e793          	ori	a5,a5,1
    80002d34:	04f11023          	sh	a5,64(sp)
	bool unsupported = false;
    80002d38:	4781                	li	a5,0
		break;
    80002d3a:	b5f5                	j	80002c26 <cbvprintf+0x2dc>
		} else if (conv->width_present) {
    80002d3c:	0807f793          	andi	a5,a5,128
    80002d40:	c781                	beqz	a5,80002d48 <cbvprintf+0x3fe>
			width = conv->width_value;
    80002d42:	4916                	lw	s2,68(sp)
    80002d44:	86da                	mv	a3,s6
    80002d46:	bb61                	j	80002ade <cbvprintf+0x194>
    80002d48:	86da                	mv	a3,s6
		int width = -1;
    80002d4a:	597d                	li	s2,-1
    80002d4c:	bb49                	j	80002ade <cbvprintf+0x194>
		} else if (conv->prec_present) {
    80002d4e:	20077713          	andi	a4,a4,512
    80002d52:	c729                	beqz	a4,80002d9c <cbvprintf+0x452>
			precision = conv->prec_value;
    80002d54:	4826                	lw	a6,72(sp)
    80002d56:	87b6                	mv	a5,a3
		conv->pad0_value = 0;
    80002d58:	c282                	sw	zero,68(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
    80002d5a:	6706                	ld	a4,64(sp)
		conv->pad0_pre_exp = 0;
    80002d5c:	c482                	sw	zero,72(sp)
		if (specifier_cat == SPECIFIER_SINT) {
    80002d5e:	4585                	li	a1,1
			= (enum specifier_cat_enum)conv->specifier_cat;
    80002d60:	01075693          	srli	a3,a4,0x10
			= (enum length_mod_enum)conv->length_mod;
    80002d64:	832d                	srli	a4,a4,0xb
    80002d66:	00f77613          	andi	a2,a4,15
		enum specifier_cat_enum specifier_cat
    80002d6a:	8a9d                	andi	a3,a3,7
		enum length_mod_enum length_mod
    80002d6c:	8732                	mv	a4,a2
		if (specifier_cat == SPECIFIER_SINT) {
    80002d6e:	04b69f63          	bne	a3,a1,80002dcc <cbvprintf+0x482>
			switch (length_mod) {
    80002d72:	4595                	li	a1,5
				value->sint = va_arg(ap, int);
    80002d74:	00878b13          	addi	s6,a5,8
			switch (length_mod) {
    80002d78:	0eb60563          	beq	a2,a1,80002e62 <cbvprintf+0x518>
    80002d7c:	02c5e263          	bltu	a1,a2,80002da0 <cbvprintf+0x456>
    80002d80:	468d                	li	a3,3
    80002d82:	02d60663          	beq	a2,a3,80002dae <cbvprintf+0x464>
    80002d86:	4691                	li	a3,4
    80002d88:	0cd60d63          	beq	a2,a3,80002e62 <cbvprintf+0x518>
				value->sint = va_arg(ap, int);
    80002d8c:	439c                	lw	a5,0(a5)
				value->sint =
    80002d8e:	f83e                	sd	a5,48(sp)
			if (length_mod == LENGTH_HH) {
    80002d90:	4785                	li	a5,1
    80002d92:	02f71763          	bne	a4,a5,80002dc0 <cbvprintf+0x476>
				value->uint = (unsigned char)value->uint;
    80002d96:	03014783          	lbu	a5,48(sp)
    80002d9a:	a00d                	j	80002dbc <cbvprintf+0x472>
    80002d9c:	87b6                	mv	a5,a3
    80002d9e:	b385                	j	80002afe <cbvprintf+0x1b4>
			switch (length_mod) {
    80002da0:	00a6059b          	addiw	a1,a2,10
    80002da4:	89bd                	andi	a1,a1,15
    80002da6:	feb6e3e3          	bltu	a3,a1,80002d8c <cbvprintf+0x442>
				value->sint =
    80002daa:	639c                	ld	a5,0(a5)
    80002dac:	b7cd                	j	80002d8e <cbvprintf+0x444>
				if (WCHAR_IS_SIGNED
    80002dae:	04314683          	lbu	a3,67(sp)
    80002db2:	06300713          	li	a4,99
    80002db6:	0ae69663          	bne	a3,a4,80002e62 <cbvprintf+0x518>
					value->sint = (wchar_t)va_arg(ap,
    80002dba:	439c                	lw	a5,0(a5)
			value->ptr = va_arg(ap, void *);
    80002dbc:	f83e                	sd	a5,48(sp)
    80002dbe:	a88d                	j	80002e30 <cbvprintf+0x4e6>
			} else if (length_mod == LENGTH_H) {
    80002dc0:	4789                	li	a5,2
    80002dc2:	06f71763          	bne	a4,a5,80002e30 <cbvprintf+0x4e6>
				value->sint = (short)value->sint;
    80002dc6:	03011783          	lh	a5,48(sp)
    80002dca:	bfcd                	j	80002dbc <cbvprintf+0x472>
		} else if (specifier_cat == SPECIFIER_UINT) {
    80002dcc:	4509                	li	a0,2
    80002dce:	04a69263          	bne	a3,a0,80002e12 <cbvprintf+0x4c8>
			switch (length_mod) {
    80002dd2:	4695                	li	a3,5
				value->sint = va_arg(ap, int);
    80002dd4:	00878b13          	addi	s6,a5,8
			switch (length_mod) {
    80002dd8:	08d60563          	beq	a2,a3,80002e62 <cbvprintf+0x518>
    80002ddc:	02c6e463          	bltu	a3,a2,80002e04 <cbvprintf+0x4ba>
    80002de0:	468d                	li	a3,3
    80002de2:	08d60063          	beq	a2,a3,80002e62 <cbvprintf+0x518>
    80002de6:	4691                	li	a3,4
    80002de8:	06d60d63          	beq	a2,a3,80002e62 <cbvprintf+0x518>
				value->uint = va_arg(ap, unsigned int);
    80002dec:	0007e783          	lwu	a5,0(a5)
				value->uint =
    80002df0:	f83e                	sd	a5,48(sp)
			if (length_mod == LENGTH_HH) {
    80002df2:	4785                	li	a5,1
    80002df4:	faf701e3          	beq	a4,a5,80002d96 <cbvprintf+0x44c>
			} else if (length_mod == LENGTH_H) {
    80002df8:	4789                	li	a5,2
    80002dfa:	02f71b63          	bne	a4,a5,80002e30 <cbvprintf+0x4e6>
				value->uint = (unsigned short)value->uint;
    80002dfe:	03015783          	lhu	a5,48(sp)
    80002e02:	bf6d                	j	80002dbc <cbvprintf+0x472>
			switch (length_mod) {
    80002e04:	00a6069b          	addiw	a3,a2,10
    80002e08:	8abd                	andi	a3,a3,15
    80002e0a:	fed5e1e3          	bltu	a1,a3,80002dec <cbvprintf+0x4a2>
				value->uint =
    80002e0e:	639c                	ld	a5,0(a5)
    80002e10:	b7c5                	j	80002df0 <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_FP) {
    80002e12:	4591                	li	a1,4
    80002e14:	04b69163          	bne	a3,a1,80002e56 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
    80002e18:	46a1                	li	a3,8
    80002e1a:	02d61963          	bne	a2,a3,80002e4c <cbvprintf+0x502>
				value->ldbl = va_arg(ap, long double);
    80002e1e:	00f78713          	addi	a4,a5,15
    80002e22:	9b41                	andi	a4,a4,-16
    80002e24:	631c                	ld	a5,0(a4)
    80002e26:	01070b13          	addi	s6,a4,16
    80002e2a:	f83e                	sd	a5,48(sp)
    80002e2c:	671c                	ld	a5,8(a4)
    80002e2e:	fc3e                	sd	a5,56(sp)
		if (conv->invalid || conv->unsupported) {
    80002e30:	4786                	lw	a5,64(sp)
    80002e32:	8b8d                	andi	a5,a5,3
    80002e34:	cb8d                	beqz	a5,80002e66 <cbvprintf+0x51c>
			OUTS(sp, fp);
    80002e36:	86a6                	mv	a3,s1
    80002e38:	864e                	mv	a2,s3
    80002e3a:	85d6                	mv	a1,s5
    80002e3c:	8552                	mv	a0,s4
    80002e3e:	abfff0ef          	jal	ra,800028fc <outs>
    80002e42:	b40547e3          	bltz	a0,80002990 <cbvprintf+0x46>
    80002e46:	942a                	add	s0,s0,a0
			OUTS(bps, bpe);
    80002e48:	89a6                	mv	s3,s1
    80002e4a:	be35                	j	80002986 <cbvprintf+0x3c>
				value->dbl = va_arg(ap, double);
    80002e4c:	00878b13          	addi	s6,a5,8
    80002e50:	639c                	ld	a5,0(a5)
    80002e52:	f83e                	sd	a5,48(sp)
    80002e54:	bff1                	j	80002e30 <cbvprintf+0x4e6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    80002e56:	470d                	li	a4,3
    80002e58:	8b3e                	mv	s6,a5
    80002e5a:	fce69be3          	bne	a3,a4,80002e30 <cbvprintf+0x4e6>
			value->ptr = va_arg(ap, void *);
    80002e5e:	00878b13          	addi	s6,a5,8
    80002e62:	639c                	ld	a5,0(a5)
    80002e64:	bfa1                	j	80002dbc <cbvprintf+0x472>
		switch (conv->specifier) {
    80002e66:	04314703          	lbu	a4,67(sp)
    80002e6a:	07800793          	li	a5,120
    80002e6e:	fce7ede3          	bltu	a5,a4,80002e48 <cbvprintf+0x4fe>
    80002e72:	06200793          	li	a5,98
    80002e76:	00e7ec63          	bltu	a5,a4,80002e8e <cbvprintf+0x544>
    80002e7a:	02500793          	li	a5,37
    80002e7e:	02f70863          	beq	a4,a5,80002eae <cbvprintf+0x564>
    80002e82:	05800793          	li	a5,88
    80002e86:	fcf711e3          	bne	a4,a5,80002e48 <cbvprintf+0x4fe>
    80002e8a:	4d81                	li	s11,0
    80002e8c:	a0f5                	j	80002f78 <cbvprintf+0x62e>
    80002e8e:	f9d7071b          	addiw	a4,a4,-99
    80002e92:	0ff77713          	andi	a4,a4,255
    80002e96:	47d5                	li	a5,21
    80002e98:	fae7e8e3          	bltu	a5,a4,80002e48 <cbvprintf+0x4fe>
    80002e9c:	0008b697          	auipc	a3,0x8b
    80002ea0:	a4068693          	addi	a3,a3,-1472 # 8008d8dc <__sf_fake_stdout+0xbc>
    80002ea4:	070a                	slli	a4,a4,0x2
    80002ea6:	9736                	add	a4,a4,a3
    80002ea8:	431c                	lw	a5,0(a4)
    80002eaa:	97b6                	add	a5,a5,a3
    80002eac:	8782                	jr	a5
			OUTC('%');
    80002eae:	85d6                	mv	a1,s5
    80002eb0:	02500513          	li	a0,37
    80002eb4:	9a02                	jalr	s4
    80002eb6:	ac054de3          	bltz	a0,80002990 <cbvprintf+0x46>
    80002eba:	0405                	addi	s0,s0,1
			break;
    80002ebc:	b771                	j	80002e48 <cbvprintf+0x4fe>
			bps = (const char *)value->ptr;
    80002ebe:	79c2                	ld	s3,48(sp)
			if (precision >= 0) {
    80002ec0:	06084c63          	bltz	a6,80002f38 <cbvprintf+0x5ee>
				len = strnlen(bps, precision);
    80002ec4:	85c2                	mv	a1,a6
    80002ec6:	854e                	mv	a0,s3
    80002ec8:	5220b0ef          	jal	ra,8000e3ea <strnlen>
			bpe = bps + len;
    80002ecc:	00a98bb3          	add	s7,s3,a0
		char sign = 0;
    80002ed0:	4d81                	li	s11,0
		if (bps == NULL) {
    80002ed2:	f6098be3          	beqz	s3,80002e48 <cbvprintf+0x4fe>
		size_t nj_len = (bpe - bps);
    80002ed6:	413b8733          	sub	a4,s7,s3
		if (sign != 0) {
    80002eda:	000d8363          	beqz	s11,80002ee0 <cbvprintf+0x596>
			nj_len += 1U;
    80002ede:	0705                	addi	a4,a4,1
		if (conv->altform_0c) {
    80002ee0:	04214603          	lbu	a2,66(sp)
    80002ee4:	01067693          	andi	a3,a2,16
    80002ee8:	12068d63          	beqz	a3,80003022 <cbvprintf+0x6d8>
			nj_len += 2U;
    80002eec:	0709                	addi	a4,a4,2
		nj_len += conv->pad0_value;
    80002eee:	4696                	lw	a3,68(sp)
		if (conv->pad_fp) {
    80002ef0:	04067613          	andi	a2,a2,64
		nj_len += conv->pad0_value;
    80002ef4:	9736                	add	a4,a4,a3
		if (conv->pad_fp) {
    80002ef6:	c219                	beqz	a2,80002efc <cbvprintf+0x5b2>
			nj_len += conv->pad0_pre_exp;
    80002ef8:	46a6                	lw	a3,72(sp)
    80002efa:	9736                	add	a4,a4,a3
		if (width > 0) {
    80002efc:	15205563          	blez	s2,80003046 <cbvprintf+0x6fc>
			width -= (int)nj_len;
    80002f00:	40e9093b          	subw	s2,s2,a4
			if (!conv->flag_dash) {
    80002f04:	6706                	ld	a4,64(sp)
    80002f06:	8309                	srli	a4,a4,0x2
    80002f08:	8b05                	andi	a4,a4,1
    80002f0a:	12071e63          	bnez	a4,80003046 <cbvprintf+0x6fc>
				if (conv->flag_zero) {
    80002f0e:	04015703          	lhu	a4,64(sp)
    80002f12:	04077713          	andi	a4,a4,64
    80002f16:	1a070763          	beqz	a4,800030c4 <cbvprintf+0x77a>
					if (sign != 0) {
    80002f1a:	1a0d8863          	beqz	s11,800030ca <cbvprintf+0x780>
						OUTC(sign);
    80002f1e:	85d6                	mv	a1,s5
    80002f20:	856e                	mv	a0,s11
    80002f22:	9a02                	jalr	s4
    80002f24:	a60546e3          	bltz	a0,80002990 <cbvprintf+0x46>
    80002f28:	0405                	addi	s0,s0,1
					pad = '0';
    80002f2a:	03000513          	li	a0,48
						sign = 0;
    80002f2e:	4d81                	li	s11,0
					pad = '0';
    80002f30:	86ca                	mv	a3,s2
					OUTC(pad);
    80002f32:	0005071b          	sext.w	a4,a0
    80002f36:	a229                	j	80003040 <cbvprintf+0x6f6>
				len = strlen(bps);
    80002f38:	854e                	mv	a0,s3
    80002f3a:	4700b0ef          	jal	ra,8000e3aa <strlen>
    80002f3e:	b779                	j	80002ecc <cbvprintf+0x582>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    80002f40:	77c2                	ld	a5,48(sp)
			bpe = buf + 1;
    80002f42:	01910b93          	addi	s7,sp,25
			bps = buf;
    80002f46:	01810993          	addi	s3,sp,24
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    80002f4a:	00f10c23          	sb	a5,24(sp)
			break;
    80002f4e:	4d81                	li	s11,0
    80002f50:	b759                	j	80002ed6 <cbvprintf+0x58c>
			if (conv->flag_plus) {
    80002f52:	04015703          	lhu	a4,64(sp)
				sign = '+';
    80002f56:	02b00d93          	li	s11,43
			if (conv->flag_plus) {
    80002f5a:	00877693          	andi	a3,a4,8
    80002f5e:	e689                	bnez	a3,80002f68 <cbvprintf+0x61e>
				sign = ' ';
    80002f60:	00171d93          	slli	s11,a4,0x1
    80002f64:	020dfd93          	andi	s11,s11,32
			sint = value->sint;
    80002f68:	7742                	ld	a4,48(sp)
			if (sint < 0) {
    80002f6a:	00075763          	bgez	a4,80002f78 <cbvprintf+0x62e>
				value->uint = (uint_value_type)-sint;
    80002f6e:	40e00733          	neg	a4,a4
    80002f72:	f83a                	sd	a4,48(sp)
				sign = '-';
    80002f74:	02d00d93          	li	s11,45
			bps = encode_uint(value->uint, conv, buf, bpe);
    80002f78:	7542                	ld	a0,48(sp)
    80002f7a:	02e10693          	addi	a3,sp,46
    80002f7e:	0830                	addi	a2,sp,24
    80002f80:	008c                	addi	a1,sp,64
    80002f82:	e442                	sd	a6,8(sp)
    80002f84:	8d7ff0ef          	jal	ra,8000285a <encode_uint>
    80002f88:	89aa                	mv	s3,a0
    80002f8a:	6822                	ld	a6,8(sp)
			if (precision >= 0) {
    80002f8c:	02e10b93          	addi	s7,sp,46
    80002f90:	f40841e3          	bltz	a6,80002ed2 <cbvprintf+0x588>
				conv->flag_zero = false;
    80002f94:	04015683          	lhu	a3,64(sp)
				size_t len = bpe - bps;
    80002f98:	413b8733          	sub	a4,s7,s3
				conv->flag_zero = false;
    80002f9c:	fbf6f693          	andi	a3,a3,-65
    80002fa0:	04d11023          	sh	a3,64(sp)
				if (len < (size_t)precision) {
    80002fa4:	f30777e3          	bgeu	a4,a6,80002ed2 <cbvprintf+0x588>
					conv->pad0_value = precision - (int)len;
    80002fa8:	40e8073b          	subw	a4,a6,a4
    80002fac:	c2ba                	sw	a4,68(sp)
    80002fae:	b715                	j	80002ed2 <cbvprintf+0x588>
			if (value->ptr != NULL) {
    80002fb0:	7542                	ld	a0,48(sp)
    80002fb2:	cd39                	beqz	a0,80003010 <cbvprintf+0x6c6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    80002fb4:	02e10693          	addi	a3,sp,46
    80002fb8:	0830                	addi	a2,sp,24
    80002fba:	008c                	addi	a1,sp,64
    80002fbc:	e442                	sd	a6,8(sp)
    80002fbe:	89dff0ef          	jal	ra,8000285a <encode_uint>
				conv->altform_0c = true;
    80002fc2:	04215783          	lhu	a5,66(sp)
    80002fc6:	6721                	lui	a4,0x8
    80002fc8:	81070713          	addi	a4,a4,-2032 # 7810 <CONFIG_MAIN_STACK_SIZE+0x6810>
    80002fcc:	0ef7f793          	andi	a5,a5,239
    80002fd0:	8fd9                	or	a5,a5,a4
				bps = encode_uint((uintptr_t)value->ptr, conv,
    80002fd2:	89aa                	mv	s3,a0
				conv->altform_0c = true;
    80002fd4:	04f11123          	sh	a5,66(sp)
		char sign = 0;
    80002fd8:	4d81                	li	s11,0
    80002fda:	bf45                	j	80002f8a <cbvprintf+0x640>
	switch ((enum length_mod_enum)conv->length_mod) {
    80002fdc:	479d                	li	a5,7
				store_count(conv, value->ptr, count);
    80002fde:	7742                	ld	a4,48(sp)
    80002fe0:	0004069b          	sext.w	a3,s0
	switch ((enum length_mod_enum)conv->length_mod) {
    80002fe4:	e6c7e2e3          	bltu	a5,a2,80002e48 <cbvprintf+0x4fe>
    80002fe8:	00261793          	slli	a5,a2,0x2
    80002fec:	0008b617          	auipc	a2,0x8b
    80002ff0:	94860613          	addi	a2,a2,-1720 # 8008d934 <__sf_fake_stdout+0x114>
    80002ff4:	97b2                	add	a5,a5,a2
    80002ff6:	439c                	lw	a5,0(a5)
    80002ff8:	97b2                	add	a5,a5,a2
    80002ffa:	8782                	jr	a5
		*(int *)dp = count;
    80002ffc:	c314                	sw	a3,0(a4)
		break;
    80002ffe:	b5a9                	j	80002e48 <cbvprintf+0x4fe>
		*(signed char *)dp = (signed char)count;
    80003000:	00870023          	sb	s0,0(a4)
		break;
    80003004:	b591                	j	80002e48 <cbvprintf+0x4fe>
		*(short *)dp = (short)count;
    80003006:	00871023          	sh	s0,0(a4)
		break;
    8000300a:	bd3d                	j	80002e48 <cbvprintf+0x4fe>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8000300c:	e314                	sd	a3,0(a4)
		break;
    8000300e:	bd2d                	j	80002e48 <cbvprintf+0x4fe>
			bpe = bps + 5;
    80003010:	00087b97          	auipc	s7,0x87
    80003014:	7f5b8b93          	addi	s7,s7,2037 # 8008a805 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE+0x5d>
			bps = "(nil)";
    80003018:	00087997          	auipc	s3,0x87
    8000301c:	7e898993          	addi	s3,s3,2024 # 8008a800 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE+0x58>
    80003020:	b73d                	j	80002f4e <cbvprintf+0x604>
		} else if (conv->altform_0) {
    80003022:	00867693          	andi	a3,a2,8
    80003026:	ec0684e3          	beqz	a3,80002eee <cbvprintf+0x5a4>
			nj_len += 1U;
    8000302a:	0705                	addi	a4,a4,1
    8000302c:	b5c9                	j	80002eee <cbvprintf+0x5a4>
					OUTC(pad);
    8000302e:	85d6                	mv	a1,s5
    80003030:	853a                	mv	a0,a4
    80003032:	e43a                	sd	a4,8(sp)
    80003034:	9a02                	jalr	s4
    80003036:	94054de3          	bltz	a0,80002990 <cbvprintf+0x46>
    8000303a:	6722                	ld	a4,8(sp)
    8000303c:	0405                	addi	s0,s0,1
				while (width-- > 0) {
    8000303e:	86ca                	mv	a3,s2
    80003040:	397d                	addiw	s2,s2,-1
    80003042:	fed046e3          	bgtz	a3,8000302e <cbvprintf+0x6e4>
		if (sign != 0) {
    80003046:	000d8863          	beqz	s11,80003056 <cbvprintf+0x70c>
			OUTC(sign);
    8000304a:	85d6                	mv	a1,s5
    8000304c:	856e                	mv	a0,s11
    8000304e:	9a02                	jalr	s4
    80003050:	940540e3          	bltz	a0,80002990 <cbvprintf+0x46>
    80003054:	0405                	addi	s0,s0,1
			if (conv->altform_0c | conv->altform_0) {
    80003056:	6786                	ld	a5,64(sp)
    80003058:	0147d713          	srli	a4,a5,0x14
    8000305c:	8b05                	andi	a4,a4,1
    8000305e:	e701                	bnez	a4,80003066 <cbvprintf+0x71c>
    80003060:	83cd                	srli	a5,a5,0x13
    80003062:	8b85                	andi	a5,a5,1
    80003064:	cb81                	beqz	a5,80003074 <cbvprintf+0x72a>
				OUTC('0');
    80003066:	85d6                	mv	a1,s5
    80003068:	03000513          	li	a0,48
    8000306c:	9a02                	jalr	s4
    8000306e:	920541e3          	bltz	a0,80002990 <cbvprintf+0x46>
    80003072:	0405                	addi	s0,s0,1
			if (conv->altform_0c) {
    80003074:	04214783          	lbu	a5,66(sp)
    80003078:	8bc1                	andi	a5,a5,16
    8000307a:	cb81                	beqz	a5,8000308a <cbvprintf+0x740>
				OUTC(conv->specifier);
    8000307c:	04314503          	lbu	a0,67(sp)
    80003080:	85d6                	mv	a1,s5
    80003082:	9a02                	jalr	s4
    80003084:	900546e3          	bltz	a0,80002990 <cbvprintf+0x46>
    80003088:	0405                	addi	s0,s0,1
			pad_len = conv->pad0_value;
    8000308a:	4796                	lw	a5,68(sp)
			while (pad_len-- > 0) {
    8000308c:	9fa1                	addw	a5,a5,s0
    8000308e:	4087873b          	subw	a4,a5,s0
    80003092:	02e04f63          	bgtz	a4,800030d0 <cbvprintf+0x786>
			OUTS(bps, bpe);
    80003096:	86de                	mv	a3,s7
    80003098:	864e                	mv	a2,s3
    8000309a:	85d6                	mv	a1,s5
    8000309c:	8552                	mv	a0,s4
    8000309e:	85fff0ef          	jal	ra,800028fc <outs>
    800030a2:	8e0547e3          	bltz	a0,80002990 <cbvprintf+0x46>
    800030a6:	942a                	add	s0,s0,a0
		while (width > 0) {
    800030a8:	0089093b          	addw	s2,s2,s0
    800030ac:	408907bb          	subw	a5,s2,s0
    800030b0:	d8f05ce3          	blez	a5,80002e48 <cbvprintf+0x4fe>
			OUTC(' ');
    800030b4:	85d6                	mv	a1,s5
    800030b6:	02000513          	li	a0,32
    800030ba:	9a02                	jalr	s4
    800030bc:	8c054ae3          	bltz	a0,80002990 <cbvprintf+0x46>
    800030c0:	0405                	addi	s0,s0,1
			--width;
    800030c2:	b7ed                	j	800030ac <cbvprintf+0x762>
				char pad = ' ';
    800030c4:	02000513          	li	a0,32
    800030c8:	b5a5                	j	80002f30 <cbvprintf+0x5e6>
					pad = '0';
    800030ca:	03000513          	li	a0,48
    800030ce:	b58d                	j	80002f30 <cbvprintf+0x5e6>
				OUTC('0');
    800030d0:	85d6                	mv	a1,s5
    800030d2:	03000513          	li	a0,48
    800030d6:	c43e                	sw	a5,8(sp)
    800030d8:	9a02                	jalr	s4
    800030da:	8a054be3          	bltz	a0,80002990 <cbvprintf+0x46>
    800030de:	47a2                	lw	a5,8(sp)
    800030e0:	0405                	addi	s0,s0,1
    800030e2:	b775                	j	8000308e <cbvprintf+0x744>

00000000800030e4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    800030e4:	8082                	ret

00000000800030e6 <arch_cpu_idle>:
 * This function will be called by the kernel idle loop or possibly within
 * an implementation of _pm_save_idle in the kernel when the
 * '_pm_save_flag' variable is non-zero.
 */
void arch_cpu_idle(void)
{
    800030e6:	1141                	addi	sp,sp,-16
    800030e8:	e406                	sd	ra,8(sp)
	sys_trace_idle();
    800030ea:	0be000ef          	jal	ra,800031a8 <sys_trace_idle>
	irq_unlock(key);
    800030ee:	4521                	li	a0,8
    800030f0:	64b090ef          	jal	ra,8000cf3a <z_smp_global_unlock>
	__asm__ volatile("wfi");
    800030f4:	10500073          	wfi
	riscv_idle(MSTATUS_IEN);
}
    800030f8:	60a2                	ld	ra,8(sp)
    800030fa:	0141                	addi	sp,sp,16
    800030fc:	8082                	ret

00000000800030fe <arch_irq_enable>:
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
    800030fe:	0085579b          	srliw	a5,a0,0x8
    80003102:	0ff7f713          	andi	a4,a5,255
    80003106:	e719                	bnez	a4,80003114 <arch_irq_enable+0x16>
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
			  : "=r" (mie)
			  : "r" (1 << irq));
    80003108:	4785                	li	a5,1
    8000310a:	00a7953b          	sllw	a0,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
    8000310e:	30452573          	csrrs	a0,mie,a0
}
    80003112:	8082                	ret
		riscv_plic_irq_enable(irq);
    80003114:	fff7851b          	addiw	a0,a5,-1
    80003118:	a6c9                	j	800034da <riscv_plic_irq_enable>

000000008000311a <arch_irq_priority_set>:
    8000311a:	0085551b          	srliw	a0,a0,0x8
    8000311e:	0ff57793          	andi	a5,a0,255
    80003122:	c399                	beqz	a5,80003128 <arch_irq_priority_set+0xe>
#if defined(CONFIG_RISCV_HAS_PLIC)
	unsigned int level = irq_get_level(irq);

	if (level == 2) {
		irq = irq_from_level_2(irq);
		riscv_plic_set_priority(irq, prio);
    80003124:	357d                	addiw	a0,a0,-1
    80003126:	a6e5                	j	8000350e <riscv_plic_set_priority>
#if defined(CONFIG_NUCLEI_ECLIC)
	nuclei_eclic_set_priority(irq, prio);
#endif

	return ;
}
    80003128:	8082                	ret

000000008000312a <soc_interrupt_init>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000312a:	300477f3          	csrrci	a5,mstatus,8
__weak void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)arch_irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
    8000312e:	30405073          	csrwi	mie,0
    80003132:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
    80003136:	8082                	ret

0000000080003138 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    80003138:	1141                	addi	sp,sp,-16
    8000313a:	e406                	sd	ra,8(sp)
	__do_global_ctors_aux();
    8000313c:	038000ef          	jal	ra,80003174 <__do_global_ctors_aux>
	__do_init_array_aux();
}
    80003140:	60a2                	ld	ra,8(sp)
    80003142:	0141                	addi	sp,sp,16
	__do_init_array_aux();
    80003144:	a009                	j	80003146 <__do_init_array_aux>

0000000080003146 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    80003146:	1101                	addi	sp,sp,-32
    80003148:	e822                	sd	s0,16(sp)
    8000314a:	e426                	sd	s1,8(sp)
    8000314c:	ec06                	sd	ra,24(sp)
	for (func_ptr *func = __init_array_start;
    8000314e:	0000c417          	auipc	s0,0xc
    80003152:	06a40413          	addi	s0,s0,106 # 8000f1b8 <__CTOR_END__>
    80003156:	0000c497          	auipc	s1,0xc
    8000315a:	06248493          	addi	s1,s1,98 # 8000f1b8 <__CTOR_END__>
    8000315e:	00946763          	bltu	s0,s1,8000316c <__do_init_array_aux+0x26>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    80003162:	60e2                	ld	ra,24(sp)
    80003164:	6442                	ld	s0,16(sp)
    80003166:	64a2                	ld	s1,8(sp)
    80003168:	6105                	addi	sp,sp,32
    8000316a:	8082                	ret
		(*func)();
    8000316c:	601c                	ld	a5,0(s0)
		func++) {
    8000316e:	0421                	addi	s0,s0,8
		(*func)();
    80003170:	9782                	jalr	a5
		func++) {
    80003172:	b7f5                	j	8000315e <__do_init_array_aux+0x18>

0000000080003174 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    80003174:	1101                	addi	sp,sp,-32
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    80003176:	0000c797          	auipc	a5,0xc
    8000317a:	03278793          	addi	a5,a5,50 # 8000f1a8 <__CTOR_LIST__>
{
    8000317e:	e822                	sd	s0,16(sp)
    80003180:	0007e403          	lwu	s0,0(a5)
    80003184:	e426                	sd	s1,8(sp)
    80003186:	ec06                	sd	ra,24(sp)
    80003188:	040e                	slli	s0,s0,0x3
    8000318a:	943e                	add	s0,s0,a5
    8000318c:	84be                	mv	s1,a5

	while (nCtors >= 1U) {
    8000318e:	00941763          	bne	s0,s1,8000319c <__do_global_ctors_aux+0x28>
		__CTOR_LIST__[nCtors--]();
	}
}
    80003192:	60e2                	ld	ra,24(sp)
    80003194:	6442                	ld	s0,16(sp)
    80003196:	64a2                	ld	s1,8(sp)
    80003198:	6105                	addi	sp,sp,32
    8000319a:	8082                	ret
		__CTOR_LIST__[nCtors--]();
    8000319c:	601c                	ld	a5,0(s0)
    8000319e:	1461                	addi	s0,s0,-8
    800031a0:	9782                	jalr	a5
    800031a2:	b7f5                	j	8000318e <__do_global_ctors_aux+0x1a>

00000000800031a4 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
    800031a4:	4501                	li	a0,0
    800031a6:	8082                	ret

00000000800031a8 <sys_trace_idle>:
    800031a8:	8082                	ret

00000000800031aa <z_riscv_fatal_error>:
 #define NO_REG "                "
#endif

FUNC_NORETURN void z_riscv_fatal_error(unsigned int reason,
				       const z_arch_esf_t *esf)
{
    800031aa:	1141                	addi	sp,sp,-16
    800031ac:	e406                	sd	ra,8(sp)
		LOG_ERR("   mepc: " PR_REG, esf->mepc);
		LOG_ERR("mstatus: " PR_REG, esf->mstatus);
		LOG_ERR("");
	}

	z_fatal_error(reason, esf);
    800031ae:	350080ef          	jal	ra,8000b4fe <z_fatal_error>

00000000800031b2 <_Fault>:

	return false;
}

void _Fault(z_arch_esf_t *esf)
{
    800031b2:	1141                	addi	sp,sp,-16
    800031b4:	e406                	sd	ra,8(sp)
    800031b6:	85aa                	mv	a1,a0
	}
#endif /* CONFIG_USERSPACE */

	ulong_t mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    800031b8:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	ulong_t mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
    800031bc:	343027f3          	csrr	a5,mtval
	z_fatal_error(reason, esf);
    800031c0:	4501                	li	a0,0
    800031c2:	33c080ef          	jal	ra,8000b4fe <z_fatal_error>

00000000800031c6 <z_irq_spurious>:
#include <kernel_internal.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
    800031c6:	1141                	addi	sp,sp,-16
    800031c8:	e406                	sd	ra,8(sp)
	ulong_t mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
    800031ca:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    800031ce:	4581                	li	a1,0
    800031d0:	4505                	li	a0,1
    800031d2:	fd9ff0ef          	jal	ra,800031aa <z_riscv_fatal_error>

00000000800031d6 <_PrepC>:
 *
 * This routine prepares for the execution of and runs C code.
 */

void _PrepC(void)
{
    800031d6:	1141                	addi	sp,sp,-16
    800031d8:	e406                	sd	ra,8(sp)
	z_bss_zero();
    800031da:	3aa080ef          	jal	ra,8000b584 <z_bss_zero>
	z_data_copy();
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
    800031de:	f4dff0ef          	jal	ra,8000312a <soc_interrupt_init>
#endif
	z_cstart();
    800031e2:	450080ef          	jal	ra,8000b632 <z_cstart>

00000000800031e6 <riscv_smp_init>:

	z_sched_ipi();
}

static int riscv_smp_init(const struct device *dev)
{
    800031e6:	1141                	addi	sp,sp,-16
	ARG_UNUSED(dev);

	IRQ_CONNECT(RISCV_MACHINE_SOFT_IRQ, 0, sched_ipi_handler, NULL, 0);
    800031e8:	4581                	li	a1,0
    800031ea:	450d                	li	a0,3
{
    800031ec:	e406                	sd	ra,8(sp)
	IRQ_CONNECT(RISCV_MACHINE_SOFT_IRQ, 0, sched_ipi_handler, NULL, 0);
    800031ee:	f2dff0ef          	jal	ra,8000311a <arch_irq_priority_set>
	irq_enable(RISCV_MACHINE_SOFT_IRQ);
    800031f2:	450d                	li	a0,3
    800031f4:	f0bff0ef          	jal	ra,800030fe <arch_irq_enable>

	return 0;
}
    800031f8:	60a2                	ld	ra,8(sp)
    800031fa:	4501                	li	a0,0
    800031fc:	0141                	addi	sp,sp,16
    800031fe:	8082                	ret

0000000080003200 <sched_ipi_handler>:
static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
#ifdef CONFIG_SMP
	uint32_t hartid;

	__asm__ volatile("csrr %0, mhartid" : "=r" (hartid));
    80003200:	f14027f3          	csrr	a5,mhartid
	volatile uint32_t *r = (uint32_t *)get_hart_msip(_current_cpu->id);
    80003204:	1782                	slli	a5,a5,0x20
    80003206:	02800713          	li	a4,40
    8000320a:	9381                	srli	a5,a5,0x20
    8000320c:	02e787b3          	mul	a5,a5,a4
    80003210:	000a4717          	auipc	a4,0xa4
    80003214:	f6070713          	addi	a4,a4,-160 # 800a7170 <_kernel>
    80003218:	97ba                	add	a5,a5,a4
    8000321a:	0247c783          	lbu	a5,36(a5)
	return (uintptr_t *)(uint64_t)(RISCV_MSIP_BASE + (hart_id * 4));
    8000321e:	00800737          	lui	a4,0x800
    80003222:	9fb9                	addw	a5,a5,a4
    80003224:	0027979b          	slliw	a5,a5,0x2
	*r = 0U;
    80003228:	0007a023          	sw	zero,0(a5)
	z_sched_ipi();
    8000322c:	4370806f          	j	8000be62 <z_sched_ipi>

0000000080003230 <arch_start_cpu>:
	riscv_cpu_init[cpu_num].fn = fn;
    80003230:	00451813          	slli	a6,a0,0x4
    80003234:	000a4797          	auipc	a5,0xa4
    80003238:	f1c78793          	addi	a5,a5,-228 # 800a7150 <riscv_cpu_init>
    8000323c:	97c2                	add	a5,a5,a6
    8000323e:	e394                	sd	a3,0(a5)
	riscv_cpu_sp = Z_THREAD_STACK_BUFFER(stack) + sz;
    80003240:	95b2                	add	a1,a1,a2
	riscv_cpu_init[cpu_num].arg = arg;
    80003242:	e798                	sd	a4,8(a5)
	riscv_cpu_sp = Z_THREAD_STACK_BUFFER(stack) + sz;
    80003244:	0008b797          	auipc	a5,0x8b
    80003248:	82b7ba23          	sd	a1,-1996(a5) # 8008da78 <riscv_cpu_sp>
	riscv_cpu_wake_flag = cpu_num;
    8000324c:	0008b797          	auipc	a5,0x8b
    80003250:	83478793          	addi	a5,a5,-1996 # 8008da80 <riscv_cpu_wake_flag>
    80003254:	e388                	sd	a0,0(a5)
	while (riscv_cpu_wake_flag != 0U) {
    80003256:	6398                	ld	a4,0(a5)
    80003258:	ff7d                	bnez	a4,80003256 <arch_start_cpu+0x26>
}
    8000325a:	8082                	ret

000000008000325c <z_riscv_secondary_cpu_init>:
{
    8000325c:	1141                	addi	sp,sp,-16
    8000325e:	e406                	sd	ra,8(sp)
    80003260:	e022                	sd	s0,0(sp)
    80003262:	842a                	mv	s0,a0
	soc_interrupt_init();
    80003264:	ec7ff0ef          	jal	ra,8000312a <soc_interrupt_init>
	irq_enable(RISCV_MACHINE_SOFT_IRQ);
    80003268:	450d                	li	a0,3
    8000326a:	e95ff0ef          	jal	ra,800030fe <arch_irq_enable>
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
    8000326e:	000a4517          	auipc	a0,0xa4
    80003272:	ee250513          	addi	a0,a0,-286 # 800a7150 <riscv_cpu_init>
    80003276:	0412                	slli	s0,s0,0x4
    80003278:	942a                	add	s0,s0,a0
    8000327a:	601c                	ld	a5,0(s0)
    8000327c:	6408                	ld	a0,8(s0)
    8000327e:	9782                	jalr	a5

0000000080003280 <arch_sched_ipi>:
    80003280:	30047773          	csrrci	a4,mstatus,8
    80003284:	f14027f3          	csrr	a5,mhartid
	id = _current_cpu->id;
    80003288:	1782                	slli	a5,a5,0x20
    8000328a:	02800693          	li	a3,40
    8000328e:	9381                	srli	a5,a5,0x20
    80003290:	02d787b3          	mul	a5,a5,a3
    80003294:	000a4697          	auipc	a3,0xa4
    80003298:	edc68693          	addi	a3,a3,-292 # 800a7170 <_kernel>
    8000329c:	97b6                	add	a5,a5,a3
    8000329e:	0247c683          	lbu	a3,36(a5)
		if (i != id) {
    800032a2:	ea91                	bnez	a3,800032b6 <arch_sched_ipi+0x36>
			*r = 1U;
    800032a4:	020007b7          	lui	a5,0x2000
    800032a8:	4685                	li	a3,1
    800032aa:	c3d4                	sw	a3,4(a5)
			  : "r" (key & MSTATUS_IEN)
    800032ac:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
    800032b0:	3007a073          	csrs	mstatus,a5
}
    800032b4:	8082                	ret
			*r = 1U;
    800032b6:	4785                	li	a5,1
    800032b8:	02000637          	lui	a2,0x2000
    800032bc:	c21c                	sw	a5,0(a2)
		if (i != id) {
    800032be:	fef687e3          	beq	a3,a5,800032ac <arch_sched_ipi+0x2c>
    800032c2:	b7cd                	j	800032a4 <arch_sched_ipi+0x24>

00000000800032c4 <arch_new_thread>:
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
    800032c4:	f6060613          	addi	a2,a2,-160 # 1ffff60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16768e0>
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
    800032c8:	9a41                	andi	a2,a2,-16
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (ulong_t)entry;
	stack_init->a1 = (ulong_t)p1;
	stack_init->a2 = (ulong_t)p2;
    800032ca:	ea3c                	sd	a5,80(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
    800032cc:	6789                	lui	a5,0x2
    800032ce:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_MAIN_STACK_SIZE+0x880>
    800032d2:	e65c                	sd	a5,136(a2)
		/* User thread */
		stack_init->mepc = (ulong_t)k_thread_user_mode_enter;

	} else {
		/* Supervisor thread */
		stack_init->mepc = (ulong_t)z_thread_entry;
    800032d4:	fffff797          	auipc	a5,0xfffff
    800032d8:	53c78793          	addi	a5,a5,1340 # 80002810 <z_thread_entry>
    800032dc:	e25c                	sd	a5,128(a2)
	stack_init->a0 = (ulong_t)entry;
    800032de:	e234                	sd	a3,64(a2)
	stack_init->a1 = (ulong_t)p1;
    800032e0:	e638                	sd	a4,72(a2)
	stack_init->a3 = (ulong_t)p3;
    800032e2:	05063c23          	sd	a6,88(a2)
#endif

	thread->callee_saved.sp = (ulong_t)stack_init;

	/* where to go when returning from z_riscv_switch() */
	thread->callee_saved.ra = (ulong_t)z_riscv_thread_start;
    800032e6:	ffffd797          	auipc	a5,0xffffd
    800032ea:	e4078793          	addi	a5,a5,-448 # 80000126 <z_riscv_thread_start>
	thread->callee_saved.sp = (ulong_t)stack_init;
    800032ee:	e930                	sd	a2,80(a0)
	thread->callee_saved.ra = (ulong_t)z_riscv_thread_start;
    800032f0:	ed3c                	sd	a5,88(a0)

	/* our switch handle is the thread pointer itself */
	thread->switch_handle = thread;
    800032f2:	10a53423          	sd	a0,264(a0)
}
    800032f6:	8082                	ret

00000000800032f8 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    800032f8:	4501                	li	a0,0
    800032fa:	8082                	ret

00000000800032fc <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    800032fc:	557d                	li	a0,-1
    800032fe:	8082                	ret

0000000080003300 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
    80003300:	4501                	li	a0,0
    80003302:	8082                	ret

0000000080003304 <__stdout_hook_install>:
	_stdout_hook = hook;
    80003304:	80a1bc23          	sd	a0,-2024(gp) # 800ab5e0 <_stdout_hook>
}
    80003308:	8082                	ret

000000008000330a <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    8000330a:	7139                	addi	sp,sp,-64
    8000330c:	f426                	sd	s1,40(sp)
    8000330e:	f04a                	sd	s2,32(sp)
    80003310:	ec4e                	sd	s3,24(sp)
    80003312:	e852                	sd	s4,16(sp)
    80003314:	e456                	sd	s5,8(sp)
    80003316:	e05a                	sd	s6,0(sp)
    80003318:	fc06                	sd	ra,56(sp)
    8000331a:	f822                	sd	s0,48(sp)
    8000331c:	89aa                	mv	s3,a0
    8000331e:	892e                	mv	s2,a1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    80003320:	4481                	li	s1,0
		*(buf + i) = _stdin_hook();
    80003322:	81018a13          	addi	s4,gp,-2032 # 800ab5d8 <_stdin_hook>
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    80003326:	4aa9                	li	s5,10
    80003328:	4b35                	li	s6,13
    8000332a:	0004841b          	sext.w	s0,s1
	for (i = 0; i < nbytes; i++) {
    8000332e:	01245f63          	bge	s0,s2,8000334c <z_impl_zephyr_read_stdin+0x42>
		*(buf + i) = _stdin_hook();
    80003332:	000a3783          	ld	a5,0(s4)
    80003336:	2405                	addiw	s0,s0,1
    80003338:	9782                	jalr	a5
    8000333a:	009987b3          	add	a5,s3,s1
    8000333e:	00a78023          	sb	a0,0(a5)
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    80003342:	01550563          	beq	a0,s5,8000334c <z_impl_zephyr_read_stdin+0x42>
    80003346:	0485                	addi	s1,s1,1
    80003348:	ff6511e3          	bne	a0,s6,8000332a <z_impl_zephyr_read_stdin+0x20>
			i++;
			break;
		}
	}
	return i;
}
    8000334c:	70e2                	ld	ra,56(sp)
    8000334e:	8522                	mv	a0,s0
    80003350:	7442                	ld	s0,48(sp)
    80003352:	74a2                	ld	s1,40(sp)
    80003354:	7902                	ld	s2,32(sp)
    80003356:	69e2                	ld	s3,24(sp)
    80003358:	6a42                	ld	s4,16(sp)
    8000335a:	6aa2                	ld	s5,8(sp)
    8000335c:	6b02                	ld	s6,0(sp)
    8000335e:	6121                	addi	sp,sp,64
    80003360:	8082                	ret

0000000080003362 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    80003362:	7179                	addi	sp,sp,-48
    80003364:	f022                	sd	s0,32(sp)
    80003366:	ec26                	sd	s1,24(sp)
    80003368:	e84a                	sd	s2,16(sp)
    8000336a:	e44e                	sd	s3,8(sp)
    8000336c:	e052                	sd	s4,0(sp)
    8000336e:	f406                	sd	ra,40(sp)
    80003370:	892a                	mv	s2,a0
    80003372:	84ae                	mv	s1,a1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    80003374:	842a                	mv	s0,a0
		if (*(buf + i) == '\n') {
    80003376:	4a29                	li	s4,10
    80003378:	81818993          	addi	s3,gp,-2024 # 800ab5e0 <_stdout_hook>
	for (i = 0; i < nbytes; i++) {
    8000337c:	412407bb          	subw	a5,s0,s2
    80003380:	0097cb63          	blt	a5,s1,80003396 <z_impl_zephyr_write_stdout+0x34>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    80003384:	70a2                	ld	ra,40(sp)
    80003386:	7402                	ld	s0,32(sp)
    80003388:	6942                	ld	s2,16(sp)
    8000338a:	69a2                	ld	s3,8(sp)
    8000338c:	6a02                	ld	s4,0(sp)
    8000338e:	8526                	mv	a0,s1
    80003390:	64e2                	ld	s1,24(sp)
    80003392:	6145                	addi	sp,sp,48
    80003394:	8082                	ret
		if (*(buf + i) == '\n') {
    80003396:	00044783          	lbu	a5,0(s0)
    8000339a:	01479663          	bne	a5,s4,800033a6 <z_impl_zephyr_write_stdout+0x44>
			_stdout_hook('\r');
    8000339e:	0009b783          	ld	a5,0(s3)
    800033a2:	4535                	li	a0,13
    800033a4:	9782                	jalr	a5
		_stdout_hook(*(buf + i));
    800033a6:	00044503          	lbu	a0,0(s0)
    800033aa:	0009b783          	ld	a5,0(s3)
    800033ae:	0405                	addi	s0,s0,1
    800033b0:	9782                	jalr	a5
	for (i = 0; i < nbytes; i++) {
    800033b2:	b7e9                	j	8000337c <z_impl_zephyr_write_stdout+0x1a>

00000000800033b4 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
    800033b4:	852e                	mv	a0,a1
    800033b6:	85b2                	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    800033b8:	bf89                	j	8000330a <z_impl_zephyr_read_stdin>

00000000800033ba <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
    800033ba:	852e                	mv	a0,a1
    800033bc:	85b2                	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    800033be:	b755                	j	80003362 <z_impl_zephyr_write_stdout>

00000000800033c0 <_close>:
    800033c0:	557d                	li	a0,-1
    800033c2:	8082                	ret

00000000800033c4 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    800033c4:	4501                	li	a0,0
    800033c6:	8082                	ret

00000000800033c8 <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
    800033c8:	00352513          	slti	a0,a0,3
    800033cc:	8082                	ret

00000000800033ce <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
    800033ce:	4501                	li	a0,0
    800033d0:	8082                	ret

00000000800033d2 <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
    800033d2:	4501                	li	a0,0
    800033d4:	8082                	ret

00000000800033d6 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    800033d6:	6789                	lui	a5,0x2
    800033d8:	c1dc                	sw	a5,4(a1)
	return 0;
}
    800033da:	4501                	li	a0,0
    800033dc:	8082                	ret

00000000800033de <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    800033de:	1141                	addi	sp,sp,-16
    800033e0:	e406                	sd	ra,8(sp)
    800033e2:	4595                	li	a1,5
    800033e4:	00087517          	auipc	a0,0x87
    800033e8:	42450513          	addi	a0,a0,1060 # 8008a808 <_ZTVN6tflite22MicroMutableOpResolverILj5EEE+0x60>
    800033ec:	f77ff0ef          	jal	ra,80003362 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    800033f0:	a001                	j	800033f0 <_exit+0x12>

00000000800033f2 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    800033f2:	0008a617          	auipc	a2,0x8a
    800033f6:	69660613          	addi	a2,a2,1686 # 8008da88 <heap_sz>
    800033fa:	621c                	ld	a5,0(a2)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    800033fc:	4725                	li	a4,9
    800033fe:	0772                	slli	a4,a4,0x1c
    80003400:	00f506b3          	add	a3,a0,a5
    80003404:	8e018513          	addi	a0,gp,-1824 # 800ab6a8 <__data_region_end>
    80003408:	8f09                	sub	a4,a4,a0
    8000340a:	00e6f563          	bgeu	a3,a4,80003414 <_sbrk+0x22>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    8000340e:	953e                	add	a0,a0,a5
		heap_sz += count;
    80003410:	e214                	sd	a3,0(a2)
		ret = ptr;
    80003412:	8082                	ret

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    80003414:	557d                	li	a0,-1
	}

	return ret;
}
    80003416:	8082                	ret

0000000080003418 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    80003418:	1141                	addi	sp,sp,-16
    8000341a:	e022                	sd	s0,0(sp)
    8000341c:	842a                	mv	s0,a0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    8000341e:	02000513          	li	a0,32
{
    80003422:	e406                	sd	ra,8(sp)
	*lock = malloc(sizeof(struct k_mutex));
    80003424:	5da0a0ef          	jal	ra,8000d9fe <malloc>
    80003428:	e008                	sd	a0,0(s0)
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    8000342a:	6402                	ld	s0,0(sp)
    8000342c:	60a2                	ld	ra,8(sp)
    8000342e:	0141                	addi	sp,sp,16
	return z_impl_k_mutex_init(mutex);
    80003430:	5340806f          	j	8000b964 <z_impl_k_mutex_init>

0000000080003434 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    80003434:	55fd                	li	a1,-1
    80003436:	53e0806f          	j	8000b974 <z_impl_k_mutex_lock>

000000008000343a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    8000343a:	6800806f          	j	8000baba <z_impl_k_mutex_unlock>

000000008000343e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    8000343e:	0a00806f          	j	8000b4de <z_impl_z_errno>

0000000080003442 <plic_init>:
 * @brief Initialize the Platform Level Interrupt Controller
 *
 * @retval 0 on success.
 */
static int plic_init(const struct device *dev)
{
    80003442:	1141                	addi	sp,sp,-16
	    (volatile struct plic_regs_t *)PLIC_REG;
	int i;

	/* Ensure that all interrupts are disabled initially */
	for (i = 0; i < PLIC_EN_SIZE; i++) {
		*en = 0U;
    80003444:	0c0027b7          	lui	a5,0xc002
{
    80003448:	e406                	sd	ra,8(sp)
		*en = 0U;
    8000344a:	0007a023          	sw	zero,0(a5) # c002000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb678980>
    8000344e:	0007a223          	sw	zero,4(a5)
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
    80003452:	0c0007b7          	lui	a5,0xc000
		en++;
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 0; i < PLIC_IRQS; i++) {
    80003456:	0d078713          	addi	a4,a5,208 # c0000d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb676a50>
		*prio = 0U;
    8000345a:	0007a023          	sw	zero,0(a5)
		prio++;
    8000345e:	0791                	addi	a5,a5,4
	for (i = 0; i < PLIC_IRQS; i++) {
    80003460:	fee79de3          	bne	a5,a4,8000345a <plic_init+0x18>
	}

	/* Set threshold priority to 0 */
	regs->threshold_prio = 0U;
    80003464:	0c2007b7          	lui	a5,0xc200
    80003468:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb876980>

	/* Setup IRQ handler for PLIC driver */
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
    8000346c:	4581                	li	a1,0
    8000346e:	452d                	li	a0,11
    80003470:	cabff0ef          	jal	ra,8000311a <arch_irq_priority_set>
		    plic_irq_handler,
		    NULL,
		    0);

	/* Enable IRQ for PLIC driver */
	irq_enable(RISCV_MACHINE_EXT_IRQ);
    80003474:	452d                	li	a0,11
    80003476:	c89ff0ef          	jal	ra,800030fe <arch_irq_enable>

	return 0;
}
    8000347a:	60a2                	ld	ra,8(sp)
    8000347c:	4501                	li	a0,0
    8000347e:	0141                	addi	sp,sp,16
    80003480:	8082                	ret

0000000080003482 <plic_irq_handler>:
{
    80003482:	1101                	addi	sp,sp,-32
	irq = regs->claim_complete;
    80003484:	0c2007b7          	lui	a5,0xc200
{
    80003488:	e822                	sd	s0,16(sp)
	irq = regs->claim_complete;
    8000348a:	43c0                	lw	s0,4(a5)
{
    8000348c:	e426                	sd	s1,8(sp)
	save_irq = irq;
    8000348e:	0008a497          	auipc	s1,0x8a
    80003492:	67e48493          	addi	s1,s1,1662 # 8008db0c <save_irq>
	irq = regs->claim_complete;
    80003496:	2401                	sext.w	s0,s0
{
    80003498:	ec06                	sd	ra,24(sp)
	save_irq = irq;
    8000349a:	c080                	sw	s0,0(s1)
	if (irq == 0U || irq >= PLIC_IRQS)
    8000349c:	fff4071b          	addiw	a4,s0,-1
    800034a0:	03200793          	li	a5,50
    800034a4:	00e7f563          	bgeu	a5,a4,800034ae <plic_irq_handler+0x2c>
		z_irq_spurious(NULL);
    800034a8:	4501                	li	a0,0
    800034aa:	d1dff0ef          	jal	ra,800031c6 <z_irq_spurious>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
    800034ae:	2431                	addiw	s0,s0,12
	ite->isr(ite->arg);
    800034b0:	02041793          	slli	a5,s0,0x20
    800034b4:	01c7d413          	srli	s0,a5,0x1c
    800034b8:	0000c797          	auipc	a5,0xc
    800034bc:	8e878793          	addi	a5,a5,-1816 # 8000eda0 <_sw_isr_table>
    800034c0:	943e                	add	s0,s0,a5
    800034c2:	641c                	ld	a5,8(s0)
    800034c4:	6008                	ld	a0,0(s0)
    800034c6:	9782                	jalr	a5
	regs->claim_complete = save_irq;
    800034c8:	4098                	lw	a4,0(s1)
}
    800034ca:	60e2                	ld	ra,24(sp)
    800034cc:	6442                	ld	s0,16(sp)
	regs->claim_complete = save_irq;
    800034ce:	0c2007b7          	lui	a5,0xc200
    800034d2:	c3d8                	sw	a4,4(a5)
}
    800034d4:	64a2                	ld	s1,8(sp)
    800034d6:	6105                	addi	sp,sp,32
    800034d8:	8082                	ret

00000000800034da <riscv_plic_irq_enable>:
{
    800034da:	1141                	addi	sp,sp,-16
    800034dc:	e022                	sd	s0,0(sp)
    800034de:	e406                	sd	ra,8(sp)
    800034e0:	842a                	mv	s0,a0
	key = irq_lock();
    800034e2:	213090ef          	jal	ra,8000cef4 <z_smp_global_lock>
	en += (irq >> 5);
    800034e6:	0054571b          	srliw	a4,s0,0x5
    800034ea:	00271793          	slli	a5,a4,0x2
    800034ee:	0c002737          	lui	a4,0xc002
    800034f2:	973e                	add	a4,a4,a5
	*en |= (1 << (irq & 31));
    800034f4:	431c                	lw	a5,0(a4)
    800034f6:	4685                	li	a3,1
    800034f8:	0086943b          	sllw	s0,a3,s0
    800034fc:	8fc1                	or	a5,a5,s0
}
    800034fe:	6402                	ld	s0,0(sp)
    80003500:	60a2                	ld	ra,8(sp)
	*en |= (1 << (irq & 31));
    80003502:	2781                	sext.w	a5,a5
    80003504:	c31c                	sw	a5,0(a4)
	irq_unlock(key);
    80003506:	2501                	sext.w	a0,a0
}
    80003508:	0141                	addi	sp,sp,16
	irq_unlock(key);
    8000350a:	2310906f          	j	8000cf3a <z_smp_global_unlock>

000000008000350e <riscv_plic_set_priority>:
	if (priority > PLIC_MAX_PRIO)
    8000350e:	479d                	li	a5,7
    80003510:	872e                	mv	a4,a1
    80003512:	00b7f363          	bgeu	a5,a1,80003518 <riscv_plic_set_priority+0xa>
    80003516:	471d                	li	a4,7
	prio += irq;
    80003518:	02051793          	slli	a5,a0,0x20
    8000351c:	01e7d513          	srli	a0,a5,0x1e
    80003520:	0c0007b7          	lui	a5,0xc000
    80003524:	953e                	add	a0,a0,a5
	*prio = priority;
    80003526:	c118                	sw	a4,0(a0)
}
    80003528:	8082                	ret

000000008000352a <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    8000352a:	1141                	addi	sp,sp,-16

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    8000352c:	0000c517          	auipc	a0,0xc
    80003530:	84450513          	addi	a0,a0,-1980 # 8000ed70 <__device_dts_ord_23>
{
    80003534:	e406                	sd	ra,8(sp)
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    80003536:	0008a797          	auipc	a5,0x8a
    8000353a:	54a7bd23          	sd	a0,1370(a5) # 8008da90 <uart_console_dev>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    8000353e:	789070ef          	jal	ra,8000b4c6 <z_device_is_ready>
    80003542:	57b5                	li	a5,-19
	if (!device_is_ready(uart_console_dev)) {
    80003544:	cd11                	beqz	a0,80003560 <uart_console_init+0x36>
	__stdout_hook_install(console_out);
    80003546:	00000517          	auipc	a0,0x0
    8000354a:	02250513          	addi	a0,a0,34 # 80003568 <console_out>
    8000354e:	db7ff0ef          	jal	ra,80003304 <__stdout_hook_install>
	__printk_hook_install(console_out);
    80003552:	00000517          	auipc	a0,0x0
    80003556:	01650513          	addi	a0,a0,22 # 80003568 <console_out>
    8000355a:	a3aff0ef          	jal	ra,80002794 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    8000355e:	4781                	li	a5,0
}
    80003560:	60a2                	ld	ra,8(sp)
    80003562:	853e                	mv	a0,a5
    80003564:	0141                	addi	sp,sp,16
    80003566:	8082                	ret

0000000080003568 <console_out>:
{
    80003568:	1101                	addi	sp,sp,-32
    8000356a:	e822                	sd	s0,16(sp)
    8000356c:	e426                	sd	s1,8(sp)
    8000356e:	ec06                	sd	ra,24(sp)
	if ('\n' == c) {
    80003570:	47a9                	li	a5,10
{
    80003572:	842a                	mv	s0,a0
    80003574:	0008a497          	auipc	s1,0x8a
    80003578:	51c48493          	addi	s1,s1,1308 # 8008da90 <uart_console_dev>
	if ('\n' == c) {
    8000357c:	00f51763          	bne	a0,a5,8000358a <console_out+0x22>
		uart_poll_out(uart_console_dev, '\r');
    80003580:	6088                	ld	a0,0(s1)
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    80003582:	691c                	ld	a5,16(a0)
    80003584:	45b5                	li	a1,13
    80003586:	679c                	ld	a5,8(a5)
    80003588:	9782                	jalr	a5
	uart_poll_out(uart_console_dev, c);
    8000358a:	6088                	ld	a0,0(s1)
    8000358c:	691c                	ld	a5,16(a0)
    8000358e:	0ff47593          	andi	a1,s0,255
    80003592:	679c                	ld	a5,8(a5)
    80003594:	9782                	jalr	a5
}
    80003596:	60e2                	ld	ra,24(sp)
    80003598:	8522                	mv	a0,s0
    8000359a:	6442                	ld	s0,16(sp)
    8000359c:	64a2                	ld	s1,8(sp)
    8000359e:	6105                	addi	sp,sp,32
    800035a0:	8082                	ret

00000000800035a2 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = dev->data;
    800035a2:	711c                	ld	a5,32(a0)
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
    800035a4:	4501                	li	a0,0
	cfg->baudrate = data->uart_config.baudrate;
    800035a6:	4398                	lw	a4,0(a5)
    800035a8:	c198                	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
    800035aa:	0047c703          	lbu	a4,4(a5)
    800035ae:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
    800035b2:	0057c703          	lbu	a4,5(a5)
    800035b6:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
    800035ba:	0067c703          	lbu	a4,6(a5)
    800035be:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
    800035c2:	0077c783          	lbu	a5,7(a5)
    800035c6:	00f583a3          	sb	a5,7(a1)
}
    800035ca:	8082                	ret

00000000800035cc <reg_interval.isra.0>:
	if (config->reg_interval) {
    800035cc:	00c54503          	lbu	a0,12(a0)
    800035d0:	e111                	bnez	a0,800035d4 <reg_interval.isra.0+0x8>
	return DEFAULT_REG_INTERVAL;
    800035d2:	4511                	li	a0,4
}
    800035d4:	8082                	ret

00000000800035d6 <atomic_clear.isra.0>:
    800035d6:	4781                	li	a5,0
    800035d8:	0f50000f          	fence	iorw,ow
    800035dc:	0cf537af          	amoswap.d.aq	a5,a5,(a0)
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_clear(atomic_t *target)
{
	return atomic_set(target, 0);
}
    800035e0:	8082                	ret

00000000800035e2 <uart_ns16550_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
    800035e2:	7179                	addi	sp,sp,-48
    800035e4:	f022                	sd	s0,32(sp)
    800035e6:	e84a                	sd	s2,16(sp)
    800035e8:	f406                	sd	ra,40(sp)
    800035ea:	ec26                	sd	s1,24(sp)
    800035ec:	e44e                	sd	s3,8(sp)
    800035ee:	892e                	mv	s2,a1
	struct uart_ns16550_dev_data *data = dev->data;
    800035f0:	7100                	ld	s0,32(a0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    800035f2:	300474f3          	csrrci	s1,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    800035f6:	4705                	li	a4,1
    800035f8:	0421                	addi	s0,s0,8
    800035fa:	0f50000f          	fence	iorw,ow
    800035fe:	140437af          	lr.d.aq	a5,(s0)
    80003602:	e781                	bnez	a5,8000360a <uart_ns16550_poll_out+0x28>
    80003604:	1ce436af          	sc.d.aq	a3,a4,(s0)
    80003608:	fafd                	bnez	a3,800035fe <uart_ns16550_poll_out+0x1c>
    8000360a:	fbe5                	bnez	a5,800035fa <uart_ns16550_poll_out+0x18>
	return DEVICE_MMIO_GET(dev);
    8000360c:	6508                	ld	a0,8(a0)
    8000360e:	00053983          	ld	s3,0(a0)
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
    80003612:	fbbff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    80003616:	4795                	li	a5,5
    80003618:	02a787bb          	mulw	a5,a5,a0
    8000361c:	97ce                	add	a5,a5,s3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    8000361e:	0007c703          	lbu	a4,0(a5)
    80003622:	02077713          	andi	a4,a4,32
    80003626:	df65                	beqz	a4,8000361e <uart_ns16550_poll_out+0x3c>
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    80003628:	01298023          	sb	s2,0(s3)
	 * setting a zero and (because we hold the lock) know the existing
	 * state won't change due to a race.  But some architectures need
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
    8000362c:	8522                	mv	a0,s0
    8000362e:	fa9ff0ef          	jal	ra,800035d6 <atomic_clear.isra.0>
			  : "r" (key & MSTATUS_IEN)
    80003632:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    80003634:	3004a073          	csrs	mstatus,s1
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&data->lock, key);
}
    80003638:	70a2                	ld	ra,40(sp)
    8000363a:	7402                	ld	s0,32(sp)
    8000363c:	64e2                	ld	s1,24(sp)
    8000363e:	6942                	ld	s2,16(sp)
    80003640:	69a2                	ld	s3,8(sp)
    80003642:	6145                	addi	sp,sp,48
    80003644:	8082                	ret

0000000080003646 <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
    80003646:	1101                	addi	sp,sp,-32
    80003648:	e426                	sd	s1,8(sp)
    8000364a:	ec06                	sd	ra,24(sp)
    8000364c:	e822                	sd	s0,16(sp)
    8000364e:	e04a                	sd	s2,0(sp)
	struct uart_ns16550_dev_data *data = dev->data;
    80003650:	7104                	ld	s1,32(a0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    80003652:	30047973          	csrrci	s2,mstatus,8
    80003656:	4705                	li	a4,1
	while (!atomic_cas(&l->locked, 0, 1)) {
    80003658:	04a1                	addi	s1,s1,8
    8000365a:	0f50000f          	fence	iorw,ow
    8000365e:	1404b7af          	lr.d.aq	a5,(s1)
    80003662:	e781                	bnez	a5,8000366a <uart_ns16550_err_check+0x24>
    80003664:	1ce4b6af          	sc.d.aq	a3,a4,(s1)
    80003668:	fafd                	bnez	a3,8000365e <uart_ns16550_err_check+0x18>
    8000366a:	fbe5                	bnez	a5,8000365a <uart_ns16550_err_check+0x14>
	return DEVICE_MMIO_GET(dev);
    8000366c:	6500                	ld	s0,8(a0)
			  : "r" (key & MSTATUS_IEN)
    8000366e:	00897913          	andi	s2,s2,8
	k_spinlock_key_t key = k_spin_lock(&data->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
    80003672:	8522                	mv	a0,s0
    80003674:	f59ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    80003678:	4795                	li	a5,5
    8000367a:	02a787bb          	mulw	a5,a5,a0
    8000367e:	6008                	ld	a0,0(s0)
    80003680:	97aa                	add	a5,a5,a0
	return *(volatile uint8_t *)addr;
    80003682:	0007c403          	lbu	s0,0(a5)
	atomic_clear(&l->locked);
    80003686:	8526                	mv	a0,s1
    80003688:	f4fff0ef          	jal	ra,800035d6 <atomic_clear.isra.0>
    8000368c:	0ff47413          	andi	s0,s0,255
	__asm__ volatile ("csrs mstatus, %0"
    80003690:	30092073          	csrs	mstatus,s2

	k_spin_unlock(&data->lock, key);

	return check >> 1;
}
    80003694:	60e2                	ld	ra,24(sp)
	return check >> 1;
    80003696:	00145513          	srli	a0,s0,0x1
}
    8000369a:	6442                	ld	s0,16(sp)
    8000369c:	64a2                	ld	s1,8(sp)
    8000369e:	6902                	ld	s2,0(sp)
    800036a0:	893d                	andi	a0,a0,15
    800036a2:	6105                	addi	sp,sp,32
    800036a4:	8082                	ret

00000000800036a6 <uart_ns16550_configure>:
{
    800036a6:	711d                	addi	sp,sp,-96
    800036a8:	e8a2                	sd	s0,80(sp)
    800036aa:	e0ca                	sd	s2,64(sp)
    800036ac:	f05a                	sd	s6,32(sp)
    800036ae:	ec86                	sd	ra,88(sp)
    800036b0:	e4a6                	sd	s1,72(sp)
    800036b2:	fc4e                	sd	s3,56(sp)
    800036b4:	f852                	sd	s4,48(sp)
    800036b6:	f456                	sd	s5,40(sp)
    800036b8:	ec5e                	sd	s7,24(sp)
    800036ba:	e862                	sd	s8,16(sp)
    800036bc:	e466                	sd	s9,8(sp)
    800036be:	e06a                	sd	s10,0(sp)
    800036c0:	842a                	mv	s0,a0
    800036c2:	892e                	mv	s2,a1
	struct uart_ns16550_dev_data * const dev_data = dev->data;
    800036c4:	02053b03          	ld	s6,32(a0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    800036c8:	300479f3          	csrrci	s3,mstatus,8
    800036cc:	4705                	li	a4,1
	while (!atomic_cas(&l->locked, 0, 1)) {
    800036ce:	008b0a13          	addi	s4,s6,8
    800036d2:	0f50000f          	fence	iorw,ow
    800036d6:	140a37af          	lr.d.aq	a5,(s4)
    800036da:	e781                	bnez	a5,800036e2 <uart_ns16550_configure+0x3c>
    800036dc:	1cea36af          	sc.d.aq	a3,a4,(s4)
    800036e0:	fafd                	bnez	a3,800036d6 <uart_ns16550_configure+0x30>
    800036e2:	fbe5                	bnez	a5,800036d2 <uart_ns16550_configure+0x2c>
	set_baud_rate(dev, cfg->baudrate);
    800036e4:	00092b83          	lw	s7,0(s2)
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    800036e8:	080b8363          	beqz	s7,8000376e <uart_ns16550_configure+0xc8>
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
    800036ec:	00843c03          	ld	s8,8(s0)
	if ((baud_rate != 0U) && (dev_cfg->sys_clk_freq != 0U)) {
    800036f0:	008c2783          	lw	a5,8(s8)
    800036f4:	cfad                	beqz	a5,8000376e <uart_ns16550_configure+0xc8>
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    800036f6:	003b949b          	slliw	s1,s7,0x3
    800036fa:	9cbd                	addw	s1,s1,a5
					/ baud_rate) >> 4;
    800036fc:	0374d4bb          	divuw	s1,s1,s7
		lcr_cache = INBYTE(LCR(dev));
    80003700:	8562                	mv	a0,s8
    80003702:	ecbff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    80003706:	4a8d                	li	s5,3
    80003708:	000c3783          	ld	a5,0(s8)
	struct uart_ns16550_dev_data * const dev_data = dev->data;
    8000370c:	02043c83          	ld	s9,32(s0)
		lcr_cache = INBYTE(LCR(dev));
    80003710:	02aa853b          	mulw	a0,s5,a0
    80003714:	953e                	add	a0,a0,a5
    80003716:	00054783          	lbu	a5,0(a0)
    8000371a:	0ff7fd13          	andi	s10,a5,255
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
    8000371e:	f807e793          	ori	a5,a5,-128
    80003722:	0ff7f793          	andi	a5,a5,255
	*(volatile uint8_t *)addr = data;
    80003726:	00f50023          	sb	a5,0(a0)
	return DEVICE_MMIO_GET(dev);
    8000372a:	6418                	ld	a4,8(s0)
		divisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))
    8000372c:	0044d79b          	srliw	a5,s1,0x4
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
    80003730:	0ff7f793          	andi	a5,a5,255
    80003734:	6318                	ld	a4,0(a4)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    80003736:	00c4d49b          	srliw	s1,s1,0xc
    8000373a:	0ff4f493          	andi	s1,s1,255
    8000373e:	00f70023          	sb	a5,0(a4) # c002000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb678980>
	return DEVICE_MMIO_GET(dev);
    80003742:	00843c03          	ld	s8,8(s0)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
    80003746:	8562                	mv	a0,s8
    80003748:	e85ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    8000374c:	000c3783          	ld	a5,0(s8)
    80003750:	953e                	add	a0,a0,a5
    80003752:	00950023          	sb	s1,0(a0)
	return DEVICE_MMIO_GET(dev);
    80003756:	6404                	ld	s1,8(s0)
		OUTBYTE(LCR(dev), lcr_cache);
    80003758:	8526                	mv	a0,s1
    8000375a:	e73ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    8000375e:	02aa8abb          	mulw	s5,s5,a0
    80003762:	6088                	ld	a0,0(s1)
    80003764:	9aaa                	add	s5,s5,a0
    80003766:	01aa8023          	sb	s10,0(s5)
		dev_data->uart_config.baudrate = baud_rate;
    8000376a:	017ca023          	sw	s7,0(s9)
	switch (cfg->data_bits) {
    8000376e:	00694483          	lbu	s1,6(s2)
    80003772:	478d                	li	a5,3
		ret = -ENOTSUP;
    80003774:	f7a00a93          	li	s5,-134
    80003778:	0a97ee63          	bltu	a5,s1,80003834 <uart_ns16550_configure+0x18e>
	switch (cfg->stop_bits) {
    8000377c:	00594703          	lbu	a4,5(s2)
    80003780:	4685                	li	a3,1
    80003782:	0cd70f63          	beq	a4,a3,80003860 <uart_ns16550_configure+0x1ba>
    80003786:	0af71763          	bne	a4,a5,80003834 <uart_ns16550_configure+0x18e>
    8000378a:	4711                	li	a4,4
	switch (cfg->parity) {
    8000378c:	00494783          	lbu	a5,4(s2)
    80003790:	c799                	beqz	a5,8000379e <uart_ns16550_configure+0xf8>
    80003792:	4689                	li	a3,2
    80003794:	f7a00a93          	li	s5,-134
    80003798:	08d79e63          	bne	a5,a3,80003834 <uart_ns16550_configure+0x18e>
    8000379c:	47c1                	li	a5,16
	dev_data->uart_config = *cfg;
    8000379e:	00092683          	lw	a3,0(s2)
	OUTBYTE(LCR(dev),
    800037a2:	8cd9                	or	s1,s1,a4
    800037a4:	8cdd                	or	s1,s1,a5
	dev_data->uart_config = *cfg;
    800037a6:	00db2023          	sw	a3,0(s6)
    800037aa:	00492683          	lw	a3,4(s2)
	return DEVICE_MMIO_GET(dev);
    800037ae:	00843903          	ld	s2,8(s0)
	dev_data->uart_config = *cfg;
    800037b2:	00db2223          	sw	a3,4(s6)
	OUTBYTE(LCR(dev),
    800037b6:	854a                	mv	a0,s2
    800037b8:	e15ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    800037bc:	478d                	li	a5,3
    800037be:	02a787bb          	mulw	a5,a5,a0
    800037c2:	00093503          	ld	a0,0(s2)
    800037c6:	97aa                	add	a5,a5,a0
    800037c8:	00978023          	sb	s1,0(a5)
	return DEVICE_MMIO_GET(dev);
    800037cc:	6404                	ld	s1,8(s0)
	OUTBYTE(MDC(dev), mdc);
    800037ce:	8526                	mv	a0,s1
    800037d0:	dfdff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    800037d4:	609c                	ld	a5,0(s1)
    800037d6:	0025151b          	slliw	a0,a0,0x2
    800037da:	953e                	add	a0,a0,a5
    800037dc:	47ad                	li	a5,11
    800037de:	00f50023          	sb	a5,0(a0)
	return DEVICE_MMIO_GET(dev);
    800037e2:	6404                	ld	s1,8(s0)
	OUTBYTE(FCR(dev),
    800037e4:	8526                	mv	a0,s1
    800037e6:	de7ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    800037ea:	609c                	ld	a5,0(s1)
    800037ec:	0015151b          	slliw	a0,a0,0x1
    800037f0:	953e                	add	a0,a0,a5
    800037f2:	f8700793          	li	a5,-121
    800037f6:	00f50023          	sb	a5,0(a0)
	return DEVICE_MMIO_GET(dev);
    800037fa:	6404                	ld	s1,8(s0)
    800037fc:	6080                	ld	s0,0(s1)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
    800037fe:	8526                	mv	a0,s1
    80003800:	dcdff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    80003804:	0015151b          	slliw	a0,a0,0x1
    80003808:	9522                	add	a0,a0,s0
	return *(volatile uint8_t *)addr;
    8000380a:	00054783          	lbu	a5,0(a0)
    8000380e:	0c000693          	li	a3,192
		dev_data->fifo_size = 16;
    80003812:	4741                	li	a4,16
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
    80003814:	0c07f793          	andi	a5,a5,192
    80003818:	00d78363          	beq	a5,a3,8000381e <uart_ns16550_configure+0x178>
		dev_data->fifo_size = 1;
    8000381c:	4705                	li	a4,1
    8000381e:	00eb0823          	sb	a4,16(s6)
    80003822:	00044783          	lbu	a5,0(s0)
	OUTBYTE(IER(dev), 0x00);
    80003826:	8526                	mv	a0,s1
    80003828:	da5ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    8000382c:	9522                	add	a0,a0,s0
	*(volatile uint8_t *)addr = data;
    8000382e:	00050023          	sb	zero,0(a0)
	int ret = 0;
    80003832:	4a81                	li	s5,0
	atomic_clear(&l->locked);
    80003834:	8552                	mv	a0,s4
    80003836:	da1ff0ef          	jal	ra,800035d6 <atomic_clear.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000383a:	0089f993          	andi	s3,s3,8
	__asm__ volatile ("csrs mstatus, %0"
    8000383e:	3009a073          	csrs	mstatus,s3
};
    80003842:	60e6                	ld	ra,88(sp)
    80003844:	6446                	ld	s0,80(sp)
    80003846:	64a6                	ld	s1,72(sp)
    80003848:	6906                	ld	s2,64(sp)
    8000384a:	79e2                	ld	s3,56(sp)
    8000384c:	7a42                	ld	s4,48(sp)
    8000384e:	7b02                	ld	s6,32(sp)
    80003850:	6be2                	ld	s7,24(sp)
    80003852:	6c42                	ld	s8,16(sp)
    80003854:	6ca2                	ld	s9,8(sp)
    80003856:	6d02                	ld	s10,0(sp)
    80003858:	8556                	mv	a0,s5
    8000385a:	7aa2                	ld	s5,40(sp)
    8000385c:	6125                	addi	sp,sp,96
    8000385e:	8082                	ret
		uart_cfg.stop_bits = LCR_1_STB;
    80003860:	4701                	li	a4,0
    80003862:	b72d                	j	8000378c <uart_ns16550_configure+0xe6>

0000000080003864 <uart_ns16550_init>:
	ret = uart_ns16550_configure(dev, &data->uart_config);
    80003864:	710c                	ld	a1,32(a0)
    80003866:	b581                	j	800036a6 <uart_ns16550_configure>

0000000080003868 <uart_ns16550_poll_in>:
{
    80003868:	7179                	addi	sp,sp,-48
    8000386a:	f022                	sd	s0,32(sp)
    8000386c:	e84a                	sd	s2,16(sp)
    8000386e:	f406                	sd	ra,40(sp)
    80003870:	ec26                	sd	s1,24(sp)
    80003872:	e44e                	sd	s3,8(sp)
    80003874:	e052                	sd	s4,0(sp)
    80003876:	892e                	mv	s2,a1
	struct uart_ns16550_dev_data *data = dev->data;
    80003878:	7100                	ld	s0,32(a0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000387a:	300474f3          	csrrci	s1,mstatus,8
    8000387e:	4705                	li	a4,1
	while (!atomic_cas(&l->locked, 0, 1)) {
    80003880:	0421                	addi	s0,s0,8
    80003882:	0f50000f          	fence	iorw,ow
    80003886:	140437af          	lr.d.aq	a5,(s0)
    8000388a:	e781                	bnez	a5,80003892 <uart_ns16550_poll_in+0x2a>
    8000388c:	1ce436af          	sc.d.aq	a3,a4,(s0)
    80003890:	fafd                	bnez	a3,80003886 <uart_ns16550_poll_in+0x1e>
    80003892:	fbe5                	bnez	a5,80003882 <uart_ns16550_poll_in+0x1a>
	return DEVICE_MMIO_GET(dev);
    80003894:	6508                	ld	a0,8(a0)
	int ret = -1;
    80003896:	59fd                	li	s3,-1
	return DEVICE_MMIO_GET(dev);
    80003898:	00053a03          	ld	s4,0(a0)
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
    8000389c:	d31ff0ef          	jal	ra,800035cc <reg_interval.isra.0>
    800038a0:	4795                	li	a5,5
    800038a2:	02a787bb          	mulw	a5,a5,a0
    800038a6:	97d2                	add	a5,a5,s4
	return *(volatile uint8_t *)addr;
    800038a8:	0007c783          	lbu	a5,0(a5)
    800038ac:	8b85                	andi	a5,a5,1
    800038ae:	c791                	beqz	a5,800038ba <uart_ns16550_poll_in+0x52>
    800038b0:	000a4783          	lbu	a5,0(s4)
		ret = 0;
    800038b4:	4981                	li	s3,0
		*c = INBYTE(RDR(dev));
    800038b6:	00f90023          	sb	a5,0(s2)
	atomic_clear(&l->locked);
    800038ba:	8522                	mv	a0,s0
    800038bc:	d1bff0ef          	jal	ra,800035d6 <atomic_clear.isra.0>
			  : "r" (key & MSTATUS_IEN)
    800038c0:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    800038c2:	3004a073          	csrs	mstatus,s1
}
    800038c6:	70a2                	ld	ra,40(sp)
    800038c8:	7402                	ld	s0,32(sp)
    800038ca:	64e2                	ld	s1,24(sp)
    800038cc:	6942                	ld	s2,16(sp)
    800038ce:	6a02                	ld	s4,0(sp)
    800038d0:	854e                	mv	a0,s3
    800038d2:	69a2                	ld	s3,8(sp)
    800038d4:	6145                	addi	sp,sp,48
    800038d6:	8082                	ret

00000000800038d8 <set_mtimecmp>:
    800038d8:	f14027f3          	csrr	a5,mhartid
static struct k_spinlock lock;
static uint64_t last_count;

static uint64_t get_hart_mtimecmp(void)
{
	return RISCV_MTIMECMP_BASE + (_current_cpu->id * 8);
    800038dc:	1782                	slli	a5,a5,0x20
    800038de:	02800713          	li	a4,40
    800038e2:	9381                	srli	a5,a5,0x20
    800038e4:	02e787b3          	mul	a5,a5,a4
    800038e8:	000a4717          	auipc	a4,0xa4
    800038ec:	88870713          	addi	a4,a4,-1912 # 800a7170 <_kernel>
    800038f0:	97ba                	add	a5,a5,a4
    800038f2:	0247c783          	lbu	a5,36(a5)
    800038f6:	00401737          	lui	a4,0x401
    800038fa:	8007071b          	addiw	a4,a4,-2048
    800038fe:	9fb9                	addw	a5,a5,a4
    80003900:	0037979b          	slliw	a5,a5,0x3
}

static void set_mtimecmp(uint64_t time)
{
#ifdef CONFIG_64BIT
	*(volatile uint64_t *)get_hart_mtimecmp() = time;
    80003904:	e388                	sd	a0,0(a5)
	 */
	r[1] = 0xffffffff;
	r[0] = (uint32_t)time;
	r[1] = (uint32_t)(time >> 32);
#endif
}
    80003906:	8082                	ret

0000000080003908 <sys_clock_driver_init>:
{
	return (mtime() << CONFIG_RISCV_MACHINE_TIMER_SYSTEM_CLOCK_DIVIDER);
}

static int sys_clock_driver_init(const struct device *dev)
{
    80003908:	1141                	addi	sp,sp,-16
	ARG_UNUSED(dev);

	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
    8000390a:	4581                	li	a1,0
    8000390c:	451d                	li	a0,7
{
    8000390e:	e406                	sd	ra,8(sp)
	IRQ_CONNECT(RISCV_MACHINE_TIMER_IRQ, 0, timer_isr, NULL, 0);
    80003910:	80bff0ef          	jal	ra,8000311a <arch_irq_priority_set>
	return *(volatile uint64_t *)RISCV_MTIME_BASE;
    80003914:	0200c7b7          	lui	a5,0x200c
    80003918:	ff87b503          	ld	a0,-8(a5) # 200bff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1682978>
	last_count = mtime();
    8000391c:	0008a797          	auipc	a5,0x8a
    80003920:	16a7be23          	sd	a0,380(a5) # 8008da98 <last_count>
	set_mtimecmp(last_count + CYC_PER_TICK);
    80003924:	67e1                	lui	a5,0x18
    80003926:	6a078793          	addi	a5,a5,1696 # 186a0 <CONFIG_MAIN_STACK_SIZE+0x176a0>
    8000392a:	953e                	add	a0,a0,a5
    8000392c:	fadff0ef          	jal	ra,800038d8 <set_mtimecmp>
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    80003930:	451d                	li	a0,7
    80003932:	fccff0ef          	jal	ra,800030fe <arch_irq_enable>
	return 0;
}
    80003936:	60a2                	ld	ra,8(sp)
    80003938:	4501                	li	a0,0
    8000393a:	0141                	addi	sp,sp,16
    8000393c:	8082                	ret

000000008000393e <atomic_clear.constprop.0.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000393e:	0008a717          	auipc	a4,0x8a
    80003942:	16270713          	addi	a4,a4,354 # 8008daa0 <lock>
    80003946:	4781                	li	a5,0
    80003948:	0f50000f          	fence	iorw,ow
    8000394c:	0cf737af          	amoswap.d.aq	a5,a5,(a4)
}
    80003950:	8082                	ret

0000000080003952 <timer_isr>:
{
    80003952:	1101                	addi	sp,sp,-32
    80003954:	ec06                	sd	ra,24(sp)
    80003956:	e822                	sd	s0,16(sp)
    80003958:	e426                	sd	s1,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000395a:	300474f3          	csrrci	s1,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8000395e:	0008a797          	auipc	a5,0x8a
    80003962:	14278793          	addi	a5,a5,322 # 8008daa0 <lock>
    80003966:	4685                	li	a3,1
    80003968:	0f50000f          	fence	iorw,ow
    8000396c:	1407b72f          	lr.d.aq	a4,(a5)
    80003970:	e701                	bnez	a4,80003978 <timer_isr+0x26>
    80003972:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    80003976:	fa7d                	bnez	a2,8000396c <timer_isr+0x1a>
	while (!atomic_cas(&l->locked, 0, 1)) {
    80003978:	fb65                	bnez	a4,80003968 <timer_isr+0x16>
	return *(volatile uint64_t *)RISCV_MTIME_BASE;
    8000397a:	0200c7b7          	lui	a5,0x200c
    8000397e:	ff87b703          	ld	a4,-8(a5) # 200bff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1682978>
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    80003982:	0008a797          	auipc	a5,0x8a
    80003986:	11678793          	addi	a5,a5,278 # 8008da98 <last_count>
    8000398a:	6380                	ld	s0,0(a5)
    8000398c:	6561                	lui	a0,0x18
    8000398e:	6a050513          	addi	a0,a0,1696 # 186a0 <CONFIG_MAIN_STACK_SIZE+0x176a0>
    80003992:	40870433          	sub	s0,a4,s0
	last_count = now;
    80003996:	e398                	sd	a4,0(a5)
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
    80003998:	02a45433          	divu	s0,s0,a0
	atomic_clear(&l->locked);
    8000399c:	fa3ff0ef          	jal	ra,8000393e <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    800039a0:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    800039a4:	3007a073          	csrs	mstatus,a5
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    800039a8:	0004051b          	sext.w	a0,s0
}
    800039ac:	6442                	ld	s0,16(sp)
    800039ae:	60e2                	ld	ra,24(sp)
    800039b0:	64a2                	ld	s1,8(sp)
    800039b2:	6105                	addi	sp,sp,32
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    800039b4:	06b0906f          	j	8000d21e <sys_clock_announce>

00000000800039b8 <sys_clock_set_timeout>:
	if (idle) {
    800039b8:	e5f1                	bnez	a1,80003a84 <sys_clock_set_timeout+0xcc>
{
    800039ba:	1141                	addi	sp,sp,-16
    800039bc:	e406                	sd	ra,8(sp)
    800039be:	e022                	sd	s0,0(sp)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
    800039c0:	57fd                	li	a5,-1
    800039c2:	0af50863          	beq	a0,a5,80003a72 <sys_clock_set_timeout+0xba>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    800039c6:	4785                	li	a5,1
    800039c8:	4681                	li	a3,0
    800039ca:	00a7d963          	bge	a5,a0,800039dc <sys_clock_set_timeout+0x24>
    800039ce:	6695                	lui	a3,0x5
    800039d0:	3e168693          	addi	a3,a3,993 # 53e1 <CONFIG_MAIN_STACK_SIZE+0x43e1>
    800039d4:	00a6c463          	blt	a3,a0,800039dc <sys_clock_set_timeout+0x24>
    800039d8:	fff5069b          	addiw	a3,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
    800039dc:	30047473          	csrrci	s0,mstatus,8
    800039e0:	0008a797          	auipc	a5,0x8a
    800039e4:	0c078793          	addi	a5,a5,192 # 8008daa0 <lock>
    800039e8:	4605                	li	a2,1
    800039ea:	0f50000f          	fence	iorw,ow
    800039ee:	1407b72f          	lr.d.aq	a4,(a5)
    800039f2:	e701                	bnez	a4,800039fa <sys_clock_set_timeout+0x42>
    800039f4:	1cc7b5af          	sc.d.aq	a1,a2,(a5)
    800039f8:	f9fd                	bnez	a1,800039ee <sys_clock_set_timeout+0x36>
	while (!atomic_cas(&l->locked, 0, 1)) {
    800039fa:	fb65                	bnez	a4,800039ea <sys_clock_set_timeout+0x32>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
    800039fc:	6761                	lui	a4,0x18
    800039fe:	6a07061b          	addiw	a2,a4,1696
    80003a02:	02c6883b          	mulw	a6,a3,a2
	return *(volatile uint64_t *)RISCV_MTIME_BASE;
    80003a06:	0200c7b7          	lui	a5,0x200c
    80003a0a:	ff87b783          	ld	a5,-8(a5) # 200bff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1682978>
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
    80003a0e:	69f7071b          	addiw	a4,a4,1695
    80003a12:	0008a517          	auipc	a0,0x8a
    80003a16:	08653503          	ld	a0,134(a0) # 8008da98 <last_count>
    80003a1a:	0007859b          	sext.w	a1,a5
    80003a1e:	9fb9                	addw	a5,a5,a4
	if (cyc <= MAX_CYC - adj) {
    80003a20:	80000737          	lui	a4,0x80000
    80003a24:	fff74713          	not	a4,a4
    80003a28:	9f29                	addw	a4,a4,a0
    80003a2a:	9f1d                	subw	a4,a4,a5
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
    80003a2c:	0005061b          	sext.w	a2,a0
	if (cyc <= MAX_CYC - adj) {
    80003a30:	05076563          	bltu	a4,a6,80003a7a <sys_clock_set_timeout+0xc2>
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
    80003a34:	9f91                	subw	a5,a5,a2
		cyc += adj;
    80003a36:	010787bb          	addw	a5,a5,a6
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    80003a3a:	6761                	lui	a4,0x18
    80003a3c:	6a07071b          	addiw	a4,a4,1696
    80003a40:	02e7d7bb          	divuw	a5,a5,a4
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
    80003a44:	9e0d                	subw	a2,a2,a1
    80003a46:	06300593          	li	a1,99
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    80003a4a:	02e786bb          	mulw	a3,a5,a4
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
    80003a4e:	9e35                	addw	a2,a2,a3
    80003a50:	00c5c363          	blt	a1,a2,80003a56 <sys_clock_set_timeout+0x9e>
		cyc += CYC_PER_TICK;
    80003a54:	9eb9                	addw	a3,a3,a4
	set_mtimecmp(cyc + last_count);
    80003a56:	1682                	slli	a3,a3,0x20
    80003a58:	9281                	srli	a3,a3,0x20
    80003a5a:	9536                	add	a0,a0,a3
    80003a5c:	e7dff0ef          	jal	ra,800038d8 <set_mtimecmp>
			  : "r" (key & MSTATUS_IEN)
    80003a60:	8821                	andi	s0,s0,8
	atomic_clear(&l->locked);
    80003a62:	eddff0ef          	jal	ra,8000393e <atomic_clear.constprop.0.isra.0>
	__asm__ volatile ("csrs mstatus, %0"
    80003a66:	30042073          	csrs	mstatus,s0
}
    80003a6a:	60a2                	ld	ra,8(sp)
    80003a6c:	6402                	ld	s0,0(sp)
    80003a6e:	0141                	addi	sp,sp,16
    80003a70:	8082                	ret
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
    80003a72:	6515                	lui	a0,0x5
    80003a74:	3e150513          	addi	a0,a0,993 # 53e1 <CONFIG_MAIN_STACK_SIZE+0x43e1>
    80003a78:	b785                	j	800039d8 <sys_clock_set_timeout+0x20>
		cyc = MAX_CYC;
    80003a7a:	800007b7          	lui	a5,0x80000
    80003a7e:	fff7c793          	not	a5,a5
    80003a82:	bf65                	j	80003a3a <sys_clock_set_timeout+0x82>
    80003a84:	8082                	ret

0000000080003a86 <sys_clock_elapsed>:
{
    80003a86:	1101                	addi	sp,sp,-32
    80003a88:	ec06                	sd	ra,24(sp)
    80003a8a:	e822                	sd	s0,16(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    80003a8c:	30047473          	csrrci	s0,mstatus,8
    80003a90:	0008a797          	auipc	a5,0x8a
    80003a94:	01078793          	addi	a5,a5,16 # 8008daa0 <lock>
    80003a98:	4685                	li	a3,1
    80003a9a:	0f50000f          	fence	iorw,ow
    80003a9e:	1407b72f          	lr.d.aq	a4,(a5)
    80003aa2:	e701                	bnez	a4,80003aaa <sys_clock_elapsed+0x24>
    80003aa4:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    80003aa8:	fa7d                	bnez	a2,80003a9e <sys_clock_elapsed+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    80003aaa:	fb65                	bnez	a4,80003a9a <sys_clock_elapsed+0x14>
	return *(volatile uint64_t *)RISCV_MTIME_BASE;
    80003aac:	0200c7b7          	lui	a5,0x200c
    80003ab0:	ff87b503          	ld	a0,-8(a5) # 200bff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1682978>
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
    80003ab4:	0008a797          	auipc	a5,0x8a
    80003ab8:	fe47b783          	ld	a5,-28(a5) # 8008da98 <last_count>
    80003abc:	9d1d                	subw	a0,a0,a5
    80003abe:	67e1                	lui	a5,0x18
    80003ac0:	6a07879b          	addiw	a5,a5,1696
    80003ac4:	02f5553b          	divuw	a0,a0,a5
    80003ac8:	e42a                	sd	a0,8(sp)
	atomic_clear(&l->locked);
    80003aca:	e75ff0ef          	jal	ra,8000393e <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    80003ace:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    80003ad2:	3007a073          	csrs	mstatus,a5
}
    80003ad6:	60e2                	ld	ra,24(sp)
    80003ad8:	6442                	ld	s0,16(sp)
    80003ada:	6522                	ld	a0,8(sp)
    80003adc:	6105                	addi	sp,sp,32
    80003ade:	8082                	ret

0000000080003ae0 <sys_clock_cycle_get_32>:
	return *(volatile uint64_t *)RISCV_MTIME_BASE;
    80003ae0:	0200c7b7          	lui	a5,0x200c
    80003ae4:	ff87b503          	ld	a0,-8(a5) # 200bff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1682978>
}
    80003ae8:	2501                	sext.w	a0,a0
    80003aea:	8082                	ret

0000000080003aec <smp_timer_init>:

#ifdef CONFIG_SMP
void smp_timer_init(void)
{
	set_mtimecmp(last_count + CYC_PER_TICK);
    80003aec:	67e1                	lui	a5,0x18
    80003aee:	0008a517          	auipc	a0,0x8a
    80003af2:	faa53503          	ld	a0,-86(a0) # 8008da98 <last_count>
    80003af6:	6a078793          	addi	a5,a5,1696 # 186a0 <CONFIG_MAIN_STACK_SIZE+0x176a0>
{
    80003afa:	1141                	addi	sp,sp,-16
	set_mtimecmp(last_count + CYC_PER_TICK);
    80003afc:	953e                	add	a0,a0,a5
{
    80003afe:	e406                	sd	ra,8(sp)
	set_mtimecmp(last_count + CYC_PER_TICK);
    80003b00:	dd9ff0ef          	jal	ra,800038d8 <set_mtimecmp>
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
}
    80003b04:	60a2                	ld	ra,8(sp)
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    80003b06:	451d                	li	a0,7
}
    80003b08:	0141                	addi	sp,sp,16
	irq_enable(RISCV_MACHINE_TIMER_IRQ);
    80003b0a:	df4ff06f          	j	800030fe <arch_irq_enable>

0000000080003b0e <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    80003b0e:	8082                	ret

0000000080003b10 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    80003b10:	711c                	ld	a5,32(a0)
    80003b12:	f91c                	sd	a5,48(a0)
    80003b14:	8082                	ret

0000000080003b16 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    80003b16:	0bf0906f          	j	8000d3d4 <_ZdlPv>

0000000080003b1a <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    80003b1a:	1101                	addi	sp,sp,-32
    80003b1c:	e426                	sd	s1,8(sp)
    80003b1e:	84aa                	mv	s1,a0
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    80003b20:	7908                	ld	a0,48(a0)
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    80003b22:	e822                	sd	s0,16(sp)
    80003b24:	842e                	mv	s0,a1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    80003b26:	85b2                	mv	a1,a2
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    80003b28:	ec06                	sd	ra,24(sp)
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    80003b2a:	1ca000ef          	jal	ra,80003cf4 <_ZN6tflite14AlignPointerUpEPhm>
  const size_t available_memory = tail_ - aligned_result;
    80003b2e:	7494                	ld	a3,40(s1)
    80003b30:	8e89                	sub	a3,a3,a0
  if (available_memory < size) {
    80003b32:	0286f263          	bgeu	a3,s0,80003b56 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm+0x3c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80003b36:	6488                	ld	a0,8(s1)
    80003b38:	40d40733          	sub	a4,s0,a3
    80003b3c:	8622                	mv	a2,s0
    80003b3e:	00087597          	auipc	a1,0x87
    80003b42:	d1258593          	addi	a1,a1,-750 # 8008a850 <uart_ns16550_driver_api+0x28>
    80003b46:	566030ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80003b4a:	4501                	li	a0,0
}
    80003b4c:	60e2                	ld	ra,24(sp)
    80003b4e:	6442                	ld	s0,16(sp)
    80003b50:	64a2                	ld	s1,8(sp)
    80003b52:	6105                	addi	sp,sp,32
    80003b54:	8082                	ret
  temp_ = aligned_result + size;
    80003b56:	942a                	add	s0,s0,a0
    80003b58:	f880                	sd	s0,48(s1)
  return aligned_result;
    80003b5a:	bfcd                	j	80003b4c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm+0x32>

0000000080003b5c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm>:
                                                 size_t alignment) {
    80003b5c:	1101                	addi	sp,sp,-32
    80003b5e:	e822                	sd	s0,16(sp)
    80003b60:	842a                	mv	s0,a0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    80003b62:	7508                	ld	a0,40(a0)
                                                 size_t alignment) {
    80003b64:	e426                	sd	s1,8(sp)
    80003b66:	84ae                	mv	s1,a1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    80003b68:	8d05                	sub	a0,a0,s1
    80003b6a:	85b2                	mv	a1,a2
                                                 size_t alignment) {
    80003b6c:	ec06                	sd	ra,24(sp)
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    80003b6e:	196000ef          	jal	ra,80003d04 <_ZN6tflite16AlignPointerDownEPhm>
  if (aligned_result < head_) {
    80003b72:	7018                	ld	a4,32(s0)
    80003b74:	02e57363          	bgeu	a0,a4,80003b9a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm+0x3e>
    const size_t missing_memory = head_ - aligned_result;
    80003b78:	8f09                	sub	a4,a4,a0
    TF_LITE_REPORT_ERROR(error_reporter_,
    80003b7a:	6408                	ld	a0,8(s0)
    80003b7c:	40e486b3          	sub	a3,s1,a4
    80003b80:	8626                	mv	a2,s1
    80003b82:	00087597          	auipc	a1,0x87
    80003b86:	d1e58593          	addi	a1,a1,-738 # 8008a8a0 <uart_ns16550_driver_api+0x78>
    80003b8a:	522030ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80003b8e:	4501                	li	a0,0
}
    80003b90:	60e2                	ld	ra,24(sp)
    80003b92:	6442                	ld	s0,16(sp)
    80003b94:	64a2                	ld	s1,8(sp)
    80003b96:	6105                	addi	sp,sp,32
    80003b98:	8082                	ret
  tail_ = aligned_result;
    80003b9a:	f408                	sd	a0,40(s0)
  return aligned_result;
    80003b9c:	bfd5                	j	80003b90 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm+0x34>

0000000080003b9e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm>:
  if (head_ != temp_) {
    80003b9e:	7118                	ld	a4,32(a0)
    80003ba0:	791c                	ld	a5,48(a0)
                                                      size_t alignment) {
    80003ba2:	1101                	addi	sp,sp,-32
    80003ba4:	e822                	sd	s0,16(sp)
    80003ba6:	ec06                	sd	ra,24(sp)
    80003ba8:	e426                	sd	s1,8(sp)
    80003baa:	842a                	mv	s0,a0
  if (head_ != temp_) {
    80003bac:	00f70f63          	beq	a4,a5,80003bca <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x2c>
    TF_LITE_REPORT_ERROR(
    80003bb0:	6508                	ld	a0,8(a0)
    80003bb2:	00087597          	auipc	a1,0x87
    80003bb6:	d3e58593          	addi	a1,a1,-706 # 8008a8f0 <uart_ns16550_driver_api+0xc8>
    80003bba:	4f2030ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    80003bbe:	4505                	li	a0,1
}
    80003bc0:	60e2                	ld	ra,24(sp)
    80003bc2:	6442                	ld	s0,16(sp)
    80003bc4:	64a2                	ld	s1,8(sp)
    80003bc6:	6105                	addi	sp,sp,32
    80003bc8:	8082                	ret
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    80003bca:	6908                	ld	a0,16(a0)
    80003bcc:	84ae                	mv	s1,a1
    80003bce:	85b2                	mv	a1,a2
    80003bd0:	124000ef          	jal	ra,80003cf4 <_ZN6tflite14AlignPointerUpEPhm>
  const size_t available_memory = tail_ - aligned_result;
    80003bd4:	7414                	ld	a3,40(s0)
    80003bd6:	8e89                	sub	a3,a3,a0
  if (available_memory < size) {
    80003bd8:	0096fd63          	bgeu	a3,s1,80003bf2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x54>
    TF_LITE_REPORT_ERROR(
    80003bdc:	6408                	ld	a0,8(s0)
    80003bde:	40d48733          	sub	a4,s1,a3
    80003be2:	8626                	mv	a2,s1
    80003be4:	00087597          	auipc	a1,0x87
    80003be8:	d6458593          	addi	a1,a1,-668 # 8008a948 <uart_ns16550_driver_api+0x120>
    80003bec:	4c0030ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    80003bf0:	b7f9                	j	80003bbe <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x20>
  head_ = aligned_result + size;
    80003bf2:	9526                	add	a0,a0,s1
    80003bf4:	f008                	sd	a0,32(s0)
  temp_ = head_;
    80003bf6:	f808                	sd	a0,48(s0)
  return kTfLiteOk;
    80003bf8:	4501                	li	a0,0
    80003bfa:	b7d9                	j	80003bc0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x22>

0000000080003bfc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    80003bfc:	715d                	addi	sp,sp,-80
    80003bfe:	e486                	sd	ra,72(sp)
    80003c00:	e0a2                	sd	s0,64(sp)
  TFLITE_DCHECK(error_reporter != nullptr);
    80003c02:	e119                	bnez	a0,80003c08 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0xc>
    80003c04:	58b090ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    80003c08:	ddf5                	beqz	a1,80003c04 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0x8>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    80003c0a:	962e                	add	a2,a2,a1
      temp_(buffer_head_) {}
    80003c0c:	00087417          	auipc	s0,0x87
    80003c10:	d9440413          	addi	s0,s0,-620 # 8008a9a0 <_ZTVN6tflite21SimpleMemoryAllocatorE+0x10>
    80003c14:	e82a                	sd	a0,16(sp)
    80003c16:	ec2e                	sd	a1,24(sp)
    80003c18:	f032                	sd	a2,32(sp)
    80003c1a:	f42e                	sd	a1,40(sp)
    80003c1c:	f832                	sd	a2,48(sp)
    80003c1e:	fc2e                	sd	a1,56(sp)
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    80003c20:	4621                	li	a2,8
    80003c22:	03800593          	li	a1,56
    80003c26:	0028                	addi	a0,sp,8
      temp_(buffer_head_) {}
    80003c28:	e422                	sd	s0,8(sp)
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    80003c2a:	f33ff0ef          	jal	ra,80003b5c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    80003c2e:	cd11                	beqz	a0,80003c4a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0x4e>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    80003c30:	67c2                	ld	a5,16(sp)
    80003c32:	e100                	sd	s0,0(a0)
    80003c34:	e51c                	sd	a5,8(a0)
    80003c36:	67e2                	ld	a5,24(sp)
    80003c38:	e91c                	sd	a5,16(a0)
    80003c3a:	7782                	ld	a5,32(sp)
    80003c3c:	ed1c                	sd	a5,24(a0)
    80003c3e:	77a2                	ld	a5,40(sp)
    80003c40:	f11c                	sd	a5,32(a0)
    80003c42:	77c2                	ld	a5,48(sp)
    80003c44:	f51c                	sd	a5,40(a0)
    80003c46:	77e2                	ld	a5,56(sp)
    80003c48:	f91c                	sd	a5,48(a0)
}
    80003c4a:	60a6                	ld	ra,72(sp)
    80003c4c:	6406                	ld	s0,64(sp)
    80003c4e:	6161                	addi	sp,sp,80
    80003c50:	8082                	ret

0000000080003c52 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
    80003c52:	6908                	ld	a0,16(a0)
    80003c54:	8082                	ret

0000000080003c56 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    80003c56:	1101                	addi	sp,sp,-32
    80003c58:	e822                	sd	s0,16(sp)
    80003c5a:	842a                	mv	s0,a0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    80003c5c:	7908                	ld	a0,48(a0)
size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    80003c5e:	ec06                	sd	ra,24(sp)
    80003c60:	e426                	sd	s1,8(sp)
    80003c62:	e04a                	sd	s2,0(sp)
    80003c64:	892e                	mv	s2,a1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    80003c66:	08e000ef          	jal	ra,80003cf4 <_ZN6tflite14AlignPointerUpEPhm>
    80003c6a:	84aa                	mv	s1,a0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
    80003c6c:	7408                	ld	a0,40(s0)
    80003c6e:	85ca                	mv	a1,s2
    80003c70:	094000ef          	jal	ra,80003d04 <_ZN6tflite16AlignPointerDownEPhm>
  return aligned_tail - aligned_temp;
}
    80003c74:	60e2                	ld	ra,24(sp)
    80003c76:	6442                	ld	s0,16(sp)
    80003c78:	6902                	ld	s2,0(sp)
    80003c7a:	8d05                	sub	a0,a0,s1
    80003c7c:	64a2                	ld	s1,8(sp)
    80003c7e:	6105                	addi	sp,sp,32
    80003c80:	8082                	ret

0000000080003c82 <DebugLog>:
extern "C" void DebugLog(const char* s) {
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    80003c82:	8201b783          	ld	a5,-2016(gp) # 800ab5e8 <_impure_ptr>
extern "C" void DebugLog(const char* s) {
    80003c86:	862a                	mv	a2,a0
  fprintf(stderr, "%s", s);
    80003c88:	6f88                	ld	a0,24(a5)
    80003c8a:	00087597          	auipc	a1,0x87
    80003c8e:	d4658593          	addi	a1,a1,-698 # 8008a9d0 <_ZTVN6tflite21SimpleMemoryAllocatorE+0x40>
    80003c92:	5470906f          	j	8000d9d8 <fiprintf>

0000000080003c96 <_ZN12_GLOBAL__N_13LogEPKcPv>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    80003c96:	716d                	addi	sp,sp,-272
    80003c98:	862a                	mv	a2,a0
    80003c9a:	86ae                	mv	a3,a1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    80003c9c:	850a                	mv	a0,sp
    80003c9e:	10000593          	li	a1,256
void Log(const char* format, va_list args) {
    80003ca2:	e606                	sd	ra,264(sp)
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    80003ca4:	2bc000ef          	jal	ra,80003f60 <MicroVsnprintf>
  DebugLog(log_buffer);
    80003ca8:	850a                	mv	a0,sp
    80003caa:	fd9ff0ef          	jal	ra,80003c82 <DebugLog>
  DebugLog("\r\n");
    80003cae:	00087517          	auipc	a0,0x87
    80003cb2:	d2a50513          	addi	a0,a0,-726 # 8008a9d8 <_ZTVN6tflite21SimpleMemoryAllocatorE+0x48>
    80003cb6:	fcdff0ef          	jal	ra,80003c82 <DebugLog>
#endif
}
    80003cba:	60b2                	ld	ra,264(sp)
    80003cbc:	6151                	addi	sp,sp,272
    80003cbe:	8082                	ret

0000000080003cc0 <_ZN6tflite18MicroErrorReporter6ReportEPKcPv>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
    80003cc0:	1141                	addi	sp,sp,-16
    80003cc2:	852e                	mv	a0,a1
  Log(format, args);
    80003cc4:	85b2                	mv	a1,a2
int MicroErrorReporter::Report(const char* format, va_list args) {
    80003cc6:	e406                	sd	ra,8(sp)
  Log(format, args);
    80003cc8:	fcfff0ef          	jal	ra,80003c96 <_ZN12_GLOBAL__N_13LogEPKcPv>
  return 0;
}
    80003ccc:	60a2                	ld	ra,8(sp)
    80003cce:	4501                	li	a0,0
    80003cd0:	0141                	addi	sp,sp,16
    80003cd2:	8082                	ret

0000000080003cd4 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
    80003cd4:	711d                	addi	sp,sp,-96
    80003cd6:	f42e                	sd	a1,40(sp)
  va_start(args, format);
    80003cd8:	102c                	addi	a1,sp,40
void MicroPrintf(const char* format, ...) {
    80003cda:	ec06                	sd	ra,24(sp)
    80003cdc:	f832                	sd	a2,48(sp)
    80003cde:	fc36                	sd	a3,56(sp)
    80003ce0:	e0ba                	sd	a4,64(sp)
    80003ce2:	e4be                	sd	a5,72(sp)
    80003ce4:	e8c2                	sd	a6,80(sp)
    80003ce6:	ecc6                	sd	a7,88(sp)
  va_start(args, format);
    80003ce8:	e42e                	sd	a1,8(sp)
  Log(format, args);
    80003cea:	fadff0ef          	jal	ra,80003c96 <_ZN12_GLOBAL__N_13LogEPKcPv>
}
    80003cee:	60e2                	ld	ra,24(sp)
    80003cf0:	6125                	addi	sp,sp,96
    80003cf2:	8082                	ret

0000000080003cf4 <_ZN6tflite14AlignPointerUpEPhm>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    80003cf4:	fff58793          	addi	a5,a1,-1
    80003cf8:	953e                	add	a0,a0,a5
    80003cfa:	02b55533          	divu	a0,a0,a1
  return aligned_result;
}
    80003cfe:	02b50533          	mul	a0,a0,a1
    80003d02:	8082                	ret

0000000080003d04 <_ZN6tflite16AlignPointerDownEPhm>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    80003d04:	02b55533          	divu	a0,a0,a1
  return aligned_result;
}
    80003d08:	02b50533          	mul	a0,a0,a1
    80003d0c:	8082                	ret

0000000080003d0e <_ZN6tflite11AlignSizeUpEmm>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    80003d0e:	157d                	addi	a0,a0,-1
    80003d10:	952e                	add	a0,a0,a1
    80003d12:	02b55533          	divu	a0,a0,a1
  return aligned_size;
}
    80003d16:	02b50533          	mul	a0,a0,a1
    80003d1a:	8082                	ret

0000000080003d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
    80003d1c:	357d                	addiw	a0,a0,-1
    80003d1e:	0005071b          	sext.w	a4,a0
    80003d22:	47bd                	li	a5,15
    80003d24:	02e7ea63          	bltu	a5,a4,80003d58 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x3c>
    80003d28:	02051793          	slli	a5,a0,0x20
    80003d2c:	01e7d513          	srli	a0,a5,0x1e
    80003d30:	0008a717          	auipc	a4,0x8a
    80003d34:	c2470713          	addi	a4,a4,-988 # 8008d954 <__sf_fake_stdout+0x134>
    80003d38:	953a                	add	a0,a0,a4
    80003d3a:	411c                	lw	a5,0(a0)
    80003d3c:	97ba                	add	a5,a5,a4
    80003d3e:	8782                	jr	a5
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
    80003d40:	4789                	li	a5,2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
    80003d42:	e19c                	sd	a5,0(a1)
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
    80003d44:	4501                	li	a0,0
      break;
    80003d46:	8082                	ret
      *size = sizeof(float);
    80003d48:	4791                	li	a5,4
    80003d4a:	bfe5                	j	80003d42 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x26>
      *size = sizeof(double);
    80003d4c:	47a1                	li	a5,8
    80003d4e:	bfd5                	j	80003d42 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x26>
      *size = sizeof(uint8_t);
    80003d50:	4785                	li	a5,1
    80003d52:	bfc5                	j	80003d42 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x26>
      *size = sizeof(double) * 2;
    80003d54:	47c1                	li	a5,16
    80003d56:	b7f5                	j	80003d42 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x26>
  switch (type) {
    80003d58:	4505                	li	a0,1
}
    80003d5a:	8082                	ret

0000000080003d5c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE>:
    return data_ - ReadScalar<soffset_t>(data_);
    80003d5c:	00052803          	lw	a6,0(a0)

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    80003d60:	7179                	addi	sp,sp,-48
    80003d62:	ec26                	sd	s1,24(sp)
    80003d64:	41050833          	sub	a6,a0,a6
    80003d68:	84b2                	mv	s1,a2
    80003d6a:	8636                	mv	a2,a3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80003d6c:	00085683          	lhu	a3,0(a6)
    80003d70:	e84a                	sd	s2,16(sp)
    80003d72:	f406                	sd	ra,40(sp)
    80003d74:	f022                	sd	s0,32(sp)
    80003d76:	4791                	li	a5,4
    80003d78:	892e                	mv	s2,a1
    80003d7a:	08d7ff63          	bgeu	a5,a3,80003e18 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0xbc>
    80003d7e:	00485583          	lhu	a1,4(a6)
    80003d82:	872a                	mv	a4,a0
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    80003d84:	00b507b3          	add	a5,a0,a1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80003d88:	c9a9                	beqz	a1,80003dda <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x7e>
    80003d8a:	0007e583          	lwu	a1,0(a5)
  int element_count = 1;
    80003d8e:	4405                	li	s0,1
    80003d90:	97ae                	add	a5,a5,a1
  uoffset_t size() const { return EndianScalar(length_); }
    80003d92:	4388                	lw	a0,0(a5)
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    80003d94:	4581                	li	a1,0
    80003d96:	0791                	addi	a5,a5,4
    80003d98:	02051313          	slli	t1,a0,0x20
    80003d9c:	02035313          	srli	t1,t1,0x20
    80003da0:	0265fe63          	bgeu	a1,t1,80003ddc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x80>
    FLATBUFFERS_ASSERT(i < size());
    80003da4:	0005889b          	sext.w	a7,a1
    80003da8:	02a8e263          	bltu	a7,a0,80003dcc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x70>
    80003dac:	00087697          	auipc	a3,0x87
    80003db0:	c5c68693          	addi	a3,a3,-932 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80003db4:	00087617          	auipc	a2,0x87
    80003db8:	c6460613          	addi	a2,a2,-924 # 8008aa18 <_ZTVN6tflite18MicroErrorReporterE+0x38>
    80003dbc:	10600593          	li	a1,262
    80003dc0:	00087517          	auipc	a0,0x87
    80003dc4:	d1850513          	addi	a0,a0,-744 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80003dc8:	3d7090ef          	jal	ra,8000d99e <__assert_func>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    80003dcc:	0007a883          	lw	a7,0(a5)
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    80003dd0:	0585                	addi	a1,a1,1
    80003dd2:	0791                	addi	a5,a5,4
      element_count *= flatbuffer_tensor.shape()->Get(n);
    80003dd4:	0288843b          	mulw	s0,a7,s0
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    80003dd8:	b7e1                	j	80003da0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x44>
  int element_count = 1;
    80003dda:	4405                	li	s0,1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80003ddc:	4799                	li	a5,6
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80003dde:	4501                	li	a0,0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80003de0:	00d7f863          	bgeu	a5,a3,80003df0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x94>
    80003de4:	00685783          	lhu	a5,6(a6)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80003de8:	c781                	beqz	a5,80003df0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x94>
    80003dea:	973e                	add	a4,a4,a5
    80003dec:	00070503          	lb	a0,0(a4)
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    80003df0:	006c                	addi	a1,sp,12
    80003df2:	593020ef          	jal	ra,80006b84 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    80003df6:	e919                	bnez	a0,80003e0c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0xb0>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    80003df8:	4532                	lw	a0,12(sp)
    80003dfa:	85a6                	mv	a1,s1
    80003dfc:	f21ff0ef          	jal	ra,80003d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
    80003e00:	e511                	bnez	a0,80003e0c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0xb0>
  *bytes = element_count * (*type_size);
    80003e02:	609c                	ld	a5,0(s1)
    80003e04:	02878433          	mul	s0,a5,s0
    80003e08:	00893023          	sd	s0,0(s2)
  return kTfLiteOk;
}
    80003e0c:	70a2                	ld	ra,40(sp)
    80003e0e:	7402                	ld	s0,32(sp)
    80003e10:	64e2                	ld	s1,24(sp)
    80003e12:	6942                	ld	s2,16(sp)
    80003e14:	6145                	addi	sp,sp,48
    80003e16:	8082                	ret
  int element_count = 1;
    80003e18:	4405                	li	s0,1
    80003e1a:	4501                	li	a0,0
    80003e1c:	bfd1                	j	80003df0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x94>

0000000080003e1e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
    80003e1e:	7179                	addi	sp,sp,-48
    80003e20:	f406                	sd	ra,40(sp)
    80003e22:	f022                	sd	s0,32(sp)
    80003e24:	ec26                	sd	s1,24(sp)
  TFLITE_DCHECK(out_bytes != nullptr);
    80003e26:	e199                	bnez	a1,80003e2c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0xe>
    80003e28:	367090ef          	jal	ra,8000d98e <abort>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
    80003e2c:	651c                	ld	a5,8(a0)
    80003e2e:	842e                	mv	s0,a1
  int element_count = 1;
    80003e30:	4485                	li	s1,1
  if (eval_tensor->dims != nullptr) {
    80003e32:	cf81                	beqz	a5,80003e4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x2c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    80003e34:	4390                	lw	a2,0(a5)
    80003e36:	4701                	li	a4,0
    80003e38:	0791                	addi	a5,a5,4
    80003e3a:	00c75863          	bge	a4,a2,80003e4a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x2c>
      element_count *= eval_tensor->dims->data[n];
    80003e3e:	4394                	lw	a3,0(a5)
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    80003e40:	2705                	addiw	a4,a4,1
    80003e42:	0791                	addi	a5,a5,4
      element_count *= eval_tensor->dims->data[n];
    80003e44:	029684bb          	mulw	s1,a3,s1
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    80003e48:	bfcd                	j	80003e3a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x1c>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
    80003e4a:	4908                	lw	a0,16(a0)
    80003e4c:	002c                	addi	a1,sp,8
    80003e4e:	ecfff0ef          	jal	ra,80003d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
    80003e52:	e509                	bnez	a0,80003e5c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x3e>
  *out_bytes = element_count * type_size;
    80003e54:	67a2                	ld	a5,8(sp)
    80003e56:	029784b3          	mul	s1,a5,s1
    80003e5a:	e004                	sd	s1,0(s0)
  return kTfLiteOk;
}
    80003e5c:	70a2                	ld	ra,40(sp)
    80003e5e:	7402                	ld	s0,32(sp)
    80003e60:	64e2                	ld	s1,24(sp)
    80003e62:	6145                	addi	sp,sp,48
    80003e64:	8082                	ret

0000000080003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
    80003e66:	411c                	lw	a5,0(a0)
    80003e68:	8d1d                	sub	a0,a0,a5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80003e6a:	00055783          	lhu	a5,0(a0)
    80003e6e:	00f5f663          	bgeu	a1,a5,80003e7a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x14>
    80003e72:	952e                	add	a0,a0,a1
    80003e74:	00055503          	lhu	a0,0(a0)
    80003e78:	8082                	ret
    80003e7a:	4501                	li	a0,0
  }
    80003e7c:	8082                	ret

0000000080003e7e <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    80003e7e:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    80003e80:	45a1                	li	a1,8
    80003e82:	e022                	sd	s0,0(sp)
    80003e84:	e406                	sd	ra,8(sp)
    80003e86:	842a                	mv	s0,a0
    80003e88:	fdfff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80003e8c:	c909                	beqz	a0,80003e9e <_ZNK6tflite5Model9subgraphsEv+0x20>
    auto p = data_ + field_offset;
    80003e8e:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80003e90:	00056783          	lwu	a5,0(a0)
    80003e94:	953e                	add	a0,a0,a5
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
  }
    80003e96:	60a2                	ld	ra,8(sp)
    80003e98:	6402                	ld	s0,0(sp)
    80003e9a:	0141                	addi	sp,sp,16
    80003e9c:	8082                	ret
    80003e9e:	4501                	li	a0,0
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    80003ea0:	bfdd                	j	80003e96 <_ZNK6tflite5Model9subgraphsEv+0x18>

0000000080003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
    80003ea2:	411c                	lw	a5,0(a0)
    80003ea4:	02f5e463          	bltu	a1,a5,80003ecc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x2a>
  return_type Get(uoffset_t i) const {
    80003ea8:	1141                	addi	sp,sp,-16
    FLATBUFFERS_ASSERT(i < size());
    80003eaa:	00087697          	auipc	a3,0x87
    80003eae:	b5e68693          	addi	a3,a3,-1186 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80003eb2:	00087617          	auipc	a2,0x87
    80003eb6:	c8e60613          	addi	a2,a2,-882 # 8008ab40 <_ZTVN6tflite18MicroErrorReporterE+0x160>
    80003eba:	10600593          	li	a1,262
    80003ebe:	00087517          	auipc	a0,0x87
    80003ec2:	c1a50513          	addi	a0,a0,-998 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
  return_type Get(uoffset_t i) const {
    80003ec6:	e406                	sd	ra,8(sp)
    FLATBUFFERS_ASSERT(i < size());
    80003ec8:	2d7090ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    80003ecc:	02059793          	slli	a5,a1,0x20
    80003ed0:	01e7d593          	srli	a1,a5,0x1e
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80003ed4:	0511                	addi	a0,a0,4
    p += i * sizeof(uoffset_t);
    80003ed6:	952e                	add	a0,a0,a1
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80003ed8:	00056783          	lwu	a5,0(a0)
  }
    80003edc:	953e                	add	a0,a0,a5
    80003ede:	8082                	ret

0000000080003ee0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
  return start;
}

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    80003ee0:	87aa                	mv	a5,a0
  char* current = main;
  while (*current != 0) {
    80003ee2:	00054703          	lbu	a4,0(a0)
    80003ee6:	c319                	beqz	a4,80003eec <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
    80003ee8:	0505                	addi	a0,a0,1
  while (*current != 0) {
    80003eea:	bfe5                	j	80003ee2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2>
  }
  char* current_end = main + (main_max_length - 1);
    80003eec:	15fd                	addi	a1,a1,-1
    80003eee:	97ae                	add	a5,a5,a1
  while ((*to_append != 0) && (current < current_end)) {
    80003ef0:	00064703          	lbu	a4,0(a2)
    80003ef4:	cb01                	beqz	a4,80003f04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x24>
    80003ef6:	00f57763          	bgeu	a0,a5,80003f04 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x24>
    *current = *to_append;
    80003efa:	00e50023          	sb	a4,0(a0)
    ++current;
    ++to_append;
    80003efe:	0605                	addi	a2,a2,1
    ++current;
    80003f00:	0505                	addi	a0,a0,1
  while ((*to_append != 0) && (current < current_end)) {
    80003f02:	b7fd                	j	80003ef0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  *current = 0;
    80003f04:	00050023          	sb	zero,0(a0)
  return current;
}
    80003f08:	8082                	ret

0000000080003f0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    80003f0a:	86aa                	mv	a3,a0
    80003f0c:	872e                	mv	a4,a1
  char* start = buffer;
  do {
    int32_t digit = i % base;
    char character;
    if (digit < 10) {
    80003f0e:	4825                	li	a6,9
    int32_t digit = i % base;
    80003f10:	02c6f53b          	remuw	a0,a3,a2
      character = '0' + digit;
    80003f14:	0ff57793          	andi	a5,a0,255
    if (digit < 10) {
    80003f18:	04a86063          	bltu	a6,a0,80003f58 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4e>
      character = '0' + digit;
    80003f1c:	0307879b          	addiw	a5,a5,48
    } else {
      character = 'a' + (digit - 10);
    80003f20:	0ff7f793          	andi	a5,a5,255
    }
    *buffer++ = character;
    80003f24:	00f70023          	sb	a5,0(a4)
    80003f28:	00170513          	addi	a0,a4,1
    i /= base;
    80003f2c:	02c6d7bb          	divuw	a5,a3,a2
  } while (i > 0);
    80003f30:	02c6f163          	bgeu	a3,a2,80003f52 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x48>
  *buffer = 0;
    80003f34:	00050023          	sb	zero,0(a0)
  while (p1 < p2) {
    80003f38:	02e5f363          	bgeu	a1,a4,80003f5e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x54>
    *p1++ = *p2;
    80003f3c:	00074683          	lbu	a3,0(a4)
    char tmp = *p1;
    80003f40:	0005c783          	lbu	a5,0(a1)
    *p2-- = tmp;
    80003f44:	177d                	addi	a4,a4,-1
    *p1++ = *p2;
    80003f46:	0585                	addi	a1,a1,1
    80003f48:	fed58fa3          	sb	a3,-1(a1)
    *p2-- = tmp;
    80003f4c:	00f700a3          	sb	a5,1(a4)
  while (p1 < p2) {
    80003f50:	b7e5                	j	80003f38 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    80003f52:	872a                	mv	a4,a0
    i /= base;
    80003f54:	86be                	mv	a3,a5
    80003f56:	bf6d                	j	80003f10 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x6>
      character = 'a' + (digit - 10);
    80003f58:	0577879b          	addiw	a5,a5,87
    80003f5c:	b7d1                	j	80003f20 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x16>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
    80003f5e:	8082                	ret

0000000080003f60 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    80003f60:	7155                	addi	sp,sp,-208
    80003f62:	e55e                	sd	s7,136(sp)
    80003f64:	e162                	sd	s8,128(sp)
  const uint32_t fraction = (u & fraction_mask);
    80003f66:	00800bb7          	lui	s7,0x800
    current += kMaxFractionalDigits;
    80003f6a:	5c7d                	li	s8,-1
                              va_list args) {
    80003f6c:	e1a2                	sd	s0,192(sp)
    80003f6e:	f94a                	sd	s2,176(sp)
    80003f70:	f54e                	sd	s3,168(sp)
    80003f72:	f152                	sd	s4,160(sp)
    80003f74:	ed56                	sd	s5,152(sp)
    80003f76:	e586                	sd	ra,200(sp)
    80003f78:	fd26                	sd	s1,184(sp)
    80003f7a:	e95a                	sd	s6,144(sp)
    80003f7c:	fce6                	sd	s9,120(sp)
    80003f7e:	f8ea                	sd	s10,112(sp)
    80003f80:	f4ee                	sd	s11,104(sp)
    80003f82:	8aaa                	mv	s5,a0
    80003f84:	89b2                	mv	s3,a2
    80003f86:	8936                	mv	s2,a3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    80003f88:	fff58a1b          	addiw	s4,a1,-1
  int output_index = 0;
    80003f8c:	4401                	li	s0,0
  const uint32_t fraction = (u & fraction_mask);
    80003f8e:	1bfd                	addi	s7,s7,-1
    current += kMaxFractionalDigits;
    80003f90:	020c5c13          	srli	s8,s8,0x20
  while (*current != '\0' && output_index < usable_length) {
    80003f94:	0009c603          	lbu	a2,0(s3)
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
            output[output_index++] = '\0';
    80003f98:	86a2                	mv	a3,s0
    80003f9a:	008a84b3          	add	s1,s5,s0
  while (*current != '\0' && output_index < usable_length) {
    80003f9e:	c659                	beqz	a2,8000402c <MicroVsnprintf+0xcc>
    80003fa0:	09445663          	bge	s0,s4,8000402c <MicroVsnprintf+0xcc>
    if (*current == '%') {
    80003fa4:	02500793          	li	a5,37
      current++;
    80003fa8:	00198713          	addi	a4,s3,1
    if (*current == '%') {
    80003fac:	30f61963          	bne	a2,a5,800042be <MicroVsnprintf+0x35e>
      switch (*current) {
    80003fb0:	0019c783          	lbu	a5,1(s3)
    80003fb4:	06600593          	li	a1,102
    80003fb8:	12b78363          	beq	a5,a1,800040de <MicroVsnprintf+0x17e>
    80003fbc:	00f5ee63          	bltu	a1,a5,80003fd8 <MicroVsnprintf+0x78>
    80003fc0:	06300693          	li	a3,99
    80003fc4:	2cd78d63          	beq	a5,a3,8000429e <MicroVsnprintf+0x33e>
    80003fc8:	06400693          	li	a3,100
    80003fcc:	04d78b63          	beq	a5,a3,80004022 <MicroVsnprintf+0xc2>
    80003fd0:	2cc78163          	beq	a5,a2,80004292 <MicroVsnprintf+0x332>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    80003fd4:	89ba                	mv	s3,a4
    80003fd6:	bf7d                	j	80003f94 <MicroVsnprintf+0x34>
      switch (*current) {
    80003fd8:	07500613          	li	a2,117
    80003fdc:	08c78563          	beq	a5,a2,80004066 <MicroVsnprintf+0x106>
    80003fe0:	07800613          	li	a2,120
    80003fe4:	08c78d63          	beq	a5,a2,8000407e <MicroVsnprintf+0x11e>
    80003fe8:	07300613          	li	a2,115
    80003fec:	fec794e3          	bne	a5,a2,80003fd4 <MicroVsnprintf+0x74>
          }
          output[output_index++] = va_arg(args, int32_t);
          current++;
          break;
        case 's':
          char* string = va_arg(args, char*);
    80003ff0:	00093703          	ld	a4,0(s2)
    80003ff4:	00890593          	addi	a1,s2,8
          int string_idx = 0;
          while (string_idx + output_index < usable_length &&
    80003ff8:	0004079b          	sext.w	a5,s0
                 string[string_idx] != '\0') {
    80003ffc:	00074603          	lbu	a2,0(a4)
    80004000:	0006841b          	sext.w	s0,a3
          while (string_idx + output_index < usable_length &&
    80004004:	ca19                	beqz	a2,8000401a <MicroVsnprintf+0xba>
            output[output_index++] = string[string_idx++];
    80004006:	00da8533          	add	a0,s5,a3
    8000400a:	00c50023          	sb	a2,0(a0)
          while (string_idx + output_index < usable_length &&
    8000400e:	2789                	addiw	a5,a5,2
    80004010:	2405                	addiw	s0,s0,1
    80004012:	0685                	addi	a3,a3,1
    80004014:	0705                	addi	a4,a4,1
    80004016:	ff47c3e3          	blt	a5,s4,80003ffc <MicroVsnprintf+0x9c>
          }
          current++;
    8000401a:	00298713          	addi	a4,s3,2
          char* string = va_arg(args, char*);
    8000401e:	892e                	mv	s2,a1
    80004020:	bf55                	j	80003fd4 <MicroVsnprintf+0x74>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    80004022:	408a07bb          	subw	a5,s4,s0
    80004026:	4729                	li	a4,10
    80004028:	00f74463          	blt	a4,a5,80004030 <MicroVsnprintf+0xd0>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
    8000402c:	2405                	addiw	s0,s0,1
    8000402e:	acad                	j	800042a8 <MicroVsnprintf+0x348>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    80004030:	00092783          	lw	a5,0(s2)
    80004034:	00890b13          	addi	s6,s2,8
            output[output_index++] = '\0';
    80004038:	85a6                	mv	a1,s1
  uint32_t u = i;
    8000403a:	0007851b          	sext.w	a0,a5
  if (i < 0) {
    8000403e:	0007da63          	bgez	a5,80004052 <MicroVsnprintf+0xf2>
    *buffer++ = '-';
    80004042:	02d00793          	li	a5,45
    80004046:	00148593          	addi	a1,s1,1
    8000404a:	00f48023          	sb	a5,0(s1)
    u = -u;
    8000404e:	40a0053b          	negw	a0,a0
  return FastUInt32ToBufferLeft(u, buffer, 10);
    80004052:	4629                	li	a2,10
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    80004054:	eb7ff0ef          	jal	ra,80003f0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    80004058:	409504b3          	sub	s1,a0,s1
          output_index +=
    8000405c:	9c25                	addw	s0,s0,s1
          current++;
    8000405e:	00298713          	addi	a4,s3,2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    80004062:	895a                	mv	s2,s6
          break;
    80004064:	bf85                	j	80003fd4 <MicroVsnprintf+0x74>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    80004066:	408a07bb          	subw	a5,s4,s0
    8000406a:	4729                	li	a4,10
    8000406c:	fcf750e3          	bge	a4,a5,8000402c <MicroVsnprintf+0xcc>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    80004070:	00092503          	lw	a0,0(s2)
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    80004074:	00890b13          	addi	s6,s2,8
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    80004078:	4629                	li	a2,10
    8000407a:	85a6                	mv	a1,s1
    8000407c:	bfe1                	j	80004054 <MicroVsnprintf+0xf4>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    8000407e:	408a06bb          	subw	a3,s4,s0
    80004082:	4625                	li	a2,9
            output[output_index++] = '\0';
    80004084:	0014071b          	addiw	a4,s0,1
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    80004088:	02d64563          	blt	a2,a3,800040b2 <MicroVsnprintf+0x152>
            output[output_index++] = '\0';
    8000408c:	00048023          	sb	zero,0(s1)
            output[output_index++] = '\0';
    80004090:	843a                	mv	s0,a4
  return output_index;
}
    80004092:	60ae                	ld	ra,200(sp)
    80004094:	8522                	mv	a0,s0
    80004096:	640e                	ld	s0,192(sp)
    80004098:	74ea                	ld	s1,184(sp)
    8000409a:	794a                	ld	s2,176(sp)
    8000409c:	79aa                	ld	s3,168(sp)
    8000409e:	7a0a                	ld	s4,160(sp)
    800040a0:	6aea                	ld	s5,152(sp)
    800040a2:	6b4a                	ld	s6,144(sp)
    800040a4:	6baa                	ld	s7,136(sp)
    800040a6:	6c0a                	ld	s8,128(sp)
    800040a8:	7ce6                	ld	s9,120(sp)
    800040aa:	7d46                	ld	s10,112(sp)
    800040ac:	7da6                	ld	s11,104(sp)
    800040ae:	6169                	addi	sp,sp,208
    800040b0:	8082                	ret
          output[output_index++] = '0';
    800040b2:	03000693          	li	a3,48
    800040b6:	00d48023          	sb	a3,0(s1)
          output[output_index++] = 'x';
    800040ba:	9756                	add	a4,a4,s5
    800040bc:	00f70023          	sb	a5,0(a4)
    800040c0:	0024049b          	addiw	s1,s0,2
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    800040c4:	00092503          	lw	a0,0(s2)
          output[output_index++] = 'x';
    800040c8:	8426                	mv	s0,s1
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    800040ca:	94d6                	add	s1,s1,s5
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    800040cc:	4641                	li	a2,16
    800040ce:	85a6                	mv	a1,s1
    800040d0:	e3bff0ef          	jal	ra,80003f0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    800040d4:	8d05                	sub	a0,a0,s1
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    800040d6:	00890b13          	addi	s6,s2,8
          output_index +=
    800040da:	9c29                	addw	s0,s0,a0
    800040dc:	b749                	j	8000405e <MicroVsnprintf+0xfe>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    800040de:	408a053b          	subw	a0,s4,s0
    800040e2:	b3dfd0ef          	jal	ra,80001c1e <__floatsisf>
    800040e6:	0000b797          	auipc	a5,0xb
    800040ea:	17278793          	addi	a5,a5,370 # 8000f258 <_global_impure_ptr+0x8>
    800040ee:	438c                	lw	a1,0(a5)
    800040f0:	cfefd0ef          	jal	ra,800015ee <__lesf2>
    800040f4:	f2054ce3          	bltz	a0,8000402c <MicroVsnprintf+0xcc>
              FormatFloat(&output[output_index], va_arg(args, double));
    800040f8:	00093503          	ld	a0,0(s2)
    800040fc:	00890d13          	addi	s10,s2,8
  char* current_end = buffer + (kFastToBufferSize - 1);
    80004100:	02f48913          	addi	s2,s1,47
              FormatFloat(&output[output_index], va_arg(args, double));
    80004104:	c57fd0ef          	jal	ra,80001d5a <__truncdfsf2>
    80004108:	cc2a                	sw	a0,24(sp)
  memcpy(&u, &f, sizeof(int32_t));
    8000410a:	4611                	li	a2,4
    8000410c:	082c                	addi	a1,sp,24
    8000410e:	0868                	addi	a0,sp,28
    80004110:	d27fd0ef          	jal	ra,80001e36 <memcpy>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    80004114:	47f2                	lw	a5,28(sp)
            output[output_index++] = '\0';
    80004116:	8726                	mv	a4,s1
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    80004118:	0177dd9b          	srliw	s11,a5,0x17
    8000411c:	0ffdfd93          	andi	s11,s11,255
    80004120:	f81d8b1b          	addiw	s6,s11,-127
  const uint32_t fraction = (u & fraction_mask);
    80004124:	0177fcb3          	and	s9,a5,s7
  if (u & sign_mask) {
    80004128:	0007d863          	bgez	a5,80004138 <MicroVsnprintf+0x1d8>
    *current = '-';
    8000412c:	02d00793          	li	a5,45
    80004130:	00f48023          	sb	a5,0(s1)
    current += 1;
    80004134:	00148713          	addi	a4,s1,1
  *current = 0;
    80004138:	00070023          	sb	zero,0(a4)
  if (exponent == 128) {
    8000413c:	08000793          	li	a5,128
    80004140:	02fb1963          	bne	s6,a5,80004172 <MicroVsnprintf+0x212>
      current = StrCatStr(current, (current_end - current), "Inf");
    80004144:	40e905bb          	subw	a1,s2,a4
    80004148:	00087617          	auipc	a2,0x87
    8000414c:	af060613          	addi	a2,a2,-1296 # 8008ac38 <_ZTVN6tflite18MicroErrorReporterE+0x258>
    if (fraction == 0) {
    80004150:	000c8663          	beqz	s9,8000415c <MicroVsnprintf+0x1fc>
      current = StrCatStr(current, (current_end - current), "NaN");
    80004154:	00087617          	auipc	a2,0x87
    80004158:	aec60613          	addi	a2,a2,-1300 # 8008ac40 <_ZTVN6tflite18MicroErrorReporterE+0x260>
    8000415c:	853a                	mv	a0,a4
  return StrCatStr(main, main_max_length, number_string);
    8000415e:	d83ff0ef          	jal	ra,80003ee0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    80004162:	8caa                	mv	s9,a0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    80004164:	409c87b3          	sub	a5,s9,s1
          output_index +=
    80004168:	9c3d                	addw	s0,s0,a5
          current++;
    8000416a:	00298713          	addi	a4,s3,2
              FormatFloat(&output[output_index], va_arg(args, double));
    8000416e:	896a                	mv	s2,s10
          break;
    80004170:	b595                	j	80003fd4 <MicroVsnprintf+0x74>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    80004172:	4635                	li	a2,13
    80004174:	00087597          	auipc	a1,0x87
    80004178:	adc58593          	addi	a1,a1,-1316 # 8008ac50 <_ZTVN6tflite18MicroErrorReporterE+0x270>
    8000417c:	1008                	addi	a0,sp,32
    8000417e:	e43a                	sd	a4,8(sp)
    80004180:	cb7fd0ef          	jal	ra,80001e36 <memcpy>
  for (int i = 0; i < scale_shifts_size; ++i) {
    80004184:	6722                	ld	a4,8(sp)
  uint32_t scaled_fraction = fraction;
    80004186:	8566                	mv	a0,s9
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    80004188:	4781                	li	a5,0
  for (int i = 0; i < scale_shifts_size; ++i) {
    8000418a:	4635                	li	a2,13
    scaled_fraction += (fraction >> scale_shifts[i]);
    8000418c:	1014                	addi	a3,sp,32
    8000418e:	96be                	add	a3,a3,a5
    80004190:	00068683          	lb	a3,0(a3)
  for (int i = 0; i < scale_shifts_size; ++i) {
    80004194:	0785                	addi	a5,a5,1
    scaled_fraction += (fraction >> scale_shifts[i]);
    80004196:	00dcd6bb          	srlw	a3,s9,a3
    8000419a:	9d35                	addw	a0,a0,a3
  for (int i = 0; i < scale_shifts_size; ++i) {
    8000419c:	fec798e3          	bne	a5,a2,8000418c <MicroVsnprintf+0x22c>
  *current = '1';
    800041a0:	03100793          	li	a5,49
    800041a4:	00f70023          	sb	a5,0(a4)
  current += 1;
    800041a8:	00270c93          	addi	s9,a4,2
  *current = '.';
    800041ac:	02e00793          	li	a5,46
    800041b0:	00f700a3          	sb	a5,1(a4)
  *current = 0;
    800041b4:	00070123          	sb	zero,2(a4)
  if (current_end - current <= kMaxFractionalDigits) {
    800041b8:	419908b3          	sub	a7,s2,s9
    800041bc:	469d                	li	a3,7
    800041be:	fb16d3e3          	bge	a3,a7,80004164 <MicroVsnprintf+0x204>
    800041c2:	00370693          	addi	a3,a4,3
    *(current + i) = '0';
    800041c6:	03000813          	li	a6,48
    800041ca:	0725                	addi	a4,a4,9
    800041cc:	01068023          	sb	a6,0(a3)
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    800041d0:	0685                	addi	a3,a3,1
    800041d2:	fee69de3          	bne	a3,a4,800041cc <MicroVsnprintf+0x26c>
  FastUInt32ToBufferLeft(number, number_string, base);
    800041d6:	4629                	li	a2,10
    800041d8:	180c                	addi	a1,sp,48
    800041da:	e446                	sd	a7,8(sp)
    800041dc:	d2fff0ef          	jal	ra,80003f0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    800041e0:	68a2                	ld	a7,8(sp)
    800041e2:	1810                	addi	a2,sp,48
    800041e4:	8566                	mv	a0,s9
    800041e6:	0008859b          	sext.w	a1,a7
    800041ea:	cf7ff0ef          	jal	ra,80003ee0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  int fraction_digits = current - previous;
    800041ee:	419506b3          	sub	a3,a0,s9
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
    800041f2:	461d                	li	a2,7
  *current = '0';
    800041f4:	03000813          	li	a6,48
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
    800041f8:	9e15                	subw	a2,a2,a3
  *current = '0';
    800041fa:	01050023          	sb	a6,0(a0)
  int fraction_digits = current - previous;
    800041fe:	0006859b          	sext.w	a1,a3
  if (leading_zeros != 0) {
    80004202:	ca15                	beqz	a2,80004236 <MicroVsnprintf+0x2d6>
    80004204:	872a                	mv	a4,a0
    for (int i = 0; i < fraction_digits; i++) {
    80004206:	40e508bb          	subw	a7,a0,a4
    8000420a:	00b8dc63          	bge	a7,a1,80004222 <MicroVsnprintf+0x2c2>
      *(current + leading_zeros) = *current;
    8000420e:	fff74303          	lbu	t1,-1(a4)
      current--;
    80004212:	177d                	addi	a4,a4,-1
      *(current + leading_zeros) = *current;
    80004214:	00c708b3          	add	a7,a4,a2
    80004218:	00688023          	sb	t1,0(a7)
      *current = '0';
    8000421c:	01070023          	sb	a6,0(a4)
    for (int i = 0; i < fraction_digits; i++) {
    80004220:	b7dd                	j	80004206 <MicroVsnprintf+0x2a6>
    current += kMaxFractionalDigits;
    80004222:	4701                	li	a4,0
    80004224:	0005c663          	bltz	a1,80004230 <MicroVsnprintf+0x2d0>
    80004228:	0186f6b3          	and	a3,a3,s8
    8000422c:	40d00733          	neg	a4,a3
    80004230:	00770693          	addi	a3,a4,7
    80004234:	9536                	add	a0,a0,a3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    80004236:	03000693          	li	a3,48
    8000423a:	fff54703          	lbu	a4,-1(a0)
    8000423e:	00d71663          	bne	a4,a3,8000424a <MicroVsnprintf+0x2ea>
    80004242:	fff50713          	addi	a4,a0,-1
    80004246:	04ece463          	bltu	s9,a4,8000428e <MicroVsnprintf+0x32e>
  current = StrCatStr(current, (current_end - current), "*2^");
    8000424a:	40a905bb          	subw	a1,s2,a0
  *current = 0;
    8000424e:	00050023          	sb	zero,0(a0)
  current = StrCatStr(current, (current_end - current), "*2^");
    80004252:	00087617          	auipc	a2,0x87
    80004256:	9f660613          	addi	a2,a2,-1546 # 8008ac48 <_ZTVN6tflite18MicroErrorReporterE+0x268>
    8000425a:	c87ff0ef          	jal	ra,80003ee0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    8000425e:	8caa                	mv	s9,a0
  current = StrCatInt32(current, (current_end - current), exponent);
    80004260:	40a9093b          	subw	s2,s2,a0
  if (i < 0) {
    80004264:	180c                	addi	a1,sp,48
    80004266:	000b5c63          	bgez	s6,8000427e <MicroVsnprintf+0x31e>
    *buffer++ = '-';
    8000426a:	02d00713          	li	a4,45
    u = -u;
    8000426e:	07f00b13          	li	s6,127
    *buffer++ = '-';
    80004272:	02e10823          	sb	a4,48(sp)
    u = -u;
    80004276:	41bb0b3b          	subw	s6,s6,s11
    *buffer++ = '-';
    8000427a:	03110593          	addi	a1,sp,49
  return FastUInt32ToBufferLeft(u, buffer, 10);
    8000427e:	4629                	li	a2,10
    80004280:	855a                	mv	a0,s6
    80004282:	c89ff0ef          	jal	ra,80003f0a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    80004286:	1810                	addi	a2,sp,48
    80004288:	85ca                	mv	a1,s2
    8000428a:	8566                	mv	a0,s9
    8000428c:	bdc9                	j	8000415e <MicroVsnprintf+0x1fe>
    8000428e:	853a                	mv	a0,a4
    80004290:	b76d                	j	8000423a <MicroVsnprintf+0x2da>
          output[output_index++] = *current++;
    80004292:	00298713          	addi	a4,s3,2
    80004296:	2405                	addiw	s0,s0,1
    80004298:	00f48023          	sb	a5,0(s1)
          break;
    8000429c:	bb25                	j	80003fd4 <MicroVsnprintf+0x74>
          if (usable_length - output_index < 1) {
    8000429e:	408a07bb          	subw	a5,s4,s0
            output[output_index++] = '\0';
    800042a2:	2405                	addiw	s0,s0,1
          if (usable_length - output_index < 1) {
    800042a4:	00f04563          	bgtz	a5,800042ae <MicroVsnprintf+0x34e>
  output[output_index++] = '\0';
    800042a8:	00048023          	sb	zero,0(s1)
  return output_index;
    800042ac:	b3dd                	j	80004092 <MicroVsnprintf+0x132>
          output[output_index++] = va_arg(args, int32_t);
    800042ae:	00092783          	lw	a5,0(s2)
          current++;
    800042b2:	00298713          	addi	a4,s3,2
          output[output_index++] = va_arg(args, int32_t);
    800042b6:	0921                	addi	s2,s2,8
    800042b8:	00f48023          	sb	a5,0(s1)
          break;
    800042bc:	bb21                	j	80003fd4 <MicroVsnprintf+0x74>
      output[output_index++] = *current++;
    800042be:	2405                	addiw	s0,s0,1
    800042c0:	00c48023          	sb	a2,0(s1)
    800042c4:	bb01                	j	80003fd4 <MicroVsnprintf+0x74>

00000000800042c6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
    800042c6:	4110                	lw	a2,0(a0)
    800042c8:	00450793          	addi	a5,a0,4
    800042cc:	4701                	li	a4,0
  int result = 1;
    800042ce:	4505                	li	a0,1
  for (int i = 0; i < dims.size; ++i) {
    800042d0:	00c75863          	bge	a4,a2,800042e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
    800042d4:	4394                	lw	a3,0(a5)
  for (int i = 0; i < dims.size; ++i) {
    800042d6:	2705                	addiw	a4,a4,1
    800042d8:	0791                	addi	a5,a5,4
    result *= dims.data[i];
    800042da:	02a6853b          	mulw	a0,a3,a0
  for (int i = 0; i < dims.size; ++i) {
    800042de:	bfcd                	j	800042d0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
    800042e0:	8082                	ret

00000000800042e2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
    800042e2:	411c                	lw	a5,0(a0)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800042e4:	4729                	li	a4,10
    return data_ - ReadScalar<soffset_t>(data_);
    800042e6:	40f507b3          	sub	a5,a0,a5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800042ea:	0007d683          	lhu	a3,0(a5)
    800042ee:	00d77d63          	bgeu	a4,a3,80004308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x26>
    800042f2:	00a7d703          	lhu	a4,10(a5)
    auto p = data_ + field_offset;
    800042f6:	00e507b3          	add	a5,a0,a4
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
    return subgraph->operators()->size();
  } else {
    return 0;
    800042fa:	4501                	li	a0,0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800042fc:	c719                	beqz	a4,8000430a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    800042fe:	0007e503          	lwu	a0,0(a5)
  uoffset_t size() const { return EndianScalar(length_); }
    80004302:	953e                	add	a0,a0,a5
    80004304:	4108                	lw	a0,0(a0)
    return subgraph->operators()->size();
    80004306:	8082                	ret
    return 0;
    80004308:	4501                	li	a0,0
  }
}
    8000430a:	8082                	ret

000000008000430c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
    return data_ - ReadScalar<soffset_t>(data_);
    8000430c:	411c                	lw	a5,0(a0)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8000430e:	4721                	li	a4,8
    return data_ - ReadScalar<soffset_t>(data_);
    80004310:	40f507b3          	sub	a5,a0,a5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80004314:	0007d683          	lhu	a3,0(a5)
    80004318:	04d77a63          	bgeu	a4,a3,8000436c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>
    8000431c:	0087d783          	lhu	a5,8(a5)
    auto p = data_ + field_offset;
    80004320:	953e                	add	a0,a0,a5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004322:	c7a9                	beqz	a5,8000436c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>
    80004324:	00056783          	lwu	a5,0(a0)
    80004328:	953e                	add	a0,a0,a5
    FLATBUFFERS_ASSERT(i < size());
    8000432a:	4118                	lw	a4,0(a0)
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    8000432c:	0005879b          	sext.w	a5,a1
    80004330:	02e5e463          	bltu	a1,a4,80004358 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    80004334:	1141                	addi	sp,sp,-16
    80004336:	00086697          	auipc	a3,0x86
    8000433a:	6d268693          	addi	a3,a3,1746 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    8000433e:	00087617          	auipc	a2,0x87
    80004342:	80260613          	addi	a2,a2,-2046 # 8008ab40 <_ZTVN6tflite18MicroErrorReporterE+0x160>
    80004346:	10600593          	li	a1,262
    8000434a:	00086517          	auipc	a0,0x86
    8000434e:	78e50513          	addi	a0,a0,1934 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80004352:	e406                	sd	ra,8(sp)
    80004354:	64a090ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    80004358:	02079713          	slli	a4,a5,0x20
    8000435c:	01e75793          	srli	a5,a4,0x1e
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80004360:	0511                	addi	a0,a0,4
    p += i * sizeof(uoffset_t);
    80004362:	953e                	add	a0,a0,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004364:	00056783          	lwu	a5,0(a0)
  return NumSubgraphOperators(subgraph);
    80004368:	953e                	add	a0,a0,a5
    8000436a:	bfa5                	j	800042e2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  uoffset_t size() const { return EndianScalar(length_); }
    8000436c:	00002783          	lw	a5,0(zero) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
    80004370:	9002                	ebreak

0000000080004372 <_ZN6tflite10MicroGraphD1Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroGraph::~MicroGraph() {}
    80004372:	8082                	ret

0000000080004374 <_ZN6tflite10MicroGraphD0Ev>:
    80004374:	0600906f          	j	8000d3d4 <_ZdlPv>

0000000080004378 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
    80004378:	715d                	addi	sp,sp,-80
    8000437a:	ec56                	sd	s5,24(sp)
  int previous_subgraph_idx = current_subgraph_index_;
    8000437c:	02852a83          	lw	s5,40(a0)
TfLiteStatus MicroGraph::InitSubgraphs() {
    80004380:	e0a2                	sd	s0,64(sp)
    80004382:	f84a                	sd	s2,48(sp)
    80004384:	e85a                	sd	s6,16(sp)
    80004386:	e45e                	sd	s7,8(sp)
    80004388:	e486                	sd	ra,72(sp)
    8000438a:	fc26                	sd	s1,56(sp)
    8000438c:	f44e                	sd	s3,40(sp)
    8000438e:	f052                	sd	s4,32(sp)
    80004390:	e062                	sd	s8,0(sp)
    80004392:	842a                	mv	s0,a0

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004394:	4901                	li	s2,0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    80004396:	05800b13          	li	s6,88
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    8000439a:	02000b93          	li	s7,32
    8000439e:	781c                	ld	a5,48(s0)
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    800043a0:	0007e783          	lwu	a5,0(a5)
    800043a4:	04f97963          	bgeu	s2,a5,800043f6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x7e>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    800043a8:	6808                	ld	a0,16(s0)
    current_subgraph_index_ = subgraph_idx;
    800043aa:	0009059b          	sext.w	a1,s2
    800043ae:	d40c                	sw	a1,40(s0)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    800043b0:	f5dff0ef          	jal	ra,8000430c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    800043b4:	02051a13          	slli	s4,a0,0x20
    800043b8:	00491c13          	slli	s8,s2,0x4
    800043bc:	4981                	li	s3,0
    800043be:	020a5a13          	srli	s4,s4,0x20
    800043c2:	0349f863          	bgeu	s3,s4,800043f2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x7a>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    800043c6:	036984b3          	mul	s1,s3,s6
    800043ca:	701c                	ld	a5,32(s0)
    800043cc:	97e2                	add	a5,a5,s8
    800043ce:	639c                	ld	a5,0(a5)
    800043d0:	94be                	add	s1,s1,a5
      const TfLiteRegistration* registration =
    800043d2:	68bc                	ld	a5,80(s1)
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    800043d4:	5798                	lw	a4,40(a5)
    800043d6:	01771b63          	bne	a4,s7,800043ec <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x74>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
    800043da:	788c                	ld	a1,48(s1)
        init_data_size = node->custom_initial_data_size;
    800043dc:	5c90                	lw	a2,56(s1)
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
        init_data_size = 0;
      }
      if (registration->init) {
    800043de:	639c                	ld	a5,0(a5)
    800043e0:	c781                	beqz	a5,800043e8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x70>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
    800043e2:	6408                	ld	a0,8(s0)
    800043e4:	9782                	jalr	a5
        node->user_data =
    800043e6:	f088                	sd	a0,32(s1)
    for (size_t i = 0; i < operators_size; ++i) {
    800043e8:	0985                	addi	s3,s3,1
    800043ea:	bfe1                	j	800043c2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x4a>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
    800043ec:	748c                	ld	a1,40(s1)
        init_data_size = 0;
    800043ee:	4601                	li	a2,0
    800043f0:	b7fd                	j	800043de <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x66>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    800043f2:	0905                	addi	s2,s2,1
    800043f4:	b76d                	j	8000439e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x26>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
    800043f6:	03542423          	sw	s5,40(s0)

  return kTfLiteOk;
}
    800043fa:	60a6                	ld	ra,72(sp)
    800043fc:	6406                	ld	s0,64(sp)
    800043fe:	74e2                	ld	s1,56(sp)
    80004400:	7942                	ld	s2,48(sp)
    80004402:	79a2                	ld	s3,40(sp)
    80004404:	7a02                	ld	s4,32(sp)
    80004406:	6ae2                	ld	s5,24(sp)
    80004408:	6b42                	ld	s6,16(sp)
    8000440a:	6ba2                	ld	s7,8(sp)
    8000440c:	6c02                	ld	s8,0(sp)
    8000440e:	4501                	li	a0,0
    80004410:	6161                	addi	sp,sp,80
    80004412:	8082                	ret

0000000080004414 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::FreeSubgraphs() {
    80004414:	7139                	addi	sp,sp,-64
    80004416:	e852                	sd	s4,16(sp)
  int previous_subgraph_idx = current_subgraph_index_;
    80004418:	02852a03          	lw	s4,40(a0)
TfLiteStatus MicroGraph::FreeSubgraphs() {
    8000441c:	f822                	sd	s0,48(sp)
    8000441e:	f426                	sd	s1,40(sp)
    80004420:	e456                	sd	s5,8(sp)
    80004422:	fc06                	sd	ra,56(sp)
    80004424:	f04a                	sd	s2,32(sp)
    80004426:	ec4e                	sd	s3,24(sp)
    80004428:	e05a                	sd	s6,0(sp)
    8000442a:	842a                	mv	s0,a0

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    8000442c:	4481                	li	s1,0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    8000442e:	05800a93          	li	s5,88
    80004432:	781c                	ld	a5,48(s0)
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004434:	0007e783          	lwu	a5,0(a5)
    80004438:	04f4f263          	bgeu	s1,a5,8000447c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x68>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    8000443c:	6808                	ld	a0,16(s0)
    current_subgraph_index_ = subgraph_idx;
    8000443e:	0004859b          	sext.w	a1,s1
    80004442:	d40c                	sw	a1,40(s0)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    80004444:	ec9ff0ef          	jal	ra,8000430c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    80004448:	02051993          	slli	s3,a0,0x20
    8000444c:	00449b13          	slli	s6,s1,0x4
    80004450:	4901                	li	s2,0
    80004452:	0209d993          	srli	s3,s3,0x20
    80004456:	03397163          	bgeu	s2,s3,80004478 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x64>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    8000445a:	035907b3          	mul	a5,s2,s5
    8000445e:	7018                	ld	a4,32(s0)
    80004460:	975a                	add	a4,a4,s6
    80004462:	6318                	ld	a4,0(a4)
    80004464:	97ba                	add	a5,a5,a4
      const TfLiteRegistration* registration =
    80004466:	6bb8                	ld	a4,80(a5)
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
    80004468:	c711                	beqz	a4,80004474 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x60>
    8000446a:	6718                	ld	a4,8(a4)
    8000446c:	c701                	beqz	a4,80004474 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x60>
        registration->free(context_, node->user_data);
    8000446e:	738c                	ld	a1,32(a5)
    80004470:	6408                	ld	a0,8(s0)
    80004472:	9702                	jalr	a4
    for (size_t i = 0; i < operators_size; ++i) {
    80004474:	0905                	addi	s2,s2,1
    80004476:	b7c5                	j	80004456 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x42>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004478:	0485                	addi	s1,s1,1
    8000447a:	bf65                	j	80004432 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x1e>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
    8000447c:	03442423          	sw	s4,40(s0)

  return kTfLiteOk;
}
    80004480:	70e2                	ld	ra,56(sp)
    80004482:	7442                	ld	s0,48(sp)
    80004484:	74a2                	ld	s1,40(sp)
    80004486:	7902                	ld	s2,32(sp)
    80004488:	69e2                	ld	s3,24(sp)
    8000448a:	6a42                	ld	s4,16(sp)
    8000448c:	6aa2                	ld	s5,8(sp)
    8000448e:	6b02                	ld	s6,0(sp)
    80004490:	4501                	li	a0,0
    80004492:	6121                	addi	sp,sp,64
    80004494:	8082                	ret

0000000080004496 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    80004496:	5518                	lw	a4,40(a0)
    80004498:	02000793          	li	a5,32
    8000449c:	00f71463          	bne	a4,a5,800044a4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xe>
    return registration->custom_name;
    800044a0:	7908                	ld	a0,48(a0)
    800044a2:	8082                	ret
  return (v < low) || (high < v);
    800044a4:	09100693          	li	a3,145
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    800044a8:	0007079b          	sext.w	a5,a4
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    800044ac:	00086517          	auipc	a0,0x86
    800044b0:	0b450513          	addi	a0,a0,180 # 8008a560 <space4_img+0x24d0>
    800044b4:	00e6ec63          	bltu	a3,a4,800044cc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x36>
  return EnumNamesBuiltinOperator()[index];
    800044b8:	02079713          	slli	a4,a5,0x20
    800044bc:	01d75793          	srli	a5,a4,0x1d
    800044c0:	00087717          	auipc	a4,0x87
    800044c4:	24070713          	addi	a4,a4,576 # 8008b700 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>
    800044c8:	97ba                	add	a5,a5,a4
    800044ca:	6388                	ld	a0,0(a5)
}
    800044cc:	8082                	ret

00000000800044ce <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
TfLiteStatus MicroGraph::PrepareSubgraphs() {
    800044ce:	715d                	addi	sp,sp,-80
    800044d0:	ec56                	sd	s5,24(sp)
  int previous_subgraph_idx = current_subgraph_index_;
    800044d2:	02852a83          	lw	s5,40(a0)
TfLiteStatus MicroGraph::PrepareSubgraphs() {
    800044d6:	e0a2                	sd	s0,64(sp)
    800044d8:	f84a                	sd	s2,48(sp)
    800044da:	e85a                	sd	s6,16(sp)
    800044dc:	e486                	sd	ra,72(sp)
    800044de:	fc26                	sd	s1,56(sp)
    800044e0:	f44e                	sd	s3,40(sp)
    800044e2:	f052                	sd	s4,32(sp)
    800044e4:	e45e                	sd	s7,8(sp)
    800044e6:	e062                	sd	s8,0(sp)
    800044e8:	842a                	mv	s0,a0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    800044ea:	4901                	li	s2,0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    800044ec:	05800b13          	li	s6,88
  uoffset_t size() const { return EndianScalar(length_); }
    800044f0:	781c                	ld	a5,48(s0)
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    800044f2:	0007e783          	lwu	a5,0(a5)
    800044f6:	08f97363          	bgeu	s2,a5,8000457c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xae>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    800044fa:	6808                	ld	a0,16(s0)
    current_subgraph_index_ = subgraph_idx;
    800044fc:	0009059b          	sext.w	a1,s2
    80004500:	d40c                	sw	a1,40(s0)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    80004502:	e0bff0ef          	jal	ra,8000430c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    80004506:	02051a13          	slli	s4,a0,0x20
    8000450a:	00491b93          	slli	s7,s2,0x4
    8000450e:	4481                	li	s1,0
    80004510:	020a5a13          	srli	s4,s4,0x20
    80004514:	0744f263          	bgeu	s1,s4,80004578 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xaa>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    80004518:	036485b3          	mul	a1,s1,s6
    8000451c:	701c                	ld	a5,32(s0)
    8000451e:	97de                	add	a5,a5,s7
    80004520:	639c                	ld	a5,0(a5)
    80004522:	95be                	add	a1,a1,a5
      const TfLiteRegistration* registration =
    80004524:	0505bc03          	ld	s8,80(a1)
      if (registration->prepare != nullptr) {
    80004528:	010c3783          	ld	a5,16(s8)
    8000452c:	cf9d                	beqz	a5,8000456a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x9c>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    8000452e:	6408                	ld	a0,8(s0)
    80004530:	9782                	jalr	a5
    80004532:	89aa                	mv	s3,a0
        if (prepare_status != kTfLiteOk) {
    80004534:	c91d                	beqz	a0,8000456a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x9c>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    80004536:	8562                	mv	a0,s8
    80004538:	f5fff0ef          	jal	ra,80004496 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    8000453c:	85aa                	mv	a1,a0
    8000453e:	0009869b          	sext.w	a3,s3
    80004542:	00086517          	auipc	a0,0x86
    80004546:	71e50513          	addi	a0,a0,1822 # 8008ac60 <_ZTVN6tflite18MicroErrorReporterE+0x280>
    8000454a:	8626                	mv	a2,s1
    8000454c:	f88ff0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    80004550:	4505                	li	a0,1
}
    80004552:	60a6                	ld	ra,72(sp)
    80004554:	6406                	ld	s0,64(sp)
    80004556:	74e2                	ld	s1,56(sp)
    80004558:	7942                	ld	s2,48(sp)
    8000455a:	79a2                	ld	s3,40(sp)
    8000455c:	7a02                	ld	s4,32(sp)
    8000455e:	6ae2                	ld	s5,24(sp)
    80004560:	6b42                	ld	s6,16(sp)
    80004562:	6ba2                	ld	s7,8(sp)
    80004564:	6c02                	ld	s8,0(sp)
    80004566:	6161                	addi	sp,sp,80
    80004568:	8082                	ret
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    8000456a:	6c08                	ld	a0,24(s0)
    8000456c:	0004859b          	sext.w	a1,s1
    for (size_t i = 0; i < operators_size; ++i) {
    80004570:	0485                	addi	s1,s1,1
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    80004572:	58d000ef          	jal	ra,800052fe <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    80004576:	bf79                	j	80004514 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x46>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004578:	0905                	addi	s2,s2,1
    8000457a:	bf9d                	j	800044f0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x22>
  current_subgraph_index_ = previous_subgraph_idx;
    8000457c:	03542423          	sw	s5,40(s0)
  return kTfLiteOk;
    80004580:	4501                	li	a0,0
    80004582:	bfc1                	j	80004552 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x84>

0000000080004584 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
  }

  return kTfLiteOk;
}

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
    80004584:	6908                	ld	a0,16(a0)
    80004586:	1141                	addi	sp,sp,-16
    80004588:	e406                	sd	ra,8(sp)
    8000458a:	8f5ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000458e:	60a2                	ld	ra,8(sp)
    80004590:	4108                	lw	a0,0(a0)
    80004592:	0141                	addi	sp,sp,16
    80004594:	8082                	ret

0000000080004596 <_ZN6tflite19ScopedMicroProfilerD1Ev>:
    if (profiler_ != nullptr) {
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    80004596:	87aa                	mv	a5,a0
    if (profiler_ != nullptr) {
    80004598:	6508                	ld	a0,8(a0)
    8000459a:	c509                	beqz	a0,800045a4 <_ZN6tflite19ScopedMicroProfilerD1Ev+0xe>
      profiler_->EndEvent(event_handle_);
    8000459c:	6118                	ld	a4,0(a0)
    8000459e:	438c                	lw	a1,0(a5)
    800045a0:	6f18                	ld	a4,24(a4)
    800045a2:	8702                	jr	a4
    }
  }
    800045a4:	8082                	ret

00000000800045a6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
    800045a6:	791c                	ld	a5,48(a0)
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    800045a8:	711d                	addi	sp,sp,-96
    800045aa:	e8a2                	sd	s0,80(sp)
    800045ac:	4390                	lw	a2,0(a5)
    800045ae:	f05a                	sd	s6,32(sp)
    800045b0:	ec86                	sd	ra,88(sp)
    800045b2:	e4a6                	sd	s1,72(sp)
    800045b4:	e0ca                	sd	s2,64(sp)
    800045b6:	fc4e                	sd	s3,56(sp)
    800045b8:	f852                	sd	s4,48(sp)
    800045ba:	f456                	sd	s5,40(sp)
    800045bc:	ec5e                	sd	s7,24(sp)
    800045be:	e862                	sd	s8,16(sp)
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    800045c0:	02061793          	slli	a5,a2,0x20
  int previous_subgraph_idx = current_subgraph_index_;
    800045c4:	02852b03          	lw	s6,40(a0)
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    800045c8:	9381                	srli	a5,a5,0x20
  current_subgraph_index_ = subgraph_idx;
    800045ca:	d50c                	sw	a1,40(a0)
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    800045cc:	842a                	mv	s0,a0
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    800045ce:	02f5e663          	bltu	a1,a5,800045fa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x54>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    800045d2:	00086517          	auipc	a0,0x86
    800045d6:	6c650513          	addi	a0,a0,1734 # 8008ac98 <_ZTVN6tflite18MicroErrorReporterE+0x2b8>
    800045da:	efaff0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    800045de:	4485                	li	s1,1
}
    800045e0:	60e6                	ld	ra,88(sp)
    800045e2:	6446                	ld	s0,80(sp)
    800045e4:	6906                	ld	s2,64(sp)
    800045e6:	79e2                	ld	s3,56(sp)
    800045e8:	7a42                	ld	s4,48(sp)
    800045ea:	7aa2                	ld	s5,40(sp)
    800045ec:	7b02                	ld	s6,32(sp)
    800045ee:	6be2                	ld	s7,24(sp)
    800045f0:	6c42                	ld	s8,16(sp)
    800045f2:	8526                	mv	a0,s1
    800045f4:	64a6                	ld	s1,72(sp)
    800045f6:	6125                	addi	sp,sp,96
    800045f8:	8082                	ret
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    800045fa:	6908                	ld	a0,16(a0)
    800045fc:	89ae                	mv	s3,a1
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    800045fe:	0992                	slli	s3,s3,0x4
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    80004600:	d0dff0ef          	jal	ra,8000430c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
    80004604:	02051a13          	slli	s4,a0,0x20
    80004608:	4901                	li	s2,0
    8000460a:	020a5a13          	srli	s4,s4,0x20
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    8000460e:	05800b93          	li	s7,88
    if (invoke_status == kTfLiteError) {
    80004612:	4c05                	li	s8,1
  for (size_t i = 0; i < operators_size; ++i) {
    80004614:	07497c63          	bgeu	s2,s4,8000468c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xe6>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    80004618:	037904b3          	mul	s1,s2,s7
    8000461c:	701c                	ld	a5,32(s0)
    8000461e:	97ce                	add	a5,a5,s3
    80004620:	639c                	ld	a5,0(a5)
    80004622:	94be                	add	s1,s1,a5
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    80004624:	0504ba83          	ld	s5,80(s1)
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    80004628:	8556                	mv	a0,s5
    8000462a:	e6dff0ef          	jal	ra,80004496 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    8000462e:	641c                	ld	a5,8(s0)
    80004630:	85aa                	mv	a1,a0
      : profiler_(profiler) {
    80004632:	c002                	sw	zero,0(sp)
    80004634:	77a8                	ld	a0,104(a5)
    80004636:	e42a                	sd	a0,8(sp)
    if (profiler_ != nullptr) {
    80004638:	c509                	beqz	a0,80004642 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x9c>
      event_handle_ = profiler_->BeginEvent(tag);
    8000463a:	611c                	ld	a5,0(a0)
    8000463c:	6b9c                	ld	a5,16(a5)
    8000463e:	9782                	jalr	a5
    80004640:	c02a                	sw	a0,0(sp)
    TFLITE_DCHECK(registration->invoke);
    80004642:	018ab783          	ld	a5,24(s5)
    80004646:	e399                	bnez	a5,8000464c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xa6>
    80004648:	346090ef          	jal	ra,8000d98e <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    8000464c:	6408                	ld	a0,8(s0)
    8000464e:	85a6                	mv	a1,s1
    80004650:	9782                	jalr	a5
    80004652:	84aa                	mv	s1,a0
    allocator_->ResetTempAllocations();
    80004654:	6c08                	ld	a0,24(s0)
    80004656:	611c                	ld	a5,0(a0)
    80004658:	6b9c                	ld	a5,16(a5)
    8000465a:	9782                	jalr	a5
    if (invoke_status == kTfLiteError) {
    8000465c:	03849263          	bne	s1,s8,80004680 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xda>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    80004660:	8556                	mv	a0,s5
    80004662:	e35ff0ef          	jal	ra,80004496 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    80004666:	85aa                	mv	a1,a0
    80004668:	4685                	li	a3,1
    8000466a:	864a                	mv	a2,s2
    8000466c:	00086517          	auipc	a0,0x86
    80004670:	66450513          	addi	a0,a0,1636 # 8008acd0 <_ZTVN6tflite18MicroErrorReporterE+0x2f0>
    80004674:	e60ff0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
    80004678:	850a                	mv	a0,sp
    8000467a:	f1dff0ef          	jal	ra,80004596 <_ZN6tflite19ScopedMicroProfilerD1Ev>
    8000467e:	b78d                	j	800045e0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x3a>
    } else if (invoke_status != kTfLiteOk) {
    80004680:	fce5                	bnez	s1,80004678 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd2>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    80004682:	850a                	mv	a0,sp
    80004684:	f13ff0ef          	jal	ra,80004596 <_ZN6tflite19ScopedMicroProfilerD1Ev>
  for (size_t i = 0; i < operators_size; ++i) {
    80004688:	0905                	addi	s2,s2,1
    8000468a:	b769                	j	80004614 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x6e>
  current_subgraph_index_ = previous_subgraph_idx;
    8000468c:	03642423          	sw	s6,40(s0)
  return kTfLiteOk;
    80004690:	4481                	li	s1,0
    80004692:	b7b9                	j	800045e0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x3a>

0000000080004694 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    80004694:	1141                	addi	sp,sp,-16
    80004696:	e022                	sd	s0,0(sp)
    80004698:	e406                	sd	ra,8(sp)
      current_subgraph_index_(0) {
    8000469a:	00087797          	auipc	a5,0x87
    8000469e:	84e78793          	addi	a5,a5,-1970 # 8008aee8 <_ZTVN6tflite10MicroGraphE+0x10>
    800046a2:	e11c                	sd	a5,0(a0)
    800046a4:	e50c                	sd	a1,8(a0)
    800046a6:	e910                	sd	a2,16(a0)
    800046a8:	ed14                	sd	a3,24(a0)
    800046aa:	02053023          	sd	zero,32(a0)
    800046ae:	02052423          	sw	zero,40(a0)
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    800046b2:	842a                	mv	s0,a0
  if (model != nullptr) {
    800046b4:	c609                	beqz	a2,800046be <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x2a>
    800046b6:	8532                	mv	a0,a2
    subgraphs_ = model->subgraphs();
    800046b8:	fc6ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    800046bc:	f808                	sd	a0,48(s0)
}
    800046be:	60a2                	ld	ra,8(sp)
    800046c0:	6402                	ld	s0,0(sp)
    800046c2:	0141                	addi	sp,sp,16
    800046c4:	8082                	ret

00000000800046c6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
    800046c6:	f10c                	sd	a1,32(a0)
}
    800046c8:	8082                	ret

00000000800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
    800046ca:	411c                	lw	a5,0(a0)
    800046cc:	02f5e463          	bltu	a1,a5,800046f4 <_ZNK11flatbuffers6VectorIiE3GetEj+0x2a>
  return_type Get(uoffset_t i) const {
    800046d0:	1141                	addi	sp,sp,-16
    FLATBUFFERS_ASSERT(i < size());
    800046d2:	00086697          	auipc	a3,0x86
    800046d6:	33668693          	addi	a3,a3,822 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    800046da:	00086617          	auipc	a2,0x86
    800046de:	33e60613          	addi	a2,a2,830 # 8008aa18 <_ZTVN6tflite18MicroErrorReporterE+0x38>
    800046e2:	10600593          	li	a1,262
    800046e6:	00086517          	auipc	a0,0x86
    800046ea:	3f250513          	addi	a0,a0,1010 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
  return_type Get(uoffset_t i) const {
    800046ee:	e406                	sd	ra,8(sp)
    FLATBUFFERS_ASSERT(i < size());
    800046f0:	2ae090ef          	jal	ra,8000d99e <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    800046f4:	02059793          	slli	a5,a1,0x20
    800046f8:	01e7d593          	srli	a1,a5,0x1e
    800046fc:	952e                	add	a0,a0,a1
  }
    800046fe:	4148                	lw	a0,4(a0)
    80004700:	8082                	ret

0000000080004702 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    80004702:	7159                	addi	sp,sp,-112
    80004704:	e8ca                	sd	s2,80(sp)
    80004706:	e4ce                	sd	s3,72(sp)
    80004708:	f85a                	sd	s6,48(sp)
    8000470a:	f45e                	sd	s7,40(sp)
    8000470c:	f486                	sd	ra,104(sp)
    8000470e:	f0a2                	sd	s0,96(sp)
    80004710:	eca6                	sd	s1,88(sp)
    80004712:	e0d2                	sd	s4,64(sp)
    80004714:	fc56                	sd	s5,56(sp)
    80004716:	f062                	sd	s8,32(sp)
    80004718:	ec66                	sd	s9,24(sp)
    8000471a:	89aa                	mv	s3,a0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    8000471c:	4901                	li	s2,0
    8000471e:	4b61                	li	s6,24
        if (tensor->type() == tflite::TensorType_INT8) {
    80004720:	4ba5                	li	s7,9
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004722:	0309b503          	ld	a0,48(s3)
    80004726:	00056783          	lwu	a5,0(a0)
    8000472a:	10f97563          	bgeu	s2,a5,80004834 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
  return_type operator[](uoffset_t i) const { return Get(i); }
    8000472e:	0009059b          	sext.w	a1,s2
    80004732:	f70ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004736:	8a2a                	mv	s4,a0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    80004738:	00491a93          	slli	s5,s2,0x4
    8000473c:	4481                	li	s1,0
    auto field_offset = GetOptionalFieldOffset(field);
    8000473e:	4591                	li	a1,4
    80004740:	8552                	mv	a0,s4
    80004742:	f24ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004746:	10050563          	beqz	a0,80004850 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x14e>
    auto p = data_ + field_offset;
    8000474a:	00aa0433          	add	s0,s4,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000474e:	00046503          	lwu	a0,0(s0)
    80004752:	942a                	add	s0,s0,a0
  uoffset_t size() const { return EndianScalar(length_); }
    80004754:	401c                	lw	a5,0(s0)
    80004756:	02079713          	slli	a4,a5,0x20
    8000475a:	9301                	srli	a4,a4,0x20
    8000475c:	0ce4fa63          	bgeu	s1,a4,80004830 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x12e>
    FLATBUFFERS_ASSERT(i < size());
    80004760:	0004871b          	sext.w	a4,s1
    80004764:	02f76263          	bltu	a4,a5,80004788 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x86>
    80004768:	00086697          	auipc	a3,0x86
    8000476c:	2a068693          	addi	a3,a3,672 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80004770:	00086617          	auipc	a2,0x86
    80004774:	59860613          	addi	a2,a2,1432 # 8008ad08 <_ZTVN6tflite18MicroErrorReporterE+0x328>
    80004778:	10600593          	li	a1,262
    8000477c:	00086517          	auipc	a0,0x86
    80004780:	35c50513          	addi	a0,a0,860 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80004784:	21a090ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    80004788:	00249793          	slli	a5,s1,0x2
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8000478c:	0411                	addi	s0,s0,4
    p += i * sizeof(uoffset_t);
    8000478e:	943e                	add	s0,s0,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004790:	00046783          	lwu	a5,0(s0)
    auto field_offset = GetOptionalFieldOffset(field);
    80004794:	45b9                	li	a1,14
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004796:	943e                	add	s0,s0,a5
    auto field_offset = GetOptionalFieldOffset(field);
    80004798:	8522                	mv	a0,s0
    8000479a:	eccff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8000479e:	c549                	beqz	a0,80004828 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x126>
    800047a0:	9522                	add	a0,a0,s0
      if (tensor->is_variable()) {
    800047a2:	00054783          	lbu	a5,0(a0)
    800047a6:	c3c9                	beqz	a5,80004828 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x126>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    800047a8:	03648cb3          	mul	s9,s1,s6
    800047ac:	0209b783          	ld	a5,32(s3)
    800047b0:	002c                	addi	a1,sp,8
    800047b2:	97d6                	add	a5,a5,s5
    800047b4:	6788                	ld	a0,8(a5)
    800047b6:	9566                	add	a0,a0,s9
    800047b8:	e66ff0ef          	jal	ra,80003e1e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
    800047bc:	ed2d                	bnez	a0,80004836 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x134>
    auto field_offset = GetOptionalFieldOffset(field);
    800047be:	4599                	li	a1,6
    800047c0:	8522                	mv	a0,s0
    800047c2:	ea4ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    800047c6:	c13d                	beqz	a0,8000482c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x12a>
    800047c8:	9522                	add	a0,a0,s0
        if (tensor->type() == tflite::TensorType_INT8) {
    800047ca:	00054783          	lbu	a5,0(a0)
    800047ce:	05779f63          	bne	a5,s7,8000482c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x12a>
    auto field_offset = GetOptionalFieldOffset(field);
    800047d2:	45b1                	li	a1,12
    800047d4:	8522                	mv	a0,s0
    800047d6:	e90ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800047da:	4c01                	li	s8,0
    800047dc:	c509                	beqz	a0,800047e6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
    auto p = data_ + field_offset;
    800047de:	942a                	add	s0,s0,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800047e0:	00046c03          	lwu	s8,0(s0)
    800047e4:	9c22                	add	s8,s8,s0
    auto field_offset = GetOptionalFieldOffset(field);
    800047e6:	45a9                	li	a1,10
    800047e8:	8562                	mv	a0,s8
    800047ea:	e7cff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800047ee:	c12d                	beqz	a0,80004850 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x14e>
    auto p = data_ + field_offset;
    800047f0:	9c2a                	add	s8,s8,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800047f2:	000c6503          	lwu	a0,0(s8)
    800047f6:	9c2a                	add	s8,s8,a0
    FLATBUFFERS_ASSERT(i < size());
    800047f8:	000c2783          	lw	a5,0(s8)
    800047fc:	eb91                	bnez	a5,80004810 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    800047fe:	00086697          	auipc	a3,0x86
    80004802:	20a68693          	addi	a3,a3,522 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80004806:	00086617          	auipc	a2,0x86
    8000480a:	5fa60613          	addi	a2,a2,1530 # 8008ae00 <_ZTVN6tflite18MicroErrorReporterE+0x420>
    8000480e:	b7ad                	j	80004778 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x76>
          value = tensor->quantization()->zero_point()->Get(0);
    80004810:	004c2583          	lw	a1,4(s8)
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    80004814:	0209b783          	ld	a5,32(s3)
    80004818:	6622                	ld	a2,8(sp)
    8000481a:	97d6                	add	a5,a5,s5
    8000481c:	679c                	ld	a5,8(a5)
    8000481e:	9cbe                	add	s9,s9,a5
    80004820:	000cb503          	ld	a0,0(s9)
    80004824:	e28fd0ef          	jal	ra,80001e4c <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    80004828:	0485                	addi	s1,s1,1
    8000482a:	bf11                	j	8000473e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
        int value = 0;
    8000482c:	4581                	li	a1,0
    8000482e:	b7dd                	j	80004814 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    80004830:	0905                	addi	s2,s2,1
    80004832:	bdc5                	j	80004722 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x20>
  return kTfLiteOk;
    80004834:	4501                	li	a0,0
}
    80004836:	70a6                	ld	ra,104(sp)
    80004838:	7406                	ld	s0,96(sp)
    8000483a:	64e6                	ld	s1,88(sp)
    8000483c:	6946                	ld	s2,80(sp)
    8000483e:	69a6                	ld	s3,72(sp)
    80004840:	6a06                	ld	s4,64(sp)
    80004842:	7ae2                	ld	s5,56(sp)
    80004844:	7b42                	ld	s6,48(sp)
    80004846:	7ba2                	ld	s7,40(sp)
    80004848:	7c02                	ld	s8,32(sp)
    8000484a:	6ce2                	ld	s9,24(sp)
    8000484c:	6165                	addi	sp,sp,112
    8000484e:	8082                	ret
  uoffset_t size() const { return EndianScalar(length_); }
    80004850:	00002783          	lw	a5,0(zero) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
    80004854:	9002                	ebreak

0000000080004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
    80004856:	1141                	addi	sp,sp,-16
    80004858:	e022                	sd	s0,0(sp)
    8000485a:	e406                	sd	ra,8(sp)
    8000485c:	842a                	mv	s0,a0
    auto field_offset = GetOptionalFieldOffset(field);
    8000485e:	e08ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004862:	c909                	beqz	a0,80004874 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x1e>
    auto p = data_ + field_offset;
    80004864:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004866:	00056783          	lwu	a5,0(a0)
    8000486a:	953e                	add	a0,a0,a5
                        : nullptr;
  }
    8000486c:	60a2                	ld	ra,8(sp)
    8000486e:	6402                	ld	s0,0(sp)
    80004870:	0141                	addi	sp,sp,16
    80004872:	8082                	ret
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004874:	4501                	li	a0,0
                        : nullptr;
    80004876:	bfdd                	j	8000486c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x16>

0000000080004878 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
    80004878:	1101                	addi	sp,sp,-32
    8000487a:	e426                	sd	s1,8(sp)
    8000487c:	84aa                	mv	s1,a0
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    8000487e:	6908                	ld	a0,16(a0)
                                               int input_idx) {
    80004880:	ec06                	sd	ra,24(sp)
    80004882:	e822                	sd	s0,16(sp)
    80004884:	e04a                	sd	s2,0(sp)
    80004886:	842e                	mv	s0,a1
    80004888:	8932                	mv	s2,a2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    8000488a:	df4ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000488e:	85a2                	mv	a1,s0
    80004890:	e12ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80004894:	4599                	li	a1,6
    80004896:	fc1ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    8000489a:	85ca                	mv	a1,s2
    8000489c:	e2fff0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    800048a0:	47e1                	li	a5,24
    800048a2:	02f50533          	mul	a0,a0,a5
    800048a6:	708c                	ld	a1,32(s1)
    800048a8:	0412                	slli	s0,s0,0x4
}
    800048aa:	60e2                	ld	ra,24(sp)
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    800048ac:	942e                	add	s0,s0,a1
    800048ae:	641c                	ld	a5,8(s0)
}
    800048b0:	6442                	ld	s0,16(sp)
    800048b2:	64a2                	ld	s1,8(sp)
    800048b4:	6902                	ld	s2,0(sp)
    800048b6:	953e                	add	a0,a0,a5
    800048b8:	6105                	addi	sp,sp,32
    800048ba:	8082                	ret

00000000800048bc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    800048bc:	1101                	addi	sp,sp,-32
    800048be:	e426                	sd	s1,8(sp)
    800048c0:	84aa                	mv	s1,a0
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    800048c2:	6908                	ld	a0,16(a0)
                                                int output_idx) {
    800048c4:	ec06                	sd	ra,24(sp)
    800048c6:	e822                	sd	s0,16(sp)
    800048c8:	e04a                	sd	s2,0(sp)
    800048ca:	842e                	mv	s0,a1
    800048cc:	8932                	mv	s2,a2
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    800048ce:	db0ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    800048d2:	85a2                	mv	a1,s0
    800048d4:	dceff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    800048d8:	45a1                	li	a1,8
    800048da:	f7dff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    800048de:	85ca                	mv	a1,s2
    800048e0:	debff0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    800048e4:	47e1                	li	a5,24
    800048e6:	02f50533          	mul	a0,a0,a5
    800048ea:	708c                	ld	a1,32(s1)
    800048ec:	0412                	slli	s0,s0,0x4
}
    800048ee:	60e2                	ld	ra,24(sp)
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    800048f0:	942e                	add	s0,s0,a1
    800048f2:	641c                	ld	a5,8(s0)
}
    800048f4:	6442                	ld	s0,16(sp)
    800048f6:	64a2                	ld	s1,8(sp)
    800048f8:	6902                	ld	s2,0(sp)
    800048fa:	953e                	add	a0,a0,a5
    800048fc:	6105                	addi	sp,sp,32
    800048fe:	8082                	ret

0000000080004900 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    80004900:	6908                	ld	a0,16(a0)
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    80004902:	1101                	addi	sp,sp,-32
    80004904:	ec06                	sd	ra,24(sp)
    80004906:	e42e                	sd	a1,8(sp)
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    80004908:	d76ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000490c:	65a2                	ld	a1,8(sp)
    8000490e:	d94ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004912:	4599                	li	a1,6
    80004914:	f43ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
}
    80004918:	60e2                	ld	ra,24(sp)
    8000491a:	00056503          	lwu	a0,0(a0)
    8000491e:	6105                	addi	sp,sp,32
    80004920:	8082                	ret

0000000080004922 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    80004922:	6908                	ld	a0,16(a0)
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    80004924:	1101                	addi	sp,sp,-32
    80004926:	ec06                	sd	ra,24(sp)
    80004928:	e42e                	sd	a1,8(sp)
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    8000492a:	d54ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000492e:	65a2                	ld	a1,8(sp)
    80004930:	d72ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004934:	45a1                	li	a1,8
    80004936:	f21ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
}
    8000493a:	60e2                	ld	ra,24(sp)
    8000493c:	00056503          	lwu	a0,0(a0)
    80004940:	6105                	addi	sp,sp,32
    80004942:	8082                	ret

0000000080004944 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextm>:
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
      ->allocator_.AllocatePersistentBuffer(bytes);
    80004944:	6d1c                	ld	a5,24(a0)
    80004946:	6be8                	ld	a0,208(a5)
    80004948:	611c                	ld	a5,0(a0)
    8000494a:	6f9c                	ld	a5,24(a5)
    8000494c:	8782                	jr	a5

000000008000494e <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
    8000494e:	6d1c                	ld	a5,24(a0)
  return handle->data;
    80004950:	058e                	slli	a1,a1,0x3
    80004952:	1187b783          	ld	a5,280(a5)
    80004956:	97ae                	add	a5,a5,a1
}
    80004958:	6388                	ld	a0,0(a5)
    8000495a:	8082                	ret

000000008000495c <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
  MicroInterpreter* interpreter =
    8000495c:	6d1c                	ld	a5,24(a0)
                                          int tensor_idx) {
    8000495e:	86ae                	mv	a3,a1
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    80004960:	6be8                	ld	a0,208(a5)
    80004962:	7ff0                	ld	a2,248(a5)
    80004964:	638c                	ld	a1,0(a5)
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
    80004966:	6118                	ld	a4,0(a0)
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    80004968:	00873803          	ld	a6,8(a4)
    8000496c:	1007a703          	lw	a4,256(a5)
    80004970:	8802                	jr	a6

0000000080004972 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:
}

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
    80004972:	6d1c                	ld	a5,24(a0)
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
              .tensors[tensor_idx];
    80004974:	4561                	li	a0,24
    80004976:	02a585b3          	mul	a1,a1,a0
              .GetAllocations()[interpreter->get_subgraph_index()]
    8000497a:	1007a703          	lw	a4,256(a5)
              .tensors[tensor_idx];
    8000497e:	7ffc                	ld	a5,248(a5)
    80004980:	0712                	slli	a4,a4,0x4
    80004982:	97ba                	add	a5,a5,a4
    80004984:	6788                	ld	a0,8(a5)
}
    80004986:	952e                	add	a0,a0,a1
    80004988:	8082                	ret

000000008000498a <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    8000498a:	6d1c                	ld	a5,24(a0)
  return kTfLiteOk;
}
    8000498c:	4501                	li	a0,0
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    8000498e:	0d878793          	addi	a5,a5,216
    80004992:	e19c                	sd	a5,0(a1)
}
    80004994:	8082                	ret

0000000080004996 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextmPi>:
  MicroInterpreter* interpreter =
    80004996:	6d1c                	ld	a5,24(a0)
                                                           int* buffer_idx) {
    80004998:	86b2                	mv	a3,a2
  return interpreter->allocator_.RequestScratchBufferInArena(
    8000499a:	6be8                	ld	a0,208(a5)
    8000499c:	1007a603          	lw	a2,256(a5)
    800049a0:	0eb0006f          	j	8000528a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi>

00000000800049a4 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
    800049a4:	715d                	addi	sp,sp,-80
    800049a6:	f032                	sd	a2,32(sp)
    800049a8:	f436                	sd	a3,40(sp)
    800049aa:	f83a                	sd	a4,48(sp)
    800049ac:	fc3e                	sd	a5,56(sp)
    800049ae:	e0c2                	sd	a6,64(sp)
    800049b0:	e4c6                	sd	a7,72(sp)
  MicroInterpreter* interpreter =
    800049b2:	6d1c                	ld	a5,24(a0)
  va_start(args, format);
    800049b4:	1010                	addi	a2,sp,32
                                     const char* format, ...) {
    800049b6:	ec06                	sd	ra,24(sp)
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    800049b8:	6b88                	ld	a0,16(a5)
  va_start(args, format);
    800049ba:	e432                	sd	a2,8(sp)
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    800049bc:	611c                	ld	a5,0(a0)
    800049be:	6b9c                	ld	a5,16(a5)
    800049c0:	9782                	jalr	a5
}
    800049c2:	60e2                	ld	ra,24(sp)
    800049c4:	6161                	addi	sp,sp,80
    800049c6:	8082                	ret

00000000800049c8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
  return (v < low) || (high < v);
    800049c8:	09100793          	li	a5,145
    800049cc:	00a7ed63          	bltu	a5,a0,800049e6 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x1e>
    800049d0:	02051793          	slli	a5,a0,0x20
    800049d4:	01d7d513          	srli	a0,a5,0x1d
    800049d8:	00087797          	auipc	a5,0x87
    800049dc:	d2878793          	addi	a5,a5,-728 # 8008b700 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>
    800049e0:	953e                	add	a0,a0,a5
    800049e2:	6108                	ld	a0,0(a0)
    800049e4:	8082                	ret
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    800049e6:	00086517          	auipc	a0,0x86
    800049ea:	b7a50513          	addi	a0,a0,-1158 # 8008a560 <space4_img+0x24d0>
}
    800049ee:	8082                	ret

00000000800049f0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhmPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
    800049f0:	7139                	addi	sp,sp,-64
    800049f2:	fc06                	sd	ra,56(sp)
    800049f4:	f822                	sd	s0,48(sp)
    800049f6:	f426                	sd	s1,40(sp)
    800049f8:	f04a                	sd	s2,32(sp)
    800049fa:	ec4e                	sd	s3,24(sp)
    800049fc:	e852                	sd	s4,16(sp)
    800049fe:	e456                	sd	s5,8(sp)
    80004a00:	e05a                	sd	s6,0(sp)
      output_tensors_(nullptr) {
    80004a02:	01850b13          	addi	s6,a0,24
MicroInterpreter::MicroInterpreter(const Model* model,
    80004a06:	842a                	mv	s0,a0
      output_tensors_(nullptr) {
    80004a08:	e91c                	sd	a5,16(a0)
MicroInterpreter::MicroInterpreter(const Model* model,
    80004a0a:	84ae                	mv	s1,a1
      output_tensors_(nullptr) {
    80004a0c:	e10c                	sd	a1,0(a0)
    80004a0e:	e510                	sd	a2,8(a0)
    80004a10:	4581                	li	a1,0
    80004a12:	0b800613          	li	a2,184
    80004a16:	855a                	mv	a0,s6
MicroInterpreter::MicroInterpreter(const Model* model,
    80004a18:	893e                	mv	s2,a5
    80004a1a:	8a36                	mv	s4,a3
    80004a1c:	8aba                	mv	s5,a4
    80004a1e:	89c2                	mv	s3,a6
      output_tensors_(nullptr) {
    80004a20:	c2cfd0ef          	jal	ra,80001e4c <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    80004a24:	864a                	mv	a2,s2
    80004a26:	85d6                	mv	a1,s5
    80004a28:	8552                	mv	a0,s4
    80004a2a:	75c000ef          	jal	ra,80005186 <_ZN6tflite14MicroAllocator6CreateEPhmPNS_13ErrorReporterE>
      output_tensors_(nullptr) {
    80004a2e:	e868                	sd	a0,208(s0)
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    80004a30:	86aa                	mv	a3,a0
      output_tensors_(nullptr) {
    80004a32:	8626                	mv	a2,s1
    80004a34:	85da                	mv	a1,s6
    80004a36:	0d840513          	addi	a0,s0,216
    80004a3a:	c5bff0ef          	jal	ra,80004694 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
  context_.ReportError = ReportOpError;
    80004a3e:	00000797          	auipc	a5,0x0
    80004a42:	f6678793          	addi	a5,a5,-154 # 800049a4 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>
    80004a46:	e03c                	sd	a5,64(s0)
  context_.GetTensor = GetTensor;
    80004a48:	00000797          	auipc	a5,0x0
    80004a4c:	f1478793          	addi	a5,a5,-236 # 8000495c <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>
    80004a50:	fc5c                	sd	a5,184(s0)
  context_.GetEvalTensor = GetEvalTensor;
    80004a52:	00000797          	auipc	a5,0x0
    80004a56:	f2078793          	addi	a5,a5,-224 # 80004972 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>
  context_.profiler = profiler;
    80004a5a:	09343023          	sd	s3,128(s0)
}
    80004a5e:	70e2                	ld	ra,56(sp)
      output_tensors_(nullptr) {
    80004a60:	10040823          	sb	zero,272(s0)
    80004a64:	10043c23          	sd	zero,280(s0)
    80004a68:	12043023          	sd	zero,288(s0)
    80004a6c:	12043423          	sd	zero,296(s0)
  context_.impl_ = static_cast<void*>(this);
    80004a70:	f800                	sd	s0,48(s0)
  context_.GetEvalTensor = GetEvalTensor;
    80004a72:	e07c                	sd	a5,192(s0)
  initialization_status_ = kTfLiteOk;
    80004a74:	10042a23          	sw	zero,276(s0)
}
    80004a78:	7442                	ld	s0,48(sp)
    80004a7a:	74a2                	ld	s1,40(sp)
    80004a7c:	7902                	ld	s2,32(sp)
    80004a7e:	69e2                	ld	s3,24(sp)
    80004a80:	6a42                	ld	s4,16(sp)
    80004a82:	6aa2                	ld	s5,8(sp)
    80004a84:	6b02                	ld	s6,0(sp)
    80004a86:	6121                	addi	sp,sp,64
    80004a88:	8082                	ret

0000000080004a8a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
    80004a8a:	1141                	addi	sp,sp,-16
    80004a8c:	e406                	sd	ra,8(sp)
    return model_->subgraphs()->Get(0)->inputs()->size();
    80004a8e:	bf0ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80004a92:	4581                	li	a1,0
    80004a94:	c0eff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80004a98:	4599                	li	a1,6
    80004a9a:	dbdff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
    80004a9e:	60a2                	ld	ra,8(sp)
    80004aa0:	00056503          	lwu	a0,0(a0)
    80004aa4:	0141                	addi	sp,sp,16
    80004aa6:	8082                	ret

0000000080004aa8 <_ZN6tflite16MicroInterpreter5inputEm>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    80004aa8:	1101                	addi	sp,sp,-32
    80004aaa:	e822                	sd	s0,16(sp)
    80004aac:	842a                	mv	s0,a0
  const size_t length = inputs_size();
    80004aae:	6108                	ld	a0,0(a0)
TfLiteTensor* MicroInterpreter::input(size_t index) {
    80004ab0:	ec06                	sd	ra,24(sp)
    80004ab2:	e42e                	sd	a1,8(sp)
  const size_t length = inputs_size();
    80004ab4:	fd7ff0ef          	jal	ra,80004a8a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  if (index >= length) {
    80004ab8:	6622                	ld	a2,8(sp)
    80004aba:	00a66f63          	bltu	a2,a0,80004ad8 <_ZN6tflite16MicroInterpreter5inputEm+0x30>
    80004abe:	86aa                	mv	a3,a0
    TF_LITE_REPORT_ERROR(error_reporter_,
    80004ac0:	6808                	ld	a0,16(s0)
    80004ac2:	00087597          	auipc	a1,0x87
    80004ac6:	0d658593          	addi	a1,a1,214 # 8008bb98 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x498>
    80004aca:	5e2020ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80004ace:	4501                	li	a0,0
}
    80004ad0:	60e2                	ld	ra,24(sp)
    80004ad2:	6442                	ld	s0,16(sp)
    80004ad4:	6105                	addi	sp,sp,32
    80004ad6:	8082                	ret
  return input_tensors_[index];
    80004ad8:	12043783          	ld	a5,288(s0)
    80004adc:	060e                	slli	a2,a2,0x3
    80004ade:	963e                	add	a2,a2,a5
    80004ae0:	6208                	ld	a0,0(a2)
    80004ae2:	b7fd                	j	80004ad0 <_ZN6tflite16MicroInterpreter5inputEm+0x28>

0000000080004ae4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    80004ae4:	1141                	addi	sp,sp,-16
    80004ae6:	e406                	sd	ra,8(sp)
    return model_->subgraphs()->Get(0)->outputs()->size();
    80004ae8:	b96ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80004aec:	4581                	li	a1,0
    80004aee:	bb4ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004af2:	45a1                	li	a1,8
    80004af4:	d63ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
    80004af8:	60a2                	ld	ra,8(sp)
    80004afa:	00056503          	lwu	a0,0(a0)
    80004afe:	0141                	addi	sp,sp,16
    80004b00:	8082                	ret

0000000080004b02 <_ZN6tflite16MicroInterpreter6outputEm>:
TfLiteTensor* MicroInterpreter::output(size_t index) {
    80004b02:	1101                	addi	sp,sp,-32
    80004b04:	e822                	sd	s0,16(sp)
    80004b06:	842a                	mv	s0,a0
  const size_t length = outputs_size();
    80004b08:	6108                	ld	a0,0(a0)
TfLiteTensor* MicroInterpreter::output(size_t index) {
    80004b0a:	ec06                	sd	ra,24(sp)
    80004b0c:	e42e                	sd	a1,8(sp)
  const size_t length = outputs_size();
    80004b0e:	fd7ff0ef          	jal	ra,80004ae4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  if (index >= length) {
    80004b12:	6622                	ld	a2,8(sp)
    80004b14:	00a66f63          	bltu	a2,a0,80004b32 <_ZN6tflite16MicroInterpreter6outputEm+0x30>
    80004b18:	86aa                	mv	a3,a0
    TF_LITE_REPORT_ERROR(error_reporter_,
    80004b1a:	6808                	ld	a0,16(s0)
    80004b1c:	00087597          	auipc	a1,0x87
    80004b20:	0ac58593          	addi	a1,a1,172 # 8008bbc8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x4c8>
    80004b24:	588020ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80004b28:	4501                	li	a0,0
}
    80004b2a:	60e2                	ld	ra,24(sp)
    80004b2c:	6442                	ld	s0,16(sp)
    80004b2e:	6105                	addi	sp,sp,32
    80004b30:	8082                	ret
  return output_tensors_[index];
    80004b32:	12843783          	ld	a5,296(s0)
    80004b36:	060e                	slli	a2,a2,0x3
    80004b38:	963e                	add	a2,a2,a5
    80004b3a:	6208                	ld	a0,0(a2)
    80004b3c:	b7fd                	j	80004b2a <_ZN6tflite16MicroInterpreter6outputEm+0x28>

0000000080004b3e <_ZN6tflite16MicroInterpreterD1Ev>:
  if (graph_.GetAllocations() != nullptr) {
    80004b3e:	7d7c                	ld	a5,248(a0)
MicroInterpreter::~MicroInterpreter() {
    80004b40:	1141                	addi	sp,sp,-16
    80004b42:	e022                	sd	s0,0(sp)
    80004b44:	e406                	sd	ra,8(sp)
    graph_.FreeSubgraphs();
    80004b46:	0d850413          	addi	s0,a0,216
  if (graph_.GetAllocations() != nullptr) {
    80004b4a:	c781                	beqz	a5,80004b52 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
    graph_.FreeSubgraphs();
    80004b4c:	8522                	mv	a0,s0
    80004b4e:	8c7ff0ef          	jal	ra,80004414 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
    80004b52:	8522                	mv	a0,s0
}
    80004b54:	6402                	ld	s0,0(sp)
    80004b56:	60a2                	ld	ra,8(sp)
    80004b58:	0141                	addi	sp,sp,16
MicroInterpreter::~MicroInterpreter() {
    80004b5a:	819ff06f          	j	80004372 <_ZN6tflite10MicroGraphD1Ev>

0000000080004b5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    80004b5e:	7171                	addi	sp,sp,-176
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    80004b60:	0d850793          	addi	a5,a0,216
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    80004b64:	ed26                	sd	s1,152(sp)
    80004b66:	fcd6                	sd	s5,120(sp)
    80004b68:	f506                	sd	ra,168(sp)
    80004b6a:	f122                	sd	s0,160(sp)
    80004b6c:	e94a                	sd	s2,144(sp)
    80004b6e:	e54e                	sd	s3,136(sp)
    80004b70:	e152                	sd	s4,128(sp)
    80004b72:	f8da                	sd	s6,112(sp)
    80004b74:	f4de                	sd	s7,104(sp)
    80004b76:	f0e2                	sd	s8,96(sp)
    80004b78:	ece6                	sd	s9,88(sp)
    80004b7a:	e8ea                	sd	s10,80(sp)
    80004b7c:	e4ee                	sd	s11,72(sp)
    80004b7e:	84aa                	mv	s1,a0
    80004b80:	4a81                	li	s5,0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    80004b82:	e43e                	sd	a5,8(sp)
    80004b84:	6522                	ld	a0,8(sp)
    80004b86:	9ffff0ef          	jal	ra,80004584 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    80004b8a:	000a859b          	sext.w	a1,s5
    80004b8e:	e02e                	sd	a1,0(sp)
    80004b90:	22a5d863          	bge	a1,a0,80004dc0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x262>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    80004b94:	6080                	ld	s0,0(s1)
    80004b96:	8522                	mv	a0,s0
    80004b98:	ae6ff0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80004b9c:	6582                	ld	a1,0(sp)
    80004b9e:	b04ff0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004ba2:	89aa                	mv	s3,a0
    TFLITE_DCHECK(subgraph != nullptr);
    80004ba4:	e119                	bnez	a0,80004baa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
    80004ba6:	5e9080ef          	jal	ra,8000d98e <abort>
    auto field_offset = GetOptionalFieldOffset(field);
    80004baa:	4599                	li	a1,6
    80004bac:	8522                	mv	a0,s0
    80004bae:	ab8ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004bb2:	4a01                	li	s4,0
    80004bb4:	c509                	beqz	a0,80004bbe <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x60>
    auto p = data_ + field_offset;
    80004bb6:	942a                	add	s0,s0,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004bb8:	00046a03          	lwu	s4,0(s0)
    80004bbc:	9a22                	add	s4,s4,s0
        allocator_.GetBuiltinDataAllocator();
    80004bbe:	68e8                	ld	a0,208(s1)
    80004bc0:	004a9b93          	slli	s7,s5,0x4
    for (size_t i = 0; i < operators_size; ++i) {
    80004bc4:	4901                	li	s2,0
        allocator_.GetBuiltinDataAllocator();
    80004bc6:	796000ef          	jal	ra,8000535c <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    80004bca:	e02a                	sd	a0,0(sp)
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    80004bcc:	854e                	mv	a0,s3
    80004bce:	f14ff0ef          	jal	ra,800042e2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    for (size_t i = 0; i < operators_size; ++i) {
    80004bd2:	02051793          	slli	a5,a0,0x20
    80004bd6:	9381                	srli	a5,a5,0x20
    80004bd8:	e83e                	sd	a5,16(sp)
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80004bda:	004a0793          	addi	a5,s4,4
    80004bde:	ec3e                	sd	a5,24(sp)
    80004be0:	05800d13          	li	s10,88
      if (op_type == BuiltinOperator_CUSTOM) {
    80004be4:	02000d93          	li	s11,32
    for (size_t i = 0; i < operators_size; ++i) {
    80004be8:	67c2                	ld	a5,16(sp)
    80004bea:	1cf97963          	bgeu	s2,a5,80004dbc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x25e>
    auto field_offset = GetOptionalFieldOffset(field);
    80004bee:	45a9                	li	a1,10
    80004bf0:	854e                	mv	a0,s3
    80004bf2:	a74ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004bf6:	1c050763          	beqz	a0,80004dc4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x266>
    auto p = data_ + field_offset;
    80004bfa:	00a98433          	add	s0,s3,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004bfe:	00046503          	lwu	a0,0(s0)
    FLATBUFFERS_ASSERT(i < size());
    80004c02:	0009079b          	sext.w	a5,s2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004c06:	942a                	add	s0,s0,a0
    FLATBUFFERS_ASSERT(i < size());
    80004c08:	4018                	lw	a4,0(s0)
    80004c0a:	02e7e263          	bltu	a5,a4,80004c2e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    80004c0e:	00086697          	auipc	a3,0x86
    80004c12:	dfa68693          	addi	a3,a3,-518 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80004c16:	00087617          	auipc	a2,0x87
    80004c1a:	fe260613          	addi	a2,a2,-30 # 8008bbf8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x4f8>
    80004c1e:	10600593          	li	a1,262
    80004c22:	00086517          	auipc	a0,0x86
    80004c26:	eb650513          	addi	a0,a0,-330 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80004c2a:	575080ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    80004c2e:	00291793          	slli	a5,s2,0x2
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80004c32:	0411                	addi	s0,s0,4
    p += i * sizeof(uoffset_t);
    80004c34:	943e                	add	s0,s0,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004c36:	00046783          	lwu	a5,0(s0)
    auto field_offset = GetOptionalFieldOffset(field);
    80004c3a:	4591                	li	a1,4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004c3c:	943e                	add	s0,s0,a5
    auto field_offset = GetOptionalFieldOffset(field);
    80004c3e:	8522                	mv	a0,s0
    80004c40:	a26ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80004c44:	4781                	li	a5,0
    80004c46:	c119                	beqz	a0,80004c4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xee>
    80004c48:	9522                	add	a0,a0,s0
    80004c4a:	411c                	lw	a5,0(a0)
      if (index >= opcodes->size()) {
    80004c4c:	000a2703          	lw	a4,0(s4)
      const size_t index = op->opcode_index();
    80004c50:	02079c93          	slli	s9,a5,0x20
    80004c54:	020cdc93          	srli	s9,s9,0x20
      if (index >= opcodes->size()) {
    80004c58:	00e7eb63          	bltu	a5,a4,80004c6e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x110>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    80004c5c:	85e6                	mv	a1,s9
    80004c5e:	00087517          	auipc	a0,0x87
    80004c62:	09250513          	addi	a0,a0,146 # 8008bcf0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x5f0>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    80004c66:	86eff0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    80004c6a:	4785                	li	a5,1
    80004c6c:	a0a1                	j	80004cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
    p += i * sizeof(uoffset_t);
    80004c6e:	67e2                	ld	a5,24(sp)
    80004c70:	002c9c13          	slli	s8,s9,0x2
    80004c74:	03a90b33          	mul	s6,s2,s10
    80004c78:	9c3e                	add	s8,s8,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80004c7a:	000c6783          	lwu	a5,0(s8)
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    80004c7e:	6890                	ld	a2,16(s1)
    80004c80:	648c                	ld	a1,8(s1)
    80004c82:	9c3e                	add	s8,s8,a5
                                          .node_and_registrations[i]
    80004c84:	7cfc                	ld	a5,248(s1)
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    80004c86:	8562                	mv	a0,s8
                                          .node_and_registrations[i]
    80004c88:	97de                	add	a5,a5,s7
    80004c8a:	6394                	ld	a3,0(a5)
    80004c8c:	96da                	add	a3,a3,s6
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    80004c8e:	05068693          	addi	a3,a3,80
    80004c92:	45a020ef          	jal	ra,800070ec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    80004c96:	cd1d                	beqz	a0,80004cd4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x176>
    80004c98:	e02a                	sd	a0,0(sp)
        MicroPrintf("Failed to get registration from op code %s\n ",
    80004c9a:	8562                	mv	a0,s8
    80004c9c:	54e020ef          	jal	ra,800071ea <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    80004ca0:	d29ff0ef          	jal	ra,800049c8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
    80004ca4:	85aa                	mv	a1,a0
    80004ca6:	00087517          	auipc	a0,0x87
    80004caa:	07a50513          	addi	a0,a0,122 # 8008bd20 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x620>
    80004cae:	826ff0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
        return status;
    80004cb2:	6782                	ld	a5,0(sp)
}
    80004cb4:	70aa                	ld	ra,168(sp)
    80004cb6:	740a                	ld	s0,160(sp)
    80004cb8:	64ea                	ld	s1,152(sp)
    80004cba:	694a                	ld	s2,144(sp)
    80004cbc:	69aa                	ld	s3,136(sp)
    80004cbe:	6a0a                	ld	s4,128(sp)
    80004cc0:	7ae6                	ld	s5,120(sp)
    80004cc2:	7b46                	ld	s6,112(sp)
    80004cc4:	7ba6                	ld	s7,104(sp)
    80004cc6:	7c06                	ld	s8,96(sp)
    80004cc8:	6ce6                	ld	s9,88(sp)
    80004cca:	6d46                	ld	s10,80(sp)
    80004ccc:	6da6                	ld	s11,72(sp)
    80004cce:	853e                	mv	a0,a5
    80004cd0:	614d                	addi	sp,sp,176
    80004cd2:	8082                	ret
                                     .node_and_registrations[i]
    80004cd4:	7cfc                	ld	a5,248(s1)
    80004cd6:	97de                	add	a5,a5,s7
                                     .registration;
    80004cd8:	639c                	ld	a5,0(a5)
    80004cda:	97da                	add	a5,a5,s6
    80004cdc:	6bbc                	ld	a5,80(a5)
      if (registration == nullptr) {
    80004cde:	e799                	bnez	a5,80004cec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18e>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    80004ce0:	85e6                	mv	a1,s9
    80004ce2:	00087517          	auipc	a0,0x87
    80004ce6:	06e50513          	addi	a0,a0,110 # 8008bd50 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x650>
    80004cea:	bfb5                	j	80004c66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
      BuiltinOperator op_type =
    80004cec:	0287ac03          	lw	s8,40(a5)
      unsigned char* builtin_data = nullptr;
    80004cf0:	f402                	sd	zero,40(sp)
    auto field_offset = GetOptionalFieldOffset(field);
    80004cf2:	45b9                	li	a1,14
    80004cf4:	8522                	mv	a0,s0
      if (op_type == BuiltinOperator_CUSTOM) {
    80004cf6:	07bc1f63          	bne	s8,s11,80004d74 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x216>
    80004cfa:	96cff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004cfe:	e135                	bnez	a0,80004d62 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x204>
      size_t custom_data_size = 0;
    80004d00:	4c01                	li	s8,0
      const char* custom_data = nullptr;
    80004d02:	4c81                	li	s9,0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80004d04:	4599                	li	a1,6
    80004d06:	8522                	mv	a0,s0
    80004d08:	b4fff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    80004d0c:	85aa                	mv	a1,a0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    80004d0e:	68e8                	ld	a0,208(s1)
    80004d10:	1810                	addi	a2,sp,48
    80004d12:	636000ef          	jal	ra,80005348 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    80004d16:	87aa                	mv	a5,a0
    80004d18:	fd51                	bnez	a0,80004cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
    80004d1a:	45a1                	li	a1,8
    80004d1c:	8522                	mv	a0,s0
    80004d1e:	b39ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    80004d22:	85aa                	mv	a1,a0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    80004d24:	68e8                	ld	a0,208(s1)
    80004d26:	1830                	addi	a2,sp,56
    80004d28:	620000ef          	jal	ra,80005348 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    80004d2c:	87aa                	mv	a5,a0
    80004d2e:	f159                	bnez	a0,80004cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    80004d30:	7cfc                	ld	a5,248(s1)
      *node = {};
    80004d32:	05000613          	li	a2,80
    80004d36:	4581                	li	a1,0
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    80004d38:	97de                	add	a5,a5,s7
    80004d3a:	639c                	ld	a5,0(a5)
    for (size_t i = 0; i < operators_size; ++i) {
    80004d3c:	0905                	addi	s2,s2,1
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    80004d3e:	9b3e                	add	s6,s6,a5
      *node = {};
    80004d40:	855a                	mv	a0,s6
    80004d42:	90afd0ef          	jal	ra,80001e4c <memset>
      node->inputs = inputs_array;
    80004d46:	77c2                	ld	a5,48(sp)
      node->custom_initial_data = custom_data;
    80004d48:	039b3823          	sd	s9,48(s6)
      node->custom_initial_data_size = custom_data_size;
    80004d4c:	038b2c23          	sw	s8,56(s6)
      node->inputs = inputs_array;
    80004d50:	00fb3023          	sd	a5,0(s6)
      node->outputs = outputs_array;
    80004d54:	77e2                	ld	a5,56(sp)
    80004d56:	00fb3423          	sd	a5,8(s6)
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    80004d5a:	77a2                	ld	a5,40(sp)
    80004d5c:	02fb3423          	sd	a5,40(s6)
    for (size_t i = 0; i < operators_size; ++i) {
    80004d60:	b561                	j	80004be8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    auto p = data_ + field_offset;
    80004d62:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004d64:	00056783          	lwu	a5,0(a0)
    80004d68:	953e                	add	a0,a0,a5
          custom_data_size = op->custom_options()->size();
    80004d6a:	00056c03          	lwu	s8,0(a0)
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80004d6e:	00450c93          	addi	s9,a0,4
    80004d72:	bf49                	j	80004d04 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1a6>
    auto field_offset = GetOptionalFieldOffset(field);
    80004d74:	8f2ff0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80004d78:	c911                	beqz	a0,80004d8c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22e>
          MicroPrintf(
    80004d7a:	8562                	mv	a0,s8
    80004d7c:	c4dff0ef          	jal	ra,800049c8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
    80004d80:	85aa                	mv	a1,a0
    80004d82:	00087517          	auipc	a0,0x87
    80004d86:	ff650513          	addi	a0,a0,-10 # 8008bd78 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x678>
    80004d8a:	bdf1                	j	80004c66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
            op_resolver_.GetOpDataParser(op_type);
    80004d8c:	6488                	ld	a0,8(s1)
    80004d8e:	85e2                	mv	a1,s8
    80004d90:	611c                	ld	a5,0(a0)
    80004d92:	63bc                	ld	a5,64(a5)
    80004d94:	9782                	jalr	a5
    80004d96:	87aa                	mv	a5,a0
        if (parser == nullptr) {
    80004d98:	e911                	bnez	a0,80004dac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x24e>
          MicroPrintf("Did not find a parser for %s",
    80004d9a:	8562                	mv	a0,s8
    80004d9c:	c2dff0ef          	jal	ra,800049c8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
    80004da0:	85aa                	mv	a1,a0
    80004da2:	00087517          	auipc	a0,0x87
    80004da6:	01e50513          	addi	a0,a0,30 # 8008bdc0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x6c0>
    80004daa:	bd75                	j	80004c66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    80004dac:	6602                	ld	a2,0(sp)
    80004dae:	688c                	ld	a1,16(s1)
    80004db0:	1034                	addi	a3,sp,40
    80004db2:	8522                	mv	a0,s0
    80004db4:	9782                	jalr	a5
    80004db6:	87aa                	mv	a5,a0
    80004db8:	d521                	beqz	a0,80004d00 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1a2>
    80004dba:	bded                	j	80004cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    80004dbc:	0a85                	addi	s5,s5,1
    80004dbe:	b3d9                	j	80004b84 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x26>
  return kTfLiteOk;
    80004dc0:	4781                	li	a5,0
    80004dc2:	bdcd                	j	80004cb4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
  uoffset_t size() const { return EndianScalar(length_); }
    80004dc4:	00002783          	lw	a5,0(zero) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
    80004dc8:	9002                	ebreak

0000000080004dca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    80004dca:	715d                	addi	sp,sp,-80
    80004dcc:	e0a2                	sd	s0,64(sp)
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    80004dce:	610c                	ld	a1,0(a0)
TfLiteStatus MicroInterpreter::AllocateTensors() {
    80004dd0:	842a                	mv	s0,a0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    80004dd2:	6968                	ld	a0,208(a0)
TfLiteStatus MicroInterpreter::AllocateTensors() {
    80004dd4:	e486                	sd	ra,72(sp)
    80004dd6:	fc26                	sd	s1,56(sp)
    80004dd8:	f84a                	sd	s2,48(sp)
    80004dda:	f44e                	sd	s3,40(sp)
    80004ddc:	f052                	sd	s4,32(sp)
    80004dde:	ec56                	sd	s5,24(sp)
    80004de0:	e85a                	sd	s6,16(sp)
    80004de2:	e45e                	sd	s7,8(sp)
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    80004de4:	3e6000ef          	jal	ra,800051ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    80004de8:	e51d                	bnez	a0,80004e16 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80004dea:	6808                	ld	a0,16(s0)
    80004dec:	00087597          	auipc	a1,0x87
    80004df0:	ff458593          	addi	a1,a1,-12 # 8008bde0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x6e0>
    80004df4:	2b8020ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    80004df8:	4785                	li	a5,1
    80004dfa:	10f42a23          	sw	a5,276(s0)
    return kTfLiteError;
    80004dfe:	4505                	li	a0,1
}
    80004e00:	60a6                	ld	ra,72(sp)
    80004e02:	6406                	ld	s0,64(sp)
    80004e04:	74e2                	ld	s1,56(sp)
    80004e06:	7942                	ld	s2,48(sp)
    80004e08:	79a2                	ld	s3,40(sp)
    80004e0a:	7a02                	ld	s4,32(sp)
    80004e0c:	6ae2                	ld	s5,24(sp)
    80004e0e:	6b42                	ld	s6,16(sp)
    80004e10:	6ba2                	ld	s7,8(sp)
    80004e12:	6161                	addi	sp,sp,80
    80004e14:	8082                	ret
  graph_.SetSubgraphAllocations(allocations);
    80004e16:	0d840913          	addi	s2,s0,216
    80004e1a:	85aa                	mv	a1,a0
    80004e1c:	854a                	mv	a0,s2
    80004e1e:	8a9ff0ef          	jal	ra,800046c6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    80004e22:	8522                	mv	a0,s0
    80004e24:	d3bff0ef          	jal	ra,80004b5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    80004e28:	fd61                	bnez	a0,80004e00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x36>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    80004e2a:	00000797          	auipc	a5,0x0
    80004e2e:	b1a78793          	addi	a5,a5,-1254 # 80004944 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextm>
    80004e32:	e45c                	sd	a5,136(s0)
  context_.GetExecutionPlan = GetGraph;
    80004e34:	00000797          	auipc	a5,0x0
    80004e38:	b5678793          	addi	a5,a5,-1194 # 8000498a <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>
    80004e3c:	f01c                	sd	a5,32(s0)
  context_.RequestScratchBufferInArena = nullptr;
    80004e3e:	08043c23          	sd	zero,152(s0)
  context_.GetScratchBuffer = nullptr;
    80004e42:	0a043023          	sd	zero,160(s0)
  graph_.InitSubgraphs();
    80004e46:	854a                	mv	a0,s2
    80004e48:	d30ff0ef          	jal	ra,80004378 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    80004e4c:	00000797          	auipc	a5,0x0
    80004e50:	b4a78793          	addi	a5,a5,-1206 # 80004996 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextmPi>
    80004e54:	ec5c                	sd	a5,152(s0)
  graph_.PrepareSubgraphs();
    80004e56:	854a                	mv	a0,s2
    80004e58:	e76ff0ef          	jal	ra,800044ce <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    80004e5c:	7c70                	ld	a2,248(s0)
    80004e5e:	600c                	ld	a1,0(s0)
    80004e60:	6868                	ld	a0,208(s0)
  context_.GetScratchBuffer = GetScratchBuffer;
    80004e62:	00000797          	auipc	a5,0x0
    80004e66:	aec78793          	addi	a5,a5,-1300 # 8000494e <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>
  context_.AllocatePersistentBuffer = nullptr;
    80004e6a:	08043423          	sd	zero,136(s0)
  context_.RequestScratchBufferInArena = nullptr;
    80004e6e:	08043c23          	sd	zero,152(s0)
  context_.GetScratchBuffer = GetScratchBuffer;
    80004e72:	f05c                	sd	a5,160(s0)
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    80004e74:	11840693          	addi	a3,s0,280
    80004e78:	5d8000ef          	jal	ra,80005450 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    80004e7c:	f151                	bnez	a0,80004e00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x36>
          sizeof(TfLiteTensor*) * inputs_size()));
    80004e7e:	6008                	ld	a0,0(s0)
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    80004e80:	6864                	ld	s1,208(s0)
          sizeof(TfLiteTensor*) * inputs_size()));
    80004e82:	c09ff0ef          	jal	ra,80004a8a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    80004e86:	609c                	ld	a5,0(s1)
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    80004e88:	00351593          	slli	a1,a0,0x3
    80004e8c:	8526                	mv	a0,s1
    80004e8e:	6f9c                	ld	a5,24(a5)
  for (size_t i = 0; i < inputs_size(); ++i) {
    80004e90:	4481                	li	s1,0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    80004e92:	9782                	jalr	a5
  input_tensors_ =
    80004e94:	12a43023          	sd	a0,288(s0)
  if (input_tensors_ == nullptr) {
    80004e98:	ed19                	bnez	a0,80004eb6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>
    TF_LITE_REPORT_ERROR(
    80004e9a:	6008                	ld	a0,0(s0)
    80004e9c:	befff0ef          	jal	ra,80004a8a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    80004ea0:	00351613          	slli	a2,a0,0x3
    80004ea4:	00087597          	auipc	a1,0x87
    80004ea8:	f6458593          	addi	a1,a1,-156 # 8008be08 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x708>
    80004eac:	6808                	ld	a0,16(s0)
    80004eae:	1fe020ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    80004eb2:	b7b1                	j	80004dfe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34>
  for (size_t i = 0; i < inputs_size(); ++i) {
    80004eb4:	0485                	addi	s1,s1,1
    80004eb6:	00043983          	ld	s3,0(s0)
    80004eba:	854e                	mv	a0,s3
    80004ebc:	bcfff0ef          	jal	ra,80004a8a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004ec0:	0d043a83          	ld	s5,208(s0)
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    80004ec4:	000abb83          	ld	s7,0(s5)
  for (size_t i = 0; i < inputs_size(); ++i) {
    80004ec8:	04a4fa63          	bgeu	s1,a0,80004f1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x152>
    return *model_->subgraphs()->Get(0)->inputs();
    80004ecc:	854e                	mv	a0,s3
    80004ece:	fb1fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80004ed2:	4581                	li	a1,0
    80004ed4:	fcffe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80004ed8:	4599                	li	a1,6
    80004eda:	97dff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004ede:	0004859b          	sext.w	a1,s1
    80004ee2:	fe8ff0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
    80004ee6:	000bb783          	ld	a5,0(s7) # 800000 <__rom_region_size+0x7725d4>
    80004eea:	7c70                	ld	a2,248(s0)
    80004eec:	86aa                	mv	a3,a0
    80004eee:	4701                	li	a4,0
    80004ef0:	85ce                	mv	a1,s3
    80004ef2:	8556                	mv	a0,s5
    80004ef4:	12043b03          	ld	s6,288(s0)
    80004ef8:	9782                	jalr	a5
    if (input_tensors_[i] == nullptr) {
    80004efa:	12043783          	ld	a5,288(s0)
    80004efe:	00349a13          	slli	s4,s1,0x3
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004f02:	9b52                	add	s6,s6,s4
    80004f04:	00ab3023          	sd	a0,0(s6)
    if (input_tensors_[i] == nullptr) {
    80004f08:	9a3e                	add	s4,s4,a5
    80004f0a:	000a3783          	ld	a5,0(s4)
    80004f0e:	f3dd                	bnez	a5,80004eb4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      TF_LITE_REPORT_ERROR(error_reporter_,
    80004f10:	8626                	mv	a2,s1
    80004f12:	00087597          	auipc	a1,0x87
    80004f16:	f4658593          	addi	a1,a1,-186 # 8008be58 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x758>
    80004f1a:	bf49                	j	80004eac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
          sizeof(TfLiteTensor*) * outputs_size()));
    80004f1c:	854e                	mv	a0,s3
    80004f1e:	bc7ff0ef          	jal	ra,80004ae4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    80004f22:	018bb783          	ld	a5,24(s7)
    80004f26:	00351593          	slli	a1,a0,0x3
    80004f2a:	8556                	mv	a0,s5
    80004f2c:	9782                	jalr	a5
  output_tensors_ =
    80004f2e:	12a43423          	sd	a0,296(s0)
  for (size_t i = 0; i < outputs_size(); ++i) {
    80004f32:	4481                	li	s1,0
  if (output_tensors_ == nullptr) {
    80004f34:	ed01                	bnez	a0,80004f4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
    TF_LITE_REPORT_ERROR(
    80004f36:	6008                	ld	a0,0(s0)
    80004f38:	badff0ef          	jal	ra,80004ae4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
    80004f3c:	00351613          	slli	a2,a0,0x3
    80004f40:	00087597          	auipc	a1,0x87
    80004f44:	f4058593          	addi	a1,a1,-192 # 8008be80 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x780>
    80004f48:	b795                	j	80004eac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
  for (size_t i = 0; i < outputs_size(); ++i) {
    80004f4a:	0485                	addi	s1,s1,1
    80004f4c:	00043a83          	ld	s5,0(s0)
    80004f50:	8556                	mv	a0,s5
    80004f52:	b93ff0ef          	jal	ra,80004ae4 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
    80004f56:	04a4fd63          	bgeu	s1,a0,80004fb0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e6>
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
    80004f5a:	8556                	mv	a0,s5
    80004f5c:	f23fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80004f60:	4581                	li	a1,0
    80004f62:	f41fe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80004f66:	45a1                	li	a1,8
    80004f68:	8efff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004f6c:	0d043b03          	ld	s6,208(s0)
    80004f70:	0004859b          	sext.w	a1,s1
    80004f74:	f56ff0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    80004f78:	000b3783          	ld	a5,0(s6)
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004f7c:	7c70                	ld	a2,248(s0)
    80004f7e:	86aa                	mv	a3,a0
    80004f80:	639c                	ld	a5,0(a5)
    80004f82:	4701                	li	a4,0
    80004f84:	85d6                	mv	a1,s5
    80004f86:	855a                	mv	a0,s6
    80004f88:	12843a03          	ld	s4,296(s0)
    80004f8c:	9782                	jalr	a5
    if (output_tensors_[i] == nullptr) {
    80004f8e:	12843783          	ld	a5,296(s0)
    80004f92:	00349993          	slli	s3,s1,0x3
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    80004f96:	9a4e                	add	s4,s4,s3
    80004f98:	00aa3023          	sd	a0,0(s4)
    if (output_tensors_[i] == nullptr) {
    80004f9c:	99be                	add	s3,s3,a5
    80004f9e:	0009b783          	ld	a5,0(s3)
    80004fa2:	f7c5                	bnez	a5,80004f4a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
      TF_LITE_REPORT_ERROR(error_reporter_,
    80004fa4:	8626                	mv	a2,s1
    80004fa6:	00087597          	auipc	a1,0x87
    80004faa:	f2a58593          	addi	a1,a1,-214 # 8008bed0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x7d0>
    80004fae:	bdfd                	j	80004eac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
  return graph_.ResetVariableTensors();
    80004fb0:	854a                	mv	a0,s2
    80004fb2:	f50ff0ef          	jal	ra,80004702 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    80004fb6:	e40515e3          	bnez	a0,80004e00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x36>
  tensors_allocated_ = true;
    80004fba:	4785                	li	a5,1
    80004fbc:	10f40823          	sb	a5,272(s0)
  return kTfLiteOk;
    80004fc0:	b581                	j	80004e00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x36>

0000000080004fc2 <_ZN6tflite16MicroInterpreter6InvokeEv>:
  if (initialization_status_ != kTfLiteOk) {
    80004fc2:	11452783          	lw	a5,276(a0)
TfLiteStatus MicroInterpreter::Invoke() {
    80004fc6:	1141                	addi	sp,sp,-16
    80004fc8:	e022                	sd	s0,0(sp)
    80004fca:	e406                	sd	ra,8(sp)
    80004fcc:	842a                	mv	s0,a0
  if (initialization_status_ != kTfLiteOk) {
    80004fce:	cf89                	beqz	a5,80004fe8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x26>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80004fd0:	6908                	ld	a0,16(a0)
    80004fd2:	00087597          	auipc	a1,0x87
    80004fd6:	f2658593          	addi	a1,a1,-218 # 8008bef8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x7f8>
    80004fda:	0d2020ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    80004fde:	4505                	li	a0,1
}
    80004fe0:	60a2                	ld	ra,8(sp)
    80004fe2:	6402                	ld	s0,0(sp)
    80004fe4:	0141                	addi	sp,sp,16
    80004fe6:	8082                	ret
  if (!tensors_allocated_) {
    80004fe8:	11054783          	lbu	a5,272(a0)
    80004fec:	cb89                	beqz	a5,80004ffe <_ZN6tflite16MicroInterpreter6InvokeEv+0x3c>
  return graph_.InvokeSubgraph(0);
    80004fee:	0d840513          	addi	a0,s0,216
}
    80004ff2:	6402                	ld	s0,0(sp)
    80004ff4:	60a2                	ld	ra,8(sp)
  return graph_.InvokeSubgraph(0);
    80004ff6:	4581                	li	a1,0
}
    80004ff8:	0141                	addi	sp,sp,16
  return graph_.InvokeSubgraph(0);
    80004ffa:	dacff06f          	j	800045a6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    80004ffe:	dcdff0ef          	jal	ra,80004dca <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    80005002:	d575                	beqz	a0,80004fee <_ZN6tflite16MicroInterpreter6InvokeEv+0x2c>
    80005004:	bff1                	j	80004fe0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>

0000000080005006 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEmm>:
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    80005006:	6508                	ld	a0,8(a0)
    80005008:	611c                	ld	a5,0(a0)
    8000500a:	6f9c                	ld	a5,24(a5)
    8000500c:	8782                	jr	a5

000000008000500e <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
    8000500e:	8082                	ret

0000000080005010 <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
    80005010:	8082                	ret

0000000080005012 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEm>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    80005012:	6508                	ld	a0,8(a0)
    80005014:	4641                	li	a2,16
    80005016:	611c                	ld	a5,0(a0)
    80005018:	6f9c                	ld	a5,24(a5)
    8000501a:	8782                	jr	a5

000000008000501c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
  memory_allocator_->ResetTempAllocations();
    8000501c:	6508                	ld	a0,8(a0)
    8000501e:	611c                	ld	a5,0(a0)
    80005020:	779c                	ld	a5,40(a5)
    80005022:	8782                	jr	a5

0000000080005024 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    80005024:	6508                	ld	a0,8(a0)
    80005026:	4621                	li	a2,8
    80005028:	07000593          	li	a1,112
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    8000502c:	611c                	ld	a5,0(a0)
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    8000502e:	6f9c                	ld	a5,24(a5)
    80005030:	8782                	jr	a5

0000000080005032 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    80005032:	8082                	ret

0000000080005034 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    80005034:	3a00806f          	j	8000d3d4 <_ZdlPv>

0000000080005038 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    80005038:	39c0806f          	j	8000d3d4 <_ZdlPv>

000000008000503c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm>:
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
    8000503c:	1141                	addi	sp,sp,-16
    8000503e:	e022                	sd	s0,0(sp)
    80005040:	e406                	sd	ra,8(sp)
    80005042:	842e                	mv	s0,a1
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    80005044:	e199                	bnez	a1,8000504a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm+0xe>
    80005046:	149080ef          	jal	ra,8000d98e <abort>

  if (scratch_buffer_request_count_ == 0) {
    8000504a:	751c                	ld	a5,40(a0)
    8000504c:	cb89                	beqz	a5,8000505e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm+0x22>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
    8000504e:	6508                	ld	a0,8(a0)
    80005050:	85b2                	mv	a1,a2
    80005052:	058e                	slli	a1,a1,0x3
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
    80005054:	611c                	ld	a5,0(a0)
      memory_allocator_->AllocateFromTail(
    80005056:	4621                	li	a2,8
    80005058:	6f9c                	ld	a5,24(a5)
    8000505a:	9782                	jalr	a5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
    8000505c:	e008                	sd	a0,0(s0)

  return kTfLiteOk;
}
    8000505e:	60a2                	ld	ra,8(sp)
    80005060:	6402                	ld	s0,0(sp)
    80005062:	4501                	li	a0,0
    80005064:	0141                	addi	sp,sp,16
    80005066:	8082                	ret

0000000080005068 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
    80005068:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    8000506a:	45a1                	li	a1,8
    8000506c:	e022                	sd	s0,0(sp)
    8000506e:	e406                	sd	ra,8(sp)
    80005070:	842a                	mv	s0,a0
    80005072:	df5fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005076:	c909                	beqz	a0,80005088 <_ZNK6tflite22QuantizationParameters5scaleEv+0x20>
    auto p = data_ + field_offset;
    80005078:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000507a:	00056783          	lwu	a5,0(a0)
    8000507e:	953e                	add	a0,a0,a5
  }
    80005080:	60a2                	ld	ra,8(sp)
    80005082:	6402                	ld	s0,0(sp)
    80005084:	0141                	addi	sp,sp,16
    80005086:	8082                	ret
    80005088:	4501                	li	a0,0
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    8000508a:	bfdd                	j	80005080 <_ZNK6tflite22QuantizationParameters5scaleEv+0x18>

000000008000508c <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
    8000508c:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    8000508e:	45a9                	li	a1,10
    80005090:	e022                	sd	s0,0(sp)
    80005092:	e406                	sd	ra,8(sp)
    80005094:	842a                	mv	s0,a0
    80005096:	dd1fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000509a:	c909                	beqz	a0,800050ac <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x20>
    auto p = data_ + field_offset;
    8000509c:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000509e:	00056783          	lwu	a5,0(a0)
    800050a2:	953e                	add	a0,a0,a5
  }
    800050a4:	60a2                	ld	ra,8(sp)
    800050a6:	6402                	ld	s0,0(sp)
    800050a8:	0141                	addi	sp,sp,16
    800050aa:	8082                	ret
    800050ac:	4501                	li	a0,0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    800050ae:	bfdd                	j	800050a4 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x18>

00000000800050b0 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
    800050b0:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    800050b2:	4599                	li	a1,6
    800050b4:	e022                	sd	s0,0(sp)
    800050b6:	e406                	sd	ra,8(sp)
    800050b8:	842a                	mv	s0,a0
    800050ba:	dadfe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    800050be:	c901                	beqz	a0,800050ce <_ZNK6tflite6Tensor4typeEv+0x1e>
    800050c0:	942a                	add	s0,s0,a0
    800050c2:	00040503          	lb	a0,0(s0)
  }
    800050c6:	60a2                	ld	ra,8(sp)
    800050c8:	6402                	ld	s0,0(sp)
    800050ca:	0141                	addi	sp,sp,16
    800050cc:	8082                	ret
    800050ce:	4501                	li	a0,0
    800050d0:	bfdd                	j	800050c6 <_ZNK6tflite6Tensor4typeEv+0x16>

00000000800050d2 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
    800050d2:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    800050d4:	45b9                	li	a1,14
    800050d6:	e022                	sd	s0,0(sp)
    800050d8:	e406                	sd	ra,8(sp)
    800050da:	842a                	mv	s0,a0
    800050dc:	d8bfe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    800050e0:	c911                	beqz	a0,800050f4 <_ZNK6tflite6Tensor11is_variableEv+0x22>
    800050e2:	942a                	add	s0,s0,a0
    800050e4:	00044503          	lbu	a0,0(s0)
  }
    800050e8:	60a2                	ld	ra,8(sp)
    800050ea:	6402                	ld	s0,0(sp)
    800050ec:	00a03533          	snez	a0,a0
    800050f0:	0141                	addi	sp,sp,16
    800050f2:	8082                	ret
    800050f4:	4501                	li	a0,0
    800050f6:	bfcd                	j	800050e8 <_ZNK6tflite6Tensor11is_variableEv+0x16>

00000000800050f8 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
    800050f8:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    800050fa:	4591                	li	a1,4
    800050fc:	e022                	sd	s0,0(sp)
    800050fe:	e406                	sd	ra,8(sp)
    80005100:	842a                	mv	s0,a0
    80005102:	d65fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005106:	c909                	beqz	a0,80005118 <_ZNK6tflite8SubGraph7tensorsEv+0x20>
    auto p = data_ + field_offset;
    80005108:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000510a:	00056783          	lwu	a5,0(a0)
    8000510e:	953e                	add	a0,a0,a5
  }
    80005110:	60a2                	ld	ra,8(sp)
    80005112:	6402                	ld	s0,0(sp)
    80005114:	0141                	addi	sp,sp,16
    80005116:	8082                	ret
    80005118:	4501                	li	a0,0
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8000511a:	bfdd                	j	80005110 <_ZNK6tflite8SubGraph7tensorsEv+0x18>

000000008000511c <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
    8000511c:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    8000511e:	45b1                	li	a1,12
    80005120:	e022                	sd	s0,0(sp)
    80005122:	e406                	sd	ra,8(sp)
    80005124:	842a                	mv	s0,a0
    80005126:	d41fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000512a:	c909                	beqz	a0,8000513c <_ZNK6tflite5Model7buffersEv+0x20>
    auto p = data_ + field_offset;
    8000512c:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000512e:	00056783          	lwu	a5,0(a0)
    80005132:	953e                	add	a0,a0,a5
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
  }
    80005134:	60a2                	ld	ra,8(sp)
    80005136:	6402                	ld	s0,0(sp)
    80005138:	0141                	addi	sp,sp,16
    8000513a:	8082                	ret
    8000513c:	4501                	li	a0,0
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
    8000513e:	bfdd                	j	80005134 <_ZNK6tflite5Model7buffersEv+0x18>

0000000080005140 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    80005140:	1101                	addi	sp,sp,-32
    80005142:	ec06                	sd	ra,24(sp)
    80005144:	e822                	sd	s0,16(sp)
    80005146:	e426                	sd	s1,8(sp)
  TFLITE_DCHECK(memory_allocator != nullptr);
    80005148:	e119                	bnez	a0,8000514e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xe>
    8000514a:	045080ef          	jal	ra,8000d98e <abort>
    8000514e:	84ae                	mv	s1,a1
  TFLITE_DCHECK(error_reporter != nullptr);
    80005150:	dded                	beqz	a1,8000514a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xa>
      sizeof(MicroAllocator), alignof(MicroAllocator));
    80005152:	611c                	ld	a5,0(a0)
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    80005154:	4621                	li	a2,8
    80005156:	03800593          	li	a1,56
    8000515a:	6f9c                	ld	a5,24(a5)
    8000515c:	842a                	mv	s0,a0
    8000515e:	9782                	jalr	a5
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    80005160:	cd11                	beqz	a0,8000517c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x3c>
      model_is_allocating_(false) {}
    80005162:	00087797          	auipc	a5,0x87
    80005166:	40e78793          	addi	a5,a5,1038 # 8008c570 <_ZTVN6tflite14MicroAllocatorE+0x10>
    8000516a:	e11c                	sd	a5,0(a0)
    8000516c:	e500                	sd	s0,8(a0)
    8000516e:	ed04                	sd	s1,24(a0)
    80005170:	02050023          	sb	zero,32(a0)
    80005174:	02053423          	sd	zero,40(a0)
    80005178:	02053823          	sd	zero,48(a0)
}
    8000517c:	60e2                	ld	ra,24(sp)
    8000517e:	6442                	ld	s0,16(sp)
    80005180:	64a2                	ld	s1,8(sp)
    80005182:	6105                	addi	sp,sp,32
    80005184:	8082                	ret

0000000080005186 <_ZN6tflite14MicroAllocator6CreateEPhmPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    80005186:	1101                	addi	sp,sp,-32
    80005188:	e822                	sd	s0,16(sp)
    8000518a:	e04a                	sd	s2,0(sp)
    8000518c:	842a                	mv	s0,a0
    8000518e:	892e                	mv	s2,a1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    80005190:	45c1                	li	a1,16
                                       ErrorReporter* error_reporter) {
    80005192:	ec06                	sd	ra,24(sp)
    80005194:	e426                	sd	s1,8(sp)
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    80005196:	944a                	add	s0,s0,s2
                                       ErrorReporter* error_reporter) {
    80005198:	84b2                	mv	s1,a2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    8000519a:	b5bfe0ef          	jal	ra,80003cf4 <_ZN6tflite14AlignPointerUpEPhm>
    8000519e:	85aa                	mv	a1,a0
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    800051a0:	40a40633          	sub	a2,s0,a0
    800051a4:	8526                	mv	a0,s1
    800051a6:	a57fe0ef          	jal	ra,80003bfc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm>
}
    800051aa:	6442                	ld	s0,16(sp)
    800051ac:	60e2                	ld	ra,24(sp)
    800051ae:	6902                	ld	s2,0(sp)
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    800051b0:	85a6                	mv	a1,s1
}
    800051b2:	64a2                	ld	s1,8(sp)
    800051b4:	6105                	addi	sp,sp,32
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    800051b6:	b769                	j	80005140 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>

00000000800051b8 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
    800051b8:	02053423          	sd	zero,40(a0)

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    800051bc:	6508                	ld	a0,8(a0)
    800051be:	4621                	li	a2,8
    800051c0:	0c000593          	li	a1,192
    800051c4:	611c                	ld	a5,0(a0)
    800051c6:	6b9c                	ld	a5,16(a5)
    800051c8:	8782                	jr	a5

00000000800051ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    800051ca:	1101                	addi	sp,sp,-32
    800051cc:	ec06                	sd	ra,24(sp)
    800051ce:	e822                	sd	s0,16(sp)
    800051d0:	e426                	sd	s1,8(sp)
    800051d2:	e04a                	sd	s2,0(sp)
  TFLITE_DCHECK(model != nullptr);
    800051d4:	e199                	bnez	a1,800051da <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x10>
    800051d6:	7b8080ef          	jal	ra,8000d98e <abort>
  if (model_is_allocating_) {
    800051da:	02054783          	lbu	a5,32(a0)
    800051de:	842a                	mv	s0,a0
    800051e0:	cb91                	beqz	a5,800051f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
    800051e2:	6d08                	ld	a0,24(a0)
    800051e4:	00087597          	auipc	a1,0x87
    800051e8:	d4458593          	addi	a1,a1,-700 # 8008bf28 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x828>
    800051ec:	6c1010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    800051f0:	4481                	li	s1,0
    800051f2:	a8a1                	j	8000524a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x80>
  model_is_allocating_ = true;
    800051f4:	4785                	li	a5,1
    800051f6:	02f50023          	sb	a5,32(a0)
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    800051fa:	6508                	ld	a0,8(a0)
    800051fc:	892e                	mv	s2,a1
    800051fe:	4621                	li	a2,8
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    80005200:	611c                	ld	a5,0(a0)
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    80005202:	45c1                	li	a1,16
    80005204:	6f9c                	ld	a5,24(a5)
    80005206:	9782                	jalr	a5
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    80005208:	c901                	beqz	a0,80005218 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x4e>
    8000520a:	641c                	ld	a5,8(s0)
      : memory_allocator_(memory_allocator) {}
    8000520c:	00087717          	auipc	a4,0x87
    80005210:	3f470713          	addi	a4,a4,1012 # 8008c600 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE+0x10>
    80005214:	e118                	sd	a4,0(a0)
    80005216:	e51c                	sd	a5,8(a0)
  builtin_data_allocator_ =
    80005218:	e808                	sd	a0,16(s0)
  if (InitScratchBufferData() != kTfLiteOk) {
    8000521a:	8522                	mv	a0,s0
    8000521c:	f9dff0ef          	jal	ra,800051b8 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    80005220:	f961                	bnez	a0,800051f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x26>
      memory_allocator_->AllocateFromTail(
    80005222:	6404                	ld	s1,8(s0)
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
    80005224:	854a                	mv	a0,s2
    80005226:	c59fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
          alignof(SubgraphAllocations)));
    8000522a:	609c                	ld	a5,0(s1)
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
    8000522c:	00056583          	lwu	a1,0(a0)
      memory_allocator_->AllocateFromTail(
    80005230:	4621                	li	a2,8
    80005232:	6f9c                	ld	a5,24(a5)
    80005234:	8526                	mv	a0,s1
    80005236:	0592                	slli	a1,a1,0x4
    80005238:	9782                	jalr	a5
    8000523a:	84aa                	mv	s1,a0
  if (output == nullptr) {
    8000523c:	ed11                	bnez	a0,80005258 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x8e>
    MicroPrintf("Failed to allocate memory for model metadata.");
    8000523e:	00087517          	auipc	a0,0x87
    80005242:	d4250513          	addi	a0,a0,-702 # 8008bf80 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x880>
    80005246:	a8ffe0ef          	jal	ra,80003cd4 <_Z11MicroPrintfPKcz>
}
    8000524a:	60e2                	ld	ra,24(sp)
    8000524c:	6442                	ld	s0,16(sp)
    8000524e:	6902                	ld	s2,0(sp)
    80005250:	8526                	mv	a0,s1
    80005252:	64a2                	ld	s1,8(sp)
    80005254:	6105                	addi	sp,sp,32
    80005256:	8082                	ret
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    80005258:	601c                	ld	a5,0(s0)
    8000525a:	862a                	mv	a2,a0
    8000525c:	85ca                	mv	a1,s2
    8000525e:	7f9c                	ld	a5,56(a5)
    80005260:	8522                	mv	a0,s0
    80005262:	9782                	jalr	a5
    80005264:	f551                	bnez	a0,800051f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x26>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    80005266:	601c                	ld	a5,0(s0)
    80005268:	8626                	mv	a2,s1
    8000526a:	85ca                	mv	a1,s2
    8000526c:	7b9c                	ld	a5,48(a5)
    8000526e:	8522                	mv	a0,s0
    80005270:	9782                	jalr	a5
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    80005272:	dd61                	beqz	a0,8000524a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x80>
    80005274:	bfb5                	j	800051f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x26>

0000000080005276 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    80005276:	6508                	ld	a0,8(a0)
internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
    80005278:	1141                	addi	sp,sp,-16
    8000527a:	e406                	sd	ra,8(sp)
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    8000527c:	9d7fe0ef          	jal	ra,80003c52 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
                     alignof(internal::ScratchBufferRequest)));
}
    80005280:	60a2                	ld	ra,8(sp)
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    80005282:	45a1                	li	a1,8
}
    80005284:	0141                	addi	sp,sp,16
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    80005286:	a6ffe06f          	j	80003cf4 <_ZN6tflite14AlignPointerUpEPhm>

000000008000528a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi>:
                                                         int* buffer_idx) {
    8000528a:	1101                	addi	sp,sp,-32
    8000528c:	e822                	sd	s0,16(sp)
    8000528e:	e426                	sd	s1,8(sp)
    80005290:	e04a                	sd	s2,0(sp)
    80005292:	842a                	mv	s0,a0
    80005294:	892e                	mv	s2,a1
    80005296:	84b6                	mv	s1,a3
    80005298:	ec06                	sd	ra,24(sp)
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    8000529a:	fddff0ef          	jal	ra,80005276 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    8000529e:	7418                	ld	a4,40(s0)
    800052a0:	00850693          	addi	a3,a0,8
    800052a4:	4601                	li	a2,0
  size_t current_node_request_count = 0;
    800052a6:	4781                	li	a5,0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    800052a8:	55fd                	li	a1,-1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    800052aa:	00c70a63          	beq	a4,a2,800052be <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x34>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    800052ae:	0006a803          	lw	a6,0(a3)
    800052b2:	00b81363          	bne	a6,a1,800052b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x2e>
      ++current_node_request_count;
    800052b6:	0785                	addi	a5,a5,1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    800052b8:	0605                	addi	a2,a2,1
    800052ba:	06c1                	addi	a3,a3,16
    800052bc:	b7fd                	j	800052aa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x20>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    800052be:	46ad                	li	a3,11
    800052c0:	02f6f163          	bgeu	a3,a5,800052e2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x58>
    TF_LITE_REPORT_ERROR(
    800052c4:	6c08                	ld	a0,24(s0)
    800052c6:	4631                	li	a2,12
    800052c8:	00087597          	auipc	a1,0x87
    800052cc:	ce858593          	addi	a1,a1,-792 # 8008bfb0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x8b0>
    800052d0:	5dd010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    800052d4:	4505                	li	a0,1
}
    800052d6:	60e2                	ld	ra,24(sp)
    800052d8:	6442                	ld	s0,16(sp)
    800052da:	64a2                	ld	s1,8(sp)
    800052dc:	6902                	ld	s2,0(sp)
    800052de:	6105                	addi	sp,sp,32
    800052e0:	8082                	ret
      &requests[scratch_buffer_request_count_];
    800052e2:	00471793          	slli	a5,a4,0x4
  internal::ScratchBufferRequest* current_request =
    800052e6:	97aa                	add	a5,a5,a0
  *current_request = {};
    800052e8:	0007b423          	sd	zero,8(a5)
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    800052ec:	56fd                	li	a3,-1
  current_request->bytes = bytes;
    800052ee:	0127b023          	sd	s2,0(a5)
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    800052f2:	c794                	sw	a3,8(a5)
  *buffer_idx = scratch_buffer_request_count_;
    800052f4:	c098                	sw	a4,0(s1)
  ++scratch_buffer_request_count_;
    800052f6:	0705                	addi	a4,a4,1
    800052f8:	f418                	sd	a4,40(s0)
  return kTfLiteOk;
    800052fa:	4501                	li	a0,0
    800052fc:	bfe9                	j	800052d6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x4c>

00000000800052fe <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  ResetTempAllocations();
    800052fe:	611c                	ld	a5,0(a0)
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    80005300:	1101                	addi	sp,sp,-32
    80005302:	ec06                	sd	ra,24(sp)
  ResetTempAllocations();
    80005304:	6b9c                	ld	a5,16(a5)
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    80005306:	e822                	sd	s0,16(sp)
    80005308:	e426                	sd	s1,8(sp)
    8000530a:	842a                	mv	s0,a0
    8000530c:	84ae                	mv	s1,a1
  ResetTempAllocations();
    8000530e:	9782                	jalr	a5
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    80005310:	8522                	mv	a0,s0
    80005312:	f65ff0ef          	jal	ra,80005276 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    80005316:	741c                	ld	a5,40(s0)
    80005318:	0521                	addi	a0,a0,8
    8000531a:	4701                	li	a4,0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    8000531c:	56fd                	li	a3,-1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    8000531e:	00e78963          	beq	a5,a4,80005330 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x32>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    80005322:	4110                	lw	a2,0(a0)
    80005324:	00d61363          	bne	a2,a3,8000532a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2c>
      requests[i].node_idx = node_id;
    80005328:	c104                	sw	s1,0(a0)
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    8000532a:	0705                	addi	a4,a4,1
    8000532c:	0541                	addi	a0,a0,16
    8000532e:	bfc5                	j	8000531e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x20>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    80005330:	6408                	ld	a0,8(s0)
    80005332:	00c78593          	addi	a1,a5,12
}
    80005336:	6442                	ld	s0,16(sp)
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    80005338:	611c                	ld	a5,0(a0)
}
    8000533a:	60e2                	ld	ra,24(sp)
    8000533c:	64a2                	ld	s1,8(sp)
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    8000533e:	6b9c                	ld	a5,16(a5)
    80005340:	4621                	li	a2,8
    80005342:	0592                	slli	a1,a1,0x4
}
    80005344:	6105                	addi	sp,sp,32
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    80005346:	8782                	jr	a5

0000000080005348 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
  TFLITE_DCHECK(error_reporter != nullptr);
    80005348:	6d1c                	ld	a5,24(a0)
    8000534a:	e789                	bnez	a5,80005354 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0xc>

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
    8000534c:	1141                	addi	sp,sp,-16
    8000534e:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(error_reporter != nullptr);
    80005350:	63e080ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    80005354:	dde5                	beqz	a1,8000534c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0x4>
    *result = const_cast<kTfLiteArrayType*>(
    80005356:	e20c                	sd	a1,0(a2)
  return internal::FlatBufferVectorToTfLiteTypeArray(
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
    80005358:	4501                	li	a0,0
    8000535a:	8082                	ret

000000008000535c <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
    8000535c:	6908                	ld	a0,16(a0)
    8000535e:	8082                	ret

0000000080005360 <_ZNK11flatbuffers6VectorIxE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
    80005360:	411c                	lw	a5,0(a0)
    80005362:	02f5e463          	bltu	a1,a5,8000538a <_ZNK11flatbuffers6VectorIxE3GetEj+0x2a>
  return_type Get(uoffset_t i) const {
    80005366:	1141                	addi	sp,sp,-16
    FLATBUFFERS_ASSERT(i < size());
    80005368:	00085697          	auipc	a3,0x85
    8000536c:	6a068693          	addi	a3,a3,1696 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80005370:	00086617          	auipc	a2,0x86
    80005374:	a9060613          	addi	a2,a2,-1392 # 8008ae00 <_ZTVN6tflite18MicroErrorReporterE+0x420>
    80005378:	10600593          	li	a1,262
    8000537c:	00085517          	auipc	a0,0x85
    80005380:	75c50513          	addi	a0,a0,1884 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
  return_type Get(uoffset_t i) const {
    80005384:	e406                	sd	ra,8(sp)
    FLATBUFFERS_ASSERT(i < size());
    80005386:	618080ef          	jal	ra,8000d99e <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8000538a:	02059793          	slli	a5,a1,0x20
    8000538e:	01d7d593          	srli	a1,a5,0x1d
    80005392:	952e                	add	a0,a0,a1
  }
    80005394:	00453503          	ld	a0,4(a0)
    80005398:	8082                	ret

000000008000539a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
    8000539a:	411c                	lw	a5,0(a0)
    8000539c:	02f5e463          	bltu	a1,a5,800053c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2a>
  return_type Get(uoffset_t i) const {
    800053a0:	1141                	addi	sp,sp,-16
    FLATBUFFERS_ASSERT(i < size());
    800053a2:	00085697          	auipc	a3,0x85
    800053a6:	66668693          	addi	a3,a3,1638 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    800053aa:	00086617          	auipc	a2,0x86
    800053ae:	95e60613          	addi	a2,a2,-1698 # 8008ad08 <_ZTVN6tflite18MicroErrorReporterE+0x328>
    800053b2:	10600593          	li	a1,262
    800053b6:	00085517          	auipc	a0,0x85
    800053ba:	72250513          	addi	a0,a0,1826 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
  return_type Get(uoffset_t i) const {
    800053be:	e406                	sd	ra,8(sp)
    FLATBUFFERS_ASSERT(i < size());
    800053c0:	5de080ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    800053c4:	02059793          	slli	a5,a1,0x20
    800053c8:	01e7d593          	srli	a1,a5,0x1e
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    800053cc:	0511                	addi	a0,a0,4
    p += i * sizeof(uoffset_t);
    800053ce:	952e                	add	a0,a0,a1
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    800053d0:	00056783          	lwu	a5,0(a0)
  }
    800053d4:	953e                	add	a0,a0,a5
    800053d6:	8082                	ret

00000000800053d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    800053d8:	7139                	addi	sp,sp,-64
    800053da:	f822                	sd	s0,48(sp)
    800053dc:	f426                	sd	s1,40(sp)
    800053de:	f04a                	sd	s2,32(sp)
    800053e0:	ec4e                	sd	s3,24(sp)
    800053e2:	fc06                	sd	ra,56(sp)
    800053e4:	892a                	mv	s2,a0
    800053e6:	89ae                	mv	s3,a1
    800053e8:	8432                	mv	s0,a2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    800053ea:	4481                	li	s1,0
    800053ec:	854e                	mv	a0,s3
    800053ee:	d0bff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    800053f2:	00056783          	lwu	a5,0(a0)
    800053f6:	04f4fb63          	bgeu	s1,a5,8000544c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x74>
    auto* tensor = subgraph->tensors()->Get(i);
    800053fa:	0004859b          	sext.w	a1,s1
    800053fe:	f9dff0ef          	jal	ra,8000539a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    if (tensor->is_variable()) {
    80005402:	cd1ff0ef          	jal	ra,800050d2 <_ZNK6tflite6Tensor11is_variableEv>
    80005406:	c121                	beqz	a0,80005446 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x6e>
      TF_LITE_ENSURE_STATUS(
    80005408:	002c                	addi	a1,sp,8
    8000540a:	8522                	mv	a0,s0
    8000540c:	a13fe0ef          	jal	ra,80003e1e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
    80005410:	e505                	bnez	a0,80005438 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x60>
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    80005412:	00893503          	ld	a0,8(s2)
    80005416:	65a2                	ld	a1,8(sp)
    80005418:	4641                	li	a2,16
    8000541a:	611c                	ld	a5,0(a0)
    8000541c:	6f9c                	ld	a5,24(a5)
    8000541e:	9782                	jalr	a5
      eval_tensors[i].data.data =
    80005420:	e008                	sd	a0,0(s0)
      if (eval_tensors[i].data.data == nullptr) {
    80005422:	e115                	bnez	a0,80005446 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x6e>
        TF_LITE_REPORT_ERROR(error_reporter_,
    80005424:	6622                	ld	a2,8(sp)
    80005426:	01893503          	ld	a0,24(s2)
    8000542a:	00087597          	auipc	a1,0x87
    8000542e:	bbe58593          	addi	a1,a1,-1090 # 8008bfe8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x8e8>
    80005432:	47b010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    80005436:	4505                	li	a0,1
}
    80005438:	70e2                	ld	ra,56(sp)
    8000543a:	7442                	ld	s0,48(sp)
    8000543c:	74a2                	ld	s1,40(sp)
    8000543e:	7902                	ld	s2,32(sp)
    80005440:	69e2                	ld	s3,24(sp)
    80005442:	6121                	addi	sp,sp,64
    80005444:	8082                	ret
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    80005446:	0485                	addi	s1,s1,1
    80005448:	0461                	addi	s0,s0,24
    8000544a:	b74d                	j	800053ec <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
  return kTfLiteOk;
    8000544c:	4501                	li	a0,0
    8000544e:	b7ed                	j	80005438 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x60>

0000000080005450 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
  if (!model_is_allocating_) {
    80005450:	02054783          	lbu	a5,32(a0)
    ScratchBufferHandle** scratch_buffer_handles) {
    80005454:	7139                	addi	sp,sp,-64
    80005456:	f822                	sd	s0,48(sp)
    80005458:	fc06                	sd	ra,56(sp)
    8000545a:	f426                	sd	s1,40(sp)
    8000545c:	f04a                	sd	s2,32(sp)
    8000545e:	ec4e                	sd	s3,24(sp)
    80005460:	e852                	sd	s4,16(sp)
    80005462:	e456                	sd	s5,8(sp)
    80005464:	e05a                	sd	s6,0(sp)
    80005466:	842a                	mv	s0,a0
  if (!model_is_allocating_) {
    80005468:	c795                	beqz	a5,80005494 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x44>
    8000546a:	89ae                	mv	s3,a1
    8000546c:	8a36                	mv	s4,a3
    8000546e:	00860493          	addi	s1,a2,8
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    80005472:	4901                	li	s2,0
    80005474:	854e                	mv	a0,s3
    80005476:	a09fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000547a:	00056783          	lwu	a5,0(a0)
    8000547e:	06f97863          	bgeu	s2,a5,800054ee <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    80005482:	00090b1b          	sext.w	s6,s2
    80005486:	85da                	mv	a1,s6
    80005488:	a1bfe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    8000548c:	8aaa                	mv	s5,a0
    TFLITE_DCHECK(subgraph != nullptr);
    8000548e:	e50d                	bnez	a0,800054b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x68>
    80005490:	4fe080ef          	jal	ra,8000d98e <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80005494:	6d08                	ld	a0,24(a0)
    80005496:	00087597          	auipc	a1,0x87
    8000549a:	b8258593          	addi	a1,a1,-1150 # 8008c018 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x918>
    8000549e:	40f010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    800054a2:	4505                	li	a0,1
}
    800054a4:	70e2                	ld	ra,56(sp)
    800054a6:	7442                	ld	s0,48(sp)
    800054a8:	74a2                	ld	s1,40(sp)
    800054aa:	7902                	ld	s2,32(sp)
    800054ac:	69e2                	ld	s3,24(sp)
    800054ae:	6a42                	ld	s4,16(sp)
    800054b0:	6aa2                	ld	s5,8(sp)
    800054b2:	6b02                	ld	s6,0(sp)
    800054b4:	6121                	addi	sp,sp,64
    800054b6:	8082                	ret
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    800054b8:	601c                	ld	a5,0(s0)
    800054ba:	7410                	ld	a2,40(s0)
    800054bc:	85d2                	mv	a1,s4
    800054be:	73bc                	ld	a5,96(a5)
    800054c0:	8522                	mv	a0,s0
    800054c2:	9782                	jalr	a5
    800054c4:	f165                	bnez	a0,800054a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x54>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    800054c6:	601c                	ld	a5,0(s0)
    800054c8:	000a3683          	ld	a3,0(s4)
    800054cc:	6090                	ld	a2,0(s1)
    800054ce:	6fbc                	ld	a5,88(a5)
    800054d0:	875a                	mv	a4,s6
    800054d2:	85ce                	mv	a1,s3
    800054d4:	8522                	mv	a0,s0
    800054d6:	9782                	jalr	a5
    800054d8:	f571                	bnez	a0,800054a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x54>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    800054da:	601c                	ld	a5,0(s0)
    800054dc:	6090                	ld	a2,0(s1)
    800054de:	85d6                	mv	a1,s5
    800054e0:	63bc                	ld	a5,64(a5)
    800054e2:	8522                	mv	a0,s0
    800054e4:	04c1                	addi	s1,s1,16
    800054e6:	9782                	jalr	a5
    800054e8:	fd55                	bnez	a0,800054a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x54>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    800054ea:	0905                	addi	s2,s2,1
    800054ec:	b761                	j	80005474 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x24>
  model_is_allocating_ = false;
    800054ee:	02040023          	sb	zero,32(s0)
  return kTfLiteOk;
    800054f2:	4501                	li	a0,0
    800054f4:	bf45                	j	800054a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x54>

00000000800054f6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    800054f6:	7179                	addi	sp,sp,-48
    800054f8:	f406                	sd	ra,40(sp)
    800054fa:	f022                	sd	s0,32(sp)
    800054fc:	ec26                	sd	s1,24(sp)
    800054fe:	e84a                	sd	s2,16(sp)
    80005500:	e44e                	sd	s3,8(sp)
    80005502:	e052                	sd	s4,0(sp)
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    80005504:	e219                	bnez	a2,8000550a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    80005506:	488080ef          	jal	ra,8000d98e <abort>
    8000550a:	892a                	mv	s2,a0
    8000550c:	89ae                	mv	s3,a1
    8000550e:	84b2                	mv	s1,a2
    80005510:	4401                	li	s0,0
    80005512:	05800a13          	li	s4,88
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    80005516:	854e                	mv	a0,s3
    80005518:	967fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000551c:	00056783          	lwu	a5,0(a0)
    80005520:	04f47c63          	bgeu	s0,a5,80005578 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x82>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    80005524:	0004059b          	sext.w	a1,s0
    80005528:	97bfe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    TFLITE_DCHECK(subgraph != nullptr);
    8000552c:	dd69                	beqz	a0,80005506 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    8000552e:	db5fe0ef          	jal	ra,800042e2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    80005532:	85aa                	mv	a1,a0
            sizeof(NodeAndRegistration) * operators_size,
    80005534:	1582                	slli	a1,a1,0x20
    80005536:	9181                	srli	a1,a1,0x20
        memory_allocator_->AllocateFromTail(
    80005538:	034585b3          	mul	a1,a1,s4
    8000553c:	00893503          	ld	a0,8(s2)
    80005540:	4621                	li	a2,8
            alignof(NodeAndRegistration)));
    80005542:	611c                	ld	a5,0(a0)
        memory_allocator_->AllocateFromTail(
    80005544:	6f9c                	ld	a5,24(a5)
    80005546:	9782                	jalr	a5
    if (output == nullptr) {
    80005548:	e115                	bnez	a0,8000556c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x76>
      TF_LITE_REPORT_ERROR(
    8000554a:	01893503          	ld	a0,24(s2)
    8000554e:	00087597          	auipc	a1,0x87
    80005552:	b1a58593          	addi	a1,a1,-1254 # 8008c068 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x968>
    80005556:	357010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8000555a:	4505                	li	a0,1
}
    8000555c:	70a2                	ld	ra,40(sp)
    8000555e:	7402                	ld	s0,32(sp)
    80005560:	64e2                	ld	s1,24(sp)
    80005562:	6942                	ld	s2,16(sp)
    80005564:	69a2                	ld	s3,8(sp)
    80005566:	6a02                	ld	s4,0(sp)
    80005568:	6145                	addi	sp,sp,48
    8000556a:	8082                	ret
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    8000556c:	00441793          	slli	a5,s0,0x4
    80005570:	97a6                	add	a5,a5,s1
    80005572:	e388                	sd	a0,0(a5)
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    80005574:	0405                	addi	s0,s0,1
    80005576:	b745                	j	80005516 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x20>
  return kTfLiteOk;
    80005578:	4501                	li	a0,0
    8000557a:	b7cd                	j	8000555c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x66>

000000008000557c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
    8000557c:	7139                	addi	sp,sp,-64
    8000557e:	f04a                	sd	s2,32(sp)
    80005580:	892a                	mv	s2,a0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    80005582:	852e                	mv	a0,a1
    int tensor_index, int subgraph_index) {
    80005584:	f426                	sd	s1,40(sp)
    80005586:	ec4e                	sd	s3,24(sp)
    80005588:	e852                	sd	s4,16(sp)
    8000558a:	e456                	sd	s5,8(sp)
    8000558c:	fc06                	sd	ra,56(sp)
    8000558e:	f822                	sd	s0,48(sp)
    80005590:	8aae                	mv	s5,a1
    80005592:	84ba                	mv	s1,a4
    80005594:	8a32                	mv	s4,a2
    80005596:	89b6                	mv	s3,a3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    80005598:	8e7fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    8000559c:	85a6                	mv	a1,s1
    8000559e:	905fe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
    800055a2:	e119                	bnez	a0,800055a8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    800055a4:	3ea080ef          	jal	ra,8000d98e <abort>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    800055a8:	00093783          	ld	a5,0(s2)
    800055ac:	854a                	mv	a0,s2
    800055ae:	67bc                	ld	a5,72(a5)
    800055b0:	9782                	jalr	a5
          /*allocate_temp=*/false) != kTfLiteOk) {
    800055b2:	00093783          	ld	a5,0(s2)
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    800055b6:	842a                	mv	s0,a0
  if (PopulateTfLiteTensorFromFlatbuffer(
    800055b8:	862a                	mv	a2,a0
    800055ba:	0507b803          	ld	a6,80(a5)
    800055be:	8726                	mv	a4,s1
    800055c0:	4781                	li	a5,0
    800055c2:	86ce                	mv	a3,s3
    800055c4:	85d6                	mv	a1,s5
    800055c6:	854a                	mv	a0,s2
    800055c8:	9802                	jalr	a6
    800055ca:	c505                	beqz	a0,800055f2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x76>
    TF_LITE_REPORT_ERROR(error_reporter_,
    800055cc:	01893503          	ld	a0,24(s2)
    800055d0:	00087597          	auipc	a1,0x87
    800055d4:	ad058593          	addi	a1,a1,-1328 # 8008c0a0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x9a0>
    return nullptr;
    800055d8:	4401                	li	s0,0
    TF_LITE_REPORT_ERROR(error_reporter_,
    800055da:	2d3010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    800055de:	70e2                	ld	ra,56(sp)
    800055e0:	8522                	mv	a0,s0
    800055e2:	7442                	ld	s0,48(sp)
    800055e4:	74a2                	ld	s1,40(sp)
    800055e6:	7902                	ld	s2,32(sp)
    800055e8:	69e2                	ld	s3,24(sp)
    800055ea:	6a42                	ld	s4,16(sp)
    800055ec:	6aa2                	ld	s5,8(sp)
    800055ee:	6121                	addi	sp,sp,64
    800055f0:	8082                	ret
  if (subgraph_allocations != nullptr) {
    800055f2:	fe0a06e3          	beqz	s4,800055de <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x62>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    800055f6:	46e1                	li	a3,24
    800055f8:	02d989b3          	mul	s3,s3,a3
    800055fc:	0492                	slli	s1,s1,0x4
    800055fe:	94d2                	add	s1,s1,s4
    80005600:	649c                	ld	a5,8(s1)
    80005602:	99be                	add	s3,s3,a5
    tensor->data.data =
    80005604:	0009b783          	ld	a5,0(s3)
    80005608:	e41c                	sd	a5,8(s0)
    tensor->dims =
    8000560a:	0089b783          	ld	a5,8(s3)
    8000560e:	e81c                	sd	a5,16(s0)
    80005610:	b7f9                	j	800055de <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x62>

0000000080005612 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
    80005612:	7139                	addi	sp,sp,-64
    80005614:	f04a                	sd	s2,32(sp)
    80005616:	892a                	mv	s2,a0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    80005618:	852e                	mv	a0,a1
    int tensor_index, int subgraph_index) {
    8000561a:	f426                	sd	s1,40(sp)
    8000561c:	ec4e                	sd	s3,24(sp)
    8000561e:	e852                	sd	s4,16(sp)
    80005620:	e456                	sd	s5,8(sp)
    80005622:	fc06                	sd	ra,56(sp)
    80005624:	f822                	sd	s0,48(sp)
    80005626:	8aae                	mv	s5,a1
    80005628:	84ba                	mv	s1,a4
    8000562a:	8a32                	mv	s4,a2
    8000562c:	89b6                	mv	s3,a3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    8000562e:	851fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80005632:	85a6                	mv	a1,s1
    80005634:	86ffe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
    80005638:	e119                	bnez	a0,8000563e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    8000563a:	354080ef          	jal	ra,8000d98e <abort>
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    8000563e:	00893503          	ld	a0,8(s2)
    80005642:	4621                	li	a2,8
    80005644:	07000593          	li	a1,112
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    80005648:	611c                	ld	a5,0(a0)
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    8000564a:	739c                	ld	a5,32(a5)
    8000564c:	9782                	jalr	a5
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    8000564e:	00093783          	ld	a5,0(s2)
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    80005652:	842a                	mv	s0,a0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    80005654:	862a                	mv	a2,a0
    80005656:	0507b803          	ld	a6,80(a5)
    8000565a:	8726                	mv	a4,s1
    8000565c:	4785                	li	a5,1
    8000565e:	86ce                	mv	a3,s3
    80005660:	85d6                	mv	a1,s5
    80005662:	854a                	mv	a0,s2
    80005664:	9802                	jalr	a6
    80005666:	c505                	beqz	a0,8000568e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
    80005668:	01893503          	ld	a0,24(s2)
    8000566c:	00087597          	auipc	a1,0x87
    80005670:	a8458593          	addi	a1,a1,-1404 # 8008c0f0 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x9f0>
    return nullptr;
    80005674:	4401                	li	s0,0
    TF_LITE_REPORT_ERROR(
    80005676:	237010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    8000567a:	70e2                	ld	ra,56(sp)
    8000567c:	8522                	mv	a0,s0
    8000567e:	7442                	ld	s0,48(sp)
    80005680:	74a2                	ld	s1,40(sp)
    80005682:	7902                	ld	s2,32(sp)
    80005684:	69e2                	ld	s3,24(sp)
    80005686:	6a42                	ld	s4,16(sp)
    80005688:	6aa2                	ld	s5,8(sp)
    8000568a:	6121                	addi	sp,sp,64
    8000568c:	8082                	ret
  if (subgraph_allocations != nullptr) {
    8000568e:	fe0a06e3          	beqz	s4,8000567a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x68>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    80005692:	46e1                	li	a3,24
    80005694:	02d989b3          	mul	s3,s3,a3
    80005698:	0492                	slli	s1,s1,0x4
    8000569a:	94d2                	add	s1,s1,s4
    8000569c:	649c                	ld	a5,8(s1)
    8000569e:	99be                	add	s3,s3,a5
    tensor->data.data =
    800056a0:	0009b783          	ld	a5,0(s3)
    800056a4:	e41c                	sd	a5,8(s0)
    tensor->dims =
    800056a6:	0089b783          	ld	a5,8(s3)
    800056aa:	e81c                	sd	a5,16(s0)
    800056ac:	b7f9                	j	8000567a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x68>

00000000800056ae <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
    800056ae:	411c                	lw	a5,0(a0)
    800056b0:	02f5e463          	bltu	a1,a5,800056d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2a>
  return_type Get(uoffset_t i) const {
    800056b4:	1141                	addi	sp,sp,-16
    FLATBUFFERS_ASSERT(i < size());
    800056b6:	00085697          	auipc	a3,0x85
    800056ba:	35268693          	addi	a3,a3,850 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    800056be:	00087617          	auipc	a2,0x87
    800056c2:	a7a60613          	addi	a2,a2,-1414 # 8008c138 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xa38>
    800056c6:	10600593          	li	a1,262
    800056ca:	00085517          	auipc	a0,0x85
    800056ce:	40e50513          	addi	a0,a0,1038 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
  return_type Get(uoffset_t i) const {
    800056d2:	e406                	sd	ra,8(sp)
    FLATBUFFERS_ASSERT(i < size());
    800056d4:	2ca080ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    800056d8:	02059793          	slli	a5,a1,0x20
    800056dc:	01e7d593          	srli	a1,a5,0x1e
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    800056e0:	0511                	addi	a0,a0,4
    p += i * sizeof(uoffset_t);
    800056e2:	952e                	add	a0,a0,a1
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    800056e4:	00056783          	lwu	a5,0(a0)
  }
    800056e8:	953e                	add	a0,a0,a5
    800056ea:	8082                	ret

00000000800056ec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    800056ec:	1101                	addi	sp,sp,-32
    800056ee:	e426                	sd	s1,8(sp)
    800056f0:	84ae                	mv	s1,a1
    auto field_offset = GetOptionalFieldOffset(field);
    800056f2:	45a1                	li	a1,8
    800056f4:	e822                	sd	s0,16(sp)
    800056f6:	ec06                	sd	ra,24(sp)
    800056f8:	842a                	mv	s0,a0
    800056fa:	f6cfe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    800056fe:	4581                	li	a1,0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80005700:	c119                	beqz	a0,80005706 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1a>
    80005702:	942a                	add	s0,s0,a0
    80005704:	400c                	lw	a1,0(s0)
  return_type operator[](uoffset_t i) const { return Get(i); }
    80005706:	8526                	mv	a0,s1
    80005708:	fa7ff0ef          	jal	ra,800056ae <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    8000570c:	842a                	mv	s0,a0
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    8000570e:	cd19                	beqz	a0,8000572c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x40>
    auto field_offset = GetOptionalFieldOffset(field);
    80005710:	4591                	li	a1,4
    80005712:	f54fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    80005716:	00a407b3          	add	a5,s0,a0
  void* out_buffer = nullptr;
    8000571a:	4401                	li	s0,0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8000571c:	c901                	beqz	a0,8000572c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x40>
    8000571e:	0007e703          	lwu	a4,0(a5)
    80005722:	97ba                	add	a5,a5,a4
      if (array->size()) {
    80005724:	4398                	lw	a4,0(a5)
    80005726:	c319                	beqz	a4,8000572c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x40>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80005728:	00478413          	addi	s0,a5,4
}
    8000572c:	60e2                	ld	ra,24(sp)
    8000572e:	8522                	mv	a0,s0
    80005730:	6442                	ld	s0,16(sp)
    80005732:	64a2                	ld	s1,8(sp)
    80005734:	6105                	addi	sp,sp,32
    80005736:	8082                	ret

0000000080005738 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    80005738:	711d                	addi	sp,sp,-96
    8000573a:	ec86                	sd	ra,88(sp)
    8000573c:	e8a2                	sd	s0,80(sp)
    8000573e:	e4a6                	sd	s1,72(sp)
    80005740:	e0ca                	sd	s2,64(sp)
    80005742:	fc4e                	sd	s3,56(sp)
    80005744:	f852                	sd	s4,48(sp)
    80005746:	f456                	sd	s5,40(sp)
    80005748:	f05a                	sd	s6,32(sp)
    8000574a:	ec5e                	sd	s7,24(sp)
  TFLITE_DCHECK(result != nullptr);
    8000574c:	e399                	bnez	a5,80005752 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
    8000574e:	240080ef          	jal	ra,8000d98e <abort>
    80005752:	84b2                	mv	s1,a2
    80005754:	8aaa                	mv	s5,a0
  *result = {};
    80005756:	07000613          	li	a2,112
    8000575a:	853e                	mv	a0,a5
    8000575c:	8a2e                	mv	s4,a1
    8000575e:	4581                	li	a1,0
    80005760:	8b3a                	mv	s6,a4
    80005762:	893e                	mv	s2,a5
    80005764:	8436                	mv	s0,a3
    80005766:	ee6fc0ef          	jal	ra,80001e4c <memset>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8000576a:	8526                	mv	a0,s1
    8000576c:	945ff0ef          	jal	ra,800050b0 <_ZNK6tflite6Tensor4typeEv>
    80005770:	865a                	mv	a2,s6
    80005772:	85ca                	mv	a1,s2
    80005774:	410010ef          	jal	ra,80006b84 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    80005778:	89aa                	mv	s3,a0
    8000577a:	e169                	bnez	a0,8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
  result->is_variable = flatbuffer_tensor.is_variable();
    8000577c:	8526                	mv	a0,s1
    8000577e:	955ff0ef          	jal	ra,800050d2 <_ZNK6tflite6Tensor11is_variableEv>
    80005782:	04a906a3          	sb	a0,77(s2)
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    80005786:	85a2                	mv	a1,s0
    80005788:	8526                	mv	a0,s1
    8000578a:	f63ff0ef          	jal	ra,800056ec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8000578e:	00a93423          	sd	a0,8(s2)
    result->allocation_type = kTfLiteMmapRo;
    80005792:	00153513          	seqz	a0,a0
    80005796:	0505                	addi	a0,a0,1
    80005798:	02a92023          	sw	a0,32(s2)
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    8000579c:	86da                	mv	a3,s6
    8000579e:	0030                	addi	a2,sp,8
    800057a0:	02890593          	addi	a1,s2,40
    800057a4:	8526                	mv	a0,s1
    800057a6:	db6fe0ef          	jal	ra,80003d5c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE>
    800057aa:	89aa                	mv	s3,a0
    800057ac:	e941                	bnez	a0,8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    800057ae:	4591                	li	a1,4
    800057b0:	8526                	mv	a0,s1
    800057b2:	8a4ff0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    800057b6:	ed59                	bnez	a0,80005854 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    800057b8:	0000a797          	auipc	a5,0xa
    800057bc:	a0878793          	addi	a5,a5,-1528 # 8000f1c0 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>
    800057c0:	00f93823          	sd	a5,16(s2)
    auto field_offset = GetOptionalFieldOffset(field);
    800057c4:	45b1                	li	a1,12
    800057c6:	8526                	mv	a0,s1
    800057c8:	e9efe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800057cc:	c925                	beqz	a0,8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    auto p = data_ + field_offset;
    800057ce:	00a48433          	add	s0,s1,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800057d2:	00046603          	lwu	a2,0(s0)
    800057d6:	9432                	add	s0,s0,a2
  if (src_quantization && src_quantization->scale() &&
    800057d8:	8522                	mv	a0,s0
    800057da:	88fff0ef          	jal	ra,80005068 <_ZNK6tflite22QuantizationParameters5scaleEv>
    800057de:	84aa                	mv	s1,a0
    800057e0:	cd31                	beqz	a0,8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
  uoffset_t size() const { return EndianScalar(length_); }
    800057e2:	411c                	lw	a5,0(a0)
    800057e4:	10078463          	beqz	a5,800058ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1b4>
      src_quantization->zero_point() &&
    800057e8:	8522                	mv	a0,s0
    800057ea:	8a3ff0ef          	jal	ra,8000508c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
    800057ee:	c539                	beqz	a0,8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    800057f0:	411c                	lw	a5,0(a0)
      src_quantization->zero_point() &&
    800057f2:	0e078d63          	beqz	a5,800058ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1b4>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    800057f6:	40dc                	lw	a5,4(s1)
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    800057f8:	8522                	mv	a0,s0
    result->params.scale = src_quantization->scale()->Get(0);
    800057fa:	00f92c23          	sw	a5,24(s2)
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    800057fe:	88fff0ef          	jal	ra,8000508c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    80005802:	4581                	li	a1,0
    80005804:	b5dff0ef          	jal	ra,80005360 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
    80005808:	00a92e23          	sw	a0,28(s2)
    int channels = src_quantization->scale()->size();
    8000580c:	8522                	mv	a0,s0
    8000580e:	85bff0ef          	jal	ra,80005068 <_ZNK6tflite22QuantizationParameters5scaleEv>
    80005812:	00052b83          	lw	s7,0(a0)
                                          alignof(TfLiteAffineQuantization)))
    80005816:	000ab783          	ld	a5,0(s5)
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    8000581a:	040a0263          	beqz	s4,8000585e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x126>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    8000581e:	739c                	ld	a5,32(a5)
    80005820:	4621                	li	a2,8
    80005822:	45e1                	li	a1,24
    80005824:	8556                	mv	a0,s5
    80005826:	9782                	jalr	a5
    80005828:	8a2a                	mv	s4,a0
    if (quantization == nullptr) {
    8000582a:	e529                	bnez	a0,80005874 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x13c>
      TF_LITE_REPORT_ERROR(error_reporter,
    8000582c:	00087597          	auipc	a1,0x87
    80005830:	a0458593          	addi	a1,a1,-1532 # 8008c230 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xb30>
      TF_LITE_REPORT_ERROR(error_reporter,
    80005834:	855a                	mv	a0,s6
    80005836:	077010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8000583a:	4985                	li	s3,1
}
    8000583c:	60e6                	ld	ra,88(sp)
    8000583e:	6446                	ld	s0,80(sp)
    80005840:	64a6                	ld	s1,72(sp)
    80005842:	6906                	ld	s2,64(sp)
    80005844:	7a42                	ld	s4,48(sp)
    80005846:	7aa2                	ld	s5,40(sp)
    80005848:	7b02                	ld	s6,32(sp)
    8000584a:	6be2                	ld	s7,24(sp)
    8000584c:	854e                	mv	a0,s3
    8000584e:	79e2                	ld	s3,56(sp)
    80005850:	6125                	addi	sp,sp,96
    80005852:	8082                	ret
  TFLITE_DCHECK(error_reporter != nullptr);
    80005854:	ee0b0de3          	beqz	s6,8000574e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16>
    *result = const_cast<kTfLiteArrayType*>(
    80005858:	00a93823          	sd	a0,16(s2)
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8000585c:	b7a5                	j	800057c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x8c>
                  allocator->AllocateFromTail(
    8000585e:	6f9c                	ld	a5,24(a5)
    80005860:	4621                	li	a2,8
    80005862:	45e1                	li	a1,24
    80005864:	8556                	mv	a0,s5
    80005866:	9782                	jalr	a5
    80005868:	8a2a                	mv	s4,a0
    if (quantization == nullptr) {
    8000586a:	d169                	beqz	a0,8000582c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
                  alignof(TfLiteIntArray)));
    8000586c:	000ab783          	ld	a5,0(s5)
    80005870:	6f84                	ld	s1,24(a5)
    80005872:	a021                	j	8000587a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
                  alignof(TfLiteIntArray)))
    80005874:	000ab783          	ld	a5,0(s5)
    80005878:	7384                	ld	s1,32(a5)
                  TfLiteIntArrayGetSizeInBytes(channels),
    8000587a:	855e                	mv	a0,s7
    8000587c:	29d000ef          	jal	ra,80006318 <TfLiteIntArrayGetSizeInBytes>
    80005880:	85aa                	mv	a1,a0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    80005882:	4611                	li	a2,4
    80005884:	8556                	mv	a0,s5
    80005886:	9482                	jalr	s1
    quantization->zero_point =
    80005888:	00aa3423          	sd	a0,8(s4)
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8000588c:	84aa                	mv	s1,a0
    if (quantization->zero_point == nullptr) {
    8000588e:	e511                	bnez	a0,8000589a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x162>
      TF_LITE_REPORT_ERROR(error_reporter,
    80005890:	00087597          	auipc	a1,0x87
    80005894:	9d058593          	addi	a1,a1,-1584 # 8008c260 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xb60>
    80005898:	bf71                	j	80005834 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfc>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8000589a:	8522                	mv	a0,s0
    8000589c:	fccff0ef          	jal	ra,80005068 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
    800058a0:	ea0b07e3          	beqz	s6,8000574e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    800058a4:	ea0505e3          	beqz	a0,8000574e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16>
    *result = const_cast<kTfLiteArrayType*>(
    800058a8:	00aa3023          	sd	a0,0(s4)
    quantization->zero_point->size = channels;
    800058ac:	0174a023          	sw	s7,0(s1)
    for (int i = 0; i < channels; i++) {
    800058b0:	4a81                	li	s5,0
    800058b2:	0491                	addi	s1,s1,4
    800058b4:	017adc63          	bge	s5,s7,800058cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x194>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    800058b8:	8522                	mv	a0,s0
    800058ba:	fd2ff0ef          	jal	ra,8000508c <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    800058be:	85d6                	mv	a1,s5
    800058c0:	aa1ff0ef          	jal	ra,80005360 <_ZNK11flatbuffers6VectorIxE3GetEj>
    800058c4:	c088                	sw	a0,0(s1)
    for (int i = 0; i < channels; i++) {
    800058c6:	2a85                	addiw	s5,s5,1
    800058c8:	0491                	addi	s1,s1,4
    800058ca:	b7ed                	j	800058b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
    auto field_offset = GetOptionalFieldOffset(field);
    800058cc:	45c1                	li	a1,16
    800058ce:	8522                	mv	a0,s0
    800058d0:	d96fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    800058d4:	4781                	li	a5,0
    800058d6:	c119                	beqz	a0,800058dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a4>
    800058d8:	942a                	add	s0,s0,a0
    800058da:	401c                	lw	a5,0(s0)
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    800058dc:	00fa2823          	sw	a5,16(s4)
    result->quantization = {kTfLiteAffineQuantization, quantization};
    800058e0:	4785                	li	a5,1
    800058e2:	04f92823          	sw	a5,80(s2)
    800058e6:	05493c23          	sd	s4,88(s2)
    800058ea:	bf89                	j	8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
  return kTfLiteOk;
    800058ec:	4981                	li	s3,0
    800058ee:	b7b9                	j	8000583c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>

00000000800058f0 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
    800058f0:	7139                	addi	sp,sp,-64
    800058f2:	f822                	sd	s0,48(sp)
    800058f4:	842a                	mv	s0,a0
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
    800058f6:	852e                	mv	a0,a1
    int subgraph_idx, bool allocate_temp) {
    800058f8:	fc06                	sd	ra,56(sp)
    800058fa:	f426                	sd	s1,40(sp)
    800058fc:	f04a                	sd	s2,32(sp)
    800058fe:	ec4e                	sd	s3,24(sp)
    80005900:	e852                	sd	s4,16(sp)
    80005902:	89b6                	mv	s3,a3
    80005904:	8a32                	mv	s4,a2
    80005906:	893e                	mv	s2,a5
    80005908:	e43a                	sd	a4,8(sp)
    8000590a:	84ae                	mv	s1,a1
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
    8000590c:	d72fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80005910:	65a2                	ld	a1,8(sp)
    80005912:	d90fe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80005916:	fe2ff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    8000591a:	85ce                	mv	a1,s3
    8000591c:	a7fff0ef          	jal	ra,8000539a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    80005920:	89aa                	mv	s3,a0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    80005922:	8526                	mv	a0,s1
    80005924:	ff8ff0ef          	jal	ra,8000511c <_ZNK6tflite5Model7buffersEv>
    80005928:	6c18                	ld	a4,24(s0)
    8000592a:	86aa                	mv	a3,a0
    8000592c:	6408                	ld	a0,8(s0)
}
    8000592e:	7442                	ld	s0,48(sp)
    80005930:	70e2                	ld	ra,56(sp)
    80005932:	74a2                	ld	s1,40(sp)
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    80005934:	87d2                	mv	a5,s4
    80005936:	864e                	mv	a2,s3
}
    80005938:	6a42                	ld	s4,16(sp)
    8000593a:	69e2                	ld	s3,24(sp)
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8000593c:	85ca                	mv	a1,s2
}
    8000593e:	7902                	ld	s2,32(sp)
    80005940:	6121                	addi	sp,sp,64
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    80005942:	bbdd                	j	80005738 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>

0000000080005944 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    80005944:	7179                	addi	sp,sp,-48
  *result = {};
    80005946:	00073023          	sd	zero,0(a4)
    8000594a:	00073423          	sd	zero,8(a4)
    8000594e:	00073823          	sd	zero,16(a4)
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    80005952:	852e                	mv	a0,a1
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    80005954:	f406                	sd	ra,40(sp)
    80005956:	f022                	sd	s0,32(sp)
    80005958:	ec26                	sd	s1,24(sp)
    8000595a:	843a                	mv	s0,a4
    8000595c:	e84a                	sd	s2,16(sp)
    8000595e:	e44e                	sd	s3,8(sp)
    80005960:	e052                	sd	s4,0(sp)
    80005962:	89b6                	mv	s3,a3
    80005964:	84ae                	mv	s1,a1
    80005966:	8a32                	mv	s4,a2
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    80005968:	f48ff0ef          	jal	ra,800050b0 <_ZNK6tflite6Tensor4typeEv>
    8000596c:	864e                	mv	a2,s3
    8000596e:	01040593          	addi	a1,s0,16
    80005972:	212010ef          	jal	ra,80006b84 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    80005976:	892a                	mv	s2,a0
    80005978:	e105                	bnez	a0,80005998 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8000597a:	85d2                	mv	a1,s4
    8000597c:	8526                	mv	a0,s1
    8000597e:	d6fff0ef          	jal	ra,800056ec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    80005982:	e008                	sd	a0,0(s0)
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80005984:	4591                	li	a1,4
    80005986:	8526                	mv	a0,s1
    80005988:	ecffe0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    8000598c:	ed19                	bnez	a0,800059aa <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x66>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8000598e:	0000a797          	auipc	a5,0xa
    80005992:	83278793          	addi	a5,a5,-1998 # 8000f1c0 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>
    80005996:	e41c                	sd	a5,8(s0)
}
    80005998:	70a2                	ld	ra,40(sp)
    8000599a:	7402                	ld	s0,32(sp)
    8000599c:	64e2                	ld	s1,24(sp)
    8000599e:	69a2                	ld	s3,8(sp)
    800059a0:	6a02                	ld	s4,0(sp)
    800059a2:	854a                	mv	a0,s2
    800059a4:	6942                	ld	s2,16(sp)
    800059a6:	6145                	addi	sp,sp,48
    800059a8:	8082                	ret
  TFLITE_DCHECK(error_reporter != nullptr);
    800059aa:	00099463          	bnez	s3,800059b2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6e>
    800059ae:	7e1070ef          	jal	ra,8000d98e <abort>
    *result = const_cast<kTfLiteArrayType*>(
    800059b2:	e408                	sd	a0,8(s0)
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    800059b4:	b7d5                	j	80005998 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>

00000000800059b6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    800059b6:	711d                	addi	sp,sp,-96
    800059b8:	ec86                	sd	ra,88(sp)
    800059ba:	e8a2                	sd	s0,80(sp)
    800059bc:	e4a6                	sd	s1,72(sp)
    800059be:	e0ca                	sd	s2,64(sp)
    800059c0:	fc4e                	sd	s3,56(sp)
    800059c2:	f852                	sd	s4,48(sp)
    800059c4:	f456                	sd	s5,40(sp)
    800059c6:	f05a                	sd	s6,32(sp)
    800059c8:	ec5e                	sd	s7,24(sp)
    800059ca:	e862                	sd	s8,16(sp)
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    800059cc:	ca2d                	beqz	a2,80005a3e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x88>
    800059ce:	89aa                	mv	s3,a0
    800059d0:	8aae                	mv	s5,a1
    800059d2:	00860413          	addi	s0,a2,8
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    800059d6:	4a01                	li	s4,0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    800059d8:	4be1                	li	s7,24
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    800059da:	8556                	mv	a0,s5
    800059dc:	ca2fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    800059e0:	00056783          	lwu	a5,0(a0)
    800059e4:	0afa7663          	bgeu	s4,a5,80005a90 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    800059e8:	000a059b          	sext.w	a1,s4
    800059ec:	cb6fe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    800059f0:	8b2a                	mv	s6,a0
    TFLITE_DCHECK(subgraph != nullptr);
    800059f2:	c531                	beqz	a0,80005a3e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x88>
    size_t alloc_count = subgraph->tensors()->size();
    800059f4:	f04ff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    800059f8:	00056c03          	lwu	s8,0(a0)
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    800059fc:	0089b503          	ld	a0,8(s3)
    80005a00:	4621                	li	a2,8
    80005a02:	037c04b3          	mul	s1,s8,s7
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    80005a06:	611c                	ld	a5,0(a0)
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    80005a08:	6f9c                	ld	a5,24(a5)
    80005a0a:	85a6                	mv	a1,s1
    80005a0c:	9782                	jalr	a5
    80005a0e:	892a                	mv	s2,a0
    if (tensors == nullptr) {
    80005a10:	e90d                	bnez	a0,80005a42 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
      TF_LITE_REPORT_ERROR(
    80005a12:	8626                	mv	a2,s1
    80005a14:	00087597          	auipc	a1,0x87
    80005a18:	87c58593          	addi	a1,a1,-1924 # 8008c290 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xb90>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    80005a1c:	0189b503          	ld	a0,24(s3)
    80005a20:	68c010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    80005a24:	4505                	li	a0,1
}
    80005a26:	60e6                	ld	ra,88(sp)
    80005a28:	6446                	ld	s0,80(sp)
    80005a2a:	64a6                	ld	s1,72(sp)
    80005a2c:	6906                	ld	s2,64(sp)
    80005a2e:	79e2                	ld	s3,56(sp)
    80005a30:	7a42                	ld	s4,48(sp)
    80005a32:	7aa2                	ld	s5,40(sp)
    80005a34:	7b02                	ld	s6,32(sp)
    80005a36:	6be2                	ld	s7,24(sp)
    80005a38:	6c42                	ld	s8,16(sp)
    80005a3a:	6125                	addi	sp,sp,96
    80005a3c:	8082                	ret
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    80005a3e:	751070ef          	jal	ra,8000d98e <abort>
    for (size_t i = 0; i < alloc_count; ++i) {
    80005a42:	4481                	li	s1,0
    80005a44:	0584f163          	bgeu	s1,s8,80005a86 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd0>
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
    80005a48:	855a                	mv	a0,s6
    80005a4a:	eaeff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    80005a4e:	0004859b          	sext.w	a1,s1
    80005a52:	949ff0ef          	jal	ra,8000539a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    80005a56:	e42a                	sd	a0,8(sp)
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    80005a58:	8556                	mv	a0,s5
    80005a5a:	ec2ff0ef          	jal	ra,8000511c <_ZNK6tflite5Model7buffersEv>
    80005a5e:	03748733          	mul	a4,s1,s7
    80005a62:	862a                	mv	a2,a0
    80005a64:	0189b683          	ld	a3,24(s3)
    80005a68:	65a2                	ld	a1,8(sp)
    80005a6a:	0089b503          	ld	a0,8(s3)
    80005a6e:	974a                	add	a4,a4,s2
    80005a70:	ed5ff0ef          	jal	ra,80005944 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    80005a74:	c519                	beqz	a0,80005a82 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xcc>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    80005a76:	8626                	mv	a2,s1
    80005a78:	00087597          	auipc	a1,0x87
    80005a7c:	86058593          	addi	a1,a1,-1952 # 8008c2d8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xbd8>
    80005a80:	bf71                	j	80005a1c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x66>
    for (size_t i = 0; i < alloc_count; ++i) {
    80005a82:	0485                	addi	s1,s1,1
    80005a84:	b7c1                	j	80005a44 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8e>
    subgraph_allocations[subgraph_idx].tensors = tensors;
    80005a86:	01243023          	sd	s2,0(s0)
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    80005a8a:	0a05                	addi	s4,s4,1
    80005a8c:	0441                	addi	s0,s0,16
    80005a8e:	b7b1                	j	800059da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x24>
  return kTfLiteOk;
    80005a90:	4501                	li	a0,0
    80005a92:	bf51                	j	80005a26 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x70>

0000000080005a94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    80005a94:	7115                	addi	sp,sp,-224
    80005a96:	e5a6                	sd	s1,200(sp)
    80005a98:	84aa                	mv	s1,a0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    80005a9a:	852e                	mv	a0,a1
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    80005a9c:	ed86                	sd	ra,216(sp)
    80005a9e:	e836                	sd	a3,16(sp)
    80005aa0:	e43a                	sd	a4,8(sp)
    80005aa2:	e9a2                	sd	s0,208(sp)
    80005aa4:	f952                	sd	s4,176(sp)
    80005aa6:	f15a                	sd	s6,160(sp)
    80005aa8:	8a32                	mv	s4,a2
    80005aaa:	ed5e                	sd	s7,152(sp)
    80005aac:	e566                	sd	s9,136(sp)
    80005aae:	e16a                	sd	s10,128(sp)
    80005ab0:	8bae                	mv	s7,a1
    80005ab2:	e1ca                	sd	s2,192(sp)
    80005ab4:	fd4e                	sd	s3,184(sp)
    80005ab6:	f556                	sd	s5,168(sp)
    80005ab8:	e962                	sd	s8,144(sp)
    80005aba:	fcee                	sd	s11,120(sp)
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    80005abc:	bc2fe0ef          	jal	ra,80003e7e <_ZNK6tflite5Model9subgraphsEv>
    80005ac0:	65a2                	ld	a1,8(sp)
    80005ac2:	be0fe0ef          	jal	ra,80003ea2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    80005ac6:	8b2a                	mv	s6,a0
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    80005ac8:	e30ff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    80005acc:	00056c83          	lwu	s9,0(a0)
    80005ad0:	749c                	ld	a5,40(s1)
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    80005ad2:	6488                	ld	a0,8(s1)
    80005ad4:	4621                	li	a2,8
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    80005ad6:	9cbe                	add	s9,s9,a5
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    80005ad8:	611c                	ld	a5,0(a0)
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    80005ada:	005c9413          	slli	s0,s9,0x5
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    80005ade:	85a2                	mv	a1,s0
    80005ae0:	739c                	ld	a5,32(a5)
    80005ae2:	9782                	jalr	a5
  if (allocation_info == nullptr) {
    80005ae4:	0184bd03          	ld	s10,24(s1)
    80005ae8:	e915                	bnez	a0,80005b1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x88>
    TF_LITE_REPORT_ERROR(
    80005aea:	8622                	mv	a2,s0
    80005aec:	00087597          	auipc	a1,0x87
    80005af0:	80c58593          	addi	a1,a1,-2036 # 8008c2f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xbf8>
    80005af4:	856a                	mv	a0,s10
    80005af6:	5b6010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    80005afa:	4405                	li	s0,1
}
    80005afc:	60ee                	ld	ra,216(sp)
    80005afe:	8522                	mv	a0,s0
    80005b00:	644e                	ld	s0,208(sp)
    80005b02:	64ae                	ld	s1,200(sp)
    80005b04:	690e                	ld	s2,192(sp)
    80005b06:	79ea                	ld	s3,184(sp)
    80005b08:	7a4a                	ld	s4,176(sp)
    80005b0a:	7aaa                	ld	s5,168(sp)
    80005b0c:	7b0a                	ld	s6,160(sp)
    80005b0e:	6bea                	ld	s7,152(sp)
    80005b10:	6c4a                	ld	s8,144(sp)
    80005b12:	6caa                	ld	s9,136(sp)
    80005b14:	6d0a                	ld	s10,128(sp)
    80005b16:	7de6                	ld	s11,120(sp)
    80005b18:	612d                	addi	sp,sp,224
    80005b1a:	8082                	ret
    80005b1c:	892a                	mv	s2,a0
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
    80005b1e:	855a                	mv	a0,s6
    80005b20:	dd8ff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
                                scratch_buffer_request_count_, error_reporter_);
    80005b24:	749c                	ld	a5,40(s1)
    80005b26:	00056a83          	lwu	s5,0(a0)
    auto field_offset = GetOptionalFieldOffset(field);
    80005b2a:	45c1                	li	a1,16
    80005b2c:	855e                	mv	a0,s7
    80005b2e:	e43e                	sd	a5,8(sp)
    80005b30:	b36fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  const int32_t* offline_planner_offsets = nullptr;
    80005b34:	4981                	li	s3,0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005b36:	36050163          	beqz	a0,80005e98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x404>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    80005b3a:	4c01                	li	s8,0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    80005b3c:	00087d97          	auipc	s11,0x87
    80005b40:	a9cd8d93          	addi	s11,s11,-1380 # 8008c5d8 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE>
    auto field_offset = GetOptionalFieldOffset(field);
    80005b44:	45c1                	li	a1,16
    80005b46:	855e                	mv	a0,s7
    80005b48:	b1efe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005b4c:	3a050f63          	beqz	a0,80005f0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x476>
    auto p = data_ + field_offset;
    80005b50:	00ab8433          	add	s0,s7,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005b54:	00046503          	lwu	a0,0(s0)
    80005b58:	942a                	add	s0,s0,a0
  uoffset_t size() const { return EndianScalar(length_); }
    80005b5a:	401c                	lw	a5,0(s0)
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    80005b5c:	02079713          	slli	a4,a5,0x20
    80005b60:	9301                	srli	a4,a4,0x20
    80005b62:	32ec7b63          	bgeu	s8,a4,80005e98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x404>
    FLATBUFFERS_ASSERT(i < size());
    80005b66:	000c071b          	sext.w	a4,s8
    80005b6a:	02f76263          	bltu	a4,a5,80005b8e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xfa>
    80005b6e:	00085697          	auipc	a3,0x85
    80005b72:	e9a68693          	addi	a3,a3,-358 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80005b76:	00086617          	auipc	a2,0x86
    80005b7a:	7ca60613          	addi	a2,a2,1994 # 8008c340 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xc40>
    80005b7e:	10600593          	li	a1,262
    80005b82:	00085517          	auipc	a0,0x85
    80005b86:	f5650513          	addi	a0,a0,-170 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80005b8a:	615070ef          	jal	ra,8000d99e <__assert_func>
    p += i * sizeof(uoffset_t);
    80005b8e:	002c1793          	slli	a5,s8,0x2
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80005b92:	0411                	addi	s0,s0,4
    p += i * sizeof(uoffset_t);
    80005b94:	943e                	add	s0,s0,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80005b96:	00046783          	lwu	a5,0(s0)
    auto field_offset = GetOptionalFieldOffset(field);
    80005b9a:	4591                	li	a1,4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80005b9c:	943e                	add	s0,s0,a5
    auto field_offset = GetOptionalFieldOffset(field);
    80005b9e:	8522                	mv	a0,s0
    80005ba0:	ac6fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005ba4:	4781                	li	a5,0
    80005ba6:	c509                	beqz	a0,80005bb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11c>
    auto p = data_ + field_offset;
    80005ba8:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005baa:	00056783          	lwu	a5,0(a0)
    80005bae:	97aa                	add	a5,a5,a0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    80005bb0:	856e                	mv	a0,s11
    80005bb2:	ec3e                	sd	a5,24(sp)
    80005bb4:	7f6080ef          	jal	ra,8000e3aa <strlen>
    80005bb8:	67e2                	ld	a5,24(sp)
    80005bba:	862a                	mv	a2,a0
    80005bbc:	85ee                	mv	a1,s11
    80005bbe:	00478513          	addi	a0,a5,4
    80005bc2:	7fa080ef          	jal	ra,8000e3bc <strncmp>
    80005bc6:	e921                	bnez	a0,80005c16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x182>
            model->buffers();
    80005bc8:	855e                	mv	a0,s7
    80005bca:	d52ff0ef          	jal	ra,8000511c <_ZNK6tflite5Model7buffersEv>
    auto field_offset = GetOptionalFieldOffset(field);
    80005bce:	4599                	li	a1,6
    80005bd0:	89aa                	mv	s3,a0
    80005bd2:	8522                	mv	a0,s0
    80005bd4:	a92fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80005bd8:	4581                	li	a1,0
    80005bda:	c119                	beqz	a0,80005be0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x14c>
    80005bdc:	942a                	add	s0,s0,a0
    80005bde:	400c                	lw	a1,0(s0)
  return_type operator[](uoffset_t i) const { return Get(i); }
    80005be0:	854e                	mv	a0,s3
    80005be2:	acdff0ef          	jal	ra,800056ae <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    80005be6:	4591                	li	a1,4
  return_type operator[](uoffset_t i) const { return Get(i); }
    80005be8:	89aa                	mv	s3,a0
    auto field_offset = GetOptionalFieldOffset(field);
    80005bea:	a7cfe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005bee:	30050b63          	beqz	a0,80005f04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x470>
    auto p = data_ + field_offset;
    80005bf2:	99aa                	add	s3,s3,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005bf4:	0009e503          	lwu	a0,0(s3)
    80005bf8:	99aa                	add	s3,s3,a0
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    80005bfa:	00c9e603          	lwu	a2,12(s3)
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    80005bfe:	09c1                	addi	s3,s3,16
        if (tensor_count_ != nbr_tensors) {
    80005c00:	00ca8b63          	beq	s5,a2,80005c16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x182>
          TF_LITE_REPORT_ERROR(reporter_,
    80005c04:	86d6                	mv	a3,s5
    80005c06:	00087597          	auipc	a1,0x87
    80005c0a:	83258593          	addi	a1,a1,-1998 # 8008c438 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xd38>
    80005c0e:	856a                	mv	a0,s10
    80005c10:	49c010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE_STATUS(
    80005c14:	b5dd                	j	80005afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x66>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    80005c16:	0c05                	addi	s8,s8,1
    80005c18:	b735                	j	80005b44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb0>
  TFLITE_DCHECK(eval_tensors != nullptr);
    80005c1a:	575070ef          	jal	ra,8000d98e <abort>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    80005c1e:	855a                	mv	a0,s6
    80005c20:	ec2fe0ef          	jal	ra,800042e2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    80005c24:	0005041b          	sext.w	s0,a0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    80005c28:	4981                	li	s3,0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80005c2a:	4599                	li	a1,6
    80005c2c:	855a                	mv	a0,s6
    80005c2e:	c29fe0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    80005c32:	00056783          	lwu	a5,0(a0)
    80005c36:	00f9fd63          	bgeu	s3,a5,80005c50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1bc>
    const int tensor_index = subgraph->inputs()->Get(i);
    80005c3a:	0009859b          	sext.w	a1,s3
    80005c3e:	a8dfe0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
    80005c42:	00551793          	slli	a5,a0,0x5
    80005c46:	97ca                	add	a5,a5,s2
    80005c48:	0007a823          	sw	zero,16(a5)
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    80005c4c:	0985                	addi	s3,s3,1
    80005c4e:	bff1                	j	80005c2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x196>
    current->last_used = operators_size - 1;
    80005c50:	fff4099b          	addiw	s3,s0,-1
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    80005c54:	4a01                	li	s4,0
    current->last_used = operators_size - 1;
    80005c56:	844e                	mv	s0,s3
    80005c58:	45a1                	li	a1,8
    80005c5a:	855a                	mv	a0,s6
    80005c5c:	bfbfe0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    80005c60:	00056783          	lwu	a5,0(a0)
    80005c64:	02fa6e63          	bltu	s4,a5,80005ca0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20c>
      if (((current->last_used == -1) || (current->last_used < i))) {
    80005c68:	5a7d                	li	s4,-1
  for (int i = (operators_size - 1); i >= 0; --i) {
    80005c6a:	1e09ca63          	bltz	s3,80005e5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3ca>
    auto field_offset = GetOptionalFieldOffset(field);
    80005c6e:	45a9                	li	a1,10
    80005c70:	855a                	mv	a0,s6
    80005c72:	9f4fe0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005c76:	28050a63          	beqz	a0,80005f0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x476>
    auto p = data_ + field_offset;
    80005c7a:	00ab0433          	add	s0,s6,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80005c7e:	00046503          	lwu	a0,0(s0)
    80005c82:	0009879b          	sext.w	a5,s3
    80005c86:	942a                	add	s0,s0,a0
    FLATBUFFERS_ASSERT(i < size());
    80005c88:	4018                	lw	a4,0(s0)
    80005c8a:	02e9e463          	bltu	s3,a4,80005cb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21e>
    80005c8e:	00085697          	auipc	a3,0x85
    80005c92:	d7a68693          	addi	a3,a3,-646 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80005c96:	00086617          	auipc	a2,0x86
    80005c9a:	f6260613          	addi	a2,a2,-158 # 8008bbf8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0x4f8>
    80005c9e:	b5c5                	j	80005b7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xea>
    const int tensor_index = subgraph->outputs()->Get(i);
    80005ca0:	000a059b          	sext.w	a1,s4
    80005ca4:	a27fe0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = operators_size - 1;
    80005ca8:	0516                	slli	a0,a0,0x5
    80005caa:	954a                	add	a0,a0,s2
    80005cac:	c940                	sw	s0,20(a0)
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    80005cae:	0a05                	addi	s4,s4,1
    80005cb0:	b765                	j	80005c58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1c4>
    p += i * sizeof(uoffset_t);
    80005cb2:	02079713          	slli	a4,a5,0x20
    80005cb6:	01e75793          	srli	a5,a4,0x1e
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80005cba:	0411                	addi	s0,s0,4
    p += i * sizeof(uoffset_t);
    80005cbc:	943e                	add	s0,s0,a5
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80005cbe:	00046783          	lwu	a5,0(s0)
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    80005cc2:	4c01                	li	s8,0
    80005cc4:	943e                	add	s0,s0,a5
    return const_cast<Table *>(this)->GetPointer<P>(field);
    80005cc6:	4599                	li	a1,6
    80005cc8:	8522                	mv	a0,s0
    80005cca:	b8dfe0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    80005cce:	00056783          	lwu	a5,0(a0)
    80005cd2:	02fc7163          	bgeu	s8,a5,80005cf4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x260>
      const int tensor_index = op->inputs()->Get(n);
    80005cd6:	000c059b          	sext.w	a1,s8
    80005cda:	9f1fe0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    80005cde:	0516                	slli	a0,a0,0x5
    80005ce0:	954a                	add	a0,a0,s2
      if (((current->last_used == -1) || (current->last_used < i))) {
    80005ce2:	495c                	lw	a5,20(a0)
    80005ce4:	01478463          	beq	a5,s4,80005cec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x258>
    80005ce8:	0137d463          	bge	a5,s3,80005cf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x25c>
        current->last_used = i;
    80005cec:	01352a23          	sw	s3,20(a0)
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    80005cf0:	0c05                	addi	s8,s8,1
    80005cf2:	bfd1                	j	80005cc6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x232>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    80005cf4:	4c01                	li	s8,0
    80005cf6:	45a1                	li	a1,8
    80005cf8:	8522                	mv	a0,s0
    80005cfa:	b5dfe0ef          	jal	ra,80004856 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    80005cfe:	00056783          	lwu	a5,0(a0)
    80005d02:	02fc7163          	bgeu	s8,a5,80005d24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>
      const int tensor_index = op->outputs()->Get(n);
    80005d06:	000c059b          	sext.w	a1,s8
    80005d0a:	9c1fe0ef          	jal	ra,800046ca <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    80005d0e:	0516                	slli	a0,a0,0x5
    80005d10:	954a                	add	a0,a0,s2
      if ((current->first_created == -1) || (current->first_created > i)) {
    80005d12:	491c                	lw	a5,16(a0)
    80005d14:	01478463          	beq	a5,s4,80005d1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x288>
    80005d18:	00f9d463          	bge	s3,a5,80005d20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>
        current->first_created = i;
    80005d1c:	01352823          	sw	s3,16(a0)
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    80005d20:	0c05                	addi	s8,s8,1
    80005d22:	bfd1                	j	80005cf6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x262>
  for (int i = (operators_size - 1); i >= 0; --i) {
    80005d24:	39fd                	addiw	s3,s3,-1
    80005d26:	b791                	j	80005c6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1d6>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    80005d28:	6488                	ld	a0,8(s1)
    80005d2a:	45c1                	li	a1,16
    80005d2c:	f2bfd0ef          	jal	ra,80003c56 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>
    80005d30:	842a                	mv	s0,a0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    80005d32:	6488                	ld	a0,8(s1)
    80005d34:	85a2                	mv	a1,s0
    80005d36:	4641                	li	a2,16
    80005d38:	611c                	ld	a5,0(a0)
    80005d3a:	739c                	ld	a5,32(a5)
    80005d3c:	9782                	jalr	a5
    80005d3e:	85aa                	mv	a1,a0
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    80005d40:	e505                	bnez	a0,80005d68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2d4>
    80005d42:	6c8c                	ld	a1,24(s1)
    80005d44:	00086797          	auipc	a5,0x86
    80005d48:	74478793          	addi	a5,a5,1860 # 8008c488 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xd88>
    80005d4c:	3d200713          	li	a4,978
    80005d50:	00086697          	auipc	a3,0x86
    80005d54:	75868693          	addi	a3,a3,1880 # 8008c4a8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xda8>
    80005d58:	00086617          	auipc	a2,0x86
    80005d5c:	7a060613          	addi	a2,a2,1952 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80005d60:	852e                	mv	a0,a1
    80005d62:	36a010ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    80005d66:	bb51                	j	80005afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x66>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    80005d68:	0004061b          	sext.w	a2,s0
    80005d6c:	1028                	addi	a0,sp,40
    80005d6e:	236000ef          	jal	ra,80005fa4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    80005d72:	0184ba03          	ld	s4,24(s1)
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005d76:	4981                	li	s3,0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    80005d78:	5afd                	li	s5,-1
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005d7a:	0b3c8463          	beq	s9,s3,80005e22 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x38e>
    if (current->needs_allocating) {
    80005d7e:	01cbc783          	lbu	a5,28(s7)
    80005d82:	e789                	bnez	a5,80005d8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2f8>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005d84:	0985                	addi	s3,s3,1
    80005d86:	020b8b93          	addi	s7,s7,32
    80005d8a:	bfc5                	j	80005d7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2e6>
          AlignSizeUp(current->bytes, kBufferAlignment);
    80005d8c:	000bb503          	ld	a0,0(s7)
    80005d90:	45c1                	li	a1,16
    80005d92:	f7dfd0ef          	jal	ra,80003d0e <_ZN6tflite11AlignSizeUpEmm>
      if (current->offline_offset == kOnlinePlannedBuffer) {
    80005d96:	018ba783          	lw	a5,24(s7)
    80005d9a:	0005061b          	sext.w	a2,a0
    80005d9e:	014ba703          	lw	a4,20(s7)
    80005da2:	010ba683          	lw	a3,16(s7)
        TF_LITE_ENSURE_STATUS(
    80005da6:	85d2                	mv	a1,s4
    80005da8:	1028                	addi	a0,sp,40
      if (current->offline_offset == kOnlinePlannedBuffer) {
    80005daa:	01579a63          	bne	a5,s5,80005dbe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x32a>
        TF_LITE_ENSURE_STATUS(
    80005dae:	16c000ef          	jal	ra,80005f1a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    80005db2:	842a                	mv	s0,a0
    80005db4:	d961                	beqz	a0,80005d84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2f0>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    80005db6:	1028                	addi	a0,sp,40
    80005db8:	158000ef          	jal	ra,80005f10 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    80005dbc:	b381                	j	80005afc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x68>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    80005dbe:	228000ef          	jal	ra,80005fe6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    80005dc2:	bfc5                	j	80005db2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x31e>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    80005dc4:	6488                	ld	a0,8(s1)
    80005dc6:	0921                	addi	s2,s2,8
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005dc8:	4a01                	li	s4,0
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    80005dca:	e89fd0ef          	jal	ra,80003c52 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    80005dce:	8aaa                	mv	s5,a0
  int planner_index = 0;
    80005dd0:	4b01                	li	s6,0
      int offset = -1;
    80005dd2:	5c7d                	li	s8,-1
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005dd4:	03498863          	beq	s3,s4,80005e04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x370>
    if (current->needs_allocating) {
    80005dd8:	01494783          	lbu	a5,20(s2)
    80005ddc:	c385                	beqz	a5,80005dfc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x368>
      TF_LITE_ENSURE_STATUS(
    80005dde:	1054                	addi	a3,sp,36
    80005de0:	865a                	mv	a2,s6
    80005de2:	85de                	mv	a1,s7
    80005de4:	1028                	addi	a0,sp,40
      int offset = -1;
    80005de6:	d262                	sw	s8,36(sp)
      TF_LITE_ENSURE_STATUS(
    80005de8:	4e2000ef          	jal	ra,800062ca <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
    80005dec:	842a                	mv	s0,a0
    80005dee:	f561                	bnez	a0,80005db6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x322>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    80005df0:	5792                	lw	a5,36(sp)
    80005df2:	00093703          	ld	a4,0(s2)
      ++planner_index;
    80005df6:	2b05                	addiw	s6,s6,1
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    80005df8:	97d6                	add	a5,a5,s5
    80005dfa:	e31c                	sd	a5,0(a4)
  for (size_t i = 0; i < allocation_info_size; ++i) {
    80005dfc:	0a05                	addi	s4,s4,1
    80005dfe:	02090913          	addi	s2,s2,32
    80005e02:	bfc9                	j	80005dd4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x340>
  head_usage = planner.GetMaximumMemorySize();
    80005e04:	1028                	addi	a0,sp,40
    80005e06:	474000ef          	jal	ra,8000627a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    80005e0a:	789c                	ld	a5,48(s1)
    80005e0c:	00a7f363          	bgeu	a5,a0,80005e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x37e>
    max_head_buffer_usage_ = head_usage;
    80005e10:	f888                	sd	a0,48(s1)
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    80005e12:	6488                	ld	a0,8(s1)
    80005e14:	788c                	ld	a1,48(s1)
    80005e16:	4641                	li	a2,16
    80005e18:	611c                	ld	a5,0(a0)
    80005e1a:	6b9c                	ld	a5,16(a5)
    80005e1c:	9782                	jalr	a5
    80005e1e:	842a                	mv	s0,a0
    80005e20:	bf59                	j	80005db6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x322>
  memory_allocator_->ResetTempAllocations();
    80005e22:	6488                	ld	a0,8(s1)
    80005e24:	611c                	ld	a5,0(a0)
    80005e26:	779c                	ld	a5,40(a5)
    80005e28:	9782                	jalr	a5
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    80005e2a:	6488                	ld	a0,8(s1)
    80005e2c:	45c1                	li	a1,16
    80005e2e:	e29fd0ef          	jal	ra,80003c56 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>
    80005e32:	842a                	mv	s0,a0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    80005e34:	1028                	addi	a0,sp,40
    80005e36:	444000ef          	jal	ra,8000627a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    80005e3a:	0184bb83          	ld	s7,24(s1)
    80005e3e:	f8a473e3          	bgeu	s0,a0,80005dc4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x330>
    TF_LITE_REPORT_ERROR(
    80005e42:	1028                	addi	a0,sp,40
    80005e44:	436000ef          	jal	ra,8000627a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    80005e48:	862a                	mv	a2,a0
    80005e4a:	86a2                	mv	a3,s0
    80005e4c:	00086597          	auipc	a1,0x86
    80005e50:	6c458593          	addi	a1,a1,1732 # 8008c510 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xe10>
    80005e54:	855e                	mv	a0,s7
    80005e56:	256010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    80005e5a:	4405                	li	s0,1
    80005e5c:	bfa9                	j	80005db6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x322>
      GetScratchBufferRequests();
    80005e5e:	8526                	mv	a0,s1
    80005e60:	c16ff0ef          	jal	ra,80005276 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    80005e64:	6722                	ld	a4,8(sp)
    80005e66:	66c2                	ld	a3,16(sp)
    80005e68:	005a9793          	slli	a5,s5,0x5
    80005e6c:	97ca                	add	a5,a5,s2
    80005e6e:	00ea8833          	add	a6,s5,a4
    current->offline_offset = kOnlinePlannedBuffer;
    80005e72:	55fd                	li	a1,-1
    current->needs_allocating = true;
    80005e74:	4605                	li	a2,1
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    80005e76:	eb0af9e3          	bgeu	s5,a6,80005d28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>
    current->bytes = current_request->bytes;
    80005e7a:	6118                	ld	a4,0(a0)
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
    80005e7c:	e794                	sd	a3,8(a5)
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    80005e7e:	0a85                	addi	s5,s5,1
    current->bytes = current_request->bytes;
    80005e80:	e398                	sd	a4,0(a5)
    current->first_created = current_request->node_idx;
    80005e82:	4518                	lw	a4,8(a0)
    80005e84:	06a1                	addi	a3,a3,8
    current->offline_offset = kOnlinePlannedBuffer;
    80005e86:	cf8c                	sw	a1,24(a5)
    current->first_created = current_request->node_idx;
    80005e88:	cb98                	sw	a4,16(a5)
    current->last_used = current_request->node_idx;
    80005e8a:	cbd8                	sw	a4,20(a5)
    current->needs_allocating = true;
    80005e8c:	00c78e23          	sb	a2,28(a5)
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    80005e90:	0541                	addi	a0,a0,16
    80005e92:	02078793          	addi	a5,a5,32
    80005e96:	b7c5                	j	80005e76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3e2>
  TFLITE_DCHECK(eval_tensors != nullptr);
    80005e98:	d80a01e3          	beqz	s4,80005c1a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x186>
    80005e9c:	8bca                	mv	s7,s2
    80005e9e:	8d4a                	mv	s10,s2
  for (size_t i = 0; i < tensor_count_; ++i) {
    80005ea0:	4d81                	li	s11,0
    current->first_created = -1;
    80005ea2:	5c7d                	li	s8,-1
  for (size_t i = 0; i < tensor_count_; ++i) {
    80005ea4:	d75dfde3          	bgeu	s11,s5,80005c1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x18a>
    current->output_ptr = &(eval_tensors[i].data.data);
    80005ea8:	014d3423          	sd	s4,8(s10)
    TF_LITE_ENSURE_STATUS(
    80005eac:	85ea                	mv	a1,s10
    80005eae:	8552                	mv	a0,s4
    80005eb0:	f6ffd0ef          	jal	ra,80003e1e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
    80005eb4:	842a                	mv	s0,a0
    80005eb6:	c40513e3          	bnez	a0,80005afc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x68>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    80005eba:	000a3783          	ld	a5,0(s4)
    current->first_created = -1;
    80005ebe:	018d2823          	sw	s8,16(s10)
    current->last_used = -1;
    80005ec2:	018d2a23          	sw	s8,20(s10)
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    80005ec6:	4501                	li	a0,0
    80005ec8:	ef91                	bnez	a5,80005ee4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x450>
                                (!subgraph->tensors()->Get(i)->is_variable());
    80005eca:	855a                	mv	a0,s6
    80005ecc:	a2cff0ef          	jal	ra,800050f8 <_ZNK6tflite8SubGraph7tensorsEv>
    80005ed0:	000d859b          	sext.w	a1,s11
    80005ed4:	cc6ff0ef          	jal	ra,8000539a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    80005ed8:	9faff0ef          	jal	ra,800050d2 <_ZNK6tflite6Tensor11is_variableEv>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    80005edc:	00154513          	xori	a0,a0,1
    80005ee0:	0ff57513          	andi	a0,a0,255
    80005ee4:	00ad0e23          	sb	a0,28(s10)
      current->offline_offset = kOnlinePlannedBuffer;
    80005ee8:	57fd                	li	a5,-1
    if (offline_offsets) {
    80005eea:	00098663          	beqz	s3,80005ef6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x462>
      current->offline_offset = offline_offsets[i];
    80005eee:	002d9793          	slli	a5,s11,0x2
    80005ef2:	97ce                	add	a5,a5,s3
    80005ef4:	439c                	lw	a5,0(a5)
    80005ef6:	00fd2c23          	sw	a5,24(s10)
  for (size_t i = 0; i < tensor_count_; ++i) {
    80005efa:	0d85                	addi	s11,s11,1
    80005efc:	020d0d13          	addi	s10,s10,32
    80005f00:	0a61                	addi	s4,s4,24
    80005f02:	b74d                	j	80005ea4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x410>
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    80005f04:	00c02783          	lw	a5,12(zero) # c <CONFIG_2ND_LVL_ISR_TBL_OFFSET>
    80005f08:	9002                	ebreak
  uoffset_t size() const { return EndianScalar(length_); }
    80005f0a:	00002783          	lw	a5,0(zero) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
    80005f0e:	bfed                	j	80005f08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x474>

0000000080005f10 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
    80005f10:	8082                	ret

0000000080005f12 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    80005f12:	4548                	lw	a0,12(a0)
    80005f14:	8082                	ret

0000000080005f16 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
}
    80005f16:	4be0706f          	j	8000d3d4 <_ZdlPv>

0000000080005f1a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
    80005f1a:	88b2                	mv	a7,a2
  if (buffer_count_ >= max_buffer_count_) {
    80005f1c:	00c52803          	lw	a6,12(a0)
    80005f20:	4510                	lw	a2,8(a0)
    80005f22:	00c84f63          	blt	a6,a2,80005f40 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x26>
    int last_time_used) {
    80005f26:	1141                	addi	sp,sp,-16
    80005f28:	852e                	mv	a0,a1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    80005f2a:	00086597          	auipc	a1,0x86
    80005f2e:	6f658593          	addi	a1,a1,1782 # 8008c620 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE+0x30>
    int last_time_used) {
    80005f32:	e406                	sd	ra,8(sp)
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    80005f34:	178010ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    80005f38:	60a2                	ld	ra,8(sp)
    return kTfLiteError;
    80005f3a:	4505                	li	a0,1
}
    80005f3c:	0141                	addi	sp,sp,16
    80005f3e:	8082                	ret
  BufferRequirements* current = &requirements_[buffer_count_];
    80005f40:	690c                	ld	a1,16(a0)
    80005f42:	00481613          	slli	a2,a6,0x4
  ++buffer_count_;
    80005f46:	2805                	addiw	a6,a6,1
  BufferRequirements* current = &requirements_[buffer_count_];
    80005f48:	95b2                	add	a1,a1,a2
  current->last_time_used = last_time_used;
    80005f4a:	c5d8                	sw	a4,12(a1)
  current->offline_offset = kOnlinePlannedBuffer;
    80005f4c:	577d                	li	a4,-1
    80005f4e:	c1d8                	sw	a4,4(a1)
  current->size = size;
    80005f50:	0115a023          	sw	a7,0(a1)
  current->first_time_used = first_time_used;
    80005f54:	c594                	sw	a3,8(a1)
  need_to_calculate_offsets_ = true;
    80005f56:	4705                	li	a4,1
  ++buffer_count_;
    80005f58:	01052623          	sw	a6,12(a0)
  need_to_calculate_offsets_ = true;
    80005f5c:	04e50023          	sb	a4,64(a0)
  return kTfLiteOk;
    80005f60:	4501                	li	a0,0
}
    80005f62:	8082                	ret

0000000080005f64 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
    for (int i = 1; i < size; ++i) {
    80005f64:	872a                	mv	a4,a0
    80005f66:	87ae                	mv	a5,a1
    80005f68:	4685                	li	a3,1
    any_swapped = false;
    80005f6a:	4801                	li	a6,0
    for (int i = 1; i < size; ++i) {
    80005f6c:	02c6d963          	bge	a3,a2,80005f9e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3a>
      if (values[i - 1] < values[i]) {
    80005f70:	00072883          	lw	a7,0(a4)
    80005f74:	00472303          	lw	t1,4(a4)
    80005f78:	0068df63          	bge	a7,t1,80005f96 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x32>
        values[i - 1] = values[i];
    80005f7c:	00672023          	sw	t1,0(a4)
        values[i] = value_temp;
    80005f80:	01172223          	sw	a7,4(a4)
        const int id_temp = ids[i - 1];
    80005f84:	0007a803          	lw	a6,0(a5)
        ids[i - 1] = ids[i];
    80005f88:	0047a883          	lw	a7,4(a5)
        ids[i] = id_temp;
    80005f8c:	0107a223          	sw	a6,4(a5)
        ids[i - 1] = ids[i];
    80005f90:	0117a023          	sw	a7,0(a5)
        any_swapped = true;
    80005f94:	4805                	li	a6,1
    for (int i = 1; i < size; ++i) {
    80005f96:	2685                	addiw	a3,a3,1
    80005f98:	0711                	addi	a4,a4,4
    80005f9a:	0791                	addi	a5,a5,4
    80005f9c:	bfc1                	j	80005f6c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
    80005f9e:	fc0813e3          	bnez	a6,80005f64 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
}
    80005fa2:	8082                	ret

0000000080005fa4 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    80005fa4:	00086797          	auipc	a5,0x86
    80005fa8:	6dc78793          	addi	a5,a5,1756 # 8008c680 <_ZTVN6tflite19GreedyMemoryPlannerE+0x10>
    80005fac:	e11c                	sd	a5,0(a0)
    80005fae:	4785                	li	a5,1
    80005fb0:	04f50023          	sb	a5,64(a0)
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    80005fb4:	02800793          	li	a5,40
    80005fb8:	02f65633          	divu	a2,a2,a5
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    80005fbc:	e90c                	sd	a1,16(a0)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    80005fbe:	00052623          	sw	zero,12(a0)
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    80005fc2:	2601                	sext.w	a2,a2
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    80005fc4:	00461793          	slli	a5,a2,0x4
    80005fc8:	95be                	add	a1,a1,a5
  next_free += sizeof(int) * max_buffer_count_;
    80005fca:	00261793          	slli	a5,a2,0x2
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    80005fce:	ed0c                	sd	a1,24(a0)
  next_free += sizeof(int) * max_buffer_count_;
    80005fd0:	95be                	add	a1,a1,a5
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    80005fd2:	f10c                	sd	a1,32(a0)
  next_free += sizeof(int) * max_buffer_count_;
    80005fd4:	95be                	add	a1,a1,a5
  next_free += sizeof(ListEntry) * max_buffer_count_;
    80005fd6:	47b1                	li	a5,12
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    80005fd8:	c510                	sw	a2,8(a0)
  next_free += sizeof(ListEntry) * max_buffer_count_;
    80005fda:	02f60633          	mul	a2,a2,a5
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    80005fde:	f50c                	sd	a1,40(a0)
  next_free += sizeof(ListEntry) * max_buffer_count_;
    80005fe0:	95b2                	add	a1,a1,a2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    80005fe2:	fd0c                	sd	a1,56(a0)
}
    80005fe4:	8082                	ret

0000000080005fe6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    80005fe6:	1101                	addi	sp,sp,-32
    80005fe8:	e426                	sd	s1,8(sp)
    80005fea:	84be                	mv	s1,a5
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    80005fec:	611c                	ld	a5,0(a0)
    int last_time_used, int offline_offset) {
    80005fee:	e822                	sd	s0,16(sp)
    80005ff0:	e04a                	sd	s2,0(sp)
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    80005ff2:	6b9c                	ld	a5,16(a5)
    int last_time_used, int offline_offset) {
    80005ff4:	ec06                	sd	ra,24(sp)
  BufferRequirements* current = &requirements_[buffer_count_];
    80005ff6:	6900                	ld	s0,16(a0)
    80005ff8:	00c52903          	lw	s2,12(a0)
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    80005ffc:	9782                	jalr	a5
    80005ffe:	e911                	bnez	a0,80006012 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x2c>
  current->offline_offset = offline_offset;
    80006000:	0912                	slli	s2,s2,0x4
    80006002:	944a                	add	s0,s0,s2
    80006004:	c044                	sw	s1,4(s0)
}
    80006006:	60e2                	ld	ra,24(sp)
    80006008:	6442                	ld	s0,16(sp)
    8000600a:	64a2                	ld	s1,8(sp)
    8000600c:	6902                	ld	s2,0(sp)
    8000600e:	6105                	addi	sp,sp,32
    80006010:	8082                	ret
    return kTfLiteError;
    80006012:	4505                	li	a0,1
    80006014:	bfcd                	j	80006006 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>

0000000080006016 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
    80006016:	41dc                	lw	a5,4(a1)
    80006018:	00479713          	slli	a4,a5,0x4
  const BufferRequirements* entry_requirements =
    8000601c:	691c                	ld	a5,16(a0)
    8000601e:	97ba                	add	a5,a5,a4
  if (entry_requirements->first_time_used > last_time_used) {
    80006020:	4798                	lw	a4,8(a5)
    80006022:	00e6ca63          	blt	a3,a4,80006036 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x20>
  if (first_time_used > entry_requirements->last_time_used) {
    80006026:	47c8                	lw	a0,12(a5)
    80006028:	00c52533          	slt	a0,a0,a2
    8000602c:	00154513          	xori	a0,a0,1
    80006030:	0ff57513          	andi	a0,a0,255
    80006034:	8082                	ret
    return false;
    80006036:	4501                	li	a0,0
}
    80006038:	8082                	ret

000000008000603a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    8000603a:	7139                	addi	sp,sp,-64
    8000603c:	f426                	sd	s1,40(sp)
    8000603e:	f04a                	sd	s2,32(sp)
    80006040:	ec4e                	sd	s3,24(sp)
    80006042:	fc06                	sd	ra,56(sp)
    80006044:	f822                	sd	s0,48(sp)
    80006046:	e852                	sd	s4,16(sp)
    80006048:	e456                	sd	s5,8(sp)
    8000604a:	84aa                	mv	s1,a0
    8000604c:	8932                	mv	s2,a2
    8000604e:	89b6                	mv	s3,a3
  if (start == nullptr) {
    80006050:	e985                	bnez	a1,80006080 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x46>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    80006052:	594c                	lw	a1,52(a0)
    80006054:	4431                	li	s0,12
    80006056:	028585b3          	mul	a1,a1,s0
    8000605a:	7500                	ld	s0,40(a0)
    8000605c:	942e                	add	s0,s0,a1
    if (candidate_next_entry->next_entry_index == -1) {
    8000605e:	5afd                	li	s5,-1
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    80006060:	4a31                	li	s4,12
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    80006062:	86ce                	mv	a3,s3
    80006064:	864a                	mv	a2,s2
    80006066:	85a2                	mv	a1,s0
    80006068:	8526                	mv	a0,s1
    8000606a:	fadff0ef          	jal	ra,80006016 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
    8000606e:	e50d                	bnez	a0,80006098 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5e>
    if (candidate_next_entry->next_entry_index == -1) {
    80006070:	4400                	lw	s0,8(s0)
    80006072:	03540263          	beq	s0,s5,80006096 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5c>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    80006076:	034405b3          	mul	a1,s0,s4
    candidate_next_entry =
    8000607a:	7480                	ld	s0,40(s1)
    8000607c:	942e                	add	s0,s0,a1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    8000607e:	b7d5                	j	80006062 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x28>
    if (start->next_entry_index == -1) {
    80006080:	459c                	lw	a5,8(a1)
    80006082:	577d                	li	a4,-1
      return nullptr;
    80006084:	4401                	li	s0,0
    if (start->next_entry_index == -1) {
    80006086:	00e78963          	beq	a5,a4,80006098 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x5e>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
    8000608a:	4431                	li	s0,12
    8000608c:	028787b3          	mul	a5,a5,s0
    80006090:	7500                	ld	s0,40(a0)
    80006092:	943e                	add	s0,s0,a5
    80006094:	b7e9                	j	8000605e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x24>
      return nullptr;
    80006096:	4401                	li	s0,0
}
    80006098:	70e2                	ld	ra,56(sp)
    8000609a:	8522                	mv	a0,s0
    8000609c:	7442                	ld	s0,48(sp)
    8000609e:	74a2                	ld	s1,40(sp)
    800060a0:	7902                	ld	s2,32(sp)
    800060a2:	69e2                	ld	s3,24(sp)
    800060a4:	6a42                	ld	s4,16(sp)
    800060a6:	6aa2                	ld	s5,8(sp)
    800060a8:	6121                	addi	sp,sp,64
    800060aa:	8082                	ret

00000000800060ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    800060ac:	04054783          	lbu	a5,64(a0)
    800060b0:	1c078463          	beqz	a5,80006278 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1cc>
    800060b4:	00c52803          	lw	a6,12(a0)
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    800060b8:	7175                	addi	sp,sp,-144
    800060ba:	e122                	sd	s0,128(sp)
    800060bc:	e506                	sd	ra,136(sp)
    800060be:	fca6                	sd	s1,120(sp)
    800060c0:	f8ca                	sd	s2,112(sp)
    800060c2:	f4ce                	sd	s3,104(sp)
    800060c4:	f0d2                	sd	s4,96(sp)
    800060c6:	ecd6                	sd	s5,88(sp)
    800060c8:	e8da                	sd	s6,80(sp)
    800060ca:	e4de                	sd	s7,72(sp)
    800060cc:	e0e2                	sd	s8,64(sp)
    800060ce:	fc66                	sd	s9,56(sp)
    800060d0:	f86a                	sd	s10,48(sp)
    800060d2:	f46e                	sd	s11,40(sp)
    800060d4:	842a                	mv	s0,a0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    800060d6:	18080263          	beqz	a6,8000625a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    800060da:	01853e83          	ld	t4,24(a0)
      buffer_ids_sorted_[idx_from_tail] = i;
    800060de:	02053e03          	ld	t3,32(a0)
  need_to_calculate_offsets_ = false;
    800060e2:	04050023          	sb	zero,64(a0)
      buffer_ids_sorted_[idx_from_tail] = i;
    800060e6:	4781                	li	a5,0
  int idx_from_head = 0;
    800060e8:	4601                	li	a2,0
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    800060ea:	5f7d                	li	t5,-1
  for (int i = 0; i < buffer_count_; ++i) {
    800060ec:	4458                	lw	a4,12(s0)
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    800060ee:	00261593          	slli	a1,a2,0x2
    800060f2:	0007831b          	sext.w	t1,a5
    800060f6:	00be8533          	add	a0,t4,a1
      buffer_ids_sorted_[idx_from_head] = i;
    800060fa:	95f2                	add	a1,a1,t3
  for (int i = 0; i < buffer_count_; ++i) {
    800060fc:	04e35763          	bge	t1,a4,8000614a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x9e>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    80006100:	6814                	ld	a3,16(s0)
      buffer_offsets_[i] = -1;
    80006102:	03843883          	ld	a7,56(s0)
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    80006106:	00479713          	slli	a4,a5,0x4
    8000610a:	9736                	add	a4,a4,a3
      buffer_offsets_[i] = -1;
    8000610c:	00279693          	slli	a3,a5,0x2
    80006110:	96c6                	add	a3,a3,a7
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    80006112:	00472883          	lw	a7,4(a4)
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    80006116:	00072f83          	lw	t6,0(a4)
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    8000611a:	03e89063          	bne	a7,t5,8000613a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8e>
      idx_from_tail--;
    8000611e:	387d                	addiw	a6,a6,-1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    80006120:	00281713          	slli	a4,a6,0x2
    80006124:	00ee85b3          	add	a1,t4,a4
    80006128:	01f5a023          	sw	t6,0(a1)
      buffer_ids_sorted_[idx_from_tail] = i;
    8000612c:	9772                	add	a4,a4,t3
    8000612e:	00672023          	sw	t1,0(a4)
      buffer_offsets_[i] = -1;
    80006132:	01e6a023          	sw	t5,0(a3)
  for (int i = 0; i < buffer_count_; ++i) {
    80006136:	0785                	addi	a5,a5,1
    80006138:	bf55                	j	800060ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    8000613a:	01f52023          	sw	t6,0(a0)
      buffer_ids_sorted_[idx_from_head] = i;
    8000613e:	0065a023          	sw	t1,0(a1)
      buffer_offsets_[i] = requirements_[i].offline_offset;
    80006142:	4358                	lw	a4,4(a4)
      idx_from_head++;
    80006144:	2605                	addiw	a2,a2,1
      buffer_offsets_[i] = requirements_[i].offline_offset;
    80006146:	c298                	sw	a4,0(a3)
      idx_from_head++;
    80006148:	b7fd                	j	80006136 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8a>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    8000614a:	40c7063b          	subw	a2,a4,a2
    8000614e:	e17ff0ef          	jal	ra,80005f64 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    80006152:	02843903          	ld	s2,40(s0)
  int buffer_id = buffer_ids_sorted_[0];
    80006156:	02043b03          	ld	s6,32(s0)
  next_free_entry_ = 1;
    8000615a:	4785                	li	a5,1
    8000615c:	f81c                	sd	a5,48(s0)
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    8000615e:	56fd                	li	a3,-1
    80006160:	00d92423          	sw	a3,8(s2)
  int buffer_id = buffer_ids_sorted_[0];
    80006164:	000b2783          	lw	a5,0(s6)
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    80006168:	01043a03          	ld	s4,16(s0)
    8000616c:	03843a83          	ld	s5,56(s0)
    80006170:	00479713          	slli	a4,a5,0x4
    80006174:	9752                	add	a4,a4,s4
    80006176:	4358                	lw	a4,4(a4)
  first_entry->requirements_index = buffer_id;
    80006178:	00f92223          	sw	a5,4(s2)
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    8000617c:	078a                	slli	a5,a5,0x2
    8000617e:	00d71663          	bne	a4,a3,8000618a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xde>
    buffer_offsets_[buffer_id] = 0;
    80006182:	00fa8733          	add	a4,s5,a5
    80006186:	00072023          	sw	zero,0(a4)
  first_entry->offset = buffer_offsets_[buffer_id];
    8000618a:	97d6                	add	a5,a5,s5
    8000618c:	439c                	lw	a5,0(a5)
    8000618e:	8bca                	mv	s7,s2
    80006190:	4985                	li	s3,1
    80006192:	00f92023          	sw	a5,0(s2)
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    80006196:	5c7d                	li	s8,-1
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    80006198:	4cb1                	li	s9,12
  for (int i = 1; i < buffer_count_; ++i) {
    8000619a:	4458                	lw	a4,12(s0)
    8000619c:	0009879b          	sext.w	a5,s3
    800061a0:	0ae7dd63          	bge	a5,a4,8000625a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
    800061a4:	00299793          	slli	a5,s3,0x2
    800061a8:	97da                	add	a5,a5,s6
    800061aa:	0007ad03          	lw	s10,0(a5)
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    800061ae:	004d1793          	slli	a5,s10,0x4
    800061b2:	97d2                	add	a5,a5,s4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    800061b4:	43c4                	lw	s1,4(a5)
    800061b6:	05849763          	bne	s1,s8,80006204 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x158>
    const int wanted_size = wanted_requirements->size;
    800061ba:	4398                	lw	a4,0(a5)
    const int wanted_first_time_used = wanted_requirements->first_time_used;
    800061bc:	4790                	lw	a2,8(a5)
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    800061be:	47d4                	lw	a3,12(a5)
      ListEntry* prior_entry = nullptr;
    800061c0:	4501                	li	a0,0
    int candidate_offset = 0;
    800061c2:	4481                	li	s1,0
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
    800061c4:	85aa                	mv	a1,a0
    800061c6:	8daa                	mv	s11,a0
    800061c8:	8522                	mv	a0,s0
    800061ca:	ec3a                	sd	a4,24(sp)
    800061cc:	e836                	sd	a3,16(sp)
    800061ce:	e432                	sd	a2,8(sp)
    800061d0:	e6bff0ef          	jal	ra,8000603a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
    800061d4:	6622                	ld	a2,8(sp)
    800061d6:	66c2                	ld	a3,16(sp)
    800061d8:	6762                	ld	a4,24(sp)
    800061da:	020d8063          	beqz	s11,800061fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x14e>
              &requirements_[prior_entry->requirements_index];
    800061de:	004da783          	lw	a5,4(s11)
          const int prior_entry_offset =
    800061e2:	000da583          	lw	a1,0(s11)
              prior_entry->offset + candidate_requirements->size;
    800061e6:	0792                	slli	a5,a5,0x4
    800061e8:	97d2                	add	a5,a5,s4
          const int prior_entry_offset =
    800061ea:	439c                	lw	a5,0(a5)
    800061ec:	9dbd                	addw	a1,a1,a5
    800061ee:	87ae                	mv	a5,a1
    800061f0:	0095d363          	bge	a1,s1,800061f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x14a>
    800061f4:	87a6                	mv	a5,s1
    800061f6:	0007849b          	sext.w	s1,a5
        if (next_entry == nullptr) {
    800061fa:	c509                	beqz	a0,80006204 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x158>
        const int gap = next_entry->offset - candidate_offset;
    800061fc:	411c                	lw	a5,0(a0)
        if (gap >= wanted_size) {
    800061fe:	9f85                	subw	a5,a5,s1
    80006200:	fce7c2e3          	blt	a5,a4,800061c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x118>
    buffer_offsets_[buffer_id] = candidate_offset;
    80006204:	002d1793          	slli	a5,s10,0x2
    80006208:	97d6                	add	a5,a5,s5
    8000620a:	c384                	sw	s1,0(a5)
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    8000620c:	5818                	lw	a4,48(s0)
    8000620e:	039707b3          	mul	a5,a4,s9
    ++next_free_entry_;
    80006212:	0017069b          	addiw	a3,a4,1
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    80006216:	97ca                	add	a5,a5,s2
    new_entry->offset = candidate_offset;
    80006218:	c384                	sw	s1,0(a5)
    new_entry->requirements_index = buffer_id;
    8000621a:	01a7a223          	sw	s10,4(a5)
    ++next_free_entry_;
    8000621e:	d814                	sw	a3,48(s0)
    if (first_entry->offset > candidate_offset) {
    80006220:	000ba683          	lw	a3,0(s7)
    80006224:	00d4d863          	bge	s1,a3,80006234 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x188>
      first_entry->next_entry_index = first_entry_index_;
    80006228:	5854                	lw	a3,52(s0)
    8000622a:	8bbe                	mv	s7,a5
    8000622c:	c794                	sw	a3,8(a5)
      first_entry_index_ = new_entry_index;
    8000622e:	d858                	sw	a4,52(s0)
  for (int i = 1; i < buffer_count_; ++i) {
    80006230:	0985                	addi	s3,s3,1
    80006232:	b7a5                	j	8000619a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xee>
    80006234:	86de                	mv	a3,s7
        const int next_entry_index = current_entry->next_entry_index;
    80006236:	468c                	lw	a1,8(a3)
        if (next_entry_index == -1) {
    80006238:	01859863          	bne	a1,s8,80006248 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x19c>
          current_entry->next_entry_index = new_entry_index;
    8000623c:	c698                	sw	a4,8(a3)
          new_entry->next_entry_index = -1;
    8000623e:	0187a423          	sw	s8,8(a5)
          break;
    80006242:	b7fd                	j	80006230 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
    80006244:	86b2                	mv	a3,a2
    80006246:	bfc5                	j	80006236 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x18a>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    80006248:	03958633          	mul	a2,a1,s9
    8000624c:	964a                	add	a2,a2,s2
        if (next_entry->offset > candidate_offset) {
    8000624e:	4208                	lw	a0,0(a2)
    80006250:	fea4dae3          	bge	s1,a0,80006244 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x198>
          new_entry->next_entry_index = current_entry->next_entry_index;
    80006254:	c78c                	sw	a1,8(a5)
          current_entry->next_entry_index = new_entry_index;
    80006256:	c698                	sw	a4,8(a3)
          break;
    80006258:	bfe1                	j	80006230 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
}
    8000625a:	60aa                	ld	ra,136(sp)
    8000625c:	640a                	ld	s0,128(sp)
    8000625e:	74e6                	ld	s1,120(sp)
    80006260:	7946                	ld	s2,112(sp)
    80006262:	79a6                	ld	s3,104(sp)
    80006264:	7a06                	ld	s4,96(sp)
    80006266:	6ae6                	ld	s5,88(sp)
    80006268:	6b46                	ld	s6,80(sp)
    8000626a:	6ba6                	ld	s7,72(sp)
    8000626c:	6c06                	ld	s8,64(sp)
    8000626e:	7ce2                	ld	s9,56(sp)
    80006270:	7d42                	ld	s10,48(sp)
    80006272:	7da2                	ld	s11,40(sp)
    80006274:	6149                	addi	sp,sp,144
    80006276:	8082                	ret
    80006278:	8082                	ret

000000008000627a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    8000627a:	1141                	addi	sp,sp,-16
    8000627c:	e022                	sd	s0,0(sp)
    8000627e:	e406                	sd	ra,8(sp)
    80006280:	842a                	mv	s0,a0
  CalculateOffsetsIfNeeded();
    80006282:	e2bff0ef          	jal	ra,800060ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
    80006286:	445c                	lw	a5,12(s0)
    return 0;
    80006288:	4501                	li	a0,0
  if (buffer_count_ == 0) {
    8000628a:	cf85                	beqz	a5,800062c2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x48>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    8000628c:	585c                	lw	a5,52(s0)
    8000628e:	4731                	li	a4,12
    80006290:	7410                	ld	a2,40(s0)
    80006292:	02e787b3          	mul	a5,a5,a4
  size_t max_size = 0;
    80006296:	4501                	li	a0,0
    if (entry->next_entry_index == -1) {
    80006298:	587d                	li	a6,-1
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    8000629a:	45b1                	li	a1,12
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    8000629c:	97b2                	add	a5,a5,a2
  while (entry) {
    8000629e:	c395                	beqz	a5,800062c2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x48>
        &requirements_[entry->requirements_index];
    800062a0:	43d4                	lw	a3,4(a5)
    const size_t current_size = entry->offset + requirements->size;
    800062a2:	6818                	ld	a4,16(s0)
    800062a4:	0692                	slli	a3,a3,0x4
    800062a6:	9736                	add	a4,a4,a3
    800062a8:	4318                	lw	a4,0(a4)
    800062aa:	4394                	lw	a3,0(a5)
    800062ac:	9f35                	addw	a4,a4,a3
    800062ae:	00e57363          	bgeu	a0,a4,800062b4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x3a>
    800062b2:	853a                	mv	a0,a4
    if (entry->next_entry_index == -1) {
    800062b4:	479c                	lw	a5,8(a5)
    800062b6:	01078663          	beq	a5,a6,800062c2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x48>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    800062ba:	02b787b3          	mul	a5,a5,a1
    800062be:	97b2                	add	a5,a5,a2
  while (entry) {
    800062c0:	bff9                	j	8000629e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x24>
}
    800062c2:	60a2                	ld	ra,8(sp)
    800062c4:	6402                	ld	s0,0(sp)
    800062c6:	0141                	addi	sp,sp,16
    800062c8:	8082                	ret

00000000800062ca <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    800062ca:	7179                	addi	sp,sp,-48
    800062cc:	f022                	sd	s0,32(sp)
    800062ce:	ec26                	sd	s1,24(sp)
    800062d0:	e84a                	sd	s2,16(sp)
    800062d2:	e432                	sd	a2,8(sp)
    800062d4:	f406                	sd	ra,40(sp)
    800062d6:	842a                	mv	s0,a0
    800062d8:	892e                	mv	s2,a1
    800062da:	84b6                	mv	s1,a3
  CalculateOffsetsIfNeeded();
    800062dc:	dd1ff0ef          	jal	ra,800060ac <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    800062e0:	6622                	ld	a2,8(sp)
    800062e2:	00064563          	bltz	a2,800062ec <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    800062e6:	445c                	lw	a5,12(s0)
    800062e8:	02f64163          	blt	a2,a5,8000630a <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x40>
    TF_LITE_REPORT_ERROR(error_reporter,
    800062ec:	4454                	lw	a3,12(s0)
    800062ee:	00086597          	auipc	a1,0x86
    800062f2:	35258593          	addi	a1,a1,850 # 8008c640 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE+0x50>
    800062f6:	854a                	mv	a0,s2
    800062f8:	5b5000ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    800062fc:	4505                	li	a0,1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
    800062fe:	70a2                	ld	ra,40(sp)
    80006300:	7402                	ld	s0,32(sp)
    80006302:	64e2                	ld	s1,24(sp)
    80006304:	6942                	ld	s2,16(sp)
    80006306:	6145                	addi	sp,sp,48
    80006308:	8082                	ret
  *offset = buffer_offsets_[buffer_index];
    8000630a:	7c1c                	ld	a5,56(s0)
    8000630c:	060a                	slli	a2,a2,0x2
  return kTfLiteOk;
    8000630e:	4501                	li	a0,0
  *offset = buffer_offsets_[buffer_index];
    80006310:	963e                	add	a2,a2,a5
    80006312:	421c                	lw	a5,0(a2)
    80006314:	c09c                	sw	a5,0(s1)
  return kTfLiteOk;
    80006316:	b7e5                	j	800062fe <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>

0000000080006318 <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    80006318:	0505                	addi	a0,a0,1
    8000631a:	0025151b          	slliw	a0,a0,0x2
}
    8000631e:	8082                	ret

0000000080006320 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    80006320:	47c1                	li	a5,16
    80006322:	00a7ed63          	bltu	a5,a0,8000633c <TfLiteTypeGetName+0x1c>
    80006326:	02051793          	slli	a5,a0,0x20
    8000632a:	01d7d513          	srli	a0,a5,0x1d
    8000632e:	00086797          	auipc	a5,0x86
    80006332:	43278793          	addi	a5,a5,1074 # 8008c760 <CSWTCH.21>
    80006336:	953e                	add	a0,a0,a5
    80006338:	6108                	ld	a0,0(a0)
    8000633a:	8082                	ret
const char* TfLiteTypeGetName(TfLiteType type) {
    8000633c:	00086517          	auipc	a0,0x86
    80006340:	37450513          	addi	a0,a0,884 # 8008c6b0 <_ZTVN6tflite19GreedyMemoryPlannerE+0x40>
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
    80006344:	8082                	ret

0000000080006346 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
    80006346:	1101                	addi	sp,sp,-32
    80006348:	e426                	sd	s1,8(sp)
    8000634a:	84ae                	mv	s1,a1
  if (double_multiplier == 0.) {
    8000634c:	00000593          	li	a1,0
                        int* shift) {
    80006350:	e822                	sd	s0,16(sp)
    80006352:	e04a                	sd	s2,0(sp)
    80006354:	ec06                	sd	ra,24(sp)
    80006356:	892a                	mv	s2,a0
    80006358:	8432                	mv	s0,a2
  if (double_multiplier == 0.) {
    8000635a:	bf0fa0ef          	jal	ra,8000074a <__eqdf2>
    8000635e:	e919                	bnez	a0,80006374 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x2e>
    *quantized_multiplier = 0;
    80006360:	0004a023          	sw	zero,0(s1)
    *shift = 0;
    80006364:	00042023          	sw	zero,0(s0)
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
    80006368:	60e2                	ld	ra,24(sp)
    8000636a:	6442                	ld	s0,16(sp)
    8000636c:	64a2                	ld	s1,8(sp)
    8000636e:	6902                	ld	s2,0(sp)
    80006370:	6105                	addi	sp,sp,32
    80006372:	8082                	ret
  const double q = std::frexp(double_multiplier, shift);
    80006374:	85a2                	mv	a1,s0
    80006376:	854a                	mv	a0,s2
    80006378:	1e0070ef          	jal	ra,8000d558 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    8000637c:	00009597          	auipc	a1,0x9
    80006380:	e4c5b583          	ld	a1,-436(a1) # 8000f1c8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x8>
    80006384:	d12fa0ef          	jal	ra,80000896 <__muldf3>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    80006388:	256070ef          	jal	ra,8000d5de <round>
    8000638c:	b2dfa0ef          	jal	ra,80000eb8 <__fixdfdi>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    80006390:	4785                	li	a5,1
    80006392:	07fe                	slli	a5,a5,0x1f
    80006394:	00a7d463          	bge	a5,a0,8000639c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x56>
    80006398:	5f6070ef          	jal	ra,8000d98e <abort>
  if (q_fixed == (1ll << 31)) {
    8000639c:	00f51763          	bne	a0,a5,800063aa <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x64>
    ++*shift;
    800063a0:	401c                	lw	a5,0(s0)
    q_fixed /= 2;
    800063a2:	40000537          	lui	a0,0x40000
    ++*shift;
    800063a6:	2785                	addiw	a5,a5,1
    800063a8:	c01c                	sw	a5,0(s0)
  if (*shift < -31) {
    800063aa:	4018                	lw	a4,0(s0)
    800063ac:	5785                	li	a5,-31
    800063ae:	00f75563          	bge	a4,a5,800063b8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x72>
    *shift = 0;
    800063b2:	00042023          	sw	zero,0(s0)
    q_fixed = 0;
    800063b6:	4501                	li	a0,0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    800063b8:	c088                	sw	a0,0(s1)
    800063ba:	b77d                	j	80006368 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x22>

00000000800063bc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
    800063bc:	1101                	addi	sp,sp,-32
    800063be:	e04a                	sd	s2,0(sp)
    800063c0:	892e                	mv	s2,a1
  TFLITE_CHECK_GT(double_multiplier, 1.);
    800063c2:	00009597          	auipc	a1,0x9
    800063c6:	e0e5b583          	ld	a1,-498(a1) # 8000f1d0 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x10>
                                      int* left_shift) {
    800063ca:	e822                	sd	s0,16(sp)
    800063cc:	e426                	sd	s1,8(sp)
    800063ce:	ec06                	sd	ra,24(sp)
    800063d0:	84aa                	mv	s1,a0
    800063d2:	8432                	mv	s0,a2
  TFLITE_CHECK_GT(double_multiplier, 1.);
    800063d4:	bd6fa0ef          	jal	ra,800007aa <__gedf2>
    800063d8:	00a04463          	bgtz	a0,800063e0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x24>
    800063dc:	5b2070ef          	jal	ra,8000d98e <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    800063e0:	8622                	mv	a2,s0
    800063e2:	85ca                	mv	a1,s2
    800063e4:	8526                	mv	a0,s1
    800063e6:	f61ff0ef          	jal	ra,80006346 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    800063ea:	401c                	lw	a5,0(s0)
    800063ec:	fe07c8e3          	bltz	a5,800063dc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
}
    800063f0:	60e2                	ld	ra,24(sp)
    800063f2:	6442                	ld	s0,16(sp)
    800063f4:	64a2                	ld	s1,8(sp)
    800063f6:	6902                	ld	s2,0(sp)
    800063f8:	6105                	addi	sp,sp,32
    800063fa:	8082                	ret

00000000800063fc <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    800063fc:	7139                	addi	sp,sp,-64
    800063fe:	ec4e                	sd	s3,24(sp)
    80006400:	89aa                	mv	s3,a0
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    80006402:	80000537          	lui	a0,0x80000
    80006406:	00c5553b          	srlw	a0,a0,a2
                              int32_t* quantized_multiplier, int* left_shift) {
    8000640a:	fc06                	sd	ra,56(sp)
    8000640c:	f822                	sd	s0,48(sp)
    8000640e:	f426                	sd	s1,40(sp)
    80006410:	f04a                	sd	s2,32(sp)
    80006412:	84b6                	mv	s1,a3
    80006414:	893a                	mv	s2,a4
    80006416:	e42e                	sd	a1,8(sp)
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    80006418:	a4dfa0ef          	jal	ra,80000e64 <__floatsidf>
    8000641c:	65a2                	ld	a1,8(sp)
    8000641e:	842a                	mv	s0,a0
    80006420:	854e                	mv	a0,s3
    80006422:	c74fa0ef          	jal	ra,80000896 <__muldf3>
    80006426:	85aa                	mv	a1,a0
    80006428:	8522                	mv	a0,s0
    8000642a:	c6cfa0ef          	jal	ra,80000896 <__muldf3>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    8000642e:	00009997          	auipc	s3,0x9
    80006432:	dc29b983          	ld	s3,-574(s3) # 8000f1f0 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x30>
    80006436:	85ce                	mv	a1,s3
    80006438:	842a                	mv	s0,a0
    8000643a:	b70fa0ef          	jal	ra,800007aa <__gedf2>
    8000643e:	00a05363          	blez	a0,80006444 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x48>
	return __b;
    80006442:	844e                	mv	s0,s3
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    80006444:	8522                	mv	a0,s0
                                   quantized_multiplier, left_shift);
}
    80006446:	7442                	ld	s0,48(sp)
    80006448:	70e2                	ld	ra,56(sp)
    8000644a:	69e2                	ld	s3,24(sp)
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    8000644c:	864a                	mv	a2,s2
    8000644e:	85a6                	mv	a1,s1
}
    80006450:	7902                	ld	s2,32(sp)
    80006452:	74a2                	ld	s1,40(sp)
    80006454:	6121                	addi	sp,sp,64
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    80006456:	b79d                	j	800063bc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>

0000000080006458 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
    80006458:	7179                	addi	sp,sp,-48
    8000645a:	ec26                	sd	s1,24(sp)
    8000645c:	84aa                	mv	s1,a0
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
    8000645e:	4505                	li	a0,1
    80006460:	0095153b          	sllw	a0,a0,s1
                         int total_signed_bits) {
    80006464:	f022                	sd	s0,32(sp)
      1.0 * ((1 << input_integer_bits) - 1) *
    80006466:	357d                	addiw	a0,a0,-1
                         int total_signed_bits) {
    80006468:	8432                	mv	s0,a2
    8000646a:	f406                	sd	ra,40(sp)
    8000646c:	e84a                	sd	s2,16(sp)
    8000646e:	e44e                	sd	s3,8(sp)
    80006470:	892e                	mv	s2,a1
      (1ll << (total_signed_bits - input_integer_bits)) /
    80006472:	9c05                	subw	s0,s0,s1
      1.0 * ((1 << input_integer_bits) - 1) *
    80006474:	9f1fa0ef          	jal	ra,80000e64 <__floatsidf>
      (1ll << (total_signed_bits - input_integer_bits)) /
    80006478:	4485                	li	s1,1
      1.0 * ((1 << input_integer_bits) - 1) *
    8000647a:	89aa                	mv	s3,a0
    8000647c:	00849533          	sll	a0,s1,s0
    80006480:	a99fa0ef          	jal	ra,80000f18 <__floatdidf>
    80006484:	85aa                	mv	a1,a0
    80006486:	854e                	mv	a0,s3
    80006488:	c0efa0ef          	jal	ra,80000896 <__muldf3>
    8000648c:	842a                	mv	s0,a0
      (1ll << (total_signed_bits - input_integer_bits)) /
    8000648e:	01249533          	sll	a0,s1,s2
    80006492:	a87fa0ef          	jal	ra,80000f18 <__floatdidf>
    80006496:	85aa                	mv	a1,a0
  const double max_input_rescaled =
    80006498:	8522                	mv	a0,s0
    8000649a:	860fa0ef          	jal	ra,800004fa <__divdf3>
      (1ll << input_left_shift);
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
    8000649e:	779060ef          	jal	ra,8000d416 <floor>
    800064a2:	975fa0ef          	jal	ra,80000e16 <__fixdfsi>
#endif  // TFLITE_EMULATE_FLOAT
}
    800064a6:	70a2                	ld	ra,40(sp)
    800064a8:	7402                	ld	s0,32(sp)
    800064aa:	64e2                	ld	s1,24(sp)
    800064ac:	6942                	ld	s2,16(sp)
    800064ae:	69a2                	ld	s3,8(sp)
    800064b0:	2501                	sext.w	a0,a0
    800064b2:	6145                	addi	sp,sp,48
    800064b4:	8082                	ret

00000000800064b6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
  if (context->tensors != nullptr) {
    800064b6:	6918                	ld	a4,16(a0)
    800064b8:	e319                	bnez	a4,800064be <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x8>
    return &context->tensors[tensor_index];
  } else {
    return context->GetTensor(context, tensor_index);
    800064ba:	715c                	ld	a5,160(a0)
    800064bc:	8782                	jr	a5
    return &context->tensors[tensor_index];
    800064be:	07000513          	li	a0,112
    800064c2:	02a587b3          	mul	a5,a1,a0
    800064c6:	00f70533          	add	a0,a4,a5
  }
}
    800064ca:	8082                	ret

00000000800064cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>:
}

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
    800064cc:	7179                	addi	sp,sp,-48
    800064ce:	f022                	sd	s0,32(sp)
    800064d0:	842a                	mv	s0,a0
  const float tmp = TfLiteRound(f / scale);
    800064d2:	8536                	mv	a0,a3
                             int32_t zero_point, float f, int32_t& q) {
    800064d4:	f406                	sd	ra,40(sp)
    800064d6:	ec26                	sd	s1,24(sp)
    800064d8:	e84a                	sd	s2,16(sp)
    800064da:	e44e                	sd	s3,8(sp)
    800064dc:	893a                	mv	s2,a4
    800064de:	89b2                	mv	s3,a2
  const float tmp = TfLiteRound(f / scale);
    800064e0:	e35fa0ef          	jal	ra,80001314 <__divsf3>
    800064e4:	80bfb0ef          	jal	ra,80001cee <__extendsfdf2>
    800064e8:	0f6070ef          	jal	ra,8000d5de <round>
    800064ec:	86ffb0ef          	jal	ra,80001d5a <__truncdfsf2>
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    800064f0:	00009597          	auipc	a1,0x9
    800064f4:	d6c5a583          	lw	a1,-660(a1) # 8000f25c <_global_impure_ptr+0xc>
    800064f8:	84aa                	mv	s1,a0
    800064fa:	870fb0ef          	jal	ra,8000156a <__gesf2>
    800064fe:	02054a63          	bltz	a0,80006532 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x66>
    80006502:	00009597          	auipc	a1,0x9
    80006506:	d5e5a583          	lw	a1,-674(a1) # 8000f260 <_global_impure_ptr+0x10>
    8000650a:	8526                	mv	a0,s1
    8000650c:	8e2fb0ef          	jal	ra,800015ee <__lesf2>
    80006510:	02a04163          	bgtz	a0,80006532 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x66>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
    80006514:	8526                	mv	a0,s1
    80006516:	e9cfb0ef          	jal	ra,80001bb2 <__fixsfsi>
    8000651a:	0135053b          	addw	a0,a0,s3
    8000651e:	00a92023          	sw	a0,0(s2)
  return kTfLiteOk;
    80006522:	4501                	li	a0,0
}
    80006524:	70a2                	ld	ra,40(sp)
    80006526:	7402                	ld	s0,32(sp)
    80006528:	64e2                	ld	s1,24(sp)
    8000652a:	6942                	ld	s2,16(sp)
    8000652c:	69a2                	ld	s3,8(sp)
    8000652e:	6145                	addi	sp,sp,48
    80006530:	8082                	ret
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    80006532:	741c                	ld	a5,40(s0)
    80006534:	8522                	mv	a0,s0
    80006536:	00086717          	auipc	a4,0x86
    8000653a:	2b270713          	addi	a4,a4,690 # 8008c7e8 <CSWTCH.21+0x88>
    8000653e:	15900693          	li	a3,345
    80006542:	00086617          	auipc	a2,0x86
    80006546:	2ce60613          	addi	a2,a2,718 # 8008c810 <CSWTCH.21+0xb0>
    8000654a:	00086597          	auipc	a1,0x86
    8000654e:	fae58593          	addi	a1,a1,-82 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006552:	9782                	jalr	a5
    80006554:	4505                	li	a0,1
    80006556:	b7f9                	j	80006524 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x58>

0000000080006558 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  const int tensor_index = ValidateTensorIndexing(
    80006558:	419c                	lw	a5,0(a1)
      context, index, node->inputs->size, node->inputs->data);
    8000655a:	0591                	addi	a1,a1,4
  if (index >= 0 && index < max_size) {
    8000655c:	00064b63          	bltz	a2,80006572 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x1a>
    80006560:	00f65963          	bge	a2,a5,80006572 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x1a>
    const int tensor_index = tensor_indices[index];
    80006564:	060a                	slli	a2,a2,0x2
    80006566:	95b2                	add	a1,a1,a2
    80006568:	418c                	lw	a1,0(a1)
  if (tensor_index < 0) {
    8000656a:	0005c463          	bltz	a1,80006572 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x1a>
  return GetTensorAtIndex(context, tensor_index);
    8000656e:	f49ff06f          	j	800064b6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
    80006572:	4501                	li	a0,0
    80006574:	8082                	ret

0000000080006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
    80006576:	618c                	ld	a1,0(a1)
    80006578:	b7c5                	j	80006558 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

000000008000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
      context, index, node->outputs->size, node->outputs->data);
    8000657a:	659c                	ld	a5,8(a1)
  const int tensor_index = ValidateTensorIndexing(
    8000657c:	4398                	lw	a4,0(a5)
      context, index, node->outputs->size, node->outputs->data);
    8000657e:	0791                	addi	a5,a5,4
  if (index >= 0 && index < max_size) {
    80006580:	00064b63          	bltz	a2,80006596 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1c>
    80006584:	00e65963          	bge	a2,a4,80006596 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1c>
    const int tensor_index = tensor_indices[index];
    80006588:	060a                	slli	a2,a2,0x2
    8000658a:	963e                	add	a2,a2,a5
    8000658c:	420c                	lw	a1,0(a2)
  if (tensor_index < 0) {
    8000658e:	0005c463          	bltz	a1,80006596 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1c>
  return GetTensorAtIndex(context, tensor_index);
    80006592:	f25ff06f          	j	800064b6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
    80006596:	4501                	li	a0,0
    80006598:	8082                	ret

000000008000659a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
    8000659a:	618c                	ld	a1,0(a1)
    8000659c:	bf75                	j	80006558 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

000000008000659e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    8000659e:	7179                	addi	sp,sp,-48
    800065a0:	87ae                	mv	a5,a1
    800065a2:	f022                	sd	s0,32(sp)
      static_cast<double>(input->params.scale * filter->params.scale);
    800065a4:	4e0c                	lw	a1,24(a2)
                                              double* multiplier) {
    800065a6:	842a                	mv	s0,a0
      static_cast<double>(input->params.scale * filter->params.scale);
    800065a8:	4f88                	lw	a0,24(a5)
                                              double* multiplier) {
    800065aa:	ec26                	sd	s1,24(sp)
    800065ac:	e84a                	sd	s2,16(sp)
    800065ae:	e44e                	sd	s3,8(sp)
    800065b0:	f406                	sd	ra,40(sp)
    800065b2:	8936                	mv	s2,a3
    800065b4:	84ba                	mv	s1,a4
      static_cast<double>(input->params.scale * filter->params.scale);
    800065b6:	8bcfb0ef          	jal	ra,80001672 <__mulsf3>
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    800065ba:	00000593          	li	a1,0
      static_cast<double>(input->params.scale * filter->params.scale);
    800065be:	89aa                	mv	s3,a0
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    800065c0:	fabfa0ef          	jal	ra,8000156a <__gesf2>
    800065c4:	02055b63          	bgez	a0,800065fa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>
    800065c8:	741c                	ld	a5,40(s0)
    800065ca:	8522                	mv	a0,s0
    800065cc:	00086717          	auipc	a4,0x86
    800065d0:	29470713          	addi	a4,a4,660 # 8008c860 <CSWTCH.21+0x100>
    800065d4:	14b00693          	li	a3,331
    800065d8:	00086617          	auipc	a2,0x86
    800065dc:	23860613          	addi	a2,a2,568 # 8008c810 <CSWTCH.21+0xb0>
    800065e0:	00086597          	auipc	a1,0x86
    800065e4:	f1858593          	addi	a1,a1,-232 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    800065e8:	9782                	jalr	a5
    800065ea:	4505                	li	a0,1
}
    800065ec:	70a2                	ld	ra,40(sp)
    800065ee:	7402                	ld	s0,32(sp)
    800065f0:	64e2                	ld	s1,24(sp)
    800065f2:	6942                	ld	s2,16(sp)
    800065f4:	69a2                	ld	s3,8(sp)
    800065f6:	6145                	addi	sp,sp,48
    800065f8:	8082                	ret
  const double input_product_scale =
    800065fa:	854e                	mv	a0,s3
    800065fc:	ef2fb0ef          	jal	ra,80001cee <__extendsfdf2>
    80006600:	842a                	mv	s0,a0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    80006602:	01892503          	lw	a0,24(s2)
    80006606:	ee8fb0ef          	jal	ra,80001cee <__extendsfdf2>
    8000660a:	85aa                	mv	a1,a0
    8000660c:	8522                	mv	a0,s0
    8000660e:	eedf90ef          	jal	ra,800004fa <__divdf3>
    80006612:	e088                	sd	a0,0(s1)
  return kTfLiteOk;
    80006614:	4501                	li	a0,0
    80006616:	bfd9                	j	800065ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4e>

0000000080006618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
    80006618:	7139                	addi	sp,sp,-64
    8000661a:	f822                	sd	s0,48(sp)
    8000661c:	842a                	mv	s0,a0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    8000661e:	4d88                	lw	a0,24(a1)
                                              double* multiplier) {
    80006620:	fc06                	sd	ra,56(sp)
    80006622:	f426                	sd	s1,40(sp)
    80006624:	f04a                	sd	s2,32(sp)
    80006626:	ec4e                	sd	s3,24(sp)
    80006628:	e852                	sd	s4,16(sp)
    8000662a:	e456                	sd	s5,8(sp)
    8000662c:	e05a                	sd	s6,0(sp)
    8000662e:	892e                	mv	s2,a1
    80006630:	89b2                	mv	s3,a2
    80006632:	84b6                	mv	s1,a3
    80006634:	8a3a                	mv	s4,a4
    80006636:	8abe                	mv	s5,a5
  const double input_product_scale = static_cast<double>(input->params.scale) *
    80006638:	eb6fb0ef          	jal	ra,80001cee <__extendsfdf2>
    8000663c:	8b2a                	mv	s6,a0
                                     static_cast<double>(filter->params.scale);
    8000663e:	0189a503          	lw	a0,24(s3)
    80006642:	eacfb0ef          	jal	ra,80001cee <__extendsfdf2>
    80006646:	85aa                	mv	a1,a0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    80006648:	855a                	mv	a0,s6
    8000664a:	a4cfa0ef          	jal	ra,80000896 <__muldf3>
  if (bias) {
    8000664e:	cc85                	beqz	s1,80006686 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6e>
    80006650:	8b2a                	mv	s6,a0
    const double bias_scale = static_cast<double>(bias->params.scale);
    80006652:	4c88                	lw	a0,24(s1)
    80006654:	e9afb0ef          	jal	ra,80001cee <__extendsfdf2>
    80006658:	85aa                	mv	a1,a0
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    8000665a:	855a                	mv	a0,s6
    8000665c:	c70fa0ef          	jal	ra,80000acc <__subdf3>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    80006660:	00151493          	slli	s1,a0,0x1
    const double output_scale = static_cast<double>(output->params.scale);
    80006664:	018a2503          	lw	a0,24(s4)
    80006668:	8085                	srli	s1,s1,0x1
    8000666a:	e84fb0ef          	jal	ra,80001cee <__extendsfdf2>
    8000666e:	85aa                	mv	a1,a0
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    80006670:	8526                	mv	a0,s1
    80006672:	e89f90ef          	jal	ra,800004fa <__divdf3>
    80006676:	00009597          	auipc	a1,0x9
    8000667a:	b825b583          	ld	a1,-1150(a1) # 8000f1f8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x38>
    8000667e:	9a2fa0ef          	jal	ra,80000820 <__ledf2>
    80006682:	02a04263          	bgtz	a0,800066a6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x8e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    80006686:	8522                	mv	a0,s0
}
    80006688:	7442                	ld	s0,48(sp)
    8000668a:	70e2                	ld	ra,56(sp)
    8000668c:	74a2                	ld	s1,40(sp)
    8000668e:	6b02                	ld	s6,0(sp)
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    80006690:	8756                	mv	a4,s5
    80006692:	86d2                	mv	a3,s4
}
    80006694:	6aa2                	ld	s5,8(sp)
    80006696:	6a42                	ld	s4,16(sp)
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    80006698:	864e                	mv	a2,s3
    8000669a:	85ca                	mv	a1,s2
}
    8000669c:	69e2                	ld	s3,24(sp)
    8000669e:	7902                	ld	s2,32(sp)
    800066a0:	6121                	addi	sp,sp,64
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    800066a2:	efdff06f          	j	8000659e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    800066a6:	741c                	ld	a5,40(s0)
    800066a8:	8522                	mv	a0,s0
    800066aa:	00086717          	auipc	a4,0x86
    800066ae:	1d670713          	addi	a4,a4,470 # 8008c880 <CSWTCH.21+0x120>
    800066b2:	13e00693          	li	a3,318
    800066b6:	00086617          	auipc	a2,0x86
    800066ba:	15a60613          	addi	a2,a2,346 # 8008c810 <CSWTCH.21+0xb0>
    800066be:	00086597          	auipc	a1,0x86
    800066c2:	e3a58593          	addi	a1,a1,-454 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    800066c6:	9782                	jalr	a5
}
    800066c8:	70e2                	ld	ra,56(sp)
    800066ca:	7442                	ld	s0,48(sp)
    800066cc:	74a2                	ld	s1,40(sp)
    800066ce:	7902                	ld	s2,32(sp)
    800066d0:	69e2                	ld	s3,24(sp)
    800066d2:	6a42                	ld	s4,16(sp)
    800066d4:	6aa2                	ld	s5,8(sp)
    800066d6:	6b02                	ld	s6,0(sp)
    800066d8:	4505                	li	a0,1
    800066da:	6121                	addi	sp,sp,64
    800066dc:	8082                	ret

00000000800066de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    800066de:	715d                	addi	sp,sp,-80
    800066e0:	f44e                	sd	s3,40(sp)
    800066e2:	89ba                	mv	s3,a4
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    800066e4:	4218                	lw	a4,0(a2)
                                               int32_t* act_max) {
    800066e6:	f84a                	sd	s2,48(sp)
    800066e8:	f052                	sd	s4,32(sp)
    800066ea:	e486                	sd	ra,72(sp)
    800066ec:	8a36                	mv	s4,a3
    800066ee:	e0a2                	sd	s0,64(sp)
    800066f0:	fc26                	sd	s1,56(sp)
  if (output->type == kTfLiteUInt8) {
    800066f2:	468d                	li	a3,3
                                               int32_t* act_max) {
    800066f4:	892a                	mv	s2,a0
    800066f6:	87ae                	mv	a5,a1
  if (output->type == kTfLiteUInt8) {
    800066f8:	04d70163          	beq	a4,a3,8000673a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    800066fc:	46a5                	li	a3,9
    800066fe:	06d70863          	beq	a4,a3,8000676e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x90>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    80006702:	469d                	li	a3,7
    80006704:	06d70a63          	beq	a4,a3,80006778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x9a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    80006708:	751c                	ld	a5,40(a0)
    8000670a:	00086717          	auipc	a4,0x86
    8000670e:	19e70713          	addi	a4,a4,414 # 8008c8a8 <CSWTCH.21+0x148>
    80006712:	19100693          	li	a3,401
    80006716:	00086617          	auipc	a2,0x86
    8000671a:	0fa60613          	addi	a2,a2,250 # 8008c810 <CSWTCH.21+0xb0>
    8000671e:	00086597          	auipc	a1,0x86
    80006722:	dda58593          	addi	a1,a1,-550 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006726:	9782                	jalr	a5
    80006728:	4505                	li	a0,1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
    8000672a:	60a6                	ld	ra,72(sp)
    8000672c:	6406                	ld	s0,64(sp)
    8000672e:	74e2                	ld	s1,56(sp)
    80006730:	7942                	ld	s2,48(sp)
    80006732:	79a2                	ld	s3,40(sp)
    80006734:	7a02                	ld	s4,32(sp)
    80006736:	6161                	addi	sp,sp,80
    80006738:	8082                	ret
    qmax = std::numeric_limits<uint8_t>::max();
    8000673a:	0ff00413          	li	s0,255
    qmin = std::numeric_limits<uint8_t>::min();
    8000673e:	4481                	li	s1,0
  if (activation == kTfLiteActRelu) {
    80006740:	4705                	li	a4,1
    80006742:	4e0c                	lw	a1,24(a2)
    80006744:	4e50                	lw	a2,28(a2)
    80006746:	02e79d63          	bne	a5,a4,80006780 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa2>
    TF_LITE_ENSURE_OK(context,
    8000674a:	0878                	addi	a4,sp,28
    8000674c:	00000693          	li	a3,0
    80006750:	854a                	mv	a0,s2
    80006752:	d7bff0ef          	jal	ra,800064cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    80006756:	f971                	bnez	a0,8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    *act_min = std::max(qmin, tmp_q);
    80006758:	47f2                	lw	a5,28(sp)
    8000675a:	0007871b          	sext.w	a4,a5
    8000675e:	00975363          	bge	a4,s1,80006764 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x86>
    80006762:	87a6                	mv	a5,s1
    80006764:	00fa2023          	sw	a5,0(s4)
    *act_max = qmax;
    80006768:	0089a023          	sw	s0,0(s3)
    8000676c:	bf7d                	j	8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    qmax = std::numeric_limits<int8_t>::max();
    8000676e:	07f00413          	li	s0,127
    qmin = std::numeric_limits<int8_t>::min();
    80006772:	f8000493          	li	s1,-128
    80006776:	b7e9                	j	80006740 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
    qmax = std::numeric_limits<int16_t>::max();
    80006778:	6421                	lui	s0,0x8
    8000677a:	147d                	addi	s0,s0,-1
    qmin = std::numeric_limits<int16_t>::min();
    8000677c:	74e1                	lui	s1,0xffff8
    8000677e:	b7c9                	j	80006740 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
  } else if (activation == kTfLiteActRelu6) {
    80006780:	470d                	li	a4,3
    80006782:	04e79763          	bne	a5,a4,800067d0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xf2>
    TF_LITE_ENSURE_OK(context,
    80006786:	0878                	addi	a4,sp,28
    80006788:	00000693          	li	a3,0
    8000678c:	854a                	mv	a0,s2
    8000678e:	e432                	sd	a2,8(sp)
    80006790:	c22e                	sw	a1,4(sp)
    80006792:	d3bff0ef          	jal	ra,800064cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    80006796:	f951                	bnez	a0,8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    *act_min = std::max(qmin, tmp_q);
    80006798:	47f2                	lw	a5,28(sp)
    8000679a:	4592                	lw	a1,4(sp)
    8000679c:	6622                	ld	a2,8(sp)
    8000679e:	0007871b          	sext.w	a4,a5
    800067a2:	00975363          	bge	a4,s1,800067a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xca>
    800067a6:	87a6                	mv	a5,s1
    800067a8:	00fa2023          	sw	a5,0(s4)
    TF_LITE_ENSURE_OK(context,
    800067ac:	0878                	addi	a4,sp,28
    800067ae:	00009697          	auipc	a3,0x9
    800067b2:	ab66a683          	lw	a3,-1354(a3) # 8000f264 <_global_impure_ptr+0x14>
    TF_LITE_ENSURE_OK(context,
    800067b6:	854a                	mv	a0,s2
    800067b8:	d15ff0ef          	jal	ra,800064cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    800067bc:	f53d                	bnez	a0,8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    *act_max = std::min(qmax, tmp_q);
    800067be:	47f2                	lw	a5,28(sp)
    800067c0:	0007871b          	sext.w	a4,a5
    800067c4:	00e45363          	bge	s0,a4,800067ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xec>
    800067c8:	87a2                	mv	a5,s0
    800067ca:	00f9a023          	sw	a5,0(s3)
    800067ce:	bfb1                	j	8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
  } else if (activation == kTfLiteActReluN1To1) {
    800067d0:	4709                	li	a4,2
    800067d2:	02e79d63          	bne	a5,a4,8000680c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x12e>
    TF_LITE_ENSURE_OK(context,
    800067d6:	0878                	addi	a4,sp,28
    800067d8:	00009697          	auipc	a3,0x9
    800067dc:	a906a683          	lw	a3,-1392(a3) # 8000f268 <_global_impure_ptr+0x18>
    800067e0:	854a                	mv	a0,s2
    800067e2:	e432                	sd	a2,8(sp)
    800067e4:	c22e                	sw	a1,4(sp)
    800067e6:	ce7ff0ef          	jal	ra,800064cc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    800067ea:	f121                	bnez	a0,8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    *act_min = std::max(qmin, tmp_q);
    800067ec:	47f2                	lw	a5,28(sp)
    800067ee:	4592                	lw	a1,4(sp)
    800067f0:	6622                	ld	a2,8(sp)
    800067f2:	0007871b          	sext.w	a4,a5
    800067f6:	00975363          	bge	a4,s1,800067fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x11e>
    800067fa:	87a6                	mv	a5,s1
    800067fc:	00fa2023          	sw	a5,0(s4)
    TF_LITE_ENSURE_OK(context,
    80006800:	0878                	addi	a4,sp,28
    80006802:	00009697          	auipc	a3,0x9
    80006806:	a6a6a683          	lw	a3,-1430(a3) # 8000f26c <_global_impure_ptr+0x1c>
    8000680a:	b775                	j	800067b6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xd8>
    *act_min = qmin;
    8000680c:	009a2023          	sw	s1,0(s4)
    *act_max = qmax;
    80006810:	0089a023          	sw	s0,0(s3)
  return kTfLiteOk;
    80006814:	4501                	li	a0,0
                                               output, act_min, act_max);
    80006816:	bf11                	j	8000672a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>

0000000080006818 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    80006818:	7131                	addi	sp,sp,-192
    8000681a:	fcde                	sd	s7,120(sp)
    8000681c:	8bc2                	mv	s7,a6
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    8000681e:	0505a803          	lw	a6,80(a1)
    int num_channels) {
    80006822:	f526                	sd	s1,168(sp)
    80006824:	e952                	sd	s4,144(sp)
    80006826:	e556                	sd	s5,136(sp)
    80006828:	f8e2                	sd	s8,112(sp)
    8000682a:	f4e6                	sd	s9,104(sp)
    8000682c:	8abe                	mv	s5,a5
    8000682e:	fd06                	sd	ra,184(sp)
    80006830:	f922                	sd	s0,176(sp)
    80006832:	f14a                	sd	s2,160(sp)
    80006834:	ed4e                	sd	s3,152(sp)
    80006836:	e15a                	sd	s6,128(sp)
    80006838:	f0ea                	sd	s10,96(sp)
    8000683a:	ecee                	sd	s11,88(sp)
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    8000683c:	4785                	li	a5,1
    int num_channels) {
    8000683e:	8a3a                	mv	s4,a4
    80006840:	6c0e                	ld	s8,192(sp)
    80006842:	6cae                	ld	s9,200(sp)
    80006844:	6ece                	ld	t4,208(sp)
    80006846:	6e6e                	ld	t3,216(sp)
    80006848:	570e                	lw	a4,224(sp)
    8000684a:	84aa                	mv	s1,a0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    8000684c:	04f80963          	beq	a6,a5,8000689e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x86>
    80006850:	02853303          	ld	t1,40(a0) # ffffffff80000028 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000029>
    80006854:	4885                	li	a7,1
    80006856:	00086797          	auipc	a5,0x86
    8000685a:	05a78793          	addi	a5,a5,90 # 8008c8b0 <CSWTCH.21+0x150>
    8000685e:	00086717          	auipc	a4,0x86
    80006862:	07270713          	addi	a4,a4,114 # 8008c8d0 <CSWTCH.21+0x170>
    80006866:	0da00693          	li	a3,218
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    8000686a:	00086617          	auipc	a2,0x86
    8000686e:	fa660613          	addi	a2,a2,-90 # 8008c810 <CSWTCH.21+0xb0>
    80006872:	00086597          	auipc	a1,0x86
    80006876:	07e58593          	addi	a1,a1,126 # 8008c8f0 <CSWTCH.21+0x190>
    8000687a:	9302                	jalr	t1
    8000687c:	4405                	li	s0,1
}
    8000687e:	70ea                	ld	ra,184(sp)
    80006880:	8522                	mv	a0,s0
    80006882:	744a                	ld	s0,176(sp)
    80006884:	74aa                	ld	s1,168(sp)
    80006886:	790a                	ld	s2,160(sp)
    80006888:	69ea                	ld	s3,152(sp)
    8000688a:	6a4a                	ld	s4,144(sp)
    8000688c:	6aaa                	ld	s5,136(sp)
    8000688e:	6b0a                	ld	s6,128(sp)
    80006890:	7be6                	ld	s7,120(sp)
    80006892:	7c46                	ld	s8,112(sp)
    80006894:	7ca6                	ld	s9,104(sp)
    80006896:	7d06                	ld	s10,96(sp)
    80006898:	6de6                	ld	s11,88(sp)
    8000689a:	6129                	addi	sp,sp,192
    8000689c:	8082                	ret
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    8000689e:	4a20                	lw	s0,80(a2)
    800068a0:	89b2                	mv	s3,a2
    800068a2:	03040163          	beq	s0,a6,800068c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xac>
    800068a6:	02853303          	ld	t1,40(a0)
    800068aa:	4885                	li	a7,1
    800068ac:	8822                	mv	a6,s0
    800068ae:	00086797          	auipc	a5,0x86
    800068b2:	00278793          	addi	a5,a5,2 # 8008c8b0 <CSWTCH.21+0x150>
    800068b6:	00086717          	auipc	a4,0x86
    800068ba:	05a70713          	addi	a4,a4,90 # 8008c910 <CSWTCH.21+0x1b0>
    800068be:	0dc00693          	li	a3,220
    800068c2:	b765                	j	8000686a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x52>
  const auto* affine_quantization =
    800068c4:	6e30                	ld	a2,88(a2)
  TF_LITE_ENSURE(context, affine_quantization);
    800068c6:	e215                	bnez	a2,800068ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xd2>
    800068c8:	751c                	ld	a5,40(a0)
    800068ca:	00086717          	auipc	a4,0x86
    800068ce:	06670713          	addi	a4,a4,102 # 8008c930 <CSWTCH.21+0x1d0>
    800068d2:	0e700693          	li	a3,231
  TF_LITE_ENSURE(context, affine_quantization->scale);
    800068d6:	00086617          	auipc	a2,0x86
    800068da:	f3a60613          	addi	a2,a2,-198 # 8008c810 <CSWTCH.21+0xb0>
    800068de:	00086597          	auipc	a1,0x86
    800068e2:	c1a58593          	addi	a1,a1,-998 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    800068e6:	9782                	jalr	a5
    800068e8:	bf59                	j	8000687e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
    800068ea:	00063d83          	ld	s11,0(a2)
    800068ee:	000d9a63          	bnez	s11,80006902 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xea>
    800068f2:	751c                	ld	a5,40(a0)
    800068f4:	00086717          	auipc	a4,0x86
    800068f8:	05470713          	addi	a4,a4,84 # 8008c948 <CSWTCH.21+0x1e8>
    800068fc:	0e800693          	li	a3,232
    80006900:	bfd9                	j	800068d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xbe>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    80006902:	000da803          	lw	a6,0(s11)
    80006906:	892e                	mv	s2,a1
    80006908:	8b46                	mv	s6,a7
  if (is_per_channel) {
    8000690a:	0b045563          	bge	s0,a6,800069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x19c>
    TF_LITE_ENSURE(context,
    8000690e:	0005a303          	lw	t1,0(a1)
    80006912:	3365                	addiw	t1,t1,-7
    80006914:	ffd37313          	andi	t1,t1,-3
    80006918:	2301                	sext.w	t1,t1
    8000691a:	00030a63          	beqz	t1,8000692e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x116>
    8000691e:	751c                	ld	a5,40(a0)
    80006920:	00086717          	auipc	a4,0x86
    80006924:	04870713          	addi	a4,a4,72 # 8008c968 <CSWTCH.21+0x208>
    80006928:	0ec00693          	li	a3,236
    8000692c:	b76d                	j	800068d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xbe>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    8000692e:	0009a783          	lw	a5,0(s3)
    80006932:	45a5                	li	a1,9
    80006934:	02b78a63          	beq	a5,a1,80006968 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x150>
    80006938:	02853303          	ld	t1,40(a0)
    8000693c:	883e                	mv	a6,a5
    8000693e:	48a5                	li	a7,9
    80006940:	00086797          	auipc	a5,0x86
    80006944:	06878793          	addi	a5,a5,104 # 8008c9a8 <CSWTCH.21+0x248>
    80006948:	00086717          	auipc	a4,0x86
    8000694c:	07070713          	addi	a4,a4,112 # 8008c9b8 <CSWTCH.21+0x258>
    80006950:	0ee00693          	li	a3,238
    TF_LITE_ENSURE_EQ(
    80006954:	00086617          	auipc	a2,0x86
    80006958:	ebc60613          	addi	a2,a2,-324 # 8008c810 <CSWTCH.21+0xb0>
    8000695c:	00086597          	auipc	a1,0x86
    80006960:	f9458593          	addi	a1,a1,-108 # 8008c8f0 <CSWTCH.21+0x190>
    80006964:	9302                	jalr	t1
    80006966:	bf21                	j	8000687e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    80006968:	02e80063          	beq	a6,a4,80006988 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x170>
    8000696c:	88ba                	mv	a7,a4
    8000696e:	02853303          	ld	t1,40(a0)
    80006972:	00086797          	auipc	a5,0x86
    80006976:	05678793          	addi	a5,a5,86 # 8008c9c8 <CSWTCH.21+0x268>
    8000697a:	00086717          	auipc	a4,0x86
    8000697e:	05e70713          	addi	a4,a4,94 # 8008c9d8 <CSWTCH.21+0x278>
    80006982:	0ef00693          	li	a3,239
    80006986:	b7f9                	j	80006954 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x13c>
    TF_LITE_ENSURE_EQ(
    80006988:	4a10                	lw	a2,16(a2)
    8000698a:	0109b783          	ld	a5,16(s3)
    8000698e:	060a                	slli	a2,a2,0x2
    80006990:	97b2                	add	a5,a5,a2
    80006992:	0047a883          	lw	a7,4(a5)
    80006996:	01088f63          	beq	a7,a6,800069b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x19c>
    8000699a:	02853303          	ld	t1,40(a0)
    8000699e:	00086797          	auipc	a5,0x86
    800069a2:	06278793          	addi	a5,a5,98 # 8008ca00 <CSWTCH.21+0x2a0>
    800069a6:	00086717          	auipc	a4,0x86
    800069aa:	02270713          	addi	a4,a4,34 # 8008c9c8 <CSWTCH.21+0x268>
    800069ae:	0f000693          	li	a3,240
    800069b2:	b74d                	j	80006954 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x13c>
  const float input_scale = input->params.scale;
    800069b4:	01892303          	lw	t1,24(s2)
  const float output_scale = output->params.scale;
    800069b8:	018a2d03          	lw	s10,24(s4)
  for (int i = 0; i < num_channels; ++i) {
    800069bc:	004d8893          	addi	a7,s11,4
  const float output_scale = output->params.scale;
    800069c0:	4401                	li	s0,0
  for (int i = 0; i < num_channels; ++i) {
    800069c2:	0004079b          	sext.w	a5,s0
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    800069c6:	4f05                	li	t5,1
  for (int i = 0; i < num_channels; ++i) {
    800069c8:	06e7de63          	bge	a5,a4,80006a44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    800069cc:	070f5963          	bge	t5,a6,80006a3e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x226>
    800069d0:	0008a603          	lw	a2,0(a7)
    const double effective_output_scale = static_cast<double>(input_scale) *
    800069d4:	851a                	mv	a0,t1
    800069d6:	fc3a                	sd	a4,56(sp)
    800069d8:	f872                	sd	t3,48(sp)
    800069da:	f476                	sd	t4,40(sp)
    800069dc:	f036                	sd	a3,32(sp)
    800069de:	ec46                	sd	a7,24(sp)
    800069e0:	e442                	sd	a6,8(sp)
    800069e2:	c81a                	sw	t1,16(sp)
    800069e4:	ca32                	sw	a2,20(sp)
    800069e6:	b08fb0ef          	jal	ra,80001cee <__extendsfdf2>
    const double filter_scale = static_cast<double>(scale);
    800069ea:	4652                	lw	a2,20(sp)
    const double effective_output_scale = static_cast<double>(input_scale) *
    800069ec:	e02a                	sd	a0,0(sp)
    const double filter_scale = static_cast<double>(scale);
    800069ee:	8532                	mv	a0,a2
    800069f0:	afefb0ef          	jal	ra,80001cee <__extendsfdf2>
    const double effective_output_scale = static_cast<double>(input_scale) *
    800069f4:	6782                	ld	a5,0(sp)
    const double filter_scale = static_cast<double>(scale);
    800069f6:	85aa                	mv	a1,a0
    const double effective_output_scale = static_cast<double>(input_scale) *
    800069f8:	853e                	mv	a0,a5
    800069fa:	e9df90ef          	jal	ra,80000896 <__muldf3>
    800069fe:	e02a                	sd	a0,0(sp)
                                          static_cast<double>(output_scale);
    80006a00:	856a                	mv	a0,s10
    80006a02:	aecfb0ef          	jal	ra,80001cee <__extendsfdf2>
    const double effective_output_scale = static_cast<double>(input_scale) *
    80006a06:	6782                	ld	a5,0(sp)
                                          static_cast<double>(output_scale);
    80006a08:	85aa                	mv	a1,a0
    const double effective_output_scale = static_cast<double>(input_scale) *
    80006a0a:	853e                	mv	a0,a5
    80006a0c:	aeff90ef          	jal	ra,800004fa <__divdf3>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    80006a10:	00b0                	addi	a2,sp,72
    80006a12:	00cc                	addi	a1,sp,68
    80006a14:	933ff0ef          	jal	ra,80006346 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    80006a18:	7ea2                	ld	t4,40(sp)
    80006a1a:	4596                	lw	a1,68(sp)
    80006a1c:	00241793          	slli	a5,s0,0x2
    80006a20:	00fe8633          	add	a2,t4,a5
    per_channel_shift[i] = channel_shift;
    80006a24:	7e42                	ld	t3,48(sp)
    per_channel_multiplier[i] = significand;
    80006a26:	c20c                	sw	a1,0(a2)
    per_channel_shift[i] = channel_shift;
    80006a28:	68e2                	ld	a7,24(sp)
    80006a2a:	4626                	lw	a2,72(sp)
    80006a2c:	97f2                	add	a5,a5,t3
  for (int i = 0; i < num_channels; ++i) {
    80006a2e:	4342                	lw	t1,16(sp)
    80006a30:	6822                	ld	a6,8(sp)
    80006a32:	7682                	ld	a3,32(sp)
    80006a34:	7762                	ld	a4,56(sp)
    per_channel_shift[i] = channel_shift;
    80006a36:	c390                	sw	a2,0(a5)
  for (int i = 0; i < num_channels; ++i) {
    80006a38:	0405                	addi	s0,s0,1
    80006a3a:	0891                	addi	a7,a7,4
    80006a3c:	b759                	j	800069c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1aa>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    80006a3e:	004da603          	lw	a2,4(s11)
    80006a42:	bf49                	j	800069d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1bc>
  if (input->type == kTfLiteUInt8) {
    80006a44:	00092703          	lw	a4,0(s2)
    80006a48:	478d                	li	a5,3
    80006a4a:	02f71763          	bne	a4,a5,80006a78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x260>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    80006a4e:	00bc                	addi	a5,sp,72
    80006a50:	8752                	mv	a4,s4
    80006a52:	864e                	mv	a2,s3
    80006a54:	85ca                	mv	a1,s2
    80006a56:	8526                	mv	a0,s1
    double real_multiplier = 0.0;
    80006a58:	e482                	sd	zero,72(sp)
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    80006a5a:	bbfff0ef          	jal	ra,80006618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    80006a5e:	842a                	mv	s0,a0
    80006a60:	e0051fe3          	bnez	a0,8000687e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    80006a64:	6526                	ld	a0,72(sp)
    80006a66:	00d0                	addi	a2,sp,68
    80006a68:	85de                	mv	a1,s7
    80006a6a:	8ddff0ef          	jal	ra,80006346 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    80006a6e:	4796                	lw	a5,68(sp)
    80006a70:	40f007bb          	negw	a5,a5
    80006a74:	00fb2023          	sw	a5,0(s6)
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    80006a78:	00092783          	lw	a5,0(s2)
    80006a7c:	4725                	li	a4,9
    80006a7e:	00e78763          	beq	a5,a4,80006a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x274>
    80006a82:	9bed                	andi	a5,a5,-5
    80006a84:	470d                	li	a4,3
  return kTfLiteOk;
    80006a86:	4401                	li	s0,0
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    80006a88:	dee79be3          	bne	a5,a4,8000687e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
}
    80006a8c:	744a                	ld	s0,176(sp)
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    80006a8e:	000aa583          	lw	a1,0(s5)
}
    80006a92:	70ea                	ld	ra,184(sp)
    80006a94:	790a                	ld	s2,160(sp)
    80006a96:	69ea                	ld	s3,152(sp)
    80006a98:	6aaa                	ld	s5,136(sp)
    80006a9a:	6b0a                	ld	s6,128(sp)
    80006a9c:	7be6                	ld	s7,120(sp)
    80006a9e:	7d06                	ld	s10,96(sp)
    80006aa0:	6de6                	ld	s11,88(sp)
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    80006aa2:	8766                	mv	a4,s9
    80006aa4:	86e2                	mv	a3,s8
}
    80006aa6:	7ca6                	ld	s9,104(sp)
    80006aa8:	7c46                	ld	s8,112(sp)
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    80006aaa:	8652                	mv	a2,s4
    80006aac:	8526                	mv	a0,s1
}
    80006aae:	6a4a                	ld	s4,144(sp)
    80006ab0:	74aa                	ld	s1,168(sp)
    80006ab2:	6129                	addi	sp,sp,192
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    80006ab4:	c2bff06f          	j	800066de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>

0000000080006ab8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  }
  return kTfLiteActNone;
}

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
    80006ab8:	87aa                	mv	a5,a0
  switch (padding) {
    80006aba:	c519                	beqz	a0,80006ac8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x10>
    80006abc:	4705                	li	a4,1
    case Padding_SAME:
      return kTfLitePaddingSame;
    case Padding_VALID:
      return kTfLitePaddingValid;
  }
  return kTfLitePaddingUnknown;
    80006abe:	4501                	li	a0,0
  switch (padding) {
    80006ac0:	00e79563          	bne	a5,a4,80006aca <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x12>
    80006ac4:	4509                	li	a0,2
    80006ac6:	8082                	ret
      return kTfLitePaddingSame;
    80006ac8:	4505                	li	a0,1
}
    80006aca:	8082                	ret

0000000080006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  TFLITE_DCHECK(op != nullptr);
    80006acc:	e509                	bnez	a0,80006ad6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa>
                             void** builtin_data) {
    80006ace:	1141                	addi	sp,sp,-16
    80006ad0:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(op != nullptr);
    80006ad2:	6bd060ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    80006ad6:	dde5                	beqz	a1,80006ace <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2>
  TFLITE_DCHECK(allocator != nullptr);
    80006ad8:	da7d                	beqz	a2,80006ace <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2>
  TFLITE_DCHECK(builtin_data != nullptr);
    80006ada:	daf5                	beqz	a3,80006ace <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2>
    80006adc:	8082                	ret

0000000080006ade <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
TfLiteStatus FlatBufferIntVectorToArray(
    80006ade:	1141                	addi	sp,sp,-16
    80006ae0:	87aa                	mv	a5,a0
    80006ae2:	e406                	sd	ra,8(sp)
    80006ae4:	8532                	mv	a0,a2
    80006ae6:	8636                	mv	a2,a3
  if (!flat_vector) {
    80006ae8:	eb99                	bnez	a5,80006afe <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x20>
    TF_LITE_REPORT_ERROR(error_reporter,
    80006aea:	00086597          	auipc	a1,0x86
    80006aee:	f5658593          	addi	a1,a1,-170 # 8008ca40 <CSWTCH.21+0x2e0>
      TF_LITE_REPORT_ERROR(
    80006af2:	5ba000ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    80006af6:	4505                	li	a0,1
}
    80006af8:	60a2                	ld	ra,8(sp)
    80006afa:	0141                	addi	sp,sp,16
    80006afc:	8082                	ret
    size_t num_dimensions = flat_vector->size();
    80006afe:	0007e803          	lwu	a6,0(a5)
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    80006b02:	4721                	li	a4,8
    80006b04:	03076c63          	bltu	a4,a6,80006b3c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5e>
    80006b08:	00478693          	addi	a3,a5,4
      for (size_t i = 0; i < num_dimensions; ++i) {
    80006b0c:	4701                	li	a4,0
    80006b0e:	05077463          	bgeu	a4,a6,80006b56 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x78>
    FLATBUFFERS_ASSERT(i < size());
    80006b12:	4388                	lw	a0,0(a5)
    80006b14:	0007061b          	sext.w	a2,a4
    80006b18:	02a66763          	bltu	a2,a0,80006b46 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x68>
    80006b1c:	00084697          	auipc	a3,0x84
    80006b20:	eec68693          	addi	a3,a3,-276 # 8008aa08 <_ZTVN6tflite18MicroErrorReporterE+0x28>
    80006b24:	00084617          	auipc	a2,0x84
    80006b28:	ef460613          	addi	a2,a2,-268 # 8008aa18 <_ZTVN6tflite18MicroErrorReporterE+0x38>
    80006b2c:	10600593          	li	a1,262
    80006b30:	00084517          	auipc	a0,0x84
    80006b34:	fa850513          	addi	a0,a0,-88 # 8008aad8 <_ZTVN6tflite18MicroErrorReporterE+0xf8>
    80006b38:	667060ef          	jal	ra,8000d99e <__assert_func>
      TF_LITE_REPORT_ERROR(
    80006b3c:	00086597          	auipc	a1,0x86
    80006b40:	f3458593          	addi	a1,a1,-204 # 8008ca70 <CSWTCH.21+0x310>
    80006b44:	b77d                	j	80006af2 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    80006b46:	4288                	lw	a0,0(a3)
        buffer[i] = flat_vector->Get(i);
    80006b48:	00271613          	slli	a2,a4,0x2
    80006b4c:	962e                	add	a2,a2,a1
    80006b4e:	c208                	sw	a0,0(a2)
      for (size_t i = 0; i < num_dimensions; ++i) {
    80006b50:	0705                	addi	a4,a4,1
    80006b52:	0691                	addi	a3,a3,4
    80006b54:	bf6d                	j	80006b0e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x30>
  return kTfLiteOk;
    80006b56:	4501                	li	a0,0
    80006b58:	b745                	j	80006af8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1a>

0000000080006b5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
    80006b5a:	611c                	ld	a5,0(a0)
    80006b5c:	679c                	ld	a5,8(a5)
    80006b5e:	8782                	jr	a5

0000000080006b60 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
    80006b60:	1141                	addi	sp,sp,-16
    auto field_offset = GetOptionalFieldOffset(field);
    80006b62:	45b1                	li	a1,12
    80006b64:	e022                	sd	s0,0(sp)
    80006b66:	e406                	sd	ra,8(sp)
    80006b68:	842a                	mv	s0,a0
    80006b6a:	afcfd0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80006b6e:	c909                	beqz	a0,80006b80 <_ZNK6tflite8Operator15builtin_optionsEv+0x20>
    auto p = data_ + field_offset;
    80006b70:	9522                	add	a0,a0,s0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80006b72:	00056783          	lwu	a5,0(a0)
    80006b76:	953e                	add	a0,a0,a5
  }
    80006b78:	60a2                	ld	ra,8(sp)
    80006b7a:	6402                	ld	s0,0(sp)
    80006b7c:	0141                	addi	sp,sp,16
    80006b7e:	8082                	ret
    80006b80:	4501                	li	a0,0
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
    80006b82:	bfdd                	j	80006b78 <_ZNK6tflite8Operator15builtin_optionsEv+0x18>

0000000080006b84 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
  switch (tensor_type) {
    80006b84:	473d                	li	a4,15
    80006b86:	04a76f63          	bltu	a4,a0,80006be4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>
    80006b8a:	00087697          	auipc	a3,0x87
    80006b8e:	e0a68693          	addi	a3,a3,-502 # 8008d994 <__sf_fake_stdout+0x174>
    80006b92:	00251713          	slli	a4,a0,0x2
    80006b96:	9736                	add	a4,a4,a3
    80006b98:	431c                	lw	a5,0(a4)
    80006b9a:	97b6                	add	a5,a5,a3
    80006b9c:	8782                	jr	a5
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    80006b9e:	47a9                	li	a5,10
      return kTfLiteOk;
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
      return kTfLiteOk;
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
    80006ba0:	c19c                	sw	a5,0(a1)
      return kTfLiteOk;
    80006ba2:	4501                	li	a0,0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    80006ba4:	8082                	ret
      *type = kTfLiteFloat32;
    80006ba6:	4785                	li	a5,1
    80006ba8:	c19c                	sw	a5,0(a1)
      return kTfLiteOk;
    80006baa:	8082                	ret
      *type = kTfLiteFloat64;
    80006bac:	47ad                	li	a5,11
    80006bae:	bfcd                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
    80006bb0:	479d                	li	a5,7
    80006bb2:	b7fd                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
    80006bb4:	4789                	li	a5,2
    80006bb6:	b7ed                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt32;
    80006bb8:	47c1                	li	a5,16
    80006bba:	b7dd                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
    80006bbc:	478d                	li	a5,3
    80006bbe:	b7cd                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
    80006bc0:	47a5                	li	a5,9
    80006bc2:	bff9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
    80006bc4:	4791                	li	a5,4
    80006bc6:	bfe9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt64;
    80006bc8:	47b5                	li	a5,13
    80006bca:	bfd9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
    80006bcc:	4795                	li	a5,5
    80006bce:	bfc9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
    80006bd0:	4799                	li	a5,6
    80006bd2:	b7f9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
    80006bd4:	47a1                	li	a5,8
    80006bd6:	b7e9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex128;
    80006bd8:	47b1                	li	a5,12
    80006bda:	b7d9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteResource;
    80006bdc:	47b9                	li	a5,14
    80006bde:	b7c9                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteVariant;
    80006be0:	47bd                	li	a5,15
    80006be2:	bf7d                	j	80006ba0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
                               ErrorReporter* error_reporter) {
    80006be4:	1141                	addi	sp,sp,-16
    80006be6:	e406                	sd	ra,8(sp)
    80006be8:	87b2                	mv	a5,a2
      *type = kTfLiteNoType;
    80006bea:	0005a023          	sw	zero,0(a1)
      TF_LITE_REPORT_ERROR(error_reporter,
    80006bee:	862a                	mv	a2,a0
    80006bf0:	00086597          	auipc	a1,0x86
    80006bf4:	ec858593          	addi	a1,a1,-312 # 8008cab8 <CSWTCH.21+0x358>
    80006bf8:	853e                	mv	a0,a5
    80006bfa:	4b2000ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
    80006bfe:	60a2                	ld	ra,8(sp)
      return kTfLiteError;
    80006c00:	4505                	li	a0,1
}
    80006c02:	0141                	addi	sp,sp,16
    80006c04:	8082                	ret

0000000080006c06 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    80006c06:	1101                	addi	sp,sp,-32
    80006c08:	e822                	sd	s0,16(sp)
    80006c0a:	e426                	sd	s1,8(sp)
    80006c0c:	ec06                	sd	ra,24(sp)
    80006c0e:	842a                	mv	s0,a0
    80006c10:	84b2                	mv	s1,a2
    auto field_offset = GetOptionalFieldOffset(field);
    80006c12:	a54fd0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80006c16:	c501                	beqz	a0,80006c1e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x18>
    80006c18:	942a                	add	s0,s0,a0
    80006c1a:	00044483          	lbu	s1,0(s0) # 8000 <CONFIG_MAIN_STACK_SIZE+0x7000>
  }
    80006c1e:	60e2                	ld	ra,24(sp)
    80006c20:	6442                	ld	s0,16(sp)
    80006c22:	8526                	mv	a0,s1
    80006c24:	64a2                	ld	s1,8(sp)
    80006c26:	6105                	addi	sp,sp,32
    80006c28:	8082                	ret

0000000080006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
    80006c2a:	1141                	addi	sp,sp,-16
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
    80006c2c:	4601                	li	a2,0
    80006c2e:	45a9                	li	a1,10
  tflite::BuiltinOptions builtin_options_type() const {
    80006c30:	e406                	sd	ra,8(sp)
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
    80006c32:	fd5ff0ef          	jal	ra,80006c06 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
    80006c36:	60a2                	ld	ra,8(sp)
    80006c38:	2501                	sext.w	a0,a0
    80006c3a:	0141                	addi	sp,sp,16
    80006c3c:	8082                	ret

0000000080006c3e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    80006c3e:	7139                	addi	sp,sp,-64
    80006c40:	f822                	sd	s0,48(sp)
    80006c42:	ec4e                	sd	s3,24(sp)
    80006c44:	e852                	sd	s4,16(sp)
    80006c46:	89b2                	mv	s3,a2
    80006c48:	e456                	sd	s5,8(sp)
    80006c4a:	fc06                	sd	ra,56(sp)
    80006c4c:	f426                	sd	s1,40(sp)
    80006c4e:	f04a                	sd	s2,32(sp)
    80006c50:	842a                	mv	s0,a0
    80006c52:	8a2e                	mv	s4,a1
    80006c54:	8ab6                	mv	s5,a3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    80006c56:	e77ff0ef          	jal	ra,80006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    80006c5a:	0009b783          	ld	a5,0(s3)
    80006c5e:	4611                	li	a2,4
    80006c60:	02400593          	li	a1,36
    80006c64:	639c                	ld	a5,0(a5)
    80006c66:	854e                	mv	a0,s3
    80006c68:	9782                	jalr	a5
    return new (allocated_memory) T();
    80006c6a:	c935                	beqz	a0,80006cde <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    80006c6c:	02400613          	li	a2,36
    80006c70:	4581                	li	a1,0
    80006c72:	892a                	mv	s2,a0
    80006c74:	9d8fb0ef          	jal	ra,80001e4c <memset>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    80006c78:	8522                	mv	a0,s0
    80006c7a:	fb1ff0ef          	jal	ra,80006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>
    80006c7e:	47c5                	li	a5,17
    80006c80:	02f51d63          	bne	a0,a5,80006cba <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    80006c84:	8522                	mv	a0,s0
    80006c86:	edbff0ef          	jal	ra,80006b60 <_ZNK6tflite8Operator15builtin_optionsEv>
    80006c8a:	842a                	mv	s0,a0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    80006c8c:	c51d                	beqz	a0,80006cba <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    auto field_offset = GetOptionalFieldOffset(field);
    80006c8e:	4591                	li	a1,4
    80006c90:	9d6fd0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80006c94:	c11d                	beqz	a0,80006cba <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    auto p = data_ + field_offset;
    80006c96:	942a                	add	s0,s0,a0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80006c98:	00046503          	lwu	a0,0(s0)
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
      TF_LITE_ENSURE_STATUS(
    80006c9c:	00086697          	auipc	a3,0x86
    80006ca0:	e4468693          	addi	a3,a3,-444 # 8008cae0 <CSWTCH.21+0x380>
    80006ca4:	8652                	mv	a2,s4
    80006ca6:	942a                	add	s0,s0,a0
    80006ca8:	85ca                	mv	a1,s2
    80006caa:	8522                	mv	a0,s0
    80006cac:	e33ff0ef          	jal	ra,80006ade <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
    80006cb0:	84aa                	mv	s1,a0
    80006cb2:	e10d                	bnez	a0,80006cd4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    80006cb4:	401c                	lw	a5,0(s0)
    80006cb6:	02f92023          	sw	a5,32(s2)
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    80006cba:	012ab023          	sd	s2,0(s5)
  return kTfLiteOk;
    80006cbe:	4481                	li	s1,0
}
    80006cc0:	70e2                	ld	ra,56(sp)
    80006cc2:	7442                	ld	s0,48(sp)
    80006cc4:	7902                	ld	s2,32(sp)
    80006cc6:	69e2                	ld	s3,24(sp)
    80006cc8:	6a42                	ld	s4,16(sp)
    80006cca:	6aa2                	ld	s5,8(sp)
    80006ccc:	8526                	mv	a0,s1
    80006cce:	74a2                	ld	s1,40(sp)
    80006cd0:	6121                	addi	sp,sp,64
    80006cd2:	8082                	ret
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
    80006cd4:	85ca                	mv	a1,s2
    80006cd6:	854e                	mv	a0,s3
    80006cd8:	e83ff0ef          	jal	ra,80006b5a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
    80006cdc:	b7d5                	j	80006cc0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    80006cde:	00086797          	auipc	a5,0x86
    80006ce2:	e0a78793          	addi	a5,a5,-502 # 8008cae8 <CSWTCH.21+0x388>
    80006ce6:	6c300713          	li	a4,1731
    80006cea:	00086697          	auipc	a3,0x86
    80006cee:	e1668693          	addi	a3,a3,-490 # 8008cb00 <CSWTCH.21+0x3a0>
    80006cf2:	00086617          	auipc	a2,0x86
    80006cf6:	80660613          	addi	a2,a2,-2042 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006cfa:	85d2                	mv	a1,s4
    80006cfc:	8552                	mv	a0,s4
    80006cfe:	3ce000ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    80006d02:	4485                	li	s1,1
    80006d04:	bf75                	j	80006cc0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>

0000000080006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    80006d06:	1101                	addi	sp,sp,-32
    80006d08:	e822                	sd	s0,16(sp)
    80006d0a:	e426                	sd	s1,8(sp)
    80006d0c:	ec06                	sd	ra,24(sp)
    80006d0e:	842a                	mv	s0,a0
    80006d10:	84b2                	mv	s1,a2
    auto field_offset = GetOptionalFieldOffset(field);
    80006d12:	954fd0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80006d16:	c119                	beqz	a0,80006d1c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0x16>
    80006d18:	942a                	add	s0,s0,a0
    80006d1a:	4004                	lw	s1,0(s0)
  }
    80006d1c:	60e2                	ld	ra,24(sp)
    80006d1e:	6442                	ld	s0,16(sp)
    80006d20:	8526                	mv	a0,s1
    80006d22:	64a2                	ld	s1,8(sp)
    80006d24:	6105                	addi	sp,sp,32
    80006d26:	8082                	ret

0000000080006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    80006d28:	1101                	addi	sp,sp,-32
    80006d2a:	e822                	sd	s0,16(sp)
    80006d2c:	e426                	sd	s1,8(sp)
    80006d2e:	ec06                	sd	ra,24(sp)
    80006d30:	842a                	mv	s0,a0
    80006d32:	84b2                	mv	s1,a2
    auto field_offset = GetOptionalFieldOffset(field);
    80006d34:	932fd0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80006d38:	c501                	beqz	a0,80006d40 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x18>
    80006d3a:	942a                	add	s0,s0,a0
    80006d3c:	00040483          	lb	s1,0(s0)
  }
    80006d40:	60e2                	ld	ra,24(sp)
    80006d42:	6442                	ld	s0,16(sp)
    80006d44:	8526                	mv	a0,s1
    80006d46:	64a2                	ld	s1,8(sp)
    80006d48:	6105                	addi	sp,sp,32
    80006d4a:	8082                	ret

0000000080006d4c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    80006d4c:	7179                	addi	sp,sp,-48
    80006d4e:	f022                	sd	s0,32(sp)
    80006d50:	ec26                	sd	s1,24(sp)
    80006d52:	8432                	mv	s0,a2
    80006d54:	e84a                	sd	s2,16(sp)
    80006d56:	e44e                	sd	s3,8(sp)
    80006d58:	f406                	sd	ra,40(sp)
    80006d5a:	84aa                	mv	s1,a0
    80006d5c:	892e                	mv	s2,a1
    80006d5e:	89b6                	mv	s3,a3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    80006d60:	d6dff0ef          	jal	ra,80006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    80006d64:	601c                	ld	a5,0(s0)
    80006d66:	4611                	li	a2,4
    80006d68:	45e1                	li	a1,24
    80006d6a:	639c                	ld	a5,0(a5)
    80006d6c:	8522                	mv	a0,s0
    80006d6e:	9782                	jalr	a5
    return new (allocated_memory) T();
    80006d70:	c145                	beqz	a0,80006e10 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
    80006d72:	00052023          	sw	zero,0(a0)
    80006d76:	00052223          	sw	zero,4(a0)
    80006d7a:	00052423          	sw	zero,8(a0)
    80006d7e:	00052623          	sw	zero,12(a0)
    80006d82:	00052823          	sw	zero,16(a0)
    80006d86:	00052a23          	sw	zero,20(a0)
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    80006d8a:	842a                	mv	s0,a0
    80006d8c:	8526                	mv	a0,s1
    80006d8e:	e9dff0ef          	jal	ra,80006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>
    80006d92:	4785                	li	a5,1
    80006d94:	06f51463          	bne	a0,a5,80006dfc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    80006d98:	8526                	mv	a0,s1
    80006d9a:	dc7ff0ef          	jal	ra,80006b60 <_ZNK6tflite8Operator15builtin_optionsEv>
    80006d9e:	84aa                	mv	s1,a0
  if (schema_params != nullptr) {
    80006da0:	cd31                	beqz	a0,80006dfc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    80006da2:	4601                	li	a2,0
    80006da4:	4591                	li	a1,4
    80006da6:	f83ff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    80006daa:	2501                	sext.w	a0,a0
    80006dac:	d0dff0ef          	jal	ra,80006ab8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    80006db0:	c008                	sw	a0,0(s0)
    return GetField<int32_t>(VT_STRIDE_W, 0);
    80006db2:	4601                	li	a2,0
    80006db4:	4599                	li	a1,6
    80006db6:	8526                	mv	a0,s1
    80006db8:	f4fff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_width = schema_params->stride_w();
    80006dbc:	c048                	sw	a0,4(s0)
    return GetField<int32_t>(VT_STRIDE_H, 0);
    80006dbe:	4601                	li	a2,0
    80006dc0:	45a1                	li	a1,8
    80006dc2:	8526                	mv	a0,s1
    80006dc4:	f43ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_height = schema_params->stride_h();
    80006dc8:	c408                	sw	a0,8(s0)
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    80006dca:	4601                	li	a2,0
    80006dcc:	45a9                	li	a1,10
    80006dce:	8526                	mv	a0,s1
    80006dd0:	f59ff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    80006dd4:	0005079b          	sext.w	a5,a0
  switch (activation) {
    80006dd8:	4711                	li	a4,4
    80006dda:	357d                	addiw	a0,a0,-1
    80006ddc:	00a77363          	bgeu	a4,a0,80006de2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    80006de0:	4781                	li	a5,0
    params->activation =
    80006de2:	c45c                	sw	a5,12(s0)
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
    80006de4:	4605                	li	a2,1
    80006de6:	45b1                	li	a1,12
    80006de8:	8526                	mv	a0,s1
    80006dea:	f1dff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    80006dee:	c808                	sw	a0,16(s0)
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
    80006df0:	4605                	li	a2,1
    80006df2:	45b9                	li	a1,14
    80006df4:	8526                	mv	a0,s1
    80006df6:	f11ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    80006dfa:	c848                	sw	a0,20(s0)
  *builtin_data = params.release();
    80006dfc:	0089b023          	sd	s0,0(s3)
  return kTfLiteOk;
    80006e00:	4501                	li	a0,0
}
    80006e02:	70a2                	ld	ra,40(sp)
    80006e04:	7402                	ld	s0,32(sp)
    80006e06:	64e2                	ld	s1,24(sp)
    80006e08:	6942                	ld	s2,16(sp)
    80006e0a:	69a2                	ld	s3,8(sp)
    80006e0c:	6145                	addi	sp,sp,48
    80006e0e:	8082                	ret
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    80006e10:	00086797          	auipc	a5,0x86
    80006e14:	cd878793          	addi	a5,a5,-808 # 8008cae8 <CSWTCH.21+0x388>
    80006e18:	44d00713          	li	a4,1101
    80006e1c:	00086697          	auipc	a3,0x86
    80006e20:	ce468693          	addi	a3,a3,-796 # 8008cb00 <CSWTCH.21+0x3a0>
    80006e24:	00085617          	auipc	a2,0x85
    80006e28:	6d460613          	addi	a2,a2,1748 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006e2c:	85ca                	mv	a1,s2
    80006e2e:	854a                	mv	a0,s2
    80006e30:	29c000ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    80006e34:	4505                	li	a0,1
    80006e36:	b7f1                	j	80006e02 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb6>

0000000080006e38 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    80006e38:	7179                	addi	sp,sp,-48
    80006e3a:	f022                	sd	s0,32(sp)
    80006e3c:	ec26                	sd	s1,24(sp)
    80006e3e:	8432                	mv	s0,a2
    80006e40:	e84a                	sd	s2,16(sp)
    80006e42:	e44e                	sd	s3,8(sp)
    80006e44:	f406                	sd	ra,40(sp)
    80006e46:	84aa                	mv	s1,a0
    80006e48:	892e                	mv	s2,a1
    80006e4a:	89b6                	mv	s3,a3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    80006e4c:	c81ff0ef          	jal	ra,80006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    80006e50:	601c                	ld	a5,0(s0)
    80006e52:	4611                	li	a2,4
    80006e54:	45f1                	li	a1,28
    80006e56:	639c                	ld	a5,0(a5)
    80006e58:	8522                	mv	a0,s0
    80006e5a:	9782                	jalr	a5
    return new (allocated_memory) T();
    80006e5c:	cd51                	beqz	a0,80006ef8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>
    80006e5e:	4671                	li	a2,28
    80006e60:	4581                	li	a1,0
    80006e62:	842a                	mv	s0,a0
    80006e64:	fe9fa0ef          	jal	ra,80001e4c <memset>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    80006e68:	8526                	mv	a0,s1
    80006e6a:	dc1ff0ef          	jal	ra,80006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>
    80006e6e:	4789                	li	a5,2
    80006e70:	06f51a63          	bne	a0,a5,80006ee4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    80006e74:	8526                	mv	a0,s1
    80006e76:	cebff0ef          	jal	ra,80006b60 <_ZNK6tflite8Operator15builtin_optionsEv>
    80006e7a:	84aa                	mv	s1,a0
  if (schema_params != nullptr) {
    80006e7c:	c525                	beqz	a0,80006ee4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    80006e7e:	4601                	li	a2,0
    80006e80:	4591                	li	a1,4
    80006e82:	ea7ff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    80006e86:	2501                	sext.w	a0,a0
    80006e88:	c31ff0ef          	jal	ra,80006ab8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    80006e8c:	c008                	sw	a0,0(s0)
    return GetField<int32_t>(VT_STRIDE_W, 0);
    80006e8e:	4601                	li	a2,0
    80006e90:	4599                	li	a1,6
    80006e92:	8526                	mv	a0,s1
    80006e94:	e73ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_width = schema_params->stride_w();
    80006e98:	c048                	sw	a0,4(s0)
    return GetField<int32_t>(VT_STRIDE_H, 0);
    80006e9a:	4601                	li	a2,0
    80006e9c:	45a1                	li	a1,8
    80006e9e:	8526                	mv	a0,s1
    80006ea0:	e67ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_height = schema_params->stride_h();
    80006ea4:	c408                	sw	a0,8(s0)
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
    80006ea6:	4601                	li	a2,0
    80006ea8:	45a9                	li	a1,10
    80006eaa:	8526                	mv	a0,s1
    80006eac:	e5bff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->depth_multiplier = schema_params->depth_multiplier();
    80006eb0:	c448                	sw	a0,12(s0)
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    80006eb2:	4601                	li	a2,0
    80006eb4:	45b1                	li	a1,12
    80006eb6:	8526                	mv	a0,s1
    80006eb8:	e71ff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    80006ebc:	0005079b          	sext.w	a5,a0
  switch (activation) {
    80006ec0:	4711                	li	a4,4
    80006ec2:	357d                	addiw	a0,a0,-1
    80006ec4:	00a77363          	bgeu	a4,a0,80006eca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    80006ec8:	4781                	li	a5,0
    params->activation =
    80006eca:	c81c                	sw	a5,16(s0)
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
    80006ecc:	4605                	li	a2,1
    80006ece:	45b9                	li	a1,14
    80006ed0:	8526                	mv	a0,s1
    80006ed2:	e35ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    80006ed6:	c848                	sw	a0,20(s0)
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
    80006ed8:	4605                	li	a2,1
    80006eda:	45c1                	li	a1,16
    80006edc:	8526                	mv	a0,s1
    80006ede:	e29ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    80006ee2:	cc08                	sw	a0,24(s0)
  *builtin_data = params.release();
    80006ee4:	0089b023          	sd	s0,0(s3)
  return kTfLiteOk;
    80006ee8:	4501                	li	a0,0
}
    80006eea:	70a2                	ld	ra,40(sp)
    80006eec:	7402                	ld	s0,32(sp)
    80006eee:	64e2                	ld	s1,24(sp)
    80006ef0:	6942                	ld	s2,16(sp)
    80006ef2:	69a2                	ld	s3,8(sp)
    80006ef4:	6145                	addi	sp,sp,48
    80006ef6:	8082                	ret
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    80006ef8:	00086797          	auipc	a5,0x86
    80006efc:	bf078793          	addi	a5,a5,-1040 # 8008cae8 <CSWTCH.21+0x388>
    80006f00:	4a200713          	li	a4,1186
    80006f04:	00086697          	auipc	a3,0x86
    80006f08:	bfc68693          	addi	a3,a3,-1028 # 8008cb00 <CSWTCH.21+0x3a0>
    80006f0c:	00085617          	auipc	a2,0x85
    80006f10:	5ec60613          	addi	a2,a2,1516 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006f14:	85ca                	mv	a1,s2
    80006f16:	854a                	mv	a0,s2
    80006f18:	1b4000ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    80006f1c:	4505                	li	a0,1
    80006f1e:	b7f1                	j	80006eea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>

0000000080006f20 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    80006f20:	7179                	addi	sp,sp,-48
    80006f22:	f022                	sd	s0,32(sp)
    80006f24:	ec26                	sd	s1,24(sp)
    80006f26:	8432                	mv	s0,a2
    80006f28:	e84a                	sd	s2,16(sp)
    80006f2a:	e44e                	sd	s3,8(sp)
    80006f2c:	f406                	sd	ra,40(sp)
    80006f2e:	84aa                	mv	s1,a0
    80006f30:	892e                	mv	s2,a1
    80006f32:	89b6                	mv	s3,a3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    80006f34:	b99ff0ef          	jal	ra,80006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    80006f38:	601c                	ld	a5,0(s0)
    80006f3a:	4611                	li	a2,4
    80006f3c:	02800593          	li	a1,40
    80006f40:	639c                	ld	a5,0(a5)
    80006f42:	8522                	mv	a0,s0
    80006f44:	9782                	jalr	a5
    return new (allocated_memory) T();
    80006f46:	c949                	beqz	a0,80006fd8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    80006f48:	02800613          	li	a2,40
    80006f4c:	4581                	li	a1,0
    80006f4e:	842a                	mv	s0,a0
    80006f50:	efdfa0ef          	jal	ra,80001e4c <memset>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    80006f54:	8526                	mv	a0,s1
    80006f56:	cd5ff0ef          	jal	ra,80006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>
    80006f5a:	4795                	li	a5,5
    80006f5c:	06f51463          	bne	a0,a5,80006fc4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    80006f60:	8526                	mv	a0,s1
    80006f62:	bffff0ef          	jal	ra,80006b60 <_ZNK6tflite8Operator15builtin_optionsEv>
    80006f66:	84aa                	mv	s1,a0
  if (schema_params != nullptr) {
    80006f68:	cd31                	beqz	a0,80006fc4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    80006f6a:	4601                	li	a2,0
    80006f6c:	4591                	li	a1,4
    80006f6e:	dbbff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    80006f72:	2501                	sext.w	a0,a0
    80006f74:	b45ff0ef          	jal	ra,80006ab8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    80006f78:	c008                	sw	a0,0(s0)
    return GetField<int32_t>(VT_STRIDE_W, 0);
    80006f7a:	4601                	li	a2,0
    80006f7c:	4599                	li	a1,6
    80006f7e:	8526                	mv	a0,s1
    80006f80:	d87ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_width = schema_params->stride_w();
    80006f84:	c048                	sw	a0,4(s0)
    return GetField<int32_t>(VT_STRIDE_H, 0);
    80006f86:	4601                	li	a2,0
    80006f88:	45a1                	li	a1,8
    80006f8a:	8526                	mv	a0,s1
    80006f8c:	d7bff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->stride_height = schema_params->stride_h();
    80006f90:	c408                	sw	a0,8(s0)
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
    80006f92:	4601                	li	a2,0
    80006f94:	45a9                	li	a1,10
    80006f96:	8526                	mv	a0,s1
    80006f98:	d6fff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->filter_width = schema_params->filter_width();
    80006f9c:	c448                	sw	a0,12(s0)
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
    80006f9e:	4601                	li	a2,0
    80006fa0:	45b1                	li	a1,12
    80006fa2:	8526                	mv	a0,s1
    80006fa4:	d63ff0ef          	jal	ra,80006d06 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->filter_height = schema_params->filter_height();
    80006fa8:	c808                	sw	a0,16(s0)
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    80006faa:	4601                	li	a2,0
    80006fac:	45b9                	li	a1,14
    80006fae:	8526                	mv	a0,s1
    80006fb0:	d79ff0ef          	jal	ra,80006d28 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    80006fb4:	0005079b          	sext.w	a5,a0
  switch (activation) {
    80006fb8:	4711                	li	a4,4
    80006fba:	357d                	addiw	a0,a0,-1
    80006fbc:	00a77363          	bgeu	a4,a0,80006fc2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    80006fc0:	4781                	li	a5,0
    params->activation =
    80006fc2:	c85c                	sw	a5,20(s0)
  *builtin_data = params.release();
    80006fc4:	0089b023          	sd	s0,0(s3)
  return kTfLiteOk;
    80006fc8:	4501                	li	a0,0
}
    80006fca:	70a2                	ld	ra,40(sp)
    80006fcc:	7402                	ld	s0,32(sp)
    80006fce:	64e2                	ld	s1,24(sp)
    80006fd0:	6942                	ld	s2,16(sp)
    80006fd2:	69a2                	ld	s3,8(sp)
    80006fd4:	6145                	addi	sp,sp,48
    80006fd6:	8082                	ret
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    80006fd8:	00086797          	auipc	a5,0x86
    80006fdc:	b1078793          	addi	a5,a5,-1264 # 8008cae8 <CSWTCH.21+0x388>
    80006fe0:	66100713          	li	a4,1633
    80006fe4:	00086697          	auipc	a3,0x86
    80006fe8:	b1c68693          	addi	a3,a3,-1252 # 8008cb00 <CSWTCH.21+0x3a0>
    80006fec:	00085617          	auipc	a2,0x85
    80006ff0:	50c60613          	addi	a2,a2,1292 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80006ff4:	85ca                	mv	a1,s2
    80006ff6:	854a                	mv	a0,s2
    80006ff8:	0d4000ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    80006ffc:	4505                	li	a0,1
    80006ffe:	b7f1                	j	80006fca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>

0000000080007000 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    80007000:	1101                	addi	sp,sp,-32
    80007002:	e822                	sd	s0,16(sp)
    80007004:	e426                	sd	s1,8(sp)
    80007006:	ec06                	sd	ra,24(sp)
    80007008:	842a                	mv	s0,a0
    8000700a:	84b2                	mv	s1,a2
    auto field_offset = GetOptionalFieldOffset(field);
    8000700c:	e5bfc0ef          	jal	ra,80003e66 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80007010:	c119                	beqz	a0,80007016 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x16>
    80007012:	942a                	add	s0,s0,a0
    80007014:	4004                	lw	s1,0(s0)
  }
    80007016:	60e2                	ld	ra,24(sp)
    80007018:	6442                	ld	s0,16(sp)
    8000701a:	8526                	mv	a0,s1
    8000701c:	64a2                	ld	s1,8(sp)
    8000701e:	6105                	addi	sp,sp,32
    80007020:	8082                	ret

0000000080007022 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    80007022:	7179                	addi	sp,sp,-48
    80007024:	f022                	sd	s0,32(sp)
    80007026:	ec26                	sd	s1,24(sp)
    80007028:	8432                	mv	s0,a2
    8000702a:	e84a                	sd	s2,16(sp)
    8000702c:	e44e                	sd	s3,8(sp)
    8000702e:	f406                	sd	ra,40(sp)
    80007030:	84aa                	mv	s1,a0
    80007032:	892e                	mv	s2,a1
    80007034:	89b6                	mv	s3,a3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    80007036:	a97ff0ef          	jal	ra,80006acc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    8000703a:	601c                	ld	a5,0(s0)
    8000703c:	4611                	li	a2,4
    8000703e:	4591                	li	a1,4
    80007040:	639c                	ld	a5,0(a5)
    80007042:	8522                	mv	a0,s0
    80007044:	9782                	jalr	a5
    return new (allocated_memory) T();
    80007046:	cd1d                	beqz	a0,80007084 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62>
    80007048:	00000793          	li	a5,0
    8000704c:	c11c                	sw	a5,0(a0)
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    8000704e:	842a                	mv	s0,a0
    80007050:	8526                	mv	a0,s1
    80007052:	bd9ff0ef          	jal	ra,80006c2a <_ZNK6tflite8Operator20builtin_options_typeEv>
    80007056:	47a5                	li	a5,9
    80007058:	00f51c63          	bne	a0,a5,80007070 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    8000705c:	8526                	mv	a0,s1
    8000705e:	b03ff0ef          	jal	ra,80006b60 <_ZNK6tflite8Operator15builtin_optionsEv>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    80007062:	c519                	beqz	a0,80007070 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return GetField<float>(VT_BETA, 0.0f);
    80007064:	00000613          	li	a2,0
    80007068:	4591                	li	a1,4
    8000706a:	f97ff0ef          	jal	ra,80007000 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
    8000706e:	c008                	sw	a0,0(s0)
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    80007070:	0089b023          	sd	s0,0(s3)
  return kTfLiteOk;
    80007074:	4501                	li	a0,0
}
    80007076:	70a2                	ld	ra,40(sp)
    80007078:	7402                	ld	s0,32(sp)
    8000707a:	64e2                	ld	s1,24(sp)
    8000707c:	6942                	ld	s2,16(sp)
    8000707e:	69a2                	ld	s3,8(sp)
    80007080:	6145                	addi	sp,sp,48
    80007082:	8082                	ret
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    80007084:	00086797          	auipc	a5,0x86
    80007088:	a6478793          	addi	a5,a5,-1436 # 8008cae8 <CSWTCH.21+0x388>
    8000708c:	74c00713          	li	a4,1868
    80007090:	00086697          	auipc	a3,0x86
    80007094:	a7068693          	addi	a3,a3,-1424 # 8008cb00 <CSWTCH.21+0x3a0>
    80007098:	00085617          	auipc	a2,0x85
    8000709c:	46060613          	addi	a2,a2,1120 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    800070a0:	85ca                	mv	a1,s2
    800070a2:	854a                	mv	a0,s2
    800070a4:	028000ef          	jal	ra,800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    800070a8:	4505                	li	a0,1
    800070aa:	b7f1                	j	80007076 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>

00000000800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    800070ac:	715d                	addi	sp,sp,-80
    800070ae:	f032                	sd	a2,32(sp)
    800070b0:	f436                	sd	a3,40(sp)
    800070b2:	f83a                	sd	a4,48(sp)
    800070b4:	fc3e                	sd	a5,56(sp)
    800070b6:	e0c2                	sd	a6,64(sp)
    800070b8:	e4c6                	sd	a7,72(sp)
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
    800070ba:	611c                	ld	a5,0(a0)
  va_start(args, format);
    800070bc:	1010                	addi	a2,sp,32
int ErrorReporter::Report(const char* format, ...) {
    800070be:	ec06                	sd	ra,24(sp)
  int code = Report(format, args);
    800070c0:	6b9c                	ld	a5,16(a5)
  va_start(args, format);
    800070c2:	e432                	sd	a2,8(sp)
  int code = Report(format, args);
    800070c4:	9782                	jalr	a5
  va_end(args);
  return code;
}
    800070c6:	60e2                	ld	ra,24(sp)
    800070c8:	6161                	addi	sp,sp,80
    800070ca:	8082                	ret

00000000800070cc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    800070cc:	715d                	addi	sp,sp,-80
    800070ce:	f436                	sd	a3,40(sp)
    800070d0:	f83a                	sd	a4,48(sp)
    800070d2:	fc3e                	sd	a5,56(sp)
    800070d4:	e0c2                	sd	a6,64(sp)
    800070d6:	e4c6                	sd	a7,72(sp)
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
    800070d8:	611c                	ld	a5,0(a0)
int ErrorReporter::ReportError(void*, const char* format, ...) {
    800070da:	85b2                	mv	a1,a2
  va_start(args, format);
    800070dc:	1030                	addi	a2,sp,40
  int code = Report(format, args);
    800070de:	6b9c                	ld	a5,16(a5)
int ErrorReporter::ReportError(void*, const char* format, ...) {
    800070e0:	ec06                	sd	ra,24(sp)
  va_start(args, format);
    800070e2:	e432                	sd	a2,8(sp)
  int code = Report(format, args);
    800070e4:	9782                	jalr	a5
  va_end(args);
  return code;
}
    800070e6:	60e2                	ld	ra,24(sp)
    800070e8:	6161                	addi	sp,sp,80
    800070ea:	8082                	ret

00000000800070ec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    800070ec:	715d                	addi	sp,sp,-80
    800070ee:	e0a2                	sd	s0,64(sp)
    800070f0:	fc26                	sd	s1,56(sp)
    800070f2:	f84a                	sd	s2,48(sp)
    800070f4:	f44e                	sd	s3,40(sp)
    800070f6:	f052                	sd	s4,32(sp)
    800070f8:	e486                	sd	ra,72(sp)
    800070fa:	ec56                	sd	s5,24(sp)
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    800070fc:	0006b023          	sd	zero,0(a3)
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    80007100:	842a                	mv	s0,a0
    80007102:	89b2                	mv	s3,a2
    80007104:	8a36                	mv	s4,a3
    80007106:	892e                	mv	s2,a1
  auto builtin_code = GetBuiltinCode(opcode);
    80007108:	0e2000ef          	jal	ra,800071ea <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
    8000710c:	401c                	lw	a5,0(s0)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8000710e:	4721                	li	a4,8
    80007110:	84aa                	mv	s1,a0
    return data_ - ReadScalar<soffset_t>(data_);
    80007112:	40f407b3          	sub	a5,s0,a5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80007116:	0007d603          	lhu	a2,0(a5)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8000711a:	4685                	li	a3,1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8000711c:	00c77763          	bgeu	a4,a2,8000712a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
    80007120:	0087d703          	lhu	a4,8(a5)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80007124:	c319                	beqz	a4,8000712a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
    80007126:	9722                	add	a4,a4,s0
    80007128:	4314                	lw	a3,0(a4)
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    8000712a:	00048a9b          	sext.w	s5,s1
    8000712e:	09100713          	li	a4,145
    80007132:	01575c63          	bge	a4,s5,8000714a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    TF_LITE_REPORT_ERROR(
    80007136:	8656                	mv	a2,s5
    80007138:	00086597          	auipc	a1,0x86
    8000713c:	a2058593          	addi	a1,a1,-1504 # 8008cb58 <CSWTCH.21+0x3f8>
    80007140:	854e                	mv	a0,s3
    80007142:	f6bff0ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
    80007146:	4505                	li	a0,1
    80007148:	a041                	j	800071c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    8000714a:	02000713          	li	a4,32
    8000714e:	04e48863          	beq	s1,a4,8000719e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb2>
    *registration = op_resolver.FindOp(builtin_code, version);
    80007152:	00093783          	ld	a5,0(s2)
    80007156:	8636                	mv	a2,a3
    80007158:	e436                	sd	a3,8(sp)
    8000715a:	639c                	ld	a5,0(a5)
    8000715c:	85a6                	mv	a1,s1
    8000715e:	854a                	mv	a0,s2
    80007160:	9782                	jalr	a5
    80007162:	87aa                	mv	a5,a0
    80007164:	00aa3023          	sd	a0,0(s4)
    if (*registration == nullptr) {
    80007168:	66a2                	ld	a3,8(sp)
  TfLiteStatus status = kTfLiteOk;
    8000716a:	4501                	li	a0,0
    if (*registration == nullptr) {
    8000716c:	efb1                	bnez	a5,800071c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    8000716e:	00083617          	auipc	a2,0x83
    80007172:	3f260613          	addi	a2,a2,1010 # 8008a560 <space4_img+0x24d0>
  return (v < low) || (high < v);
    80007176:	000acc63          	bltz	s5,8000718e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
  return EnumNamesBuiltinOperator()[index];
    8000717a:	02049793          	slli	a5,s1,0x20
    8000717e:	01d7d493          	srli	s1,a5,0x1d
    80007182:	00084597          	auipc	a1,0x84
    80007186:	57e58593          	addi	a1,a1,1406 # 8008b700 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>
    8000718a:	94ae                	add	s1,s1,a1
    8000718c:	6090                	ld	a2,0(s1)
      TF_LITE_REPORT_ERROR(
    8000718e:	00086597          	auipc	a1,0x86
    80007192:	a2258593          	addi	a1,a1,-1502 # 8008cbb0 <CSWTCH.21+0x450>
    80007196:	854e                	mv	a0,s3
    80007198:	f15ff0ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    8000719c:	b76d                	j	80007146 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8000719e:	4719                	li	a4,6
    800071a0:	02c77d63          	bgeu	a4,a2,800071da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xee>
    800071a4:	0067d783          	lhu	a5,6(a5)
    auto p = data_ + field_offset;
    800071a8:	943e                	add	s0,s0,a5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800071aa:	cb85                	beqz	a5,800071da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xee>
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
    800071ac:	00093783          	ld	a5,0(s2)
    800071b0:	00046583          	lwu	a1,0(s0)
    800071b4:	8636                	mv	a2,a3
    800071b6:	679c                	ld	a5,8(a5)
    800071b8:	95a2                	add	a1,a1,s0
    800071ba:	0591                	addi	a1,a1,4
    800071bc:	854a                	mv	a0,s2
    800071be:	9782                	jalr	a5
    800071c0:	00aa3023          	sd	a0,0(s4)
    status = kTfLiteError;
    800071c4:	00153513          	seqz	a0,a0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    800071c8:	60a6                	ld	ra,72(sp)
    800071ca:	6406                	ld	s0,64(sp)
    800071cc:	74e2                	ld	s1,56(sp)
    800071ce:	7942                	ld	s2,48(sp)
    800071d0:	79a2                	ld	s3,40(sp)
    800071d2:	7a02                	ld	s4,32(sp)
    800071d4:	6ae2                	ld	s5,24(sp)
    800071d6:	6161                	addi	sp,sp,80
    800071d8:	8082                	ret
    TF_LITE_REPORT_ERROR(
    800071da:	00086597          	auipc	a1,0x86
    800071de:	a7e58593          	addi	a1,a1,-1410 # 8008cc58 <CSWTCH.21+0x4f8>
    800071e2:	854e                	mv	a0,s3
    800071e4:	ec9ff0ef          	jal	ra,800070ac <_ZN6tflite13ErrorReporter6ReportEPKcz>
    800071e8:	bfb9                	j	80007146 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5a>

00000000800071ea <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
    800071ea:	e509                	bnez	a0,800071f4 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0xa>
BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
    800071ec:	1141                	addi	sp,sp,-16
    800071ee:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(op_code != nullptr);
    800071f0:	79e060ef          	jal	ra,8000d98e <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    800071f4:	411c                	lw	a5,0(a0)
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800071f6:	4729                	li	a4,10
    return data_ - ReadScalar<soffset_t>(data_);
    800071f8:	40f507b3          	sub	a5,a0,a5
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    800071fc:	0007d603          	lhu	a2,0(a5)
    80007200:	02c77063          	bgeu	a4,a2,80007220 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x36>
    80007204:	00a7d703          	lhu	a4,10(a5)
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80007208:	4681                	li	a3,0
    8000720a:	c319                	beqz	a4,80007210 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>
    8000720c:	972a                	add	a4,a4,a0
    8000720e:	4314                	lw	a3,0(a4)
    80007210:	0047d783          	lhu	a5,4(a5)
    80007214:	4701                	li	a4,0
    80007216:	cb91                	beqz	a5,8000722a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x40>
    80007218:	953e                	add	a0,a0,a5
    8000721a:	00050703          	lb	a4,0(a0)
    8000721e:	a031                	j	8000722a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80007220:	4591                	li	a1,4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    80007222:	4681                	li	a3,0
    80007224:	4701                	li	a4,0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80007226:	fec5e5e3          	bltu	a1,a2,80007210 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    8000722a:	0007079b          	sext.w	a5,a4
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
    8000722e:	0006851b          	sext.w	a0,a3
    80007232:	00e6d363          	bge	a3,a4,80007238 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
    80007236:	853e                	mv	a0,a5
}
    80007238:	8082                	ret

000000008000723a <_ZN6tflite12RuntimeShapeD1Ev>:
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
    if (size_ > kMaxSmallSize) {
    8000723a:	4118                	lw	a4,0(a0)
    8000723c:	4795                	li	a5,5
    8000723e:	00e7d663          	bge	a5,a4,8000724a <_ZN6tflite12RuntimeShapeD1Ev+0x10>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
    80007242:	6508                	ld	a0,8(a0)
    80007244:	c119                	beqz	a0,8000724a <_ZN6tflite12RuntimeShapeD1Ev+0x10>
    80007246:	1900606f          	j	8000d3d6 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
    8000724a:	8082                	ret

000000008000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    8000724c:	e509                	bnez	a0,80007256 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0xa>
                                             int index) {
    8000724e:	1141                	addi	sp,sp,-16
    80007250:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context != nullptr);
    80007252:	73c060ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node != nullptr);
    80007256:	dde5                	beqz	a1,8000724e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    80007258:	6198                	ld	a4,0(a1)
    8000725a:	060a                	slli	a2,a2,0x2
    8000725c:	755c                	ld	a5,168(a0)
    8000725e:	963a                	add	a2,a2,a4
    80007260:	424c                	lw	a1,4(a2)
    80007262:	8782                	jr	a5

0000000080007264 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    80007264:	e509                	bnez	a0,8000726e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0xa>
                                       const TfLiteNode* node, int index) {
    80007266:	1141                	addi	sp,sp,-16
    80007268:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context != nullptr);
    8000726a:	724060ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node != nullptr);
    8000726e:	dde5                	beqz	a1,80007266 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x2>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    80007270:	6598                	ld	a4,8(a1)
    80007272:	060a                	slli	a2,a2,0x2
    80007274:	755c                	ld	a5,168(a0)
    80007276:	963a                	add	a2,a2,a4
    80007278:	424c                	lw	a1,4(a2)
    8000727a:	8782                	jr	a5

000000008000727c <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    8000727c:	0005d663          	bgez	a1,80007288 <_ZNK6tflite12RuntimeShape4DimsEi+0xc>
  inline int32_t Dims(int i) const {
    80007280:	1141                	addi	sp,sp,-16
    80007282:	e406                	sd	ra,8(sp)
    TFLITE_DCHECK_GE(i, 0);
    80007284:	70a060ef          	jal	ra,8000d98e <abort>
    TFLITE_DCHECK_LT(i, size_);
    80007288:	411c                	lw	a5,0(a0)
    8000728a:	fef5dbe3          	bge	a1,a5,80007280 <_ZNK6tflite12RuntimeShape4DimsEi+0x4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    8000728e:	4715                	li	a4,5
    80007290:	058a                	slli	a1,a1,0x2
    80007292:	00f75663          	bge	a4,a5,8000729e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
    80007296:	651c                	ld	a5,8(a0)
    80007298:	95be                	add	a1,a1,a5
    8000729a:	4188                	lw	a0,0(a1)
    8000729c:	8082                	ret
    8000729e:	95aa                	add	a1,a1,a0
    800072a0:	4588                	lw	a0,8(a1)
  }
    800072a2:	8082                	ret

00000000800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    800072a4:	4110                	lw	a2,0(a0)
    800072a6:	4795                	li	a5,5
    800072a8:	00850693          	addi	a3,a0,8
    800072ac:	00c7d363          	bge	a5,a2,800072b2 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0xe>
    800072b0:	6514                	ld	a3,8(a0)
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
    800072b2:	4781                	li	a5,0
    int buffer_size = 1;
    800072b4:	4505                	li	a0,1
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
    800072b6:	0007871b          	sext.w	a4,a5
    800072ba:	00c75a63          	bge	a4,a2,800072ce <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x2a>
      buffer_size *= dims_data[i];
    800072be:	00279713          	slli	a4,a5,0x2
    800072c2:	9736                	add	a4,a4,a3
    800072c4:	4318                	lw	a4,0(a4)
    800072c6:	0785                	addi	a5,a5,1
    800072c8:	02a7053b          	mulw	a0,a4,a0
    for (int i = 0; i < size_; i++) {
    800072cc:	b7ed                	j	800072b6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x12>
    }
    return buffer_size;
  }
    800072ce:	8082                	ret

00000000800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    800072d0:	00052803          	lw	a6,0(a0)
    800072d4:	4791                	li	a5,4
    800072d6:	00f80663          	beq	a6,a5,800072e2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x12>
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
    800072da:	1141                	addi	sp,sp,-16
    800072dc:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    800072de:	6b0060ef          	jal	ra,8000d98e <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    800072e2:	fe05cce3          	bltz	a1,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    800072e6:	451c                	lw	a5,8(a0)
    800072e8:	fef5d9e3          	bge	a1,a5,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    800072ec:	fe0647e3          	bltz	a2,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    800072f0:	455c                	lw	a5,12(a0)
    800072f2:	fef654e3          	bge	a2,a5,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    800072f6:	fe06c2e3          	bltz	a3,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    800072fa:	01052803          	lw	a6,16(a0)
    800072fe:	fd06dee3          	bge	a3,a6,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    80007302:	fc074ce3          	bltz	a4,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    80007306:	4948                	lw	a0,20(a0)
    80007308:	fca759e3          	bge	a4,a0,800072da <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    8000730c:	02b787bb          	mulw	a5,a5,a1
    80007310:	9fb1                	addw	a5,a5,a2
    80007312:	030787bb          	mulw	a5,a5,a6
    80007316:	9ebd                	addw	a3,a3,a5
    80007318:	02a6853b          	mulw	a0,a3,a0
}
    8000731c:	9d39                	addw	a0,a0,a4
    8000731e:	8082                	ret

0000000080007320 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    80007320:	793c                	ld	a5,112(a0)
    80007322:	e789                	bnez	a5,8000732c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0xc>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    80007324:	1141                	addi	sp,sp,-16
    80007326:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    80007328:	666060ef          	jal	ra,8000d98e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    8000732c:	04000593          	li	a1,64
    80007330:	8782                	jr	a5

0000000080007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
    80007332:	1101                	addi	sp,sp,-32
    80007334:	e822                	sd	s0,16(sp)
    80007336:	e426                	sd	s1,8(sp)
    80007338:	e04a                	sd	s2,0(sp)
    8000733a:	ec06                	sd	ra,24(sp)
    8000733c:	84b2                	mv	s1,a2
    8000733e:	8936                	mv	s2,a3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    80007340:	f3dff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007344:	842a                	mv	s0,a0
    80007346:	85ca                	mv	a1,s2
    80007348:	8526                	mv	a0,s1
    8000734a:	f33ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000734e:	00a40463          	beq	s0,a0,80007356 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x24>
    80007352:	63c060ef          	jal	ra,8000d98e <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
    80007356:	60e2                	ld	ra,24(sp)
    80007358:	6442                	ld	s0,16(sp)
    8000735a:	64a2                	ld	s1,8(sp)
    8000735c:	6902                	ld	s2,0(sp)
    8000735e:	6105                	addi	sp,sp,32
    80007360:	8082                	ret

0000000080007362 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    80007362:	7165                	addi	sp,sp,-400
    80007364:	faca                	sd	s2,368(sp)
    80007366:	893e                	mv	s2,a5
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    80007368:	495c                	lw	a5,20(a0)
    int8_t* output_data) {
    8000736a:	e322                	sd	s0,384(sp)
    8000736c:	f6ce                	sd	s3,360(sp)
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    8000736e:	f43e                	sd	a5,40(sp)
  const int stride_width = params.stride_width;
    80007370:	00a51783          	lh	a5,10(a0)
    int8_t* output_data) {
    80007374:	eed6                	sd	s5,344(sp)
    80007376:	fa6a                	sd	s10,304(sp)
  const int stride_width = params.stride_width;
    80007378:	e83e                	sd	a5,16(sp)
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
    8000737a:	00e51783          	lh	a5,14(a0)
    int8_t* output_data) {
    8000737e:	69fa                	ld	s3,408(sp)
  const int stride_height = params.stride_height;
    80007380:	00c51a83          	lh	s5,12(a0)
  const int dilation_width_factor = params.dilation_width_factor;
    80007384:	ec3e                	sd	a5,24(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    80007386:	01051783          	lh	a5,16(a0)
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
    8000738a:	00451403          	lh	s0,4(a0)
    int8_t* output_data) {
    8000738e:	e706                	sd	ra,392(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    80007390:	f03e                	sd	a5,32(sp)
  const int pad_width = params.padding_values.width;
    80007392:	00251783          	lh	a5,2(a0)
    int8_t* output_data) {
    80007396:	fea6                	sd	s1,376(sp)
    80007398:	f2d2                	sd	s4,352(sp)
  const int pad_width = params.padding_values.width;
    8000739a:	f83e                	sd	a5,48(sp)
  const int32_t output_offset = params.output_offset;
    8000739c:	4d5c                	lw	a5,28(a0)
    int8_t* output_data) {
    8000739e:	eada                	sd	s6,336(sp)
    800073a0:	e6de                	sd	s7,328(sp)
    800073a2:	e2e2                	sd	s8,320(sp)
    800073a4:	fe66                	sd	s9,312(sp)
    800073a6:	f66e                	sd	s11,296(sp)
    800073a8:	e52e                	sd	a1,136(sp)
    800073aa:	e932                	sd	a2,144(sp)
    800073ac:	ed3a                	sd	a4,152(sp)
    800073ae:	f142                	sd	a6,160(sp)
  const int32_t output_offset = params.output_offset;
    800073b0:	fc3e                	sd	a5,56(sp)

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    800073b2:	02852c83          	lw	s9,40(a0)
  const int32_t output_activation_max = params.quantized_activation_max;
    800073b6:	02c52d03          	lw	s10,44(a0)

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    800073ba:	019d5463          	bge	s10,s9,800073c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60>
    800073be:	5d0060ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    800073c2:	4298                	lw	a4,0(a3)
    800073c4:	4791                	li	a5,4
    800073c6:	84b6                	mv	s1,a3
    800073c8:	fef71be3          	bne	a4,a5,800073be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    800073cc:	00092783          	lw	a5,0(s2)
    800073d0:	fee797e3          	bne	a5,a4,800073be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    800073d4:	0009a703          	lw	a4,0(s3)
    800073d8:	fef713e3          	bne	a4,a5,800073be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    800073dc:	4681                	li	a3,0
    800073de:	864e                	mv	a2,s3
    800073e0:	4581                	li	a1,0
    800073e2:	8526                	mv	a0,s1
    800073e4:	8a46                	mv	s4,a7
    800073e6:	f4dff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    800073ea:	e4aa                	sd	a0,72(sp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    800073ec:	468d                	li	a3,3
    800073ee:	864a                	mv	a2,s2
    800073f0:	458d                	li	a1,3
    800073f2:	8526                	mv	a0,s1
    800073f4:	f3fff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    800073f8:	e8aa                	sd	a0,80(sp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    800073fa:	468d                	li	a3,3
    800073fc:	864e                	mv	a2,s3
    800073fe:	4581                	li	a1,0
    80007400:	854a                	mv	a0,s2
    80007402:	f31ff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    80007406:	67da                	ld	a5,400(sp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    80007408:	e42a                	sd	a0,8(sp)
  if (bias_data) {
    8000740a:	c799                	beqz	a5,80007418 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    8000740c:	8552                	mv	a0,s4
    8000740e:	e97ff0ef          	jal	ra,800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    80007412:	67a2                	ld	a5,8(sp)
    80007414:	faf515e3          	bne	a0,a5,800073be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    80007418:	4585                	li	a1,1
    8000741a:	8526                	mv	a0,s1
    8000741c:	e61ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007420:	ecaa                	sd	a0,88(sp)
  const int input_width = input_shape.Dims(2);
    80007422:	4589                	li	a1,2
    80007424:	8526                	mv	a0,s1
    80007426:	e57ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000742a:	f0aa                	sd	a0,96(sp)
  const int filter_height = filter_shape.Dims(1);
    8000742c:	4585                	li	a1,1
    8000742e:	854a                	mv	a0,s2
    80007430:	e4dff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007434:	f4aa                	sd	a0,104(sp)
  const int filter_width = filter_shape.Dims(2);
    80007436:	4589                	li	a1,2
    80007438:	854a                	mv	a0,s2
    8000743a:	e43ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000743e:	f8aa                	sd	a0,112(sp)
  const int output_height = output_shape.Dims(1);
    80007440:	4585                	li	a1,1
    80007442:	854e                	mv	a0,s3
    80007444:	e39ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007448:	fcaa                	sd	a0,120(sp)
  const int output_width = output_shape.Dims(2);
    8000744a:	4589                	li	a1,2
    8000744c:	854e                	mv	a0,s3
    8000744e:	e2fff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007452:	000a879b          	sext.w	a5,s5
    80007456:	fd3e                	sd	a5,184(sp)
    80007458:	408007bb          	negw	a5,s0
    8000745c:	e1be                	sd	a5,192(sp)
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    8000745e:	c00007b7          	lui	a5,0xc0000
    80007462:	0785                	addi	a5,a5,1
    80007464:	e12a                	sd	a0,128(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80007466:	4a01                	li	s4,0
    80007468:	e5be                	sd	a5,200(sp)
    8000746a:	67a6                	ld	a5,72(sp)
    8000746c:	1efa5963          	bge	s4,a5,8000765e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    80007470:	47e2                	lw	a5,24(sp)
    80007472:	6d8e                	ld	s11,192(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80007474:	4c01                	li	s8,0
    80007476:	f93e                	sd	a5,176(sp)
    80007478:	77e6                	ld	a5,120(sp)
    8000747a:	1efc5063          	bge	s8,a5,8000765a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8000747e:	47c2                	lw	a5,16(sp)
    80007480:	5702                	lw	a4,32(sp)
    80007482:	e0be                	sd	a5,64(sp)
    80007484:	77c2                	ld	a5,48(sp)
    80007486:	f53a                	sd	a4,168(sp)
    80007488:	40f00bbb          	negw	s7,a5
    8000748c:	4781                	li	a5,0
    8000748e:	670a                	ld	a4,128(sp)
    80007490:	1ce7d063          	bge	a5,a4,80007650 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    80007494:	4a81                	li	s5,0
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80007496:	6722                	ld	a4,8(sp)
    80007498:	000a8e9b          	sext.w	t4,s5
    8000749c:	1aeed563          	bge	t4,a4,80007646 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    800074a0:	8f6e                	mv	t5,s11
          int32_t acc = 0;
    800074a2:	4401                	li	s0,0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    800074a4:	4801                	li	a6,0
    800074a6:	7726                	ld	a4,104(sp)
    800074a8:	0ae85763          	bge	a6,a4,80007556 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    800074ac:	000f029b          	sext.w	t0,t5
    800074b0:	8fde                	mv	t6,s7
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    800074b2:	4881                	li	a7,0
    800074b4:	7746                	ld	a4,112(sp)
    800074b6:	08e8db63          	bge	a7,a4,8000754c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    800074ba:	000f839b          	sext.w	t2,t6

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    800074be:	0803c263          	bltz	t2,80007542 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    800074c2:	7706                	ld	a4,96(sp)
    800074c4:	06e3df63          	bge	t2,a4,80007542 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    800074c8:	0602cd63          	bltz	t0,80007542 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    800074cc:	6766                	ld	a4,88(sp)
    800074ce:	06e2da63          	bge	t0,a4,80007542 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    800074d2:	4701                	li	a4,0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    800074d4:	66c6                	ld	a3,80(sp)
    800074d6:	06d75663          	bge	a4,a3,80007542 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    800074da:	869e                	mv	a3,t2
    800074dc:	8616                	mv	a2,t0
    800074de:	85d2                	mv	a1,s4
    800074e0:	8526                	mv	a0,s1
    800074e2:	ee7e                	sd	t6,280(sp)
    800074e4:	ea7a                	sd	t5,272(sp)
    800074e6:	e23e                	sd	a5,256(sp)
    800074e8:	fd9e                	sd	t2,248(sp)
    800074ea:	f996                	sd	t0,240(sp)
    800074ec:	f1c6                	sd	a7,224(sp)
    800074ee:	edc2                	sd	a6,216(sp)
    800074f0:	e676                	sd	t4,264(sp)
    800074f2:	e9ba                	sd	a4,208(sp)
    800074f4:	dddff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    800074f8:	6eb2                	ld	t4,264(sp)
    800074fa:	788e                	ld	a7,224(sp)
    800074fc:	686e                	ld	a6,216(sp)
    800074fe:	674e                	ld	a4,208(sp)
    80007500:	86c6                	mv	a3,a7
    80007502:	8642                	mv	a2,a6
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    80007504:	8b2a                	mv	s6,a0
                int32_t filter_val = filter_data[Offset(
    80007506:	85f6                	mv	a1,t4
    80007508:	854a                	mv	a0,s2
    8000750a:	f5ba                	sd	a4,232(sp)
    8000750c:	e9f6                	sd	t4,208(sp)
    8000750e:	dc3ff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    80007512:	67ea                	ld	a5,152(sp)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007514:	772e                	ld	a4,232(sp)
    80007516:	6ece                	ld	t4,208(sp)
                                                      in_x, in_channel)];
    80007518:	9b3e                	add	s6,s6,a5
    8000751a:	000b0683          	lb	a3,0(s6)
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
    8000751e:	77a2                	ld	a5,40(sp)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007520:	686e                	ld	a6,216(sp)
    80007522:	788e                	ld	a7,224(sp)
                acc += filter_val * (input_val + input_offset);
    80007524:	9ebd                	addw	a3,a3,a5
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    80007526:	778a                	ld	a5,160(sp)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007528:	72ce                	ld	t0,240(sp)
    8000752a:	73ee                	ld	t2,248(sp)
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    8000752c:	953e                	add	a0,a0,a5
    8000752e:	00050603          	lb	a2,0(a0)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007532:	6792                	ld	a5,256(sp)
    80007534:	6f52                	ld	t5,272(sp)
                acc += filter_val * (input_val + input_offset);
    80007536:	02c686bb          	mulw	a3,a3,a2
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    8000753a:	6ff2                	ld	t6,280(sp)
    8000753c:	2705                	addiw	a4,a4,1
                acc += filter_val * (input_val + input_offset);
    8000753e:	9c35                	addw	s0,s0,a3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007540:	bf51                	j	800074d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80007542:	774a                	ld	a4,176(sp)
    80007544:	2885                	addiw	a7,a7,1
    80007546:	01f70fbb          	addw	t6,a4,t6
    8000754a:	b7ad                	j	800074b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    8000754c:	772a                	ld	a4,168(sp)
    8000754e:	2805                	addiw	a6,a6,1
    80007550:	01e70f3b          	addw	t5,a4,t5
    80007554:	bf89                	j	800074a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x144>
              }
            }
          }

          if (bias_data) {
    80007556:	675a                	ld	a4,400(sp)
    80007558:	c719                	beqz	a4,80007566 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
            acc += bias_data[out_channel];
    8000755a:	66da                	ld	a3,400(sp)
    8000755c:	002a9713          	slli	a4,s5,0x2
    80007560:	9736                	add	a4,a4,a3
    80007562:	4318                	lw	a4,0(a4)
    80007564:	9c39                	addw	s0,s0,a4
          }
          acc = MultiplyByQuantizedMultiplier(
    80007566:	66aa                	ld	a3,136(sp)
    80007568:	002a9713          	slli	a4,s5,0x2
    8000756c:	96ba                	add	a3,a3,a4
    8000756e:	428c                	lw	a1,0(a3)
    80007570:	66ca                	ld	a3,144(sp)
    80007572:	9736                	add	a4,a4,a3
    80007574:	4310                	lw	a2,0(a4)
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    80007576:	8732                	mv	a4,a2
    80007578:	00065363          	bgez	a2,8000757e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
    8000757c:	4701                	li	a4,0
    8000757e:	0007069b          	sext.w	a3,a4
  int right_shift = shift > 0 ? 0 : -shift;
    80007582:	4701                	li	a4,0
    80007584:	00c04463          	bgtz	a2,8000758c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
    80007588:	40c0073b          	negw	a4,a2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    8000758c:	00d4143b          	sllw	s0,s0,a3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    80007590:	4601                	li	a2,0
    80007592:	00859863          	bne	a1,s0,800075a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    80007596:	80000637          	lui	a2,0x80000
    8000759a:	40c58633          	sub	a2,a1,a2
    8000759e:	00163613          	seqz	a2,a2
  std::int64_t ab_64 = a_64 * b_64;
    800075a2:	02b40433          	mul	s0,s0,a1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    800075a6:	400006b7          	lui	a3,0x40000
    800075aa:	00045363          	bgez	s0,800075b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24e>
    800075ae:	66ae                	ld	a3,200(sp)
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    800075b0:	ea1d                	bnez	a2,800075e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x284>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    800075b2:	96a2                	add	a3,a3,s0
    800075b4:	4405                	li	s0,1
    800075b6:	047e                	slli	s0,s0,0x1f
    800075b8:	0286c6b3          	div	a3,a3,s0
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
    800075bc:	467d                	li	a2,31
    800075be:	2681                	sext.w	a3,a3
    800075c0:	0a85                	addi	s5,s5,1
    800075c2:	02e65763          	bge	a2,a4,800075f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    800075c6:	00085697          	auipc	a3,0x85
    800075ca:	6ca68693          	addi	a3,a3,1738 # 8008cc90 <CSWTCH.21+0x530>
    800075ce:	00085617          	auipc	a2,0x85
    800075d2:	6d260613          	addi	a2,a2,1746 # 8008cca0 <CSWTCH.21+0x540>
    800075d6:	16700593          	li	a1,359
    800075da:	00085517          	auipc	a0,0x85
    800075de:	71e50513          	addi	a0,a0,1822 # 8008ccf8 <CSWTCH.21+0x598>
    800075e2:	3bc060ef          	jal	ra,8000d99e <__assert_func>
    800075e6:	800006b7          	lui	a3,0x80000
    800075ea:	fff6c693          	not	a3,a3
    800075ee:	b7f9                	j	800075bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    800075f0:	4605                	li	a2,1
    800075f2:	00e61633          	sll	a2,a2,a4
    800075f6:	fff6059b          	addiw	a1,a2,-1
  return a & b;
    800075fa:	03f6d513          	srli	a0,a3,0x3f
  return a >> offset;
    800075fe:	4015d61b          	sraiw	a2,a1,0x1
    80007602:	40e6d73b          	sraw	a4,a3,a4
  return a ? BitNot(zero) : zero;
    80007606:	8df5                	and	a1,a1,a3
    80007608:	9e29                	addw	a2,a2,a0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    8000760a:	76e2                	ld	a3,56(sp)
  return a & b;
    8000760c:	00b62633          	slt	a2,a2,a1
  return a + b;
    80007610:	9f31                	addw	a4,a4,a2
    80007612:	9eb9                	addw	a3,a3,a4
    80007614:	8736                	mv	a4,a3
    80007616:	0196d363          	bge	a3,s9,8000761c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ba>
    8000761a:	8766                	mv	a4,s9
    8000761c:	0007069b          	sext.w	a3,a4
    80007620:	00dd5363          	bge	s10,a3,80007626 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    80007624:	876a                	mv	a4,s10
    80007626:	0007041b          	sext.w	s0,a4
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    8000762a:	86be                	mv	a3,a5
    8000762c:	8776                	mv	a4,t4
    8000762e:	8662                	mv	a2,s8
    80007630:	85d2                	mv	a1,s4
    80007632:	854e                	mv	a0,s3
    80007634:	e9be                	sd	a5,208(sp)
    80007636:	c9bff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    8000763a:	779a                	ld	a5,416(sp)
    8000763c:	953e                	add	a0,a0,a5
    8000763e:	00850023          	sb	s0,0(a0)
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80007642:	67ce                	ld	a5,208(sp)
    80007644:	bd89                	j	80007496 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80007646:	6706                	ld	a4,64(sp)
    80007648:	2785                	addiw	a5,a5,1
    8000764a:	01770bbb          	addw	s7,a4,s7
    8000764e:	b581                	j	8000748e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80007650:	77ea                	ld	a5,184(sp)
    80007652:	2c05                	addiw	s8,s8,1
    80007654:	00fd8dbb          	addw	s11,s11,a5
    80007658:	b505                	j	80007478 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x116>
  for (int batch = 0; batch < batches; ++batch) {
    8000765a:	2a05                	addiw	s4,s4,1
    8000765c:	b539                	j	8000746a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x108>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
    8000765e:	60ba                	ld	ra,392(sp)
    80007660:	641a                	ld	s0,384(sp)
    80007662:	74f6                	ld	s1,376(sp)
    80007664:	7956                	ld	s2,368(sp)
    80007666:	79b6                	ld	s3,360(sp)
    80007668:	7a16                	ld	s4,352(sp)
    8000766a:	6af6                	ld	s5,344(sp)
    8000766c:	6b56                	ld	s6,336(sp)
    8000766e:	6bb6                	ld	s7,328(sp)
    80007670:	6c16                	ld	s8,320(sp)
    80007672:	7cf2                	ld	s9,312(sp)
    80007674:	7d52                	ld	s10,304(sp)
    80007676:	7db2                	ld	s11,296(sp)
    80007678:	6159                	addi	sp,sp,400
    8000767a:	8082                	ret

000000008000767c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    8000767c:	7149                	addi	sp,sp,-368
    8000767e:	eea6                	sd	s1,344(sp)
    80007680:	84be                	mv	s1,a5
  // Get parameters.
  const int stride_width = params.stride_width;
    80007682:	00a51783          	lh	a5,10(a0)
    int16_t* output_data) {
    80007686:	ee66                	sd	s9,280(sp)
    80007688:	ea6a                	sd	s10,272(sp)
  const int stride_width = params.stride_width;
    8000768a:	e43e                	sd	a5,8(sp)
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
    8000768c:	00e51783          	lh	a5,14(a0)
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    80007690:	02852c83          	lw	s9,40(a0)
  const int32_t output_activation_max = params.quantized_activation_max;
    80007694:	02c52d03          	lw	s10,44(a0)
  const int dilation_width_factor = params.dilation_width_factor;
    80007698:	e83e                	sd	a5,16(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    8000769a:	01051783          	lh	a5,16(a0)
    int16_t* output_data) {
    8000769e:	eaca                	sd	s2,336(sp)
    800076a0:	e6ce                	sd	s3,328(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    800076a2:	ec3e                	sd	a5,24(sp)
  const int pad_width = params.padding_values.width;
    800076a4:	00251783          	lh	a5,2(a0)
    int16_t* output_data) {
    800076a8:	e2d2                	sd	s4,320(sp)
    800076aa:	f686                	sd	ra,360(sp)
    800076ac:	f2a2                	sd	s0,352(sp)
    800076ae:	fe56                	sd	s5,312(sp)
    800076b0:	fa5a                	sd	s6,304(sp)
    800076b2:	f65e                	sd	s7,296(sp)
    800076b4:	f262                	sd	s8,288(sp)
    800076b6:	e66e                	sd	s11,264(sp)
    800076b8:	f8ae                	sd	a1,112(sp)
    800076ba:	fcb2                	sd	a2,120(sp)
    800076bc:	e13a                	sd	a4,128(sp)
    800076be:	e542                	sd	a6,136(sp)
  const int pad_width = params.padding_values.width;
    800076c0:	f03e                	sd	a5,32(sp)
    int16_t* output_data) {
    800076c2:	79f6                	ld	s3,376(sp)
  const int stride_height = params.stride_height;
    800076c4:	00c51a03          	lh	s4,12(a0)
  const int pad_height = params.padding_values.height;
    800076c8:	00451903          	lh	s2,4(a0)

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    800076cc:	019d5463          	bge	s10,s9,800076d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58>
    800076d0:	2be060ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    800076d4:	4298                	lw	a4,0(a3)
    800076d6:	4791                	li	a5,4
    800076d8:	8436                	mv	s0,a3
    800076da:	fef71be3          	bne	a4,a5,800076d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    800076de:	409c                	lw	a5,0(s1)
    800076e0:	fee798e3          	bne	a5,a4,800076d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    800076e4:	0009a703          	lw	a4,0(s3)
    800076e8:	fef714e3          	bne	a4,a5,800076d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    800076ec:	4681                	li	a3,0
    800076ee:	864e                	mv	a2,s3
    800076f0:	4581                	li	a1,0
    800076f2:	8522                	mv	a0,s0
    800076f4:	8ac6                	mv	s5,a7
    800076f6:	c3dff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    800076fa:	f42a                	sd	a0,40(sp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    800076fc:	468d                	li	a3,3
    800076fe:	8626                	mv	a2,s1
    80007700:	458d                	li	a1,3
    80007702:	8522                	mv	a0,s0
    80007704:	c2fff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80007708:	f82a                	sd	a0,48(sp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    8000770a:	468d                	li	a3,3
    8000770c:	864e                	mv	a2,s3
    8000770e:	4581                	li	a1,0
    80007710:	8526                	mv	a0,s1
    80007712:	c21ff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    80007716:	77d6                	ld	a5,368(sp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    80007718:	e02a                	sd	a0,0(sp)
  if (bias_data) {
    8000771a:	c799                	beqz	a5,80007728 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xac>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    8000771c:	8556                	mv	a0,s5
    8000771e:	b87ff0ef          	jal	ra,800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    80007722:	6782                	ld	a5,0(sp)
    80007724:	faf516e3          	bne	a0,a5,800076d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    80007728:	4585                	li	a1,1
    8000772a:	8522                	mv	a0,s0
    8000772c:	b51ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007730:	fc2a                	sd	a0,56(sp)
  const int input_width = input_shape.Dims(2);
    80007732:	4589                	li	a1,2
    80007734:	8522                	mv	a0,s0
    80007736:	b47ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000773a:	e0aa                	sd	a0,64(sp)
  const int filter_height = filter_shape.Dims(1);
    8000773c:	4585                	li	a1,1
    8000773e:	8526                	mv	a0,s1
    80007740:	b3dff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007744:	e4aa                	sd	a0,72(sp)
  const int filter_width = filter_shape.Dims(2);
    80007746:	4589                	li	a1,2
    80007748:	8526                	mv	a0,s1
    8000774a:	b33ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000774e:	e8aa                	sd	a0,80(sp)
  const int output_height = output_shape.Dims(1);
    80007750:	4585                	li	a1,1
    80007752:	854e                	mv	a0,s3
    80007754:	b29ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007758:	ecaa                	sd	a0,88(sp)
  const int output_width = output_shape.Dims(2);
    8000775a:	4589                	li	a1,2
    8000775c:	854e                	mv	a0,s3
    8000775e:	b1fff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007762:	000a079b          	sext.w	a5,s4
    80007766:	f13e                	sd	a5,160(sp)
    80007768:	412007bb          	negw	a5,s2
    8000776c:	f0aa                	sd	a0,96(sp)
  for (int batch = 0; batch < batches; ++batch) {
    8000776e:	4a81                	li	s5,0
    80007770:	f53e                	sd	a5,168(sp)
    80007772:	77a2                	ld	a5,40(sp)
    80007774:	1efada63          	bge	s5,a5,80007968 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ec>
    80007778:	47c2                	lw	a5,16(sp)
    8000777a:	7baa                	ld	s7,168(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8000777c:	4c01                	li	s8,0
    8000777e:	ed3e                	sd	a5,152(sp)
    80007780:	67e6                	ld	a5,88(sp)
    80007782:	1efc5163          	bge	s8,a5,80007964 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e8>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80007786:	47a2                	lw	a5,8(sp)
    80007788:	4762                	lw	a4,24(sp)
    8000778a:	f4be                	sd	a5,104(sp)
    8000778c:	7782                	ld	a5,32(sp)
    8000778e:	e93a                	sd	a4,144(sp)
    80007790:	40f00dbb          	negw	s11,a5
    80007794:	4781                	li	a5,0
    80007796:	7706                	ld	a4,96(sp)
    80007798:	1ce7d163          	bge	a5,a4,8000795a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    8000779c:	4b01                	li	s6,0
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    8000779e:	6702                	ld	a4,0(sp)
    800077a0:	000b0e9b          	sext.w	t4,s6
    800077a4:	1aeed663          	bge	t4,a4,80007950 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d4>
    800077a8:	8f5e                	mv	t5,s7
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    800077aa:	4801                	li	a6,0
          std::int64_t acc = 0;
    800077ac:	4a01                	li	s4,0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    800077ae:	6726                	ld	a4,72(sp)
    800077b0:	0ae85663          	bge	a6,a4,8000785c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    800077b4:	000f029b          	sext.w	t0,t5
    800077b8:	8fee                	mv	t6,s11
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    800077ba:	4881                	li	a7,0
    800077bc:	6746                	ld	a4,80(sp)
    800077be:	08e8da63          	bge	a7,a4,80007852 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    800077c2:	000f839b          	sext.w	t2,t6

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    800077c6:	0803c163          	bltz	t2,80007848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1cc>
    800077ca:	6706                	ld	a4,64(sp)
    800077cc:	06e3de63          	bge	t2,a4,80007848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1cc>
    800077d0:	0602cc63          	bltz	t0,80007848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1cc>
    800077d4:	7762                	ld	a4,56(sp)
    800077d6:	06e2d963          	bge	t0,a4,80007848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1cc>
    800077da:	4701                	li	a4,0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    800077dc:	76c2                	ld	a3,48(sp)
    800077de:	06d75563          	bge	a4,a3,80007848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1cc>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    800077e2:	869e                	mv	a3,t2
    800077e4:	8616                	mv	a2,t0
    800077e6:	85d6                	mv	a1,s5
    800077e8:	8522                	mv	a0,s0
    800077ea:	fdfe                	sd	t6,248(sp)
    800077ec:	f9fa                	sd	t5,240(sp)
    800077ee:	f1be                	sd	a5,224(sp)
    800077f0:	ed9e                	sd	t2,216(sp)
    800077f2:	e996                	sd	t0,208(sp)
    800077f4:	e1c6                	sd	a7,192(sp)
    800077f6:	fd42                	sd	a6,184(sp)
    800077f8:	f5f6                	sd	t4,232(sp)
    800077fa:	f93a                	sd	a4,176(sp)
    800077fc:	ad5ff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    80007800:	7eae                	ld	t4,232(sp)
    80007802:	688e                	ld	a7,192(sp)
    80007804:	786a                	ld	a6,184(sp)
    80007806:	774a                	ld	a4,176(sp)
    80007808:	86c6                	mv	a3,a7
    8000780a:	8642                	mv	a2,a6
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    8000780c:	892a                	mv	s2,a0
                int32_t filter_val = filter_data[Offset(
    8000780e:	85f6                	mv	a1,t4
    80007810:	8526                	mv	a0,s1
    80007812:	e5ba                	sd	a4,200(sp)
    80007814:	f976                	sd	t4,176(sp)
    80007816:	abbff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    8000781a:	678a                	ld	a5,128(sp)
    8000781c:	0906                	slli	s2,s2,0x1
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    8000781e:	672e                	ld	a4,200(sp)
                                                      in_x, in_channel)];
    80007820:	993e                	add	s2,s2,a5
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    80007822:	67aa                	ld	a5,136(sp)
                                                      in_x, in_channel)];
    80007824:	00091683          	lh	a3,0(s2)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007828:	7eca                	ld	t4,176(sp)
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    8000782a:	953e                	add	a0,a0,a5
    8000782c:	00050603          	lb	a2,0(a0)
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007830:	786a                	ld	a6,184(sp)
    80007832:	688e                	ld	a7,192(sp)
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    80007834:	02c686bb          	mulw	a3,a3,a2
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007838:	62ce                	ld	t0,208(sp)
    8000783a:	63ee                	ld	t2,216(sp)
    8000783c:	778e                	ld	a5,224(sp)
    8000783e:	7f4e                	ld	t5,240(sp)
    80007840:	7fee                	ld	t6,248(sp)
    80007842:	2705                	addiw	a4,a4,1
                acc += filter_val * input_val;
    80007844:	9a36                	add	s4,s4,a3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007846:	bf59                	j	800077dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80007848:	676a                	ld	a4,152(sp)
    8000784a:	2885                	addiw	a7,a7,1
    8000784c:	01f70fbb          	addw	t6,a4,t6
    80007850:	b7b5                	j	800077bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80007852:	674a                	ld	a4,144(sp)
    80007854:	2805                	addiw	a6,a6,1
    80007856:	01e70f3b          	addw	t5,a4,t5
    8000785a:	bf91                	j	800077ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x132>
              }
            }
          }
          if (bias_data) {
    8000785c:	7756                	ld	a4,368(sp)
    8000785e:	c719                	beqz	a4,8000786c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f0>
            acc += bias_data[out_channel];
    80007860:	76d6                	ld	a3,368(sp)
    80007862:	003b1713          	slli	a4,s6,0x3
    80007866:	9736                	add	a4,a4,a3
    80007868:	6318                	ld	a4,0(a4)
    8000786a:	9a3a                	add	s4,s4,a4
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    8000786c:	76c6                	ld	a3,112(sp)
    8000786e:	002b1713          	slli	a4,s6,0x2
    80007872:	96ba                	add	a3,a3,a4
    80007874:	428c                	lw	a1,0(a3)
    80007876:	76e6                	ld	a3,120(sp)
    80007878:	9736                	add	a4,a4,a3
    8000787a:	4310                	lw	a2,0(a4)
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
    8000787c:	0205d263          	bgez	a1,800078a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    80007880:	00085697          	auipc	a3,0x85
    80007884:	4d868693          	addi	a3,a3,1240 # 8008cd58 <CSWTCH.21+0x5f8>
    80007888:	00085617          	auipc	a2,0x85
    8000788c:	4f060613          	addi	a2,a2,1264 # 8008cd78 <CSWTCH.21+0x618>
    80007890:	0b300593          	li	a1,179
  assert(shift >= -31 && shift < 8);
    80007894:	00085517          	auipc	a0,0x85
    80007898:	52c50513          	addi	a0,a0,1324 # 8008cdc0 <CSWTCH.21+0x660>
    8000789c:	102060ef          	jal	ra,8000d99e <__assert_func>
    800078a0:	01f6071b          	addiw	a4,a2,31
    800078a4:	02600693          	li	a3,38
    800078a8:	00e6fd63          	bgeu	a3,a4,800078c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x246>
    800078ac:	00085697          	auipc	a3,0x85
    800078b0:	56c68693          	addi	a3,a3,1388 # 8008ce18 <CSWTCH.21+0x6b8>
    800078b4:	00085617          	auipc	a2,0x85
    800078b8:	4c460613          	addi	a2,a2,1220 # 8008cd78 <CSWTCH.21+0x618>
    800078bc:	0b400593          	li	a1,180
    800078c0:	bfd1                	j	80007894 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x218>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    800078c2:	4705                	li	a4,1
    800078c4:	173e                	slli	a4,a4,0x2f
    800078c6:	00ea06b3          	add	a3,s4,a4
    800078ca:	577d                	li	a4,-1
    800078cc:	8341                	srli	a4,a4,0x10
    800078ce:	00d77d63          	bgeu	a4,a3,800078e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x26c>
    800078d2:	00085697          	auipc	a3,0x85
    800078d6:	56668693          	addi	a3,a3,1382 # 8008ce38 <CSWTCH.21+0x6d8>
    800078da:	00085617          	auipc	a2,0x85
    800078de:	49e60613          	addi	a2,a2,1182 # 8008cd78 <CSWTCH.21+0x618>
    800078e2:	0b500593          	li	a1,181
    800078e6:	b77d                	j	80007894 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x218>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    800078e8:	7fff0737          	lui	a4,0x7fff0
    800078ec:	04e5df63          	bge	a1,a4,8000794a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    800078f0:	66a1                	lui	a3,0x8
    800078f2:	9ead                	addw	a3,a3,a1
    800078f4:	4106d69b          	sraiw	a3,a3,0x10
                                   : 0x7FFF;
  int total_shift = 15 - shift;
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    800078f8:	03468a33          	mul	s4,a3,s4
    800078fc:	4739                	li	a4,14
    800078fe:	9f11                	subw	a4,a4,a2
    80007900:	4585                	li	a1,1
    80007902:	00e59733          	sll	a4,a1,a4
    80007906:	9a3a                	add	s4,s4,a4
  int total_shift = 15 - shift;
    80007908:	473d                	li	a4,15
    8000790a:	40c7063b          	subw	a2,a4,a2
  int32_t result = x >> total_shift;
    8000790e:	40ca5a33          	sra	s4,s4,a2
    80007912:	8752                	mv	a4,s4
    80007914:	2a01                	sext.w	s4,s4
    80007916:	019a5363          	bge	s4,s9,8000791c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a0>
    8000791a:	8766                	mv	a4,s9
    8000791c:	0007069b          	sext.w	a3,a4
    80007920:	00dd5363          	bge	s10,a3,80007926 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2aa>
    80007924:	876a                	mv	a4,s10
    80007926:	0007091b          	sext.w	s2,a4
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          scaled_acc = std::max(scaled_acc, output_activation_min);
          scaled_acc = std::min(scaled_acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    8000792a:	86be                	mv	a3,a5
    8000792c:	8776                	mv	a4,t4
    8000792e:	8662                	mv	a2,s8
    80007930:	85d6                	mv	a1,s5
    80007932:	854e                	mv	a0,s3
    80007934:	f93e                	sd	a5,176(sp)
    80007936:	99bff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    8000793a:	679a                	ld	a5,384(sp)
    8000793c:	0506                	slli	a0,a0,0x1
    8000793e:	0b05                	addi	s6,s6,1
    80007940:	953e                	add	a0,a0,a5
    80007942:	01251023          	sh	s2,0(a0)
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80007946:	77ca                	ld	a5,176(sp)
    80007948:	bd99                	j	8000779e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x122>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    8000794a:	66a1                	lui	a3,0x8
    8000794c:	16fd                	addi	a3,a3,-1
    8000794e:	b76d                	j	800078f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80007950:	7726                	ld	a4,104(sp)
    80007952:	2785                	addiw	a5,a5,1
    80007954:	00ed8dbb          	addw	s11,s11,a4
    80007958:	bd3d                	j	80007796 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x11a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8000795a:	778a                	ld	a5,160(sp)
    8000795c:	2c05                	addiw	s8,s8,1
    8000795e:	01778bbb          	addw	s7,a5,s7
    80007962:	bd39                	j	80007780 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x104>
  for (int batch = 0; batch < batches; ++batch) {
    80007964:	2a85                	addiw	s5,s5,1
    80007966:	b531                	j	80007772 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xf6>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    80007968:	70b6                	ld	ra,360(sp)
    8000796a:	7416                	ld	s0,352(sp)
    8000796c:	64f6                	ld	s1,344(sp)
    8000796e:	6956                	ld	s2,336(sp)
    80007970:	69b6                	ld	s3,328(sp)
    80007972:	6a16                	ld	s4,320(sp)
    80007974:	7af2                	ld	s5,312(sp)
    80007976:	7b52                	ld	s6,304(sp)
    80007978:	7bb2                	ld	s7,296(sp)
    8000797a:	7c12                	ld	s8,288(sp)
    8000797c:	6cf2                	ld	s9,280(sp)
    8000797e:	6d52                	ld	s10,272(sp)
    80007980:	6db2                	ld	s11,264(sp)
    80007982:	6175                	addi	sp,sp,368
    80007984:	8082                	ret

0000000080007986 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    80007986:	c7010113          	addi	sp,sp,-912
  return GetMutableEvalInput(context, node, index);
    8000798a:	00008617          	auipc	a2,0x8
    8000798e:	8f262603          	lw	a2,-1806(a2) # 8000f27c <_ZN6tflite16kConvInputTensorE>
    80007992:	38113423          	sd	ra,904(sp)
    80007996:	38813023          	sd	s0,896(sp)
    8000799a:	36913c23          	sd	s1,888(sp)
    8000799e:	37213823          	sd	s2,880(sp)
    800079a2:	84ae                	mv	s1,a1
    800079a4:	37313423          	sd	s3,872(sp)
    800079a8:	35513c23          	sd	s5,856(sp)
    800079ac:	842a                	mv	s0,a0
    800079ae:	37413023          	sd	s4,864(sp)
    800079b2:	35613823          	sd	s6,848(sp)
    800079b6:	35713423          	sd	s7,840(sp)
    800079ba:	35813023          	sd	s8,832(sp)
    800079be:	33913c23          	sd	s9,824(sp)
    800079c2:	33a13823          	sd	s10,816(sp)
    800079c6:	33b13423          	sd	s11,808(sp)
    800079ca:	883ff0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    800079ce:	89aa                	mv	s3,a0
    800079d0:	00008617          	auipc	a2,0x8
    800079d4:	8b462603          	lw	a2,-1868(a2) # 8000f284 <_ZN6tflite18kConvWeightsTensorE>
    800079d8:	85a6                	mv	a1,s1
    800079da:	8522                	mv	a0,s0
    800079dc:	871ff0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    800079e0:	609c                	ld	a5,0(s1)
    800079e2:	8aaa                	mv	s5,a0
    800079e4:	4901                	li	s2,0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    800079e6:	4398                	lw	a4,0(a5)
    800079e8:	478d                	li	a5,3
    800079ea:	00f71b63          	bne	a4,a5,80007a00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    800079ee:	00008617          	auipc	a2,0x8
    800079f2:	88a62603          	lw	a2,-1910(a2) # 8000f278 <_ZN6tflite15kConvBiasTensorE>
    800079f6:	85a6                	mv	a1,s1
    800079f8:	8522                	mv	a0,s0
    800079fa:	853ff0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    800079fe:	892a                	mv	s2,a0
  TFLITE_DCHECK(context != nullptr);
    80007a00:	e019                	bnez	s0,80007a06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
    80007a02:	78d050ef          	jal	ra,8000d98e <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    80007a06:	649c                	ld	a5,8(s1)
    80007a08:	00008717          	auipc	a4,0x8
    80007a0c:	87872703          	lw	a4,-1928(a4) # 8000f280 <_ZN6tflite17kConvOutputTensorE>
    80007a10:	070a                	slli	a4,a4,0x2
    80007a12:	97ba                	add	a5,a5,a4
    80007a14:	43cc                	lw	a1,4(a5)
    80007a16:	7458                	ld	a4,168(s0)
    80007a18:	8522                	mv	a0,s0
    80007a1a:	9702                	jalr	a4
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
    80007a1c:	748c                	ld	a1,40(s1)
    80007a1e:	8a2a                	mv	s4,a0
    80007a20:	d1ed                	beqz	a1,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
    80007a22:	7090                	ld	a2,32(s1)
    80007a24:	de79                	beqz	a2,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    80007a26:	0109a803          	lw	a6,16(s3)
    80007a2a:	01052883          	lw	a7,16(a0)
    80007a2e:	03180a63          	beq	a6,a7,80007a62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdc>
    80007a32:	02843303          	ld	t1,40(s0)
    80007a36:	00085797          	auipc	a5,0x85
    80007a3a:	45278793          	addi	a5,a5,1106 # 8008ce88 <CSWTCH.21+0x728>
    80007a3e:	00085717          	auipc	a4,0x85
    80007a42:	45a70713          	addi	a4,a4,1114 # 8008ce98 <CSWTCH.21+0x738>
    80007a46:	03700693          	li	a3,55
    80007a4a:	00085617          	auipc	a2,0x85
    80007a4e:	45e60613          	addi	a2,a2,1118 # 8008cea8 <CSWTCH.21+0x748>
    80007a52:	00085597          	auipc	a1,0x85
    80007a56:	e9e58593          	addi	a1,a1,-354 # 8008c8f0 <CSWTCH.21+0x190>
    80007a5a:	8522                	mv	a0,s0
    80007a5c:	9302                	jalr	t1
      break;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    80007a5e:	4505                	li	a0,1
    80007a60:	ae0d                	j	80007d92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
  TF_LITE_ENSURE_MSG(
    80007a62:	010aa783          	lw	a5,16(s5)
    80007a66:	02f80063          	beq	a6,a5,80007a86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
    80007a6a:	471d                	li	a4,7
    80007a6c:	00e81563          	bne	a6,a4,80007a76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    80007a70:	4725                	li	a4,9
    80007a72:	02e78563          	beq	a5,a4,80007a9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116>
    80007a76:	741c                	ld	a5,40(s0)
    80007a78:	00085597          	auipc	a1,0x85
    80007a7c:	48058593          	addi	a1,a1,1152 # 8008cef8 <CSWTCH.21+0x798>
    80007a80:	8522                	mv	a0,s0
    80007a82:	9782                	jalr	a5
    80007a84:	bfe9                	j	80007a5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>
  switch (input->type) {  // Already know in/out types are same.
    80007a86:	47a5                	li	a5,9
    80007a88:	34f80263          	beq	a6,a5,80007dcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x446>
    80007a8c:	3b07ec63          	bltu	a5,a6,80007e44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4be>
    80007a90:	4785                	li	a5,1
    80007a92:	08f80163          	beq	a6,a5,80007b14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18e>
    80007a96:	479d                	li	a5,7
    80007a98:	3af81663          	bne	a6,a5,80007e44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4be>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    80007a9c:	1d08                	addi	a0,sp,688
    80007a9e:	f032                	sd	a2,32(sp)
    80007aa0:	4b2000ef          	jal	ra,80007f52 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    80007aa4:	7602                	ld	a2,32(sp)
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007aa6:	85ce                	mv	a1,s3
    80007aa8:	1b28                	addi	a0,sp,440
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    80007aaa:	7604                	ld	s1,40(a2)
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007aac:	03063b03          	ld	s6,48(a2)
    80007ab0:	5da010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    80007ab4:	85d6                	mv	a1,s5
    80007ab6:	0ba8                	addi	a0,sp,472

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
    80007ab8:	0009b983          	ld	s3,0(s3)
    80007abc:	5ce010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    80007ac0:	85ca                	mv	a1,s2
    80007ac2:	1ba8                	addi	a0,sp,504
    80007ac4:	000aba83          	ld	s5,0(s5)
    80007ac8:	5c2010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80007acc:	f2090be3          	beqz	s2,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
          tflite::micro::GetTensorShape(output),
    80007ad0:	15a0                	addi	s0,sp,744
    80007ad2:	85d2                	mv	a1,s4
    80007ad4:	8522                	mv	a0,s0
  return reinterpret_cast<const T*>(tensor->data.raw);
    80007ad6:	00093903          	ld	s2,0(s2)
    80007ada:	5b0010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    80007ade:	000a3783          	ld	a5,0(s4)
    80007ae2:	1f810893          	addi	a7,sp,504
    80007ae6:	8856                	mv	a6,s5
    80007ae8:	874e                	mv	a4,s3
    80007aea:	1b34                	addi	a3,sp,440
    80007aec:	865a                	mv	a2,s6
    80007aee:	85a6                	mv	a1,s1
    80007af0:	e83e                	sd	a5,16(sp)
    80007af2:	1d08                	addi	a0,sp,688
    80007af4:	0bbc                	addi	a5,sp,472
    80007af6:	e422                	sd	s0,8(sp)
    80007af8:	e04a                	sd	s2,0(sp)
    80007afa:	b83ff0ef          	jal	ra,8000767c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
    80007afe:	8522                	mv	a0,s0
    80007b00:	f3aff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    80007b04:	1ba8                	addi	a0,sp,504
    80007b06:	f34ff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    80007b0a:	0ba8                	addi	a0,sp,472
    80007b0c:	f2eff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007b10:	1b28                	addi	a0,sp,440
    80007b12:	acad                	j	80007d8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x406>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    80007b14:	1ca8                	addi	a0,sp,632
    80007b16:	39a000ef          	jal	ra,80007eb0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    80007b1a:	0a24                	addi	s1,sp,280
    80007b1c:	85ce                	mv	a1,s3
    80007b1e:	8526                	mv	a0,s1
    80007b20:	56a010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    80007b24:	0009b783          	ld	a5,0(s3)
          tflite::micro::GetTensorShape(filter),
    80007b28:	85d6                	mv	a1,s5
    80007b2a:	1a28                	addi	a0,sp,312
    80007b2c:	f93e                	sd	a5,176(sp)
    80007b2e:	55c010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    80007b32:	000ab783          	ld	a5,0(s5)
          tflite::micro::GetTensorShape(bias),
    80007b36:	85ca                	mv	a1,s2
    80007b38:	0aa8                	addi	a0,sp,344
    80007b3a:	f53e                	sd	a5,168(sp)
    80007b3c:	54e010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80007b40:	ec0901e3          	beqz	s2,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
          tflite::micro::GetTensorShape(output),
    80007b44:	85d2                	mv	a1,s4
    80007b46:	1aa8                	addi	a0,sp,376
  return reinterpret_cast<const T*>(tensor->data.raw);
    80007b48:	00093b03          	ld	s6,0(s2)
    80007b4c:	53e010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80007b50:	000a3783          	ld	a5,0(s4)
          tflite::micro::GetTensorShape(nullptr), nullptr);
    80007b54:	4581                	li	a1,0
    80007b56:	0b28                	addi	a0,sp,408
    80007b58:	fc3e                	sd	a5,56(sp)
    80007b5a:	530010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
  const int stride_width = params.stride_width;
    80007b5e:	28211783          	lh	a5,642(sp)
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80007b62:	11812703          	lw	a4,280(sp)
  const int stride_height = params.stride_height;
    80007b66:	28411983          	lh	s3,644(sp)
  const int stride_width = params.stride_width;
    80007b6a:	e0be                	sd	a5,64(sp)
  const int dilation_width_factor = params.dilation_width_factor;
    80007b6c:	28611783          	lh	a5,646(sp)
  const float output_activation_max = params.float_activation_max;
    80007b70:	2ac12d03          	lw	s10,684(sp)
  const int dilation_width_factor = params.dilation_width_factor;
    80007b74:	e4be                	sd	a5,72(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    80007b76:	28811783          	lh	a5,648(sp)
    80007b7a:	e8be                	sd	a5,80(sp)
  const int pad_width = params.padding_values.width;
    80007b7c:	27a11783          	lh	a5,634(sp)
    80007b80:	ecbe                	sd	a5,88(sp)
  const int pad_height = params.padding_values.height;
    80007b82:	27c11783          	lh	a5,636(sp)
    80007b86:	f0be                	sd	a5,96(sp)
  const float output_activation_min = params.float_activation_min;
    80007b88:	2a812783          	lw	a5,680(sp)
    80007b8c:	d03e                	sw	a5,32(sp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80007b8e:	4791                	li	a5,4
    80007b90:	e6f719e3          	bne	a4,a5,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    80007b94:	13812783          	lw	a5,312(sp)
    80007b98:	4711                	li	a4,4
    80007b9a:	e6e794e3          	bne	a5,a4,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    80007b9e:	17812703          	lw	a4,376(sp)
    80007ba2:	e6f710e3          	bne	a4,a5,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80007ba6:	4681                	li	a3,0
    80007ba8:	1ab0                	addi	a2,sp,376
    80007baa:	4581                	li	a1,0
    80007bac:	8526                	mv	a0,s1
    80007bae:	f84ff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80007bb2:	f4aa                	sd	a0,104(sp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    80007bb4:	468d                	li	a3,3
    80007bb6:	1a30                	addi	a2,sp,312
    80007bb8:	458d                	li	a1,3
    80007bba:	8526                	mv	a0,s1
    80007bbc:	f76ff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80007bc0:	f8aa                	sd	a0,112(sp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    80007bc2:	468d                	li	a3,3
    80007bc4:	1ab0                	addi	a2,sp,376
    80007bc6:	4581                	li	a1,0
    80007bc8:	1a28                	addi	a0,sp,312
    80007bca:	f68ff0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80007bce:	f42a                	sd	a0,40(sp)
  if (bias_data) {
    80007bd0:	000b0863          	beqz	s6,80007be0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    80007bd4:	0aa8                	addi	a0,sp,344
    80007bd6:	eceff0ef          	jal	ra,800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    80007bda:	77a2                	ld	a5,40(sp)
    80007bdc:	e2a793e3          	bne	a5,a0,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
  }
  const int input_height = input_shape.Dims(1);
    80007be0:	4585                	li	a1,1
    80007be2:	8526                	mv	a0,s1
    80007be4:	e98ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007be8:	fcaa                	sd	a0,120(sp)
  const int input_width = input_shape.Dims(2);
    80007bea:	4589                	li	a1,2
    80007bec:	8526                	mv	a0,s1
    80007bee:	e8eff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007bf2:	e12a                	sd	a0,128(sp)
  const int filter_height = filter_shape.Dims(1);
    80007bf4:	4585                	li	a1,1
    80007bf6:	1a28                	addi	a0,sp,312
    80007bf8:	e84ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007bfc:	e52a                	sd	a0,136(sp)
  const int filter_width = filter_shape.Dims(2);
    80007bfe:	4589                	li	a1,2
    80007c00:	1a28                	addi	a0,sp,312
    80007c02:	e7aff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007c06:	e92a                	sd	a0,144(sp)
  const int output_height = output_shape.Dims(1);
    80007c08:	4585                	li	a1,1
    80007c0a:	1aa8                	addi	a0,sp,376
    80007c0c:	e70ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007c10:	ed2a                	sd	a0,152(sp)
  const int output_width = output_shape.Dims(2);
    80007c12:	4589                	li	a1,2
    80007c14:	1aa8                	addi	a0,sp,376
    80007c16:	e66ff0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80007c1a:	0009879b          	sext.w	a5,s3
    80007c1e:	f12a                	sd	a0,160(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80007c20:	4401                	li	s0,0
    80007c22:	e1be                	sd	a5,192(sp)
              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                float input_value = input_data[Offset(input_shape, batch, in_y,
    80007c24:	e5a6                	sd	s1,200(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80007c26:	77a6                	ld	a5,104(sp)
    80007c28:	14f45563          	bge	s0,a5,80007d72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    80007c2c:	7786                	ld	a5,96(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80007c2e:	4981                	li	s3,0
    80007c30:	40f00bbb          	negw	s7,a5
    80007c34:	67e6                	ld	a5,88(sp)
    80007c36:	40f007bb          	negw	a5,a5
    80007c3a:	fd3e                	sd	a5,184(sp)
    80007c3c:	67ea                	ld	a5,152(sp)
    80007c3e:	12f9d863          	bge	s3,a5,80007d6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80007c42:	4786                	lw	a5,64(sp)
    80007c44:	7c6a                	ld	s8,184(sp)
    80007c46:	4a01                	li	s4,0
    80007c48:	f83e                	sd	a5,48(sp)
    80007c4a:	778a                	ld	a5,160(sp)
    80007c4c:	10fa5c63          	bge	s4,a5,80007d64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3de>
    80007c50:	4a81                	li	s5,0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80007c52:	77a2                	ld	a5,40(sp)
    80007c54:	000a849b          	sext.w	s1,s5
    80007c58:	10f4d163          	bge	s1,a5,80007d5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    80007c5c:	42c6                	lw	t0,80(sp)
    80007c5e:	43a6                	lw	t2,72(sp)
    80007c60:	8e5e                	mv	t3,s7
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80007c62:	4901                	li	s2,0
          float total = 0.f;
    80007c64:	00000d93          	li	s11,0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80007c68:	67aa                	ld	a5,136(sp)
    80007c6a:	08f95f63          	bge	s2,a5,80007d08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x382>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    80007c6e:	000e0f1b          	sext.w	t5,t3
    80007c72:	8ee2                	mv	t4,s8
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80007c74:	4c81                	li	s9,0
    80007c76:	67ca                	ld	a5,144(sp)
    80007c78:	08fcd463          	bge	s9,a5,80007d00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    80007c7c:	000e8f9b          	sext.w	t6,t4
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    80007c80:	060fcc63          	bltz	t6,80007cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x372>
    80007c84:	678a                	ld	a5,128(sp)
    80007c86:	06ffd963          	bge	t6,a5,80007cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x372>
    80007c8a:	060f4763          	bltz	t5,80007cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x372>
    80007c8e:	77e6                	ld	a5,120(sp)
    80007c90:	06ff5463          	bge	t5,a5,80007cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x372>
    80007c94:	4701                	li	a4,0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007c96:	77c6                	ld	a5,112(sp)
    80007c98:	06f75063          	bge	a4,a5,80007cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x372>
                float input_value = input_data[Offset(input_shape, batch, in_y,
    80007c9c:	652e                	ld	a0,200(sp)
    80007c9e:	86fe                	mv	a3,t6
    80007ca0:	867a                	mv	a2,t5
    80007ca2:	85a2                	mv	a1,s0
    80007ca4:	e61e                	sd	t2,264(sp)
    80007ca6:	e216                	sd	t0,256(sp)
    80007ca8:	fdf6                	sd	t4,248(sp)
    80007caa:	f9f2                	sd	t3,240(sp)
    80007cac:	f5fe                	sd	t6,232(sp)
    80007cae:	f1fa                	sd	t5,224(sp)
    80007cb0:	e9ba                	sd	a4,208(sp)
    80007cb2:	e1eff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                float filter_value = filter_data[Offset(
    80007cb6:	674e                	ld	a4,208(sp)
    80007cb8:	86e6                	mv	a3,s9
    80007cba:	864a                	mv	a2,s2
                float input_value = input_data[Offset(input_shape, batch, in_y,
    80007cbc:	edaa                	sd	a0,216(sp)
                float filter_value = filter_data[Offset(
    80007cbe:	85a6                	mv	a1,s1
    80007cc0:	1a28                	addi	a0,sp,312
    80007cc2:	e0eff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    80007cc6:	67ee                	ld	a5,216(sp)
    80007cc8:	774a                	ld	a4,176(sp)
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    80007cca:	050a                	slli	a0,a0,0x2
                                                      in_x, in_channel)];
    80007ccc:	078a                	slli	a5,a5,0x2
    80007cce:	97ba                	add	a5,a5,a4
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    80007cd0:	772a                	ld	a4,168(sp)
    80007cd2:	953a                	add	a0,a0,a4
                total += (input_value * filter_value);
    80007cd4:	410c                	lw	a1,0(a0)
    80007cd6:	4388                	lw	a0,0(a5)
    80007cd8:	99bf90ef          	jal	ra,80001672 <__mulsf3>
    80007cdc:	85aa                	mv	a1,a0
    80007cde:	856e                	mv	a0,s11
    80007ce0:	af2f90ef          	jal	ra,80000fd2 <__addsf3>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007ce4:	674e                	ld	a4,208(sp)
    80007ce6:	7f0e                	ld	t5,224(sp)
    80007ce8:	7fae                	ld	t6,232(sp)
    80007cea:	7e4e                	ld	t3,240(sp)
    80007cec:	7eee                	ld	t4,248(sp)
    80007cee:	6292                	ld	t0,256(sp)
    80007cf0:	63b2                	ld	t2,264(sp)
                total += (input_value * filter_value);
    80007cf2:	8daa                	mv	s11,a0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80007cf4:	2705                	addiw	a4,a4,1
    80007cf6:	b745                	j	80007c96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80007cf8:	2c85                	addiw	s9,s9,1
    80007cfa:	01d38ebb          	addw	t4,t2,t4
    80007cfe:	bfa5                	j	80007c76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80007d00:	2905                	addiw	s2,s2,1
    80007d02:	005e0e3b          	addw	t3,t3,t0
    80007d06:	b78d                	j	80007c68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
              }
            }
          }
          float bias_value = 0.0f;
    80007d08:	00000513          	li	a0,0
          if (bias_data) {
    80007d0c:	000b0663          	beqz	s6,80007d18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
            bias_value = bias_data[out_channel];
    80007d10:	002a9793          	slli	a5,s5,0x2
    80007d14:	97da                	add	a5,a5,s6
    80007d16:	4388                	lw	a0,0(a5)
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
    80007d18:	85ee                	mv	a1,s11
    80007d1a:	ab8f90ef          	jal	ra,80000fd2 <__addsf3>
    80007d1e:	8daa                	mv	s11,a0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    80007d20:	8726                	mv	a4,s1
    80007d22:	85a2                	mv	a1,s0
    80007d24:	86d2                	mv	a3,s4
    80007d26:	864e                	mv	a2,s3
    80007d28:	1aa8                	addi	a0,sp,376
    80007d2a:	da6ff0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    80007d2e:	00251493          	slli	s1,a0,0x2
    80007d32:	77e2                	ld	a5,56(sp)
    80007d34:	5502                	lw	a0,32(sp)
    80007d36:	85ee                	mv	a1,s11
    80007d38:	94be                	add	s1,s1,a5
    80007d3a:	831f90ef          	jal	ra,8000156a <__gesf2>
    80007d3e:	00a05363          	blez	a0,80007d44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
	return __b;
    80007d42:	5d82                	lw	s11,32(sp)
      if (__b < __a)
    80007d44:	85ee                	mv	a1,s11
    80007d46:	856a                	mv	a0,s10
    80007d48:	8a7f90ef          	jal	ra,800015ee <__lesf2>
    80007d4c:	00055363          	bgez	a0,80007d52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
	return __b;
    80007d50:	8dea                	mv	s11,s10
    80007d52:	01b4a023          	sw	s11,0(s1) # ffffffffffff8000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff8001>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80007d56:	0a85                	addi	s5,s5,1
    80007d58:	bded                	j	80007c52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80007d5a:	77c2                	ld	a5,48(sp)
    80007d5c:	2a05                	addiw	s4,s4,1
    80007d5e:	01878c3b          	addw	s8,a5,s8
    80007d62:	b5e5                	j	80007c4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80007d64:	678e                	ld	a5,192(sp)
    80007d66:	2985                	addiw	s3,s3,1
    80007d68:	00fb8bbb          	addw	s7,s7,a5
    80007d6c:	bdc1                	j	80007c3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b6>
  for (int batch = 0; batch < batches; ++batch) {
    80007d6e:	2405                	addiw	s0,s0,1
    80007d70:	bd5d                	j	80007c26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    80007d72:	0b28                	addi	a0,sp,408
    80007d74:	cc6ff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
    80007d78:	1aa8                	addi	a0,sp,376
    80007d7a:	cc0ff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    80007d7e:	0aa8                	addi	a0,sp,344
    80007d80:	cbaff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    80007d84:	1a28                	addi	a0,sp,312
    80007d86:	cb4ff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    80007d8a:	0a28                	addi	a0,sp,280
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007d8c:	caeff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
    80007d90:	4501                	li	a0,0
}
    80007d92:	38813083          	ld	ra,904(sp)
    80007d96:	38013403          	ld	s0,896(sp)
    80007d9a:	37813483          	ld	s1,888(sp)
    80007d9e:	37013903          	ld	s2,880(sp)
    80007da2:	36813983          	ld	s3,872(sp)
    80007da6:	36013a03          	ld	s4,864(sp)
    80007daa:	35813a83          	ld	s5,856(sp)
    80007dae:	35013b03          	ld	s6,848(sp)
    80007db2:	34813b83          	ld	s7,840(sp)
    80007db6:	34013c03          	ld	s8,832(sp)
    80007dba:	33813c83          	ld	s9,824(sp)
    80007dbe:	33013d03          	ld	s10,816(sp)
    80007dc2:	32813d83          	ld	s11,808(sp)
    80007dc6:	39010113          	addi	sp,sp,912
    80007dca:	8082                	ret
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    80007dcc:	15a8                	addi	a0,sp,744
    80007dce:	f032                	sd	a2,32(sp)
    80007dd0:	182000ef          	jal	ra,80007f52 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    80007dd4:	7602                	ld	a2,32(sp)
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007dd6:	85ce                	mv	a1,s3
    80007dd8:	0c28                	addi	a0,sp,536
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    80007dda:	7604                	ld	s1,40(a2)
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007ddc:	03063b03          	ld	s6,48(a2)
    80007de0:	2aa010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    80007de4:	85d6                	mv	a1,s5
    80007de6:	1c28                	addi	a0,sp,568
  return reinterpret_cast<const T*>(tensor->data.raw);
    80007de8:	0009b983          	ld	s3,0(s3)
    80007dec:	29e010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    80007df0:	85ca                	mv	a1,s2
    80007df2:	0ca8                	addi	a0,sp,600
    80007df4:	000aba83          	ld	s5,0(s5)
    80007df8:	292010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80007dfc:	c00903e3          	beqz	s2,80007a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
          tflite::micro::GetTensorShape(output),
    80007e00:	1d00                	addi	s0,sp,688
    80007e02:	85d2                	mv	a1,s4
    80007e04:	8522                	mv	a0,s0
  return reinterpret_cast<const T*>(tensor->data.raw);
    80007e06:	00093903          	ld	s2,0(s2)
    80007e0a:	280010ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    80007e0e:	000a3783          	ld	a5,0(s4)
    80007e12:	25810893          	addi	a7,sp,600
    80007e16:	8856                	mv	a6,s5
    80007e18:	874e                	mv	a4,s3
    80007e1a:	0c34                	addi	a3,sp,536
    80007e1c:	865a                	mv	a2,s6
    80007e1e:	85a6                	mv	a1,s1
    80007e20:	e83e                	sd	a5,16(sp)
    80007e22:	15a8                	addi	a0,sp,744
    80007e24:	1c3c                	addi	a5,sp,568
    80007e26:	e422                	sd	s0,8(sp)
    80007e28:	e04a                	sd	s2,0(sp)
    80007e2a:	d38ff0ef          	jal	ra,80007362 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
    80007e2e:	8522                	mv	a0,s0
    80007e30:	c0aff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    80007e34:	0ca8                	addi	a0,sp,600
    80007e36:	c04ff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    80007e3a:	1c28                	addi	a0,sp,568
    80007e3c:	bfeff0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    80007e40:	0c28                	addi	a0,sp,536
    80007e42:	b7a9                	j	80007d8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x406>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    80007e44:	8542                	mv	a0,a6
    80007e46:	7404                	ld	s1,40(s0)
    80007e48:	cd8fe0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    80007e4c:	0109a683          	lw	a3,16(s3)
    80007e50:	862a                	mv	a2,a0
    80007e52:	00085597          	auipc	a1,0x85
    80007e56:	12658593          	addi	a1,a1,294 # 8008cf78 <CSWTCH.21+0x818>
    80007e5a:	8522                	mv	a0,s0
    80007e5c:	9482                	jalr	s1
    80007e5e:	b101                	j	80007a5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8>

0000000080007e60 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    80007e60:	1141                	addi	sp,sp,-16
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    80007e62:	04000613          	li	a2,64
    80007e66:	00007597          	auipc	a1,0x7
    80007e6a:	49a58593          	addi	a1,a1,1178 # 8000f300 <_ZN6tflite20kPoolingOutputTensorE+0x64>
TfLiteRegistration Register_CONV_2D() {
    80007e6e:	e022                	sd	s0,0(sp)
    80007e70:	e406                	sd	ra,8(sp)
    80007e72:	842a                	mv	s0,a0
          /*version=*/0};
    80007e74:	fc3f90ef          	jal	ra,80001e36 <memcpy>
}
    80007e78:	60a2                	ld	ra,8(sp)
    80007e7a:	8522                	mv	a0,s0
    80007e7c:	6402                	ld	s0,0(sp)
    80007e7e:	0141                	addi	sp,sp,16
    80007e80:	8082                	ret

0000000080007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  return total_padding / 2;
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
    80007e82:	87aa                	mv	a5,a0
    80007e84:	8536                	mv	a0,a3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    80007e86:	ce89                	beqz	a3,80007ea0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1e>

  switch (padding) {
    80007e88:	4685                	li	a3,1
    80007e8a:	00d78763          	beq	a5,a3,80007e98 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
    80007e8e:	4689                	li	a3,2
    80007e90:	00d78963          	beq	a5,a3,80007ea2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x20>
    80007e94:	4501                	li	a0,0
    80007e96:	8082                	ret
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    80007e98:	9da9                	addw	a1,a1,a0
    80007e9a:	35fd                	addiw	a1,a1,-1
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    80007e9c:	02a5c53b          	divw	a0,a1,a0
    default:
      return 0;
  }
}
    80007ea0:	8082                	ret
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80007ea2:	367d                	addiw	a2,a2,-1
    80007ea4:	02e6063b          	mulw	a2,a2,a4
      return (image_size + stride - effective_filter_size) / stride;
    80007ea8:	9da9                	addw	a1,a1,a0
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80007eaa:	2605                	addiw	a2,a2,1
      return (image_size + stride - effective_filter_size) / stride;
    80007eac:	9d91                	subw	a1,a1,a2
    80007eae:	b7fd                	j	80007e9c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>

0000000080007eb0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    80007eb0:	45dc                	lw	a5,12(a1)
                           const OpDataConv& data) {
    80007eb2:	1101                	addi	sp,sp,-32
    80007eb4:	e822                	sd	s0,16(sp)
    80007eb6:	e426                	sd	s1,8(sp)
    80007eb8:	e04a                	sd	s2,0(sp)
    80007eba:	ec06                	sd	ra,24(sp)
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    80007ebc:	4705                	li	a4,1
    80007ebe:	842a                	mv	s0,a0
    80007ec0:	84ae                	mv	s1,a1
    80007ec2:	8932                	mv	s2,a2
    80007ec4:	00e79a63          	bne	a5,a4,80007ed8 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x28>
    *activation_min = 0;
    80007ec8:	00000793          	li	a5,0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    80007ecc:	d81c                	sw	a5,48(s0)
    *activation_max = std::numeric_limits<T>::max();
    80007ece:	00007797          	auipc	a5,0x7
    80007ed2:	3a27a783          	lw	a5,930(a5) # 8000f270 <_global_impure_ptr+0x20>
    80007ed6:	a819                	j	80007eec <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x3c>
  } else if (activation == kTfLiteActRelu6) {
    80007ed8:	470d                	li	a4,3
    80007eda:	04e79a63          	bne	a5,a4,80007f2e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x7e>
    *activation_min = 0;
    80007ede:	00000793          	li	a5,0
    80007ee2:	d91c                	sw	a5,48(a0)
    *activation_max = 6;
    80007ee4:	00007797          	auipc	a5,0x7
    80007ee8:	3807a783          	lw	a5,896(a5) # 8000f264 <_global_impure_ptr+0x14>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80007eec:	4088                	lw	a0,0(s1)
    *activation_max = std::numeric_limits<T>::max();
    80007eee:	d85c                	sw	a5,52(s0)
    80007ef0:	1ec010ef          	jal	ra,800090dc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    80007ef4:	00092783          	lw	a5,0(s2)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80007ef8:	00a40023          	sb	a0,0(s0)
  op_params.stride_width = params.stride_width;
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  return op_params;
}
    80007efc:	60e2                	ld	ra,24(sp)
  op_params.padding_values.width = data.padding.width;
    80007efe:	00f41123          	sh	a5,2(s0)
  op_params.padding_values.height = data.padding.height;
    80007f02:	00492783          	lw	a5,4(s2)
}
    80007f06:	8522                	mv	a0,s0
    80007f08:	6902                	ld	s2,0(sp)
  op_params.padding_values.height = data.padding.height;
    80007f0a:	00f41223          	sh	a5,4(s0)
  op_params.stride_width = params.stride_width;
    80007f0e:	40dc                	lw	a5,4(s1)
    80007f10:	00f41523          	sh	a5,10(s0)
  op_params.stride_height = params.stride_height;
    80007f14:	449c                	lw	a5,8(s1)
    80007f16:	00f41623          	sh	a5,12(s0)
  op_params.dilation_width_factor = params.dilation_width_factor;
    80007f1a:	489c                	lw	a5,16(s1)
    80007f1c:	00f41723          	sh	a5,14(s0)
  op_params.dilation_height_factor = params.dilation_height_factor;
    80007f20:	48dc                	lw	a5,20(s1)
}
    80007f22:	64a2                	ld	s1,8(sp)
  op_params.dilation_height_factor = params.dilation_height_factor;
    80007f24:	00f41823          	sh	a5,16(s0)
}
    80007f28:	6442                	ld	s0,16(sp)
    80007f2a:	6105                	addi	sp,sp,32
    80007f2c:	8082                	ret
  } else if (activation == kTfLiteActReluN1To1) {
    80007f2e:	4709                	li	a4,2
    80007f30:	00e79c63          	bne	a5,a4,80007f48 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x98>
    *activation_min = -1;
    80007f34:	00007797          	auipc	a5,0x7
    80007f38:	3347a783          	lw	a5,820(a5) # 8000f268 <_global_impure_ptr+0x18>
    80007f3c:	d91c                	sw	a5,48(a0)
    *activation_max = 1;
    80007f3e:	00007797          	auipc	a5,0x7
    80007f42:	32e7a783          	lw	a5,814(a5) # 8000f26c <_global_impure_ptr+0x1c>
    80007f46:	b75d                	j	80007eec <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x3c>
    *activation_min = std::numeric_limits<T>::lowest();
    80007f48:	00007797          	auipc	a5,0x7
    80007f4c:	32c7a783          	lw	a5,812(a5) # 8000f274 <_global_impure_ptr+0x24>
    80007f50:	bfb5                	j	80007ecc <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x1c>

0000000080007f52 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
    80007f52:	4a1c                	lw	a5,16(a2)
                               const OpDataConv& data) {
    80007f54:	1101                	addi	sp,sp,-32
    80007f56:	e822                	sd	s0,16(sp)
    80007f58:	e426                	sd	s1,8(sp)
    80007f5a:	e04a                	sd	s2,0(sp)
    80007f5c:	ec06                	sd	ra,24(sp)
  op_params.input_offset = -data.input_zero_point;
    80007f5e:	40f007bb          	negw	a5,a5
    80007f62:	c95c                	sw	a5,20(a0)
  op_params.weights_offset = -data.filter_zero_point;
    80007f64:	4a5c                	lw	a5,20(a2)
                               const OpDataConv& data) {
    80007f66:	842a                	mv	s0,a0
    80007f68:	892e                	mv	s2,a1
  op_params.weights_offset = -data.filter_zero_point;
    80007f6a:	40f007bb          	negw	a5,a5
    80007f6e:	cd1c                	sw	a5,24(a0)
  op_params.output_offset = data.output_zero_point;
    80007f70:	4e1c                	lw	a5,24(a2)
                               const OpDataConv& data) {
    80007f72:	84b2                	mv	s1,a2
  op_params.output_offset = data.output_zero_point;
    80007f74:	cd5c                	sw	a5,28(a0)
  op_params.output_multiplier = data.output_multiplier;
    80007f76:	4e5c                	lw	a5,28(a2)
    80007f78:	d11c                	sw	a5,32(a0)
  op_params.output_shift = -data.output_shift;
    80007f7a:	521c                	lw	a5,32(a2)
    80007f7c:	40f007bb          	negw	a5,a5
    80007f80:	d15c                	sw	a5,36(a0)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80007f82:	4188                	lw	a0,0(a1)
    80007f84:	158010ef          	jal	ra,800090dc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
    80007f88:	40dc                	lw	a5,4(s1)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80007f8a:	00a40023          	sb	a0,0(s0)
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
    80007f8e:	60e2                	ld	ra,24(sp)
  op_params.padding_values.height = data.padding.height;
    80007f90:	00f41223          	sh	a5,4(s0)
  op_params.padding_values.width = data.padding.width;
    80007f94:	409c                	lw	a5,0(s1)
}
    80007f96:	8522                	mv	a0,s0
  op_params.padding_values.width = data.padding.width;
    80007f98:	00f41123          	sh	a5,2(s0)
  op_params.stride_height = params.stride_height;
    80007f9c:	00892783          	lw	a5,8(s2)
    80007fa0:	00f41623          	sh	a5,12(s0)
  op_params.stride_width = params.stride_width;
    80007fa4:	00492783          	lw	a5,4(s2)
    80007fa8:	00f41523          	sh	a5,10(s0)
  op_params.dilation_height_factor = params.dilation_height_factor;
    80007fac:	01492783          	lw	a5,20(s2)
    80007fb0:	00f41823          	sh	a5,16(s0)
  op_params.dilation_width_factor = params.dilation_width_factor;
    80007fb4:	01092783          	lw	a5,16(s2)
}
    80007fb8:	6902                	ld	s2,0(sp)
  op_params.dilation_width_factor = params.dilation_width_factor;
    80007fba:	00f41723          	sh	a5,14(s0)
  op_params.quantized_activation_min = data.output_activation_min;
    80007fbe:	5c9c                	lw	a5,56(s1)
    80007fc0:	d41c                	sw	a5,40(s0)
  op_params.quantized_activation_max = data.output_activation_max;
    80007fc2:	5cdc                	lw	a5,60(s1)
}
    80007fc4:	64a2                	ld	s1,8(sp)
  op_params.quantized_activation_max = data.output_activation_max;
    80007fc6:	d45c                	sw	a5,44(s0)
}
    80007fc8:	6442                	ld	s0,16(sp)
    80007fca:	6105                	addi	sp,sp,32
    80007fcc:	8082                	ret

0000000080007fce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    80007fce:	7131                	addi	sp,sp,-192
    80007fd0:	f526                	sd	s1,168(sp)
    80007fd2:	84be                	mv	s1,a5
  bool has_bias = node->inputs->size == 3;
    80007fd4:	619c                	ld	a5,0(a1)
                                 OpDataConv* data) {
    80007fd6:	ed4e                	sd	s3,152(sp)
    80007fd8:	e952                	sd	s4,144(sp)
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80007fda:	439c                	lw	a5,0(a5)
                                 OpDataConv* data) {
    80007fdc:	e556                	sd	s5,136(sp)
    80007fde:	fcde                	sd	s7,120(sp)
    80007fe0:	fd06                	sd	ra,184(sp)
    80007fe2:	8bba                	mv	s7,a4
    80007fe4:	f922                	sd	s0,176(sp)
    80007fe6:	f14a                	sd	s2,160(sp)
    80007fe8:	e15a                	sd	s6,128(sp)
    80007fea:	f8e2                	sd	s8,112(sp)
    80007fec:	f4e6                	sd	s9,104(sp)
    80007fee:	f0ea                	sd	s10,96(sp)
    80007ff0:	ecee                	sd	s11,88(sp)
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80007ff2:	37f9                	addiw	a5,a5,-2
    80007ff4:	4705                	li	a4,1
                                 OpDataConv* data) {
    80007ff6:	49ae                	lw	s3,200(sp)
    80007ff8:	6ace                	ld	s5,208(sp)
    80007ffa:	8a2a                	mv	s4,a0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80007ffc:	02f77363          	bgeu	a4,a5,80008022 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    80008000:	751c                	ld	a5,40(a0)
    80008002:	00085717          	auipc	a4,0x85
    80008006:	f9670713          	addi	a4,a4,-106 # 8008cf98 <CSWTCH.21+0x838>
    8000800a:	05600693          	li	a3,86
    8000800e:	00085617          	auipc	a2,0x85
    80008012:	fb260613          	addi	a2,a2,-78 # 8008cfc0 <CSWTCH.21+0x860>
    80008016:	00084597          	auipc	a1,0x84
    8000801a:	4e258593          	addi	a1,a1,1250 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
      params.stride_height, params.stride_width, params.dilation_height_factor,
      params.dilation_width_factor, height, width, filter_height, filter_width,
      padding, &out_height, &out_width);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    8000801e:	9782                	jalr	a5
    80008020:	a835                	j	8000805c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    80008022:	659c                	ld	a5,8(a1)
    80008024:	8442                	mv	s0,a6
    80008026:	8b2e                	mv	s6,a1
    80008028:	0007a803          	lw	a6,0(a5)
    8000802c:	04e80863          	beq	a6,a4,8000807c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xae>
    80008030:	02853303          	ld	t1,40(a0)
    80008034:	4885                	li	a7,1
    80008036:	00085797          	auipc	a5,0x85
    8000803a:	44278793          	addi	a5,a5,1090 # 8008d478 <CSWTCH.21+0xd18>
    8000803e:	00085717          	auipc	a4,0x85
    80008042:	fda70713          	addi	a4,a4,-38 # 8008d018 <CSWTCH.21+0x8b8>
    80008046:	05700693          	li	a3,87
    8000804a:	00085617          	auipc	a2,0x85
    8000804e:	f7660613          	addi	a2,a2,-138 # 8008cfc0 <CSWTCH.21+0x860>
    80008052:	00085597          	auipc	a1,0x85
    80008056:	89e58593          	addi	a1,a1,-1890 # 8008c8f0 <CSWTCH.21+0x190>
    8000805a:	9302                	jalr	t1
    8000805c:	4505                	li	a0,1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    8000805e:	70ea                	ld	ra,184(sp)
    80008060:	744a                	ld	s0,176(sp)
    80008062:	74aa                	ld	s1,168(sp)
    80008064:	790a                	ld	s2,160(sp)
    80008066:	69ea                	ld	s3,152(sp)
    80008068:	6a4a                	ld	s4,144(sp)
    8000806a:	6aaa                	ld	s5,136(sp)
    8000806c:	6b0a                	ld	s6,128(sp)
    8000806e:	7be6                	ld	s7,120(sp)
    80008070:	7c46                	ld	s8,112(sp)
    80008072:	7ca6                	ld	s9,104(sp)
    80008074:	7d06                	ld	s10,96(sp)
    80008076:	6de6                	ld	s11,88(sp)
    80008078:	6129                	addi	sp,sp,192
    8000807a:	8082                	ret
      params.stride_height, params.stride_width, params.dilation_height_factor,
    8000807c:	425c                	lw	a5,4(a2)
      params.dilation_width_factor, height, width, filter_height, filter_width,
    8000807e:	01062803          	lw	a6,16(a2)
  auto padding = params.padding;
    80008082:	00062883          	lw	a7,0(a2)
    80008086:	8cb6                	mv	s9,a3

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    80008088:	8742                	mv	a4,a6
    8000808a:	86be                	mv	a3,a5
      params.stride_height, params.stride_width, params.dilation_height_factor,
    8000808c:	00862c03          	lw	s8,8(a2)
    80008090:	01462d03          	lw	s10,20(a2)
    80008094:	85e6                	mv	a1,s9
    80008096:	8546                	mv	a0,a7
    80008098:	8932                	mv	s2,a2
    8000809a:	8626                	mv	a2,s1
    8000809c:	e4c2                	sd	a6,72(sp)
    8000809e:	e0be                	sd	a5,64(sp)
    800080a0:	fc46                	sd	a7,56(sp)
    800080a2:	de1ff0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    800080a6:	78e2                	ld	a7,56(sp)
    800080a8:	876a                	mv	a4,s10
    800080aa:	86e2                	mv	a3,s8
    800080ac:	8622                	mv	a2,s0
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    800080ae:	8daa                	mv	s11,a0
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    800080b0:	85de                	mv	a1,s7
    800080b2:	8546                	mv	a0,a7
    800080b4:	dcfff0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    800080b8:	347d                	addiw	s0,s0,-1
    800080ba:	03a4043b          	mulw	s0,s0,s10
      ((out_size - 1) * stride + effective_filter_size - in_size);
    800080be:	fff5071b          	addiw	a4,a0,-1
  total_padding = total_padding > 0 ? total_padding : 0;
    800080c2:	6786                	ld	a5,64(sp)
    800080c4:	6826                	ld	a6,72(sp)
      ((out_size - 1) * stride + effective_filter_size - in_size);
    800080c6:	0387073b          	mulw	a4,a4,s8
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    800080ca:	2405                	addiw	s0,s0,1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    800080cc:	9c39                	addw	s0,s0,a4
  int total_padding =
    800080ce:	417406bb          	subw	a3,s0,s7
    800080d2:	8736                	mv	a4,a3
  total_padding = total_padding > 0 ? total_padding : 0;
    800080d4:	0006d363          	bgez	a3,800080da <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10c>
    800080d8:	4701                	li	a4,0
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    800080da:	34fd                	addiw	s1,s1,-1
    800080dc:	030484bb          	mulw	s1,s1,a6
      ((out_size - 1) * stride + effective_filter_size - in_size);
    800080e0:	fffd869b          	addiw	a3,s11,-1
    800080e4:	02f686bb          	mulw	a3,a3,a5
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    800080e8:	2485                	addiw	s1,s1,1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    800080ea:	9cb5                	addw	s1,s1,a3
  int total_padding =
    800080ec:	419486bb          	subw	a3,s1,s9
  total_padding = total_padding > 0 ? total_padding : 0;
    800080f0:	0006879b          	sext.w	a5,a3
    800080f4:	0007d363          	bgez	a5,800080fa <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
    800080f8:	4681                	li	a3,0
  return total_padding / 2;
    800080fa:	4016d79b          	sraiw	a5,a3,0x1
      padding, &out_height, &out_width);
    800080fe:	00faa023          	sw	a5,0(s5)
  *offset = total_padding % 2;
    80008102:	8a85                	andi	a3,a3,1
  return total_padding / 2;
    80008104:	4017579b          	sraiw	a5,a4,0x1
  *offset = total_padding % 2;
    80008108:	8b05                	andi	a4,a4,1
    8000810a:	00faa223          	sw	a5,4(s5)
    8000810e:	00daa423          	sw	a3,8(s5)
    80008112:	00eaa623          	sw	a4,12(s5)
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    80008116:	4601                	li	a2,0
    80008118:	85da                	mv	a1,s6
    8000811a:	8552                	mv	a0,s4
    8000811c:	c5afe0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008120:	84aa                	mv	s1,a0
  TF_LITE_ENSURE(context, input != nullptr);
    80008122:	e11d                	bnez	a0,80008148 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x17a>
    80008124:	028a3783          	ld	a5,40(s4)
    80008128:	00085717          	auipc	a4,0x85
    8000812c:	f0870713          	addi	a4,a4,-248 # 8008d030 <CSWTCH.21+0x8d0>
    80008130:	06100693          	li	a3,97
    80008134:	00085617          	auipc	a2,0x85
    80008138:	e8c60613          	addi	a2,a2,-372 # 8008cfc0 <CSWTCH.21+0x860>
    8000813c:	00084597          	auipc	a1,0x84
    80008140:	3bc58593          	addi	a1,a1,956 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80008144:	8552                	mv	a0,s4
    80008146:	bde1                	j	8000801e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x50>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    80008148:	4605                	li	a2,1
    8000814a:	85da                	mv	a1,s6
    8000814c:	8552                	mv	a0,s4
    8000814e:	c28fe0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008152:	842a                	mv	s0,a0
  TF_LITE_ENSURE(context, filter != nullptr);
    80008154:	e911                	bnez	a0,80008168 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19a>
    80008156:	028a3783          	ld	a5,40(s4)
    8000815a:	00085717          	auipc	a4,0x85
    8000815e:	eee70713          	addi	a4,a4,-274 # 8008d048 <CSWTCH.21+0x8e8>
    80008162:	06300693          	li	a3,99
    80008166:	b7f9                	j	80008134 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x166>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    80008168:	85da                	mv	a1,s6
    8000816a:	4609                	li	a2,2
    8000816c:	8552                	mv	a0,s4
    8000816e:	c2cfe0ef          	jal	ra,8000659a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    80008172:	fc2a                	sd	a0,56(sp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    80008174:	85da                	mv	a1,s6
    80008176:	4601                	li	a2,0
    80008178:	8552                	mv	a0,s4
    8000817a:	c00fe0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    8000817e:	76e2                	ld	a3,56(sp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    80008180:	8b2a                	mv	s6,a0
  TF_LITE_ENSURE(context, output != nullptr);
    80008182:	e911                	bnez	a0,80008196 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c8>
    80008184:	028a3783          	ld	a5,40(s4)
    80008188:	00085717          	auipc	a4,0x85
    8000818c:	ed870713          	addi	a4,a4,-296 # 8008d060 <CSWTCH.21+0x900>
    80008190:	06700693          	li	a3,103
    80008194:	b745                	j	80008134 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x166>
  if (data_type != kTfLiteFloat32) {
    80008196:	4785                	li	a5,1
    80008198:	00f99e63          	bne	s3,a5,800081b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e6>
  data->input_zero_point = input->params.zero_point;
    8000819c:	4cdc                	lw	a5,28(s1)
  return kTfLiteOk;
    8000819e:	4501                	li	a0,0
  data->input_zero_point = input->params.zero_point;
    800081a0:	00faa823          	sw	a5,16(s5)
  data->filter_zero_point = filter->params.zero_point;
    800081a4:	4c5c                	lw	a5,28(s0)
    800081a6:	00faaa23          	sw	a5,20(s5)
  data->output_zero_point = output->params.zero_point;
    800081aa:	01cb2783          	lw	a5,28(s6)
    800081ae:	00faac23          	sw	a5,24(s5)
  return kTfLiteOk;
    800081b2:	b575                	j	8000805e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    800081b4:	681c                	ld	a5,16(s0)
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    800081b6:	872a                	mv	a4,a0
    800081b8:	020a8893          	addi	a7,s5,32
    800081bc:	43dc                	lw	a5,4(a5)
    800081be:	01ca8813          	addi	a6,s5,28
    800081c2:	8622                	mv	a2,s0
    800081c4:	f03e                	sd	a5,32(sp)
    800081c6:	030ab783          	ld	a5,48(s5)
    800081ca:	85a6                	mv	a1,s1
    800081cc:	8552                	mv	a0,s4
    800081ce:	ec3e                	sd	a5,24(sp)
    800081d0:	028ab783          	ld	a5,40(s5)
    800081d4:	e83e                	sd	a5,16(sp)
    800081d6:	03ca8793          	addi	a5,s5,60
    800081da:	e43e                	sd	a5,8(sp)
    800081dc:	038a8793          	addi	a5,s5,56
    800081e0:	e03e                	sd	a5,0(sp)
    800081e2:	00c90793          	addi	a5,s2,12
    800081e6:	e32fe0ef          	jal	ra,80006818 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    800081ea:	d94d                	beqz	a0,8000819c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    800081ec:	bd8d                	j	8000805e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>

00000000800081ee <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    800081ee:	7175                	addi	sp,sp,-144
    800081f0:	f4ce                	sd	s3,104(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    800081f2:	0205b983          	ld	s3,32(a1)
TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    800081f6:	e506                	sd	ra,136(sp)
    800081f8:	e122                	sd	s0,128(sp)
    800081fa:	fca6                	sd	s1,120(sp)
    800081fc:	f8ca                	sd	s2,112(sp)
    800081fe:	f0d2                	sd	s4,96(sp)
    80008200:	ecd6                	sd	s5,88(sp)
    80008202:	e8da                	sd	s6,80(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    80008204:	00099463          	bnez	s3,8000820c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
    80008208:	786050ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    8000820c:	0285ba03          	ld	s4,40(a1)
    80008210:	892e                	mv	s2,a1
    80008212:	fe0a0be3          	beqz	s4,80008208 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    80008216:	4601                	li	a2,0
    80008218:	842a                	mv	s0,a0
    8000821a:	b60fe0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    8000821e:	8aaa                	mv	s5,a0
  TF_LITE_ENSURE(context, output != nullptr);
    80008220:	ed15                	bnez	a0,8000825c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    80008222:	741c                	ld	a5,40(s0)
    80008224:	00085717          	auipc	a4,0x85
    80008228:	e3c70713          	addi	a4,a4,-452 # 8008d060 <CSWTCH.21+0x900>
    8000822c:	08600693          	li	a3,134
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    80008230:	00085617          	auipc	a2,0x85
    80008234:	d9060613          	addi	a2,a2,-624 # 8008cfc0 <CSWTCH.21+0x860>
    80008238:	00084597          	auipc	a1,0x84
    8000823c:	2c058593          	addi	a1,a1,704 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80008240:	8522                	mv	a0,s0
    80008242:	9782                	jalr	a5
    80008244:	4485                	li	s1,1
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    80008246:	60aa                	ld	ra,136(sp)
    80008248:	640a                	ld	s0,128(sp)
    8000824a:	7946                	ld	s2,112(sp)
    8000824c:	79a6                	ld	s3,104(sp)
    8000824e:	7a06                	ld	s4,96(sp)
    80008250:	6ae6                	ld	s5,88(sp)
    80008252:	6b46                	ld	s6,80(sp)
    80008254:	8526                	mv	a0,s1
    80008256:	74e6                	ld	s1,120(sp)
    80008258:	6149                	addi	sp,sp,144
    8000825a:	8082                	ret
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    8000825c:	4601                	li	a2,0
    8000825e:	85ca                	mv	a1,s2
    80008260:	8522                	mv	a0,s0
    80008262:	b14fe0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008266:	84aa                	mv	s1,a0
  TF_LITE_ENSURE(context, input != nullptr);
    80008268:	e909                	bnez	a0,8000827a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8c>
    8000826a:	741c                	ld	a5,40(s0)
    8000826c:	00085717          	auipc	a4,0x85
    80008270:	dc470713          	addi	a4,a4,-572 # 8008d030 <CSWTCH.21+0x8d0>
    80008274:	08800693          	li	a3,136
    80008278:	bf65                	j	80008230 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    8000827a:	4605                	li	a2,1
    8000827c:	85ca                	mv	a1,s2
    8000827e:	8522                	mv	a0,s0
    80008280:	af6fe0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008284:	8b2a                	mv	s6,a0
  TF_LITE_ENSURE(context, filter != nullptr);
    80008286:	e909                	bnez	a0,80008298 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    80008288:	741c                	ld	a5,40(s0)
    8000828a:	00085717          	auipc	a4,0x85
    8000828e:	dbe70713          	addi	a4,a4,-578 # 8008d048 <CSWTCH.21+0x8e8>
    80008292:	08a00693          	li	a3,138
    80008296:	bf69                	j	80008230 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  const int filter_width = filter->dims->data[2];
    80008298:	6910                	ld	a2,16(a0)
  const int output_width = output->dims->data[2];
    8000829a:	010ab583          	ld	a1,16(s5)
  const int input_width = input->dims->data[2];
    8000829e:	689c                	ld	a5,16(s1)
  const int filter_height = filter->dims->data[1];
    800082a0:	00862803          	lw	a6,8(a2)
  const int output_width = output->dims->data[2];
    800082a4:	00c5a883          	lw	a7,12(a1)
  const int output_height = output->dims->data[1];
    800082a8:	0085aa83          	lw	s5,8(a1)
          context, num_channels * sizeof(int32_t)));
    800082ac:	424c                	lw	a1,4(a2)
  const int input_width = input->dims->data[2];
    800082ae:	47d4                	lw	a3,12(a5)
  const int input_height = input->dims->data[1];
    800082b0:	4798                	lw	a4,8(a5)
  const int filter_width = filter->dims->data[2];
    800082b2:	465c                	lw	a5,12(a2)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    800082b4:	7830                	ld	a2,112(s0)
    800082b6:	058a                	slli	a1,a1,0x2
    800082b8:	8522                	mv	a0,s0
  const int input_width = input->dims->data[2];
    800082ba:	e4b6                	sd	a3,72(sp)
  const int input_height = input->dims->data[1];
    800082bc:	e0ba                	sd	a4,64(sp)
  const int filter_width = filter->dims->data[2];
    800082be:	fc3e                	sd	a5,56(sp)
  const int filter_height = filter->dims->data[1];
    800082c0:	f842                	sd	a6,48(sp)
  const int output_width = output->dims->data[2];
    800082c2:	f446                	sd	a7,40(sp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    800082c4:	f02e                	sd	a1,32(sp)
    800082c6:	9602                	jalr	a2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    800082c8:	7830                	ld	a2,112(s0)
    800082ca:	7582                	ld	a1,32(sp)
  data->per_channel_output_multiplier =
    800082cc:	02a9b423          	sd	a0,40(s3)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    800082d0:	8522                	mv	a0,s0
    800082d2:	9602                	jalr	a2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    800082d4:	408c                	lw	a1,0(s1)
  data->per_channel_output_shift =
    800082d6:	02a9b823          	sd	a0,48(s3)
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    800082da:	78a2                	ld	a7,40(sp)
    800082dc:	ff95861b          	addiw	a2,a1,-7
    800082e0:	9a75                	andi	a2,a2,-3
    800082e2:	2601                	sext.w	a2,a2
    800082e4:	7842                	ld	a6,48(sp)
    800082e6:	77e2                	ld	a5,56(sp)
    800082e8:	6706                	ld	a4,64(sp)
    800082ea:	66a6                	ld	a3,72(sp)
    800082ec:	e661                	bnez	a2,800083b4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    800082ee:	050b2483          	lw	s1,80(s6)
    800082f2:	4605                	li	a2,1
    800082f4:	02c48b63          	beq	s1,a2,8000832a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    800082f8:	02843303          	ld	t1,40(s0)
    800082fc:	4885                	li	a7,1
    800082fe:	8826                	mv	a6,s1
    80008300:	00084797          	auipc	a5,0x84
    80008304:	5b078793          	addi	a5,a5,1456 # 8008c8b0 <CSWTCH.21+0x150>
    80008308:	00084717          	auipc	a4,0x84
    8000830c:	60870713          	addi	a4,a4,1544 # 8008c910 <CSWTCH.21+0x1b0>
    80008310:	09e00693          	li	a3,158
    80008314:	00085617          	auipc	a2,0x85
    80008318:	cac60613          	addi	a2,a2,-852 # 8008cfc0 <CSWTCH.21+0x860>
    8000831c:	00084597          	auipc	a1,0x84
    80008320:	5d458593          	addi	a1,a1,1492 # 8008c8f0 <CSWTCH.21+0x190>
    80008324:	8522                	mv	a0,s0
    80008326:	9302                	jalr	t1
    80008328:	bf31                	j	80008244 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x56>
    const auto* affine_quantization =
    8000832a:	058b3603          	ld	a2,88(s6)
    TFLITE_DCHECK(affine_quantization != nullptr);
    8000832e:	ec060de3          	beqz	a2,80008208 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    80008332:	00063e03          	ld	t3,0(a2)
    80008336:	ec0e09e3          	beqz	t3,80008208 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    8000833a:	00863303          	ld	t1,8(a2)
    8000833e:	ec0305e3          	beqz	t1,80008208 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TF_LITE_ENSURE(context,
    80008342:	000e2603          	lw	a2,0(t3)
    80008346:	4505                	li	a0,1
    80008348:	02a60963          	beq	a2,a0,8000837a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>
    8000834c:	010b3503          	ld	a0,16(s6)
    80008350:	4148                	lw	a0,4(a0)
    80008352:	02c50463          	beq	a0,a2,8000837a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>
    80008356:	741c                	ld	a5,40(s0)
    80008358:	00085717          	auipc	a4,0x85
    8000835c:	d2070713          	addi	a4,a4,-736 # 8008d078 <CSWTCH.21+0x918>
    80008360:	0a700693          	li	a3,167
    80008364:	00085617          	auipc	a2,0x85
    80008368:	c5c60613          	addi	a2,a2,-932 # 8008cfc0 <CSWTCH.21+0x860>
    8000836c:	00084597          	auipc	a1,0x84
    80008370:	18c58593          	addi	a1,a1,396 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80008374:	8522                	mv	a0,s0
    80008376:	9782                	jalr	a5
    80008378:	b5f9                	j	80008246 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    8000837a:	00032503          	lw	a0,0(t1)
    8000837e:	02a60b63          	beq	a2,a0,800083b4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
    80008382:	02843303          	ld	t1,40(s0)
    80008386:	88aa                	mv	a7,a0
    80008388:	8832                	mv	a6,a2
    8000838a:	00085797          	auipc	a5,0x85
    8000838e:	d6e78793          	addi	a5,a5,-658 # 8008d0f8 <CSWTCH.21+0x998>
    80008392:	00084717          	auipc	a4,0x84
    80008396:	64670713          	addi	a4,a4,1606 # 8008c9d8 <CSWTCH.21+0x278>
    8000839a:	0ab00693          	li	a3,171
    8000839e:	00085617          	auipc	a2,0x85
    800083a2:	c2260613          	addi	a2,a2,-990 # 8008cfc0 <CSWTCH.21+0x860>
    800083a6:	00084597          	auipc	a1,0x84
    800083aa:	54a58593          	addi	a1,a1,1354 # 8008c8f0 <CSWTCH.21+0x190>
    800083ae:	8522                	mv	a0,s0
    800083b0:	9302                	jalr	t1
    800083b2:	bd51                	j	80008246 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    800083b4:	e42e                	sd	a1,8(sp)
    800083b6:	e84e                	sd	s3,16(sp)
    800083b8:	e056                	sd	s5,0(sp)
    800083ba:	8652                	mv	a2,s4
    800083bc:	85ca                	mv	a1,s2
    800083be:	8522                	mv	a0,s0
    800083c0:	c0fff0ef          	jal	ra,80007fce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    800083c4:	84aa                	mv	s1,a0
    800083c6:	b541                	j	80008246 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>

00000000800083c8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    800083c8:	793c                	ld	a5,112(a0)
    800083ca:	e789                	bnez	a5,800083d4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0xc>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    800083cc:	1141                	addi	sp,sp,-16
    800083ce:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    800083d0:	5be050ef          	jal	ra,8000d98e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    800083d4:	04000593          	li	a1,64
    800083d8:	8782                	jr	a5

00000000800083da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
    800083da:	7109                	addi	sp,sp,-384
    800083dc:	eece                	sd	s3,344(sp)
    800083de:	89be                	mv	s3,a5
  const int stride_width = params.stride_width;
    800083e0:	00a51783          	lh	a5,10(a0)
    float* output_data) {
    800083e4:	ead2                	sd	s4,336(sp)
    800083e6:	e6d6                	sd	s5,328(sp)
  const int stride_width = params.stride_width;
    800083e8:	e4be                	sd	a5,72(sp)
  const int stride_height = params.stride_height;
    800083ea:	00c51783          	lh	a5,12(a0)
    float* output_data) {
    800083ee:	f93a                	sd	a4,176(sp)
  const int dilation_width_factor = params.dilation_width_factor;
    800083f0:	00e51a03          	lh	s4,14(a0)
  const int stride_height = params.stride_height;
    800083f4:	e8be                	sd	a5,80(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    800083f6:	01051783          	lh	a5,16(a0)
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
    800083fa:	00451a83          	lh	s5,4(a0)
    float* output_data) {
    800083fe:	fe86                	sd	ra,376(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    80008400:	ecbe                	sd	a5,88(sp)
  const int pad_width = params.padding_values.width;
    80008402:	00251783          	lh	a5,2(a0)
    float* output_data) {
    80008406:	faa2                	sd	s0,368(sp)
    80008408:	f6a6                	sd	s1,360(sp)
  const int pad_width = params.padding_values.width;
    8000840a:	f0be                	sd	a5,96(sp)
  const int depth_multiplier = params.depth_multiplier;
    8000840c:	01251783          	lh	a5,18(a0)
    float* output_data) {
    80008410:	f2ca                	sd	s2,352(sp)
    80008412:	e2da                	sd	s6,320(sp)
  const int depth_multiplier = params.depth_multiplier;
    80008414:	ec3e                	sd	a5,24(sp)
    80008416:	47e2                	lw	a5,24(sp)
    float* output_data) {
    80008418:	fe5e                	sd	s7,312(sp)
    8000841a:	fa62                	sd	s8,304(sp)
  const int depth_multiplier = params.depth_multiplier;
    8000841c:	f03e                	sd	a5,32(sp)
  const float output_activation_min = params.float_activation_min;
    8000841e:	591c                	lw	a5,48(a0)
    float* output_data) {
    80008420:	f666                	sd	s9,296(sp)
    80008422:	f26a                	sd	s10,288(sp)
    80008424:	ee6e                	sd	s11,280(sp)
    80008426:	f532                	sd	a2,168(sp)
    80008428:	e0c2                	sd	a6,64(sp)
  const float output_activation_min = params.float_activation_min;
    8000842a:	d43e                	sw	a5,40(sp)
  const float output_activation_max = params.float_activation_max;
    8000842c:	595c                	lw	a5,52(a0)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    8000842e:	4198                	lw	a4,0(a1)
  const float output_activation_max = params.float_activation_max;
    80008430:	d63e                	sw	a5,44(sp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80008432:	4791                	li	a5,4
    80008434:	00f70463          	beq	a4,a5,8000843c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x62>
    80008438:	556050ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    8000843c:	429c                	lw	a5,0(a3)
    8000843e:	8936                	mv	s2,a3
    80008440:	fee79ce3          	bne	a5,a4,80008438 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    80008444:	0008a703          	lw	a4,0(a7)
    80008448:	84c6                	mv	s1,a7
    8000844a:	fef717e3          	bne	a4,a5,80008438 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
    8000844e:	842e                	mv	s0,a1

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80008450:	8646                	mv	a2,a7
    80008452:	4681                	li	a3,0
    80008454:	4581                	li	a1,0
    80008456:	8522                	mv	a0,s0
    80008458:	edbfe0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    8000845c:	468d                	li	a3,3
    8000845e:	8626                	mv	a2,s1
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80008460:	f4aa                	sd	a0,104(sp)
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    80008462:	458d                	li	a1,3
    80008464:	854a                	mv	a0,s2
    80008466:	ecdfe0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    8000846a:	4585                	li	a1,1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    8000846c:	8b2a                	mv	s6,a0
  const int input_height = input_shape.Dims(1);
    8000846e:	8522                	mv	a0,s0
    80008470:	e0dfe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008474:	f8aa                	sd	a0,112(sp)
  const int input_width = input_shape.Dims(2);
    80008476:	4589                	li	a1,2
    80008478:	8522                	mv	a0,s0
    8000847a:	e03fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000847e:	fcaa                	sd	a0,120(sp)
  const int input_depth = input_shape.Dims(3);
    80008480:	458d                	li	a1,3
    80008482:	8522                	mv	a0,s0
    80008484:	df9fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008488:	f82a                	sd	a0,48(sp)
  const int filter_height = filter_shape.Dims(1);
    8000848a:	4585                	li	a1,1
    8000848c:	854a                	mv	a0,s2
    8000848e:	deffe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008492:	e12a                	sd	a0,128(sp)
  const int filter_width = filter_shape.Dims(2);
    80008494:	4589                	li	a1,2
    80008496:	854a                	mv	a0,s2
    80008498:	de5fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000849c:	e52a                	sd	a0,136(sp)
  const int output_height = output_shape.Dims(1);
    8000849e:	4585                	li	a1,1
    800084a0:	8526                	mv	a0,s1
    800084a2:	ddbfe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    800084a6:	e92a                	sd	a0,144(sp)
  const int output_width = output_shape.Dims(2);
    800084a8:	4589                	li	a1,2
    800084aa:	8526                	mv	a0,s1
    800084ac:	dd1fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    800084b0:	7782                	ld	a5,32(sp)
    800084b2:	7742                	ld	a4,48(sp)
  const int output_width = output_shape.Dims(2);
    800084b4:	ed2a                	sd	a0,152(sp)
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    800084b6:	02e78bbb          	mulw	s7,a5,a4
    800084ba:	f76b9fe3          	bne	s7,s6,80008438 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    800084be:	854e                	mv	a0,s3
    800084c0:	de5fe0ef          	jal	ra,800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    800084c4:	f7751ae3          	bne	a0,s7,80008438 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
    800084c8:	415007bb          	negw	a5,s5
    800084cc:	edbe                	sd	a5,216(sp)
    800084ce:	000a079b          	sext.w	a5,s4

  for (int b = 0; b < batches; ++b) {
    800084d2:	4981                	li	s3,0
    800084d4:	f1be                	sd	a5,224(sp)
    800084d6:	77a6                	ld	a5,104(sp)
    800084d8:	16f9d063          	bge	s3,a5,80008638 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25e>
    800084dc:	47c6                	lw	a5,80(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    800084de:	4b01                	li	s6,0
    800084e0:	f13e                	sd	a5,160(sp)
    800084e2:	67ee                	ld	a5,216(sp)
    800084e4:	e83e                	sd	a5,16(sp)
    800084e6:	47a6                	lw	a5,72(sp)
    800084e8:	e5be                	sd	a5,200(sp)
    800084ea:	7786                	ld	a5,96(sp)
    800084ec:	40f007bb          	negw	a5,a5
    800084f0:	e9be                	sd	a5,208(sp)
    800084f2:	67ca                	ld	a5,144(sp)
    800084f4:	14fb5063          	bge	s6,a5,80008634 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
    800084f8:	67ce                	ld	a5,208(sp)
      for (int out_x = 0; out_x < output_width; ++out_x) {
    800084fa:	4b81                	li	s7,0
    800084fc:	e43e                	sd	a5,8(sp)
    800084fe:	47e2                	lw	a5,24(sp)
    80008500:	fd3e                	sd	a5,184(sp)
    80008502:	47e6                	lw	a5,88(sp)
    80008504:	e1be                	sd	a5,192(sp)
    80008506:	67ea                	ld	a5,152(sp)
    80008508:	12fbd063          	bge	s7,a5,80008628 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24e>
    8000850c:	4c01                	li	s8,0
        for (int ic = 0; ic < input_depth; ++ic) {
    8000850e:	4c81                	li	s9,0
    80008510:	77c2                	ld	a5,48(sp)
    80008512:	10fcd563          	bge	s9,a5,8000861c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x242>
    80008516:	6786                	ld	a5,64(sp)
    80008518:	002c1a13          	slli	s4,s8,0x2
          for (int m = 0; m < depth_multiplier; m++) {
    8000851c:	4d01                	li	s10,0
    8000851e:	9a3e                	add	s4,s4,a5
    80008520:	7782                	ld	a5,32(sp)
    80008522:	0efd5863          	bge	s10,a5,80008612 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x238>
    80008526:	6e42                	ld	t3,16(sp)
    80008528:	018d07bb          	addw	a5,s10,s8
    8000852c:	fc3e                	sd	a5,56(sp)
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    8000852e:	4a81                	li	s5,0
            float total = 0.f;
    80008530:	00000d93          	li	s11,0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80008534:	678a                	ld	a5,128(sp)
    80008536:	08fad663          	bge	s5,a5,800085c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e8>
    8000853a:	6ea2                	ld	t4,8(sp)
    8000853c:	000e0f1b          	sext.w	t5,t3
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80008540:	4301                	li	t1,0
    80008542:	67aa                	ld	a5,136(sp)
    80008544:	06f35a63          	bge	t1,a5,800085b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    80008548:	000e869b          	sext.w	a3,t4
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    8000854c:	0606c163          	bltz	a3,800085ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
    80008550:	77e6                	ld	a5,120(sp)
    80008552:	04f6de63          	bge	a3,a5,800085ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
    80008556:	040f4c63          	bltz	t5,800085ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
    8000855a:	77c6                	ld	a5,112(sp)
    8000855c:	04ff5963          	bge	t5,a5,800085ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    80008560:	867a                	mv	a2,t5
    80008562:	8766                	mv	a4,s9
    80008564:	85ce                	mv	a1,s3
    80008566:	8522                	mv	a0,s0
    80008568:	e672                	sd	t3,264(sp)
    8000856a:	e276                	sd	t4,256(sp)
    8000856c:	fdfa                	sd	t5,248(sp)
    8000856e:	f59a                	sd	t1,232(sp)
    80008570:	d61fe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
    80008574:	732e                	ld	t1,232(sp)
    80008576:	7762                	ld	a4,56(sp)
    80008578:	8656                	mv	a2,s5
    8000857a:	869a                	mv	a3,t1
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    8000857c:	f9aa                	sd	a0,240(sp)
                  float filter_value = filter_data[Offset(
    8000857e:	4581                	li	a1,0
    80008580:	854a                	mv	a0,s2
    80008582:	d4ffe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    80008586:	77ce                	ld	a5,240(sp)
    80008588:	772a                	ld	a4,168(sp)
                      filter_shape, 0, filter_y, filter_x, oc)];
    8000858a:	050a                	slli	a0,a0,0x2
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    8000858c:	078a                	slli	a5,a5,0x2
    8000858e:	97ba                	add	a5,a5,a4
                      filter_shape, 0, filter_y, filter_x, oc)];
    80008590:	774a                	ld	a4,176(sp)
    80008592:	953a                	add	a0,a0,a4
                  total += (input_value * filter_value);
    80008594:	410c                	lw	a1,0(a0)
    80008596:	4388                	lw	a0,0(a5)
    80008598:	8daf90ef          	jal	ra,80001672 <__mulsf3>
    8000859c:	85aa                	mv	a1,a0
    8000859e:	856e                	mv	a0,s11
    800085a0:	a33f80ef          	jal	ra,80000fd2 <__addsf3>
    800085a4:	6e32                	ld	t3,264(sp)
    800085a6:	6e92                	ld	t4,256(sp)
    800085a8:	7f6e                	ld	t5,248(sp)
    800085aa:	732e                	ld	t1,232(sp)
    800085ac:	8daa                	mv	s11,a0
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    800085ae:	778e                	ld	a5,224(sp)
    800085b0:	2305                	addiw	t1,t1,1
    800085b2:	00fe8ebb          	addw	t4,t4,a5
    800085b6:	b771                	j	80008542 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x168>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    800085b8:	678e                	ld	a5,192(sp)
    800085ba:	2a85                	addiw	s5,s5,1
    800085bc:	00fe0e3b          	addw	t3,t3,a5
    800085c0:	bf95                	j	80008534 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15a>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
    800085c2:	6786                	ld	a5,64(sp)
            float bias_value = 0.0f;
    800085c4:	00000593          	li	a1,0
            if (bias_data) {
    800085c8:	c399                	beqz	a5,800085ce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
              bias_value = bias_data[oc];
    800085ca:	000a2583          	lw	a1,0(s4)
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
    800085ce:	856e                	mv	a0,s11
    800085d0:	a03f80ef          	jal	ra,80000fd2 <__addsf3>
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    800085d4:	7762                	ld	a4,56(sp)
                ActivationFunctionWithMinMax(total + bias_value,
    800085d6:	8daa                	mv	s11,a0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    800085d8:	85ce                	mv	a1,s3
    800085da:	86de                	mv	a3,s7
    800085dc:	865a                	mv	a2,s6
    800085de:	8526                	mv	a0,s1
    800085e0:	cf1fe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    800085e4:	679a                	ld	a5,384(sp)
      if (__a < __b)
    800085e6:	55a2                	lw	a1,40(sp)
    800085e8:	00251a93          	slli	s5,a0,0x2
    800085ec:	856e                	mv	a0,s11
    800085ee:	9abe                	add	s5,s5,a5
    800085f0:	ffff80ef          	jal	ra,800015ee <__lesf2>
    800085f4:	00055363          	bgez	a0,800085fa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x220>
	return __b;
    800085f8:	5da2                	lw	s11,40(sp)
      if (__b < __a)
    800085fa:	5532                	lw	a0,44(sp)
    800085fc:	85ee                	mv	a1,s11
    800085fe:	ff1f80ef          	jal	ra,800015ee <__lesf2>
    80008602:	00055363          	bgez	a0,80008608 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22e>
	return __b;
    80008606:	5db2                	lw	s11,44(sp)
    80008608:	01baa023          	sw	s11,0(s5)
          for (int m = 0; m < depth_multiplier; m++) {
    8000860c:	2d05                	addiw	s10,s10,1
    8000860e:	0a11                	addi	s4,s4,4
    80008610:	bf01                	j	80008520 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x146>
        for (int ic = 0; ic < input_depth; ++ic) {
    80008612:	77ea                	ld	a5,184(sp)
    80008614:	2c85                	addiw	s9,s9,1
    80008616:	00fc0c3b          	addw	s8,s8,a5
    8000861a:	bddd                	j	80008510 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x136>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8000861c:	67a2                	ld	a5,8(sp)
    8000861e:	672e                	ld	a4,200(sp)
    80008620:	2b85                	addiw	s7,s7,1
    80008622:	9fb9                	addw	a5,a5,a4
    80008624:	e43e                	sd	a5,8(sp)
    80008626:	b5c5                	j	80008506 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80008628:	67c2                	ld	a5,16(sp)
    8000862a:	770a                	ld	a4,160(sp)
    8000862c:	2b05                	addiw	s6,s6,1
    8000862e:	9fb9                	addw	a5,a5,a4
    80008630:	e83e                	sd	a5,16(sp)
    80008632:	b5c1                	j	800084f2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
  for (int b = 0; b < batches; ++b) {
    80008634:	2985                	addiw	s3,s3,1
    80008636:	b545                	j	800084d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xfc>
          }
        }
      }
    }
  }
}
    80008638:	70f6                	ld	ra,376(sp)
    8000863a:	7456                	ld	s0,368(sp)
    8000863c:	74b6                	ld	s1,360(sp)
    8000863e:	7916                	ld	s2,352(sp)
    80008640:	69f6                	ld	s3,344(sp)
    80008642:	6a56                	ld	s4,336(sp)
    80008644:	6ab6                	ld	s5,328(sp)
    80008646:	6b16                	ld	s6,320(sp)
    80008648:	7bf2                	ld	s7,312(sp)
    8000864a:	7c52                	ld	s8,304(sp)
    8000864c:	7cb2                	ld	s9,296(sp)
    8000864e:	7d12                	ld	s10,288(sp)
    80008650:	6df2                	ld	s11,280(sp)
    80008652:	6119                	addi	sp,sp,384
    80008654:	8082                	ret

0000000080008656 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    80008656:	7161                	addi	sp,sp,-432
    80008658:	eb4a                	sd	s2,400(sp)
    8000865a:	893e                	mv	s2,a5
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    8000865c:	00a51783          	lh	a5,10(a0)
    int8_t* output_data) {
    80008660:	f322                	sd	s0,416(sp)
    80008662:	e74e                	sd	s3,392(sp)
  const int stride_width = params.stride_width;
    80008664:	f43e                	sd	a5,40(sp)
  const int stride_height = params.stride_height;
    80008666:	00c51783          	lh	a5,12(a0)
    int8_t* output_data) {
    8000866a:	eaea                	sd	s10,336(sp)
    8000866c:	e6ee                	sd	s11,328(sp)
  const int stride_height = params.stride_height;
    8000866e:	f83e                	sd	a5,48(sp)
  const int dilation_width_factor = params.dilation_width_factor;
    80008670:	00e51783          	lh	a5,14(a0)
    int8_t* output_data) {
    80008674:	fd3a                	sd	a4,184(sp)
    80008676:	f706                	sd	ra,424(sp)
  const int dilation_width_factor = params.dilation_width_factor;
    80008678:	fc3e                	sd	a5,56(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    8000867a:	01051783          	lh	a5,16(a0)
    int8_t* output_data) {
    8000867e:	ef26                	sd	s1,408(sp)
    80008680:	e352                	sd	s4,384(sp)
  const int dilation_height_factor = params.dilation_height_factor;
    80008682:	e0be                	sd	a5,64(sp)
  const int pad_width = params.padding_values.width;
    80008684:	00251783          	lh	a5,2(a0)
    int8_t* output_data) {
    80008688:	fed6                	sd	s5,376(sp)
    8000868a:	fada                	sd	s6,368(sp)
  const int pad_width = params.padding_values.width;
    8000868c:	e4be                	sd	a5,72(sp)
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
    8000868e:	01251783          	lh	a5,18(a0)
    int8_t* output_data) {
    80008692:	f6de                	sd	s7,360(sp)
    80008694:	f2e2                	sd	s8,352(sp)
  const int depth_multiplier = params.depth_multiplier;
    80008696:	e43e                	sd	a5,8(sp)
    80008698:	47a2                	lw	a5,8(sp)
    int8_t* output_data) {
    8000869a:	eee6                	sd	s9,344(sp)
    8000869c:	f52e                	sd	a1,168(sp)
    8000869e:	f932                	sd	a2,176(sp)
    800086a0:	e1c2                	sd	a6,192(sp)
    800086a2:	79fa                	ld	s3,440(sp)
  const int pad_height = params.padding_values.height;
    800086a4:	00451403          	lh	s0,4(a0)
  const int depth_multiplier = params.depth_multiplier;
    800086a8:	e83e                	sd	a5,16(sp)
  const int32_t input_offset = params.input_offset;
    800086aa:	495c                	lw	a5,20(a0)
  const int32_t output_offset = params.output_offset;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    800086ac:	4298                	lw	a4,0(a3)
  const int32_t output_activation_min = params.quantized_activation_min;
    800086ae:	02852d83          	lw	s11,40(a0)
  const int32_t input_offset = params.input_offset;
    800086b2:	e8be                	sd	a5,80(sp)
  const int32_t output_offset = params.output_offset;
    800086b4:	4d5c                	lw	a5,28(a0)
  const int32_t output_activation_max = params.quantized_activation_max;
    800086b6:	02c52d03          	lw	s10,44(a0)
  const int32_t output_offset = params.output_offset;
    800086ba:	ecbe                	sd	a5,88(sp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    800086bc:	4791                	li	a5,4
    800086be:	00f70463          	beq	a4,a5,800086c6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
    800086c2:	2cc050ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    800086c6:	00092783          	lw	a5,0(s2)
    800086ca:	fee79ce3          	bne	a5,a4,800086c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x6c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    800086ce:	0009a703          	lw	a4,0(s3)
    800086d2:	fef718e3          	bne	a4,a5,800086c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x6c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    800086d6:	ffbd46e3          	blt	s10,s11,800086c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x6c>
    800086da:	84b6                	mv	s1,a3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    800086dc:	864e                	mv	a2,s3
    800086de:	4681                	li	a3,0
    800086e0:	4581                	li	a1,0
    800086e2:	8526                	mv	a0,s1
    800086e4:	8a46                	mv	s4,a7
    800086e6:	c4dfe0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    800086ea:	468d                	li	a3,3
    800086ec:	864e                	mv	a2,s3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    800086ee:	f0aa                	sd	a0,96(sp)
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    800086f0:	458d                	li	a1,3
    800086f2:	854a                	mv	a0,s2
    800086f4:	c3ffe0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    800086f8:	4585                	li	a1,1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    800086fa:	8aaa                	mv	s5,a0
  const int input_height = input_shape.Dims(1);
    800086fc:	8526                	mv	a0,s1
    800086fe:	b7ffe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008702:	f4aa                	sd	a0,104(sp)
  const int input_width = input_shape.Dims(2);
    80008704:	4589                	li	a1,2
    80008706:	8526                	mv	a0,s1
    80008708:	b75fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000870c:	f8aa                	sd	a0,112(sp)
  const int input_depth = input_shape.Dims(3);
    8000870e:	458d                	li	a1,3
    80008710:	8526                	mv	a0,s1
    80008712:	b6bfe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008716:	ec2a                	sd	a0,24(sp)
  const int filter_height = filter_shape.Dims(1);
    80008718:	4585                	li	a1,1
    8000871a:	854a                	mv	a0,s2
    8000871c:	b61fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008720:	fcaa                	sd	a0,120(sp)
  const int filter_width = filter_shape.Dims(2);
    80008722:	4589                	li	a1,2
    80008724:	854a                	mv	a0,s2
    80008726:	b57fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000872a:	e12a                	sd	a0,128(sp)
  const int output_height = output_shape.Dims(1);
    8000872c:	4585                	li	a1,1
    8000872e:	854e                	mv	a0,s3
    80008730:	b4dfe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80008734:	e52a                	sd	a0,136(sp)
  const int output_width = output_shape.Dims(2);
    80008736:	4589                	li	a1,2
    80008738:	854e                	mv	a0,s3
    8000873a:	b43fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    8000873e:	67c2                	ld	a5,16(sp)
    80008740:	6762                	ld	a4,24(sp)
  const int output_width = output_shape.Dims(2);
    80008742:	e92a                	sd	a0,144(sp)
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    80008744:	02e78b3b          	mulw	s6,a5,a4
    80008748:	f75b1de3          	bne	s6,s5,800086c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x6c>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    8000874c:	8552                	mv	a0,s4
    8000874e:	b57fe0ef          	jal	ra,800072a4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    80008752:	f76518e3          	bne	a0,s6,800086c2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x6c>
    80008756:	408007bb          	negw	a5,s0

  for (int batch = 0; batch < batches; ++batch) {
    8000875a:	4a01                	li	s4,0
    8000875c:	f5be                	sd	a5,232(sp)
    8000875e:	7786                	ld	a5,96(sp)
    80008760:	20fa5863          	bge	s4,a5,80008970 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
    80008764:	57c2                	lw	a5,48(sp)
    80008766:	7e2e                	ld	t3,232(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80008768:	4b81                	li	s7,0
    8000876a:	ed3e                	sd	a5,152(sp)
    8000876c:	57a2                	lw	a5,40(sp)
    8000876e:	edbe                	sd	a5,216(sp)
    80008770:	67a6                	ld	a5,72(sp)
    80008772:	40f007bb          	negw	a5,a5
    80008776:	f1be                	sd	a5,224(sp)
    80008778:	67aa                	ld	a5,136(sp)
    8000877a:	1efbd963          	bge	s7,a5,8000896c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x316>
    8000877e:	7e8e                	ld	t4,224(sp)
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80008780:	4c01                	li	s8,0
    80008782:	67ca                	ld	a5,144(sp)
    80008784:	1cfc5f63          	bge	s8,a5,80008962 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    80008788:	47a2                	lw	a5,8(sp)
    8000878a:	5762                	lw	a4,56(sp)
    8000878c:	4c81                	li	s9,0
    8000878e:	f13e                	sd	a5,160(sp)
    80008790:	e9ba                	sd	a4,208(sp)
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80008792:	4781                	li	a5,0
    80008794:	6762                	ld	a4,24(sp)
    80008796:	1ce7d163          	bge	a5,a4,80008958 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x302>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    8000879a:	c0000737          	lui	a4,0xc0000
    8000879e:	0705                	addi	a4,a4,1
    800087a0:	002c9a93          	slli	s5,s9,0x2
          for (int m = 0; m < depth_multiplier; ++m) {
    800087a4:	4801                	li	a6,0
    800087a6:	e5ba                	sd	a4,200(sp)
    800087a8:	6742                	ld	a4,16(sp)
    800087aa:	1ae85263          	bge	a6,a4,8000894e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
            const int output_channel = m + in_channel * depth_multiplier;
    800087ae:	4386                	lw	t2,64(sp)
    800087b0:	0198073b          	addw	a4,a6,s9
    800087b4:	f03a                	sd	a4,32(sp)
          for (int m = 0; m < depth_multiplier; ++m) {
    800087b6:	8f72                	mv	t5,t3
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
    800087b8:	4401                	li	s0,0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    800087ba:	4881                	li	a7,0
    800087bc:	7766                	ld	a4,120(sp)
    800087be:	08e8df63          	bge	a7,a4,8000885c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    800087c2:	000f029b          	sext.w	t0,t5
    800087c6:	8ff6                	mv	t6,t4
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    800087c8:	4301                	li	t1,0
    800087ca:	670a                	ld	a4,128(sp)
    800087cc:	08e35463          	bge	t1,a4,80008854 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fe>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    800087d0:	000f869b          	sext.w	a3,t6
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    800087d4:	0606cb63          	bltz	a3,8000884a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
    800087d8:	7746                	ld	a4,112(sp)
    800087da:	06e6d863          	bge	a3,a4,8000884a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
    800087de:	0602c663          	bltz	t0,8000884a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
    800087e2:	7726                	ld	a4,104(sp)
    800087e4:	06e2d363          	bge	t0,a4,8000884a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
    800087e8:	873e                	mv	a4,a5
    800087ea:	8616                	mv	a2,t0
    800087ec:	85d2                	mv	a1,s4
    800087ee:	8526                	mv	a0,s1
    800087f0:	fe76                	sd	t4,312(sp)
    800087f2:	fa72                	sd	t3,304(sp)
    800087f4:	f67a                	sd	t5,296(sp)
    800087f6:	f21e                	sd	t2,288(sp)
    800087f8:	ee42                	sd	a6,280(sp)
    800087fa:	ea7e                	sd	t6,272(sp)
    800087fc:	e63e                	sd	a5,264(sp)
    800087fe:	e216                	sd	t0,256(sp)
    80008800:	fd9a                	sd	t1,248(sp)
    80008802:	f9c6                	sd	a7,240(sp)
    80008804:	acdfe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
    80008808:	736e                	ld	t1,248(sp)
    8000880a:	78ce                	ld	a7,240(sp)
    8000880c:	7702                	ld	a4,32(sp)
    8000880e:	869a                	mv	a3,t1
                  int32_t input_val = input_data[Offset(
    80008810:	8b2a                	mv	s6,a0
                  int32_t filter_val = filter_data[Offset(
    80008812:	8646                	mv	a2,a7
    80008814:	4581                	li	a1,0
    80008816:	854a                	mv	a0,s2
    80008818:	ab9fe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
    8000881c:	77ea                	ld	a5,184(sp)
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    8000881e:	7ef2                	ld	t4,312(sp)
    80008820:	7e52                	ld	t3,304(sp)
                      input_shape, batch, in_y, in_x, in_channel)];
    80008822:	9b3e                	add	s6,s6,a5
    80008824:	000b0703          	lb	a4,0(s6)
                  acc += filter_val * (input_val + input_offset);
    80008828:	67c6                	ld	a5,80(sp)
    8000882a:	7f32                	ld	t5,296(sp)
    8000882c:	7392                	ld	t2,288(sp)
    8000882e:	9f3d                	addw	a4,a4,a5
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    80008830:	678e                	ld	a5,192(sp)
                  acc += filter_val * (input_val + input_offset);
    80008832:	6872                	ld	a6,280(sp)
    80008834:	6fd2                	ld	t6,272(sp)
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    80008836:	953e                	add	a0,a0,a5
    80008838:	00050683          	lb	a3,0(a0)
                  acc += filter_val * (input_val + input_offset);
    8000883c:	67b2                	ld	a5,264(sp)
    8000883e:	6292                	ld	t0,256(sp)
    80008840:	02d7073b          	mulw	a4,a4,a3
    80008844:	736e                	ld	t1,248(sp)
    80008846:	78ce                	ld	a7,240(sp)
    80008848:	9c39                	addw	s0,s0,a4
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    8000884a:	674e                	ld	a4,208(sp)
    8000884c:	2305                	addiw	t1,t1,1
    8000884e:	00ef8fbb          	addw	t6,t6,a4
    80008852:	bfa5                	j	800087ca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80008854:	2885                	addiw	a7,a7,1
    80008856:	01e38f3b          	addw	t5,t2,t5
    8000885a:	b78d                	j	800087bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
                }
              }
            }
            if (bias_data) {
    8000885c:	775a                	ld	a4,432(sp)
    8000885e:	c701                	beqz	a4,80008866 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
              acc += bias_data[output_channel];
    80008860:	9756                	add	a4,a4,s5
    80008862:	4318                	lw	a4,0(a4)
    80008864:	9c39                	addw	s0,s0,a4
            }
            acc = MultiplyByQuantizedMultiplier(
    80008866:	772a                	ld	a4,168(sp)
    80008868:	9756                	add	a4,a4,s5
    8000886a:	4314                	lw	a3,0(a4)
    8000886c:	774a                	ld	a4,176(sp)
    8000886e:	9756                	add	a4,a4,s5
    80008870:	430c                	lw	a1,0(a4)
  int left_shift = shift > 0 ? shift : 0;
    80008872:	872e                	mv	a4,a1
    80008874:	0005d363          	bgez	a1,8000887a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x224>
    80008878:	4701                	li	a4,0
    8000887a:	0007061b          	sext.w	a2,a4
  int right_shift = shift > 0 ? 0 : -shift;
    8000887e:	4701                	li	a4,0
    80008880:	00b04463          	bgtz	a1,80008888 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    80008884:	40b0073b          	negw	a4,a1
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    80008888:	00c4143b          	sllw	s0,s0,a2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    8000888c:	4581                	li	a1,0
    8000888e:	00869863          	bne	a3,s0,8000889e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    80008892:	80000637          	lui	a2,0x80000
    80008896:	40c685b3          	sub	a1,a3,a2
    8000889a:	0015b593          	seqz	a1,a1
  std::int64_t ab_64 = a_64 * b_64;
    8000889e:	02d40433          	mul	s0,s0,a3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    800088a2:	40000637          	lui	a2,0x40000
    800088a6:	00045363          	bgez	s0,800088ac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x256>
    800088aa:	662e                	ld	a2,200(sp)
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    800088ac:	800006b7          	lui	a3,0x80000
    800088b0:	fff6c693          	not	a3,a3
    800088b4:	e591                	bnez	a1,800088c0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    800088b6:	4685                	li	a3,1
    800088b8:	9432                	add	s0,s0,a2
    800088ba:	06fe                	slli	a3,a3,0x1f
    800088bc:	02d446b3          	div	a3,s0,a3
  assert(exponent <= 31);
    800088c0:	467d                	li	a2,31
    800088c2:	2681                	sext.w	a3,a3
    800088c4:	0a91                	addi	s5,s5,4
    800088c6:	02e65263          	bge	a2,a4,800088ea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>
    800088ca:	00084697          	auipc	a3,0x84
    800088ce:	3c668693          	addi	a3,a3,966 # 8008cc90 <CSWTCH.21+0x530>
    800088d2:	00084617          	auipc	a2,0x84
    800088d6:	3ce60613          	addi	a2,a2,974 # 8008cca0 <CSWTCH.21+0x540>
    800088da:	16700593          	li	a1,359
    800088de:	00084517          	auipc	a0,0x84
    800088e2:	41a50513          	addi	a0,a0,1050 # 8008ccf8 <CSWTCH.21+0x598>
    800088e6:	0b8050ef          	jal	ra,8000d99e <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    800088ea:	4605                	li	a2,1
    800088ec:	00e61633          	sll	a2,a2,a4
    800088f0:	fff6059b          	addiw	a1,a2,-1
  return a & b;
    800088f4:	03f6d513          	srli	a0,a3,0x3f
  return a >> offset;
    800088f8:	4015d61b          	sraiw	a2,a1,0x1
    800088fc:	40e6d73b          	sraw	a4,a3,a4
  return a ? BitNot(zero) : zero;
    80008900:	8df5                	and	a1,a1,a3
    80008902:	9e29                	addw	a2,a2,a0
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    80008904:	66e6                	ld	a3,88(sp)
  return a & b;
    80008906:	00b62633          	slt	a2,a2,a1
  return a + b;
    8000890a:	9f31                	addw	a4,a4,a2
    8000890c:	9eb9                	addw	a3,a3,a4
    8000890e:	8736                	mv	a4,a3
    80008910:	01b6d363          	bge	a3,s11,80008916 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c0>
    80008914:	876e                	mv	a4,s11
    80008916:	0007069b          	sext.w	a3,a4
    8000891a:	00dd5363          	bge	s10,a3,80008920 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>
    8000891e:	876a                	mv	a4,s10
    80008920:	0007041b          	sext.w	s0,a4
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
    80008924:	7702                	ld	a4,32(sp)
    80008926:	86e2                	mv	a3,s8
    80008928:	865e                	mv	a2,s7
    8000892a:	85d2                	mv	a1,s4
    8000892c:	854e                	mv	a0,s3
    8000892e:	e676                	sd	t4,264(sp)
    80008930:	e272                	sd	t3,256(sp)
    80008932:	fdc2                	sd	a6,248(sp)
    80008934:	f9be                	sd	a5,240(sp)
    80008936:	99bfe0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
    8000893a:	679e                	ld	a5,448(sp)
          for (int m = 0; m < depth_multiplier; ++m) {
    8000893c:	786e                	ld	a6,248(sp)
    8000893e:	6e12                	ld	t3,256(sp)
                               output_channel)] = static_cast<int8_t>(acc);
    80008940:	953e                	add	a0,a0,a5
          for (int m = 0; m < depth_multiplier; ++m) {
    80008942:	6eb2                	ld	t4,264(sp)
    80008944:	77ce                	ld	a5,240(sp)
                               output_channel)] = static_cast<int8_t>(acc);
    80008946:	00850023          	sb	s0,0(a0)
          for (int m = 0; m < depth_multiplier; ++m) {
    8000894a:	2805                	addiw	a6,a6,1
    8000894c:	bdb1                	j	800087a8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    8000894e:	770a                	ld	a4,160(sp)
    80008950:	2785                	addiw	a5,a5,1
    80008952:	01970cbb          	addw	s9,a4,s9
    80008956:	bd3d                	j	80008794 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80008958:	67ee                	ld	a5,216(sp)
    8000895a:	2c05                	addiw	s8,s8,1
    8000895c:	00fe8ebb          	addw	t4,t4,a5
    80008960:	b50d                	j	80008782 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80008962:	67ea                	ld	a5,152(sp)
    80008964:	2b85                	addiw	s7,s7,1
    80008966:	01c78e3b          	addw	t3,a5,t3
    8000896a:	b539                	j	80008778 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
  for (int batch = 0; batch < batches; ++batch) {
    8000896c:	2a05                	addiw	s4,s4,1
    8000896e:	bbc5                	j	8000875e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x108>
          }
        }
      }
    }
  }
}
    80008970:	70ba                	ld	ra,424(sp)
    80008972:	741a                	ld	s0,416(sp)
    80008974:	64fa                	ld	s1,408(sp)
    80008976:	695a                	ld	s2,400(sp)
    80008978:	69ba                	ld	s3,392(sp)
    8000897a:	6a1a                	ld	s4,384(sp)
    8000897c:	7af6                	ld	s5,376(sp)
    8000897e:	7b56                	ld	s6,368(sp)
    80008980:	7bb6                	ld	s7,360(sp)
    80008982:	7c16                	ld	s8,352(sp)
    80008984:	6cf6                	ld	s9,344(sp)
    80008986:	6d56                	ld	s10,336(sp)
    80008988:	6db6                	ld	s11,328(sp)
    8000898a:	615d                	addi	sp,sp,432
    8000898c:	8082                	ret

000000008000898e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    8000898e:	7145                	addi	sp,sp,-464
    80008990:	eb5a                	sd	s6,400(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    80008992:	0205bb03          	ld	s6,32(a1)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    80008996:	e786                	sd	ra,456(sp)
    80008998:	e3a2                	sd	s0,448(sp)
    8000899a:	ff26                	sd	s1,440(sp)
    8000899c:	fb4a                	sd	s2,432(sp)
    8000899e:	f74e                	sd	s3,424(sp)
    800089a0:	f352                	sd	s4,416(sp)
    800089a2:	ef56                	sd	s5,408(sp)
    800089a4:	e75e                	sd	s7,392(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    800089a6:	000b1463          	bnez	s6,800089ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20>
    800089aa:	7e5040ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    800089ae:	0285bb83          	ld	s7,40(a1)
    800089b2:	89ae                	mv	s3,a1
    800089b4:	fe0b8be3          	beqz	s7,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    800089b8:	84aa                	mv	s1,a0
  TFLITE_DCHECK(context != nullptr);
    800089ba:	d965                	beqz	a0,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    800089bc:	659c                	ld	a5,8(a1)
    800089be:	00007717          	auipc	a4,0x7
    800089c2:	8d272703          	lw	a4,-1838(a4) # 8000f290 <_ZN6tflite26kDepthwiseConvOutputTensorE>
    800089c6:	070a                	slli	a4,a4,0x2
    800089c8:	97ba                	add	a5,a5,a4
    800089ca:	43cc                	lw	a1,4(a5)
    800089cc:	7558                	ld	a4,168(a0)
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    800089ce:	4901                	li	s2,0
    800089d0:	9702                	jalr	a4
  return GetMutableEvalInput(context, node, index);
    800089d2:	00007617          	auipc	a2,0x7
    800089d6:	8ba62603          	lw	a2,-1862(a2) # 8000f28c <_ZN6tflite25kDepthwiseConvInputTensorE>
    800089da:	85ce                	mv	a1,s3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    800089dc:	842a                	mv	s0,a0
  return GetMutableEvalInput(context, node, index);
    800089de:	8526                	mv	a0,s1
    800089e0:	86dfe0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    800089e4:	8a2a                	mv	s4,a0
    800089e6:	00007617          	auipc	a2,0x7
    800089ea:	8ae62603          	lw	a2,-1874(a2) # 8000f294 <_ZN6tflite27kDepthwiseConvWeightsTensorE>
    800089ee:	85ce                	mv	a1,s3
    800089f0:	8526                	mv	a0,s1
    800089f2:	85bfe0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    800089f6:	0009b783          	ld	a5,0(s3)
    800089fa:	8aaa                	mv	s5,a0
    800089fc:	4398                	lw	a4,0(a5)
    800089fe:	478d                	li	a5,3
    80008a00:	00f71b63          	bne	a4,a5,80008a16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    80008a04:	00007617          	auipc	a2,0x7
    80008a08:	88462603          	lw	a2,-1916(a2) # 8000f288 <_ZN6tflite24kDepthwiseConvBiasTensorE>
    80008a0c:	85ce                	mv	a1,s3
    80008a0e:	8526                	mv	a0,s1
    80008a10:	83dfe0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    80008a14:	892a                	mv	s2,a0
          : nullptr;

  switch (input->type) {  // Already know in/out types are same.
    80008a16:	010a2503          	lw	a0,16(s4)
    80008a1a:	4785                	li	a5,1
    80008a1c:	02f50363          	beq	a0,a5,80008a42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    80008a20:	47a5                	li	a5,9
    80008a22:	0af50663          	beq	a0,a5,80008ace <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int8_t>(output));
      break;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    80008a26:	7480                	ld	s0,40(s1)
    80008a28:	8f9fd0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    80008a2c:	010a2683          	lw	a3,16(s4)
    80008a30:	862a                	mv	a2,a0
    80008a32:	00084597          	auipc	a1,0x84
    80008a36:	54658593          	addi	a1,a1,1350 # 8008cf78 <CSWTCH.21+0x818>
    80008a3a:	8526                	mv	a0,s1
    80008a3c:	9402                	jalr	s0
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    80008a3e:	4505                	li	a0,1
    80008a40:	a8a5                	j	80008ab8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12a>
          DepthwiseConvParamsFloat(params, data),
    80008a42:	865a                	mv	a2,s6
    80008a44:	85de                	mv	a1,s7
    80008a46:	1988                	addi	a0,sp,240
    80008a48:	126000ef          	jal	ra,80008b6e <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    80008a4c:	85d2                	mv	a1,s4
    80008a4e:	1808                	addi	a0,sp,48
    80008a50:	63a000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    80008a54:	85d6                	mv	a1,s5
    80008a56:	0888                	addi	a0,sp,80
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008a58:	000a3483          	ld	s1,0(s4)
    80008a5c:	62e000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80008a60:	f40a85e3          	beqz	s5,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
          tflite::micro::GetTensorShape(bias),
    80008a64:	85ca                	mv	a1,s2
    80008a66:	1888                	addi	a0,sp,112
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008a68:	000ab983          	ld	s3,0(s5)
    80008a6c:	61e000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80008a70:	f2090de3          	beqz	s2,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008a74:	00093803          	ld	a6,0(s2)
          tflite::micro::GetTensorShape(output),
    80008a78:	85a2                	mv	a1,s0
    80008a7a:	1a28                	addi	a0,sp,312
    80008a7c:	f442                	sd	a6,40(sp)
    80008a7e:	60c000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80008a82:	7822                	ld	a6,40(sp)
    80008a84:	c011                	beqz	s0,80008a88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
    80008a86:	6000                	ld	s0,0(s0)
      tflite::reference_ops::DepthwiseConv(
    80008a88:	13810893          	addi	a7,sp,312
    80008a8c:	189c                	addi	a5,sp,112
    80008a8e:	874e                	mv	a4,s3
    80008a90:	0894                	addi	a3,sp,80
    80008a92:	8626                	mv	a2,s1
    80008a94:	180c                	addi	a1,sp,48
    80008a96:	1988                	addi	a0,sp,240
    80008a98:	e022                	sd	s0,0(sp)
    80008a9a:	941ff0ef          	jal	ra,800083da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
    80008a9e:	1a28                	addi	a0,sp,312
    80008aa0:	f9afe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    80008aa4:	1888                	addi	a0,sp,112
    80008aa6:	f94fe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    80008aaa:	0888                	addi	a0,sp,80
    80008aac:	f8efe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    80008ab0:	1808                	addi	a0,sp,48
          tflite::micro::GetTensorShape(input),
    80008ab2:	f88fe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
    80008ab6:	4501                	li	a0,0
}
    80008ab8:	60be                	ld	ra,456(sp)
    80008aba:	641e                	ld	s0,448(sp)
    80008abc:	74fa                	ld	s1,440(sp)
    80008abe:	795a                	ld	s2,432(sp)
    80008ac0:	79ba                	ld	s3,424(sp)
    80008ac2:	7a1a                	ld	s4,416(sp)
    80008ac4:	6afa                	ld	s5,408(sp)
    80008ac6:	6b5a                	ld	s6,400(sp)
    80008ac8:	6bba                	ld	s7,392(sp)
    80008aca:	6179                	addi	sp,sp,464
    80008acc:	8082                	ret
          DepthwiseConvParamsQuantized(params, data),
    80008ace:	865a                	mv	a2,s6
    80008ad0:	85de                	mv	a1,s7
    80008ad2:	1a28                	addi	a0,sp,312
    80008ad4:	12a000ef          	jal	ra,80008bfe <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    80008ad8:	85d2                	mv	a1,s4
    80008ada:	0908                	addi	a0,sp,144
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    80008adc:	028b3983          	ld	s3,40(s6)
    80008ae0:	030b3b03          	ld	s6,48(s6)
          tflite::micro::GetTensorShape(input),
    80008ae4:	5a6000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    80008ae8:	85d6                	mv	a1,s5
    80008aea:	1908                	addi	a0,sp,176
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008aec:	000a3a03          	ld	s4,0(s4)
    80008af0:	59a000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80008af4:	ea0a8be3          	beqz	s5,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
          tflite::micro::GetTensorShape(bias),
    80008af8:	85ca                	mv	a1,s2
    80008afa:	0988                	addi	a0,sp,208
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008afc:	000aba83          	ld	s5,0(s5)
    80008b00:	58a000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80008b04:	ea0903e3          	beqz	s2,800089aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
          tflite::micro::GetTensorShape(output),
    80008b08:	1984                	addi	s1,sp,240
    80008b0a:	85a2                	mv	a1,s0
    80008b0c:	8526                	mv	a0,s1
  return reinterpret_cast<const T*>(tensor->data.raw);
    80008b0e:	00093903          	ld	s2,0(s2)
    80008b12:	578000ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80008b16:	c011                	beqz	s0,80008b1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
    80008b18:	6000                	ld	s0,0(s0)
      reference_integer_ops::DepthwiseConvPerChannel(
    80008b1a:	0d010893          	addi	a7,sp,208
    80008b1e:	8856                	mv	a6,s5
    80008b20:	191c                	addi	a5,sp,176
    80008b22:	8752                	mv	a4,s4
    80008b24:	0914                	addi	a3,sp,144
    80008b26:	865a                	mv	a2,s6
    80008b28:	85ce                	mv	a1,s3
    80008b2a:	1a28                	addi	a0,sp,312
    80008b2c:	e822                	sd	s0,16(sp)
    80008b2e:	e426                	sd	s1,8(sp)
    80008b30:	e04a                	sd	s2,0(sp)
    80008b32:	b25ff0ef          	jal	ra,80008656 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
    80008b36:	8526                	mv	a0,s1
    80008b38:	f02fe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    80008b3c:	0988                	addi	a0,sp,208
    80008b3e:	efcfe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    80008b42:	1908                	addi	a0,sp,176
    80008b44:	ef6fe0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    80008b48:	0908                	addi	a0,sp,144
    80008b4a:	b7a5                	j	80008ab2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x124>

0000000080008b4c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    80008b4c:	1141                	addi	sp,sp,-16
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    80008b4e:	04000613          	li	a2,64
    80008b52:	00006597          	auipc	a1,0x6
    80008b56:	7ee58593          	addi	a1,a1,2030 # 8000f340 <_ZN6tflite20kPoolingOutputTensorE+0xa4>
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    80008b5a:	e022                	sd	s0,0(sp)
    80008b5c:	e406                	sd	ra,8(sp)
    80008b5e:	842a                	mv	s0,a0
          /*version=*/0};
    80008b60:	ad6f90ef          	jal	ra,80001e36 <memcpy>
}
    80008b64:	60a2                	ld	ra,8(sp)
    80008b66:	8522                	mv	a0,s0
    80008b68:	6402                	ld	s0,0(sp)
    80008b6a:	0141                	addi	sp,sp,16
    80008b6c:	8082                	ret

0000000080008b6e <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    80008b6e:	499c                	lw	a5,16(a1)
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    80008b70:	1101                	addi	sp,sp,-32
    80008b72:	e822                	sd	s0,16(sp)
    80008b74:	e426                	sd	s1,8(sp)
    80008b76:	e04a                	sd	s2,0(sp)
    80008b78:	ec06                	sd	ra,24(sp)
  if (activation == kTfLiteActRelu) {
    80008b7a:	4705                	li	a4,1
    80008b7c:	842a                	mv	s0,a0
    80008b7e:	84ae                	mv	s1,a1
    80008b80:	8932                	mv	s2,a2
    80008b82:	04e79a63          	bne	a5,a4,80008bd6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x68>
    *activation_min = 0;
    80008b86:	7f8007b7          	lui	a5,0x7f800
    80008b8a:	17fd                	addi	a5,a5,-1
    80008b8c:	1782                	slli	a5,a5,0x20
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80008b8e:	4088                	lw	a0,0(s1)
    *activation_min = std::numeric_limits<T>::lowest();
    80008b90:	f81c                	sd	a5,48(s0)
    80008b92:	54a000ef          	jal	ra,800090dc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    80008b96:	00092783          	lw	a5,0(s2)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80008b9a:	00a40023          	sb	a0,0(s0)
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.depth_multiplier = params.depth_multiplier;
  return op_params;
}
    80008b9e:	60e2                	ld	ra,24(sp)
  op_params.padding_values.width = data.padding.width;
    80008ba0:	00f41123          	sh	a5,2(s0)
  op_params.padding_values.height = data.padding.height;
    80008ba4:	00492783          	lw	a5,4(s2)
}
    80008ba8:	8522                	mv	a0,s0
    80008baa:	6902                	ld	s2,0(sp)
  op_params.padding_values.height = data.padding.height;
    80008bac:	00f41223          	sh	a5,4(s0)
  op_params.stride_width = params.stride_width;
    80008bb0:	40dc                	lw	a5,4(s1)
    80008bb2:	00f41523          	sh	a5,10(s0)
  op_params.stride_height = params.stride_height;
    80008bb6:	449c                	lw	a5,8(s1)
    80008bb8:	00f41623          	sh	a5,12(s0)
  op_params.dilation_width_factor = params.dilation_width_factor;
    80008bbc:	48dc                	lw	a5,20(s1)
    80008bbe:	00f41723          	sh	a5,14(s0)
  op_params.dilation_height_factor = params.dilation_height_factor;
    80008bc2:	4c9c                	lw	a5,24(s1)
    80008bc4:	00f41823          	sh	a5,16(s0)
  op_params.depth_multiplier = params.depth_multiplier;
    80008bc8:	44dc                	lw	a5,12(s1)
}
    80008bca:	64a2                	ld	s1,8(sp)
  op_params.depth_multiplier = params.depth_multiplier;
    80008bcc:	00f41923          	sh	a5,18(s0)
}
    80008bd0:	6442                	ld	s0,16(sp)
    80008bd2:	6105                	addi	sp,sp,32
    80008bd4:	8082                	ret
  } else if (activation == kTfLiteActRelu6) {
    80008bd6:	470d                	li	a4,3
    80008bd8:	00e79663          	bne	a5,a4,80008be4 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x76>
    *activation_min = 0;
    80008bdc:	10300793          	li	a5,259
    80008be0:	17da                	slli	a5,a5,0x36
    80008be2:	b775                	j	80008b8e <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActReluN1To1) {
    80008be4:	4709                	li	a4,2
    80008be6:	00e79763          	bne	a5,a4,80008bf4 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x86>
    *activation_min = -1;
    80008bea:	00006797          	auipc	a5,0x6
    80008bee:	6167b783          	ld	a5,1558(a5) # 8000f200 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x40>
    80008bf2:	bf71                	j	80008b8e <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
    80008bf4:	00006797          	auipc	a5,0x6
    80008bf8:	6147b783          	ld	a5,1556(a5) # 8000f208 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x48>
    80008bfc:	bf49                	j	80008b8e <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>

0000000080008bfe <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
    80008bfe:	4a1c                	lw	a5,16(a2)
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    80008c00:	1101                	addi	sp,sp,-32
    80008c02:	e822                	sd	s0,16(sp)
    80008c04:	e426                	sd	s1,8(sp)
    80008c06:	e04a                	sd	s2,0(sp)
    80008c08:	ec06                	sd	ra,24(sp)
  op_params.input_offset = -data.input_zero_point;
    80008c0a:	40f007bb          	negw	a5,a5
    80008c0e:	c95c                	sw	a5,20(a0)
  op_params.weights_offset = -data.filter_zero_point;
    80008c10:	4a5c                	lw	a5,20(a2)
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    80008c12:	842a                	mv	s0,a0
    80008c14:	892e                	mv	s2,a1
  op_params.weights_offset = -data.filter_zero_point;
    80008c16:	40f007bb          	negw	a5,a5
    80008c1a:	cd1c                	sw	a5,24(a0)
  op_params.output_offset = data.output_zero_point;
    80008c1c:	4e1c                	lw	a5,24(a2)
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    80008c1e:	84b2                	mv	s1,a2
  op_params.output_offset = data.output_zero_point;
    80008c20:	cd5c                	sw	a5,28(a0)
  op_params.output_multiplier = data.output_multiplier;
    80008c22:	4e5c                	lw	a5,28(a2)
    80008c24:	d11c                	sw	a5,32(a0)
  op_params.output_shift = -data.output_shift;
    80008c26:	521c                	lw	a5,32(a2)
    80008c28:	40f007bb          	negw	a5,a5
    80008c2c:	d15c                	sw	a5,36(a0)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80008c2e:	4188                	lw	a0,0(a1)
    80008c30:	4ac000ef          	jal	ra,800090dc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
    80008c34:	40dc                	lw	a5,4(s1)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    80008c36:	00a40023          	sb	a0,0(s0)
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.depth_multiplier = params.depth_multiplier;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
    80008c3a:	60e2                	ld	ra,24(sp)
  op_params.padding_values.height = data.padding.height;
    80008c3c:	00f41223          	sh	a5,4(s0)
  op_params.padding_values.width = data.padding.width;
    80008c40:	409c                	lw	a5,0(s1)
}
    80008c42:	8522                	mv	a0,s0
  op_params.padding_values.width = data.padding.width;
    80008c44:	00f41123          	sh	a5,2(s0)
  op_params.stride_height = params.stride_height;
    80008c48:	00892783          	lw	a5,8(s2)
    80008c4c:	00f41623          	sh	a5,12(s0)
  op_params.stride_width = params.stride_width;
    80008c50:	00492783          	lw	a5,4(s2)
    80008c54:	00f41523          	sh	a5,10(s0)
  op_params.dilation_height_factor = params.dilation_height_factor;
    80008c58:	01892783          	lw	a5,24(s2)
    80008c5c:	00f41823          	sh	a5,16(s0)
  op_params.dilation_width_factor = params.dilation_width_factor;
    80008c60:	01492783          	lw	a5,20(s2)
    80008c64:	00f41723          	sh	a5,14(s0)
  op_params.depth_multiplier = params.depth_multiplier;
    80008c68:	00c92783          	lw	a5,12(s2)
}
    80008c6c:	6902                	ld	s2,0(sp)
  op_params.depth_multiplier = params.depth_multiplier;
    80008c6e:	00f41923          	sh	a5,18(s0)
  op_params.quantized_activation_min = data.output_activation_min;
    80008c72:	7c9c                	ld	a5,56(s1)
}
    80008c74:	64a2                	ld	s1,8(sp)
  op_params.quantized_activation_min = data.output_activation_min;
    80008c76:	f41c                	sd	a5,40(s0)
}
    80008c78:	6442                	ld	s0,16(sp)
    80008c7a:	6105                	addi	sp,sp,32
    80008c7c:	8082                	ret

0000000080008c7e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    80008c7e:	7131                	addi	sp,sp,-192
    80008c80:	f526                	sd	s1,168(sp)
    80008c82:	84be                	mv	s1,a5
  bool has_bias = node->inputs->size == 3;
    80008c84:	619c                	ld	a5,0(a1)
    const TfLiteType data_type, OpDataConv* data) {
    80008c86:	ed4e                	sd	s3,152(sp)
    80008c88:	e952                	sd	s4,144(sp)
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80008c8a:	439c                	lw	a5,0(a5)
    const TfLiteType data_type, OpDataConv* data) {
    80008c8c:	e556                	sd	s5,136(sp)
    80008c8e:	fcde                	sd	s7,120(sp)
    80008c90:	fd06                	sd	ra,184(sp)
    80008c92:	8bba                	mv	s7,a4
    80008c94:	f922                	sd	s0,176(sp)
    80008c96:	f14a                	sd	s2,160(sp)
    80008c98:	e15a                	sd	s6,128(sp)
    80008c9a:	f8e2                	sd	s8,112(sp)
    80008c9c:	f4e6                	sd	s9,104(sp)
    80008c9e:	f0ea                	sd	s10,96(sp)
    80008ca0:	ecee                	sd	s11,88(sp)
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80008ca2:	37f9                	addiw	a5,a5,-2
    80008ca4:	4705                	li	a4,1
    const TfLiteType data_type, OpDataConv* data) {
    80008ca6:	49ae                	lw	s3,200(sp)
    80008ca8:	6ace                	ld	s5,208(sp)
    80008caa:	8a2a                	mv	s4,a0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    80008cac:	02f77363          	bgeu	a4,a5,80008cd2 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    80008cb0:	751c                	ld	a5,40(a0)
    80008cb2:	00084717          	auipc	a4,0x84
    80008cb6:	2e670713          	addi	a4,a4,742 # 8008cf98 <CSWTCH.21+0x838>
    80008cba:	05700693          	li	a3,87
    80008cbe:	00084617          	auipc	a2,0x84
    80008cc2:	46260613          	addi	a2,a2,1122 # 8008d120 <CSWTCH.21+0x9c0>
    80008cc6:	00084597          	auipc	a1,0x84
    80008cca:	83258593          	addi	a1,a1,-1998 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
      params.stride_height, params.stride_width, params.dilation_height_factor,
      params.dilation_width_factor, height, width, filter_height, filter_width,
      padding, &out_height, &out_width);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    80008cce:	9782                	jalr	a5
    80008cd0:	a835                	j	80008d0c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    80008cd2:	659c                	ld	a5,8(a1)
    80008cd4:	8442                	mv	s0,a6
    80008cd6:	8b2e                	mv	s6,a1
    80008cd8:	0007a803          	lw	a6,0(a5)
    80008cdc:	04e80863          	beq	a6,a4,80008d2c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xae>
    80008ce0:	02853303          	ld	t1,40(a0)
    80008ce4:	4885                	li	a7,1
    80008ce6:	00084797          	auipc	a5,0x84
    80008cea:	79278793          	addi	a5,a5,1938 # 8008d478 <CSWTCH.21+0xd18>
    80008cee:	00084717          	auipc	a4,0x84
    80008cf2:	32a70713          	addi	a4,a4,810 # 8008d018 <CSWTCH.21+0x8b8>
    80008cf6:	05800693          	li	a3,88
    80008cfa:	00084617          	auipc	a2,0x84
    80008cfe:	42660613          	addi	a2,a2,1062 # 8008d120 <CSWTCH.21+0x9c0>
    80008d02:	00084597          	auipc	a1,0x84
    80008d06:	bee58593          	addi	a1,a1,-1042 # 8008c8f0 <CSWTCH.21+0x190>
    80008d0a:	9302                	jalr	t1
    80008d0c:	4505                	li	a0,1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    80008d0e:	70ea                	ld	ra,184(sp)
    80008d10:	744a                	ld	s0,176(sp)
    80008d12:	74aa                	ld	s1,168(sp)
    80008d14:	790a                	ld	s2,160(sp)
    80008d16:	69ea                	ld	s3,152(sp)
    80008d18:	6a4a                	ld	s4,144(sp)
    80008d1a:	6aaa                	ld	s5,136(sp)
    80008d1c:	6b0a                	ld	s6,128(sp)
    80008d1e:	7be6                	ld	s7,120(sp)
    80008d20:	7c46                	ld	s8,112(sp)
    80008d22:	7ca6                	ld	s9,104(sp)
    80008d24:	7d06                	ld	s10,96(sp)
    80008d26:	6de6                	ld	s11,88(sp)
    80008d28:	6129                	addi	sp,sp,192
    80008d2a:	8082                	ret
      params.stride_height, params.stride_width, params.dilation_height_factor,
    80008d2c:	425c                	lw	a5,4(a2)
      params.dilation_width_factor, height, width, filter_height, filter_width,
    80008d2e:	01462803          	lw	a6,20(a2)
  auto padding = params.padding;
    80008d32:	00062883          	lw	a7,0(a2)
    80008d36:	8cb6                	mv	s9,a3
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    80008d38:	8742                	mv	a4,a6
    80008d3a:	86be                	mv	a3,a5
      params.stride_height, params.stride_width, params.dilation_height_factor,
    80008d3c:	00862c03          	lw	s8,8(a2)
    80008d40:	01862d03          	lw	s10,24(a2)
    80008d44:	85e6                	mv	a1,s9
    80008d46:	8546                	mv	a0,a7
    80008d48:	8932                	mv	s2,a2
    80008d4a:	8626                	mv	a2,s1
    80008d4c:	e4c2                	sd	a6,72(sp)
    80008d4e:	e0be                	sd	a5,64(sp)
    80008d50:	fc46                	sd	a7,56(sp)
    80008d52:	930ff0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    80008d56:	78e2                	ld	a7,56(sp)
    80008d58:	876a                	mv	a4,s10
    80008d5a:	86e2                	mv	a3,s8
    80008d5c:	8622                	mv	a2,s0
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    80008d5e:	8daa                	mv	s11,a0
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    80008d60:	85de                	mv	a1,s7
    80008d62:	8546                	mv	a0,a7
    80008d64:	91eff0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80008d68:	347d                	addiw	s0,s0,-1
    80008d6a:	03a4043b          	mulw	s0,s0,s10
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80008d6e:	fff5071b          	addiw	a4,a0,-1
  total_padding = total_padding > 0 ? total_padding : 0;
    80008d72:	6786                	ld	a5,64(sp)
    80008d74:	6826                	ld	a6,72(sp)
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80008d76:	0387073b          	mulw	a4,a4,s8
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80008d7a:	2405                	addiw	s0,s0,1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80008d7c:	9c39                	addw	s0,s0,a4
  int total_padding =
    80008d7e:	417406bb          	subw	a3,s0,s7
    80008d82:	8736                	mv	a4,a3
  total_padding = total_padding > 0 ? total_padding : 0;
    80008d84:	0006d363          	bgez	a3,80008d8a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10c>
    80008d88:	4701                	li	a4,0
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80008d8a:	34fd                	addiw	s1,s1,-1
    80008d8c:	030484bb          	mulw	s1,s1,a6
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80008d90:	fffd869b          	addiw	a3,s11,-1
    80008d94:	02f686bb          	mulw	a3,a3,a5
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    80008d98:	2485                	addiw	s1,s1,1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80008d9a:	9cb5                	addw	s1,s1,a3
  int total_padding =
    80008d9c:	419486bb          	subw	a3,s1,s9
  total_padding = total_padding > 0 ? total_padding : 0;
    80008da0:	0006879b          	sext.w	a5,a3
    80008da4:	0007d363          	bgez	a5,80008daa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
    80008da8:	4681                	li	a3,0
  return total_padding / 2;
    80008daa:	4016d79b          	sraiw	a5,a3,0x1
      padding, &out_height, &out_width);
    80008dae:	00faa023          	sw	a5,0(s5)
  *offset = total_padding % 2;
    80008db2:	8a85                	andi	a3,a3,1
  return total_padding / 2;
    80008db4:	4017579b          	sraiw	a5,a4,0x1
  *offset = total_padding % 2;
    80008db8:	8b05                	andi	a4,a4,1
    80008dba:	00faa223          	sw	a5,4(s5)
    80008dbe:	00daa423          	sw	a3,8(s5)
    80008dc2:	00eaa623          	sw	a4,12(s5)
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    80008dc6:	00006617          	auipc	a2,0x6
    80008dca:	4b662603          	lw	a2,1206(a2) # 8000f27c <_ZN6tflite16kConvInputTensorE>
    80008dce:	85da                	mv	a1,s6
    80008dd0:	8552                	mv	a0,s4
    80008dd2:	fa4fd0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008dd6:	84aa                	mv	s1,a0
  TF_LITE_ENSURE(context, input != nullptr);
    80008dd8:	e11d                	bnez	a0,80008dfe <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
    80008dda:	028a3783          	ld	a5,40(s4)
    80008dde:	00084717          	auipc	a4,0x84
    80008de2:	25270713          	addi	a4,a4,594 # 8008d030 <CSWTCH.21+0x8d0>
    80008de6:	06200693          	li	a3,98
    80008dea:	00084617          	auipc	a2,0x84
    80008dee:	33660613          	addi	a2,a2,822 # 8008d120 <CSWTCH.21+0x9c0>
    80008df2:	00083597          	auipc	a1,0x83
    80008df6:	70658593          	addi	a1,a1,1798 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80008dfa:	8552                	mv	a0,s4
    80008dfc:	bdc9                	j	80008cce <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x50>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    80008dfe:	00006617          	auipc	a2,0x6
    80008e02:	48662603          	lw	a2,1158(a2) # 8000f284 <_ZN6tflite18kConvWeightsTensorE>
    80008e06:	85da                	mv	a1,s6
    80008e08:	8552                	mv	a0,s4
    80008e0a:	f6cfd0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008e0e:	842a                	mv	s0,a0
  TF_LITE_ENSURE(context, filter != nullptr);
    80008e10:	e911                	bnez	a0,80008e24 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a6>
    80008e12:	028a3783          	ld	a5,40(s4)
    80008e16:	00084717          	auipc	a4,0x84
    80008e1a:	23270713          	addi	a4,a4,562 # 8008d048 <CSWTCH.21+0x8e8>
    80008e1e:	06400693          	li	a3,100
    80008e22:	b7e1                	j	80008dea <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    80008e24:	85da                	mv	a1,s6
    80008e26:	00006617          	auipc	a2,0x6
    80008e2a:	45262603          	lw	a2,1106(a2) # 8000f278 <_ZN6tflite15kConvBiasTensorE>
    80008e2e:	8552                	mv	a0,s4
    80008e30:	f6afd0ef          	jal	ra,8000659a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    80008e34:	fc2a                	sd	a0,56(sp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    80008e36:	85da                	mv	a1,s6
    80008e38:	00006617          	auipc	a2,0x6
    80008e3c:	44862603          	lw	a2,1096(a2) # 8000f280 <_ZN6tflite17kConvOutputTensorE>
    80008e40:	8552                	mv	a0,s4
    80008e42:	f38fd0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    80008e46:	76e2                	ld	a3,56(sp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    80008e48:	8b2a                	mv	s6,a0
  TF_LITE_ENSURE(context, output != nullptr);
    80008e4a:	e911                	bnez	a0,80008e5e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>
    80008e4c:	028a3783          	ld	a5,40(s4)
    80008e50:	00084717          	auipc	a4,0x84
    80008e54:	21070713          	addi	a4,a4,528 # 8008d060 <CSWTCH.21+0x900>
    80008e58:	06800693          	li	a3,104
    80008e5c:	b779                	j	80008dea <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
  if (data_type != kTfLiteFloat32) {
    80008e5e:	4785                	li	a5,1
    80008e60:	00f99e63          	bne	s3,a5,80008e7c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fe>
  data->input_zero_point = input->params.zero_point;
    80008e64:	4cdc                	lw	a5,28(s1)
  return kTfLiteOk;
    80008e66:	4501                	li	a0,0
  data->input_zero_point = input->params.zero_point;
    80008e68:	00faa823          	sw	a5,16(s5)
  data->filter_zero_point = filter->params.zero_point;
    80008e6c:	4c5c                	lw	a5,28(s0)
    80008e6e:	00faaa23          	sw	a5,20(s5)
  data->output_zero_point = output->params.zero_point;
    80008e72:	01cb2783          	lw	a5,28(s6)
    80008e76:	00faac23          	sw	a5,24(s5)
  return kTfLiteOk;
    80008e7a:	bd51                	j	80008d0e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    80008e7c:	681c                	ld	a5,16(s0)
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    80008e7e:	872a                	mv	a4,a0
    80008e80:	020a8893          	addi	a7,s5,32
    80008e84:	4b9c                	lw	a5,16(a5)
    80008e86:	01ca8813          	addi	a6,s5,28
    80008e8a:	8622                	mv	a2,s0
    80008e8c:	f03e                	sd	a5,32(sp)
    80008e8e:	030ab783          	ld	a5,48(s5)
    80008e92:	85a6                	mv	a1,s1
    80008e94:	8552                	mv	a0,s4
    80008e96:	ec3e                	sd	a5,24(sp)
    80008e98:	028ab783          	ld	a5,40(s5)
    80008e9c:	e83e                	sd	a5,16(sp)
    80008e9e:	03ca8793          	addi	a5,s5,60
    80008ea2:	e43e                	sd	a5,8(sp)
    80008ea4:	038a8793          	addi	a5,s5,56
    80008ea8:	e03e                	sd	a5,0(sp)
    80008eaa:	01090793          	addi	a5,s2,16
    80008eae:	96bfd0ef          	jal	ra,80006818 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    80008eb2:	d94d                	beqz	a0,80008e64 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e6>
    80008eb4:	bda9                	j	80008d0e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>

0000000080008eb6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    80008eb6:	7175                	addi	sp,sp,-144
    80008eb8:	f0d2                	sd	s4,96(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    80008eba:	0205ba03          	ld	s4,32(a1)
TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    80008ebe:	e506                	sd	ra,136(sp)
    80008ec0:	e122                	sd	s0,128(sp)
    80008ec2:	fca6                	sd	s1,120(sp)
    80008ec4:	f8ca                	sd	s2,112(sp)
    80008ec6:	f4ce                	sd	s3,104(sp)
    80008ec8:	ecd6                	sd	s5,88(sp)
    80008eca:	e8da                	sd	s6,80(sp)
  TFLITE_DCHECK(node->user_data != nullptr);
    80008ecc:	000a1463          	bnez	s4,80008ed4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
    80008ed0:	2bf040ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    80008ed4:	0285ba83          	ld	s5,40(a1)
    80008ed8:	892e                	mv	s2,a1
    80008eda:	fe0a8be3          	beqz	s5,80008ed0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    80008ede:	4601                	li	a2,0
    80008ee0:	842a                	mv	s0,a0
    80008ee2:	e98fd0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    80008ee6:	8b2a                	mv	s6,a0
  TF_LITE_ENSURE(context, output != nullptr);
    80008ee8:	ed15                	bnez	a0,80008f24 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    80008eea:	741c                	ld	a5,40(s0)
    80008eec:	00084717          	auipc	a4,0x84
    80008ef0:	17470713          	addi	a4,a4,372 # 8008d060 <CSWTCH.21+0x900>
    80008ef4:	08700693          	li	a3,135
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    80008ef8:	00084617          	auipc	a2,0x84
    80008efc:	22860613          	addi	a2,a2,552 # 8008d120 <CSWTCH.21+0x9c0>
    80008f00:	00083597          	auipc	a1,0x83
    80008f04:	5f858593          	addi	a1,a1,1528 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80008f08:	8522                	mv	a0,s0
    80008f0a:	9782                	jalr	a5
    80008f0c:	4485                	li	s1,1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    80008f0e:	60aa                	ld	ra,136(sp)
    80008f10:	640a                	ld	s0,128(sp)
    80008f12:	7946                	ld	s2,112(sp)
    80008f14:	79a6                	ld	s3,104(sp)
    80008f16:	7a06                	ld	s4,96(sp)
    80008f18:	6ae6                	ld	s5,88(sp)
    80008f1a:	6b46                	ld	s6,80(sp)
    80008f1c:	8526                	mv	a0,s1
    80008f1e:	74e6                	ld	s1,120(sp)
    80008f20:	6149                	addi	sp,sp,144
    80008f22:	8082                	ret
      GetInput(context, node, kDepthwiseConvInputTensor);
    80008f24:	4601                	li	a2,0
    80008f26:	85ca                	mv	a1,s2
    80008f28:	8522                	mv	a0,s0
    80008f2a:	e4cfd0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008f2e:	84aa                	mv	s1,a0
  TF_LITE_ENSURE(context, input != nullptr);
    80008f30:	e909                	bnez	a0,80008f42 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x8c>
    80008f32:	741c                	ld	a5,40(s0)
    80008f34:	00084717          	auipc	a4,0x84
    80008f38:	0fc70713          	addi	a4,a4,252 # 8008d030 <CSWTCH.21+0x8d0>
    80008f3c:	08a00693          	li	a3,138
    80008f40:	bf65                	j	80008ef8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    80008f42:	4605                	li	a2,1
    80008f44:	85ca                	mv	a1,s2
    80008f46:	8522                	mv	a0,s0
    80008f48:	e2efd0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80008f4c:	89aa                	mv	s3,a0
  TF_LITE_ENSURE(context, filter != nullptr);
    80008f4e:	e909                	bnez	a0,80008f60 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    80008f50:	741c                	ld	a5,40(s0)
    80008f52:	00084717          	auipc	a4,0x84
    80008f56:	0f670713          	addi	a4,a4,246 # 8008d048 <CSWTCH.21+0x8e8>
    80008f5a:	08d00693          	li	a3,141
    80008f5e:	bf69                	j	80008ef8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x42>
  const int filter_width = filter->dims->data[2];
    80008f60:	6910                	ld	a2,16(a0)
  const int output_width = output->dims->data[2];
    80008f62:	010b3583          	ld	a1,16(s6)
  const int input_width = input->dims->data[2];
    80008f66:	689c                	ld	a5,16(s1)
  const int filter_height = filter->dims->data[1];
    80008f68:	00862803          	lw	a6,8(a2)
  const int output_width = output->dims->data[2];
    80008f6c:	00c5a883          	lw	a7,12(a1)
  const int output_height = output->dims->data[1];
    80008f70:	0085ab03          	lw	s6,8(a1)
          context, num_channels * sizeof(int32_t)));
    80008f74:	4a0c                	lw	a1,16(a2)
  const int input_width = input->dims->data[2];
    80008f76:	47d4                	lw	a3,12(a5)
  const int input_height = input->dims->data[1];
    80008f78:	4798                	lw	a4,8(a5)
  const int filter_width = filter->dims->data[2];
    80008f7a:	465c                	lw	a5,12(a2)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    80008f7c:	7830                	ld	a2,112(s0)
    80008f7e:	058a                	slli	a1,a1,0x2
    80008f80:	8522                	mv	a0,s0
  const int input_width = input->dims->data[2];
    80008f82:	e4b6                	sd	a3,72(sp)
  const int input_height = input->dims->data[1];
    80008f84:	e0ba                	sd	a4,64(sp)
  const int filter_width = filter->dims->data[2];
    80008f86:	fc3e                	sd	a5,56(sp)
  const int filter_height = filter->dims->data[1];
    80008f88:	f842                	sd	a6,48(sp)
  const int output_width = output->dims->data[2];
    80008f8a:	f446                	sd	a7,40(sp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    80008f8c:	f02e                	sd	a1,32(sp)
    80008f8e:	9602                	jalr	a2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    80008f90:	7830                	ld	a2,112(s0)
    80008f92:	7582                	ld	a1,32(sp)
  data->per_channel_output_multiplier =
    80008f94:	02aa3423          	sd	a0,40(s4)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    80008f98:	8522                	mv	a0,s0
    80008f9a:	9602                	jalr	a2
  if (input->type == kTfLiteInt8) {
    80008f9c:	408c                	lw	a1,0(s1)
  data->per_channel_output_shift =
    80008f9e:	02aa3823          	sd	a0,48(s4)
  if (input->type == kTfLiteInt8) {
    80008fa2:	4625                	li	a2,9
    80008fa4:	78a2                	ld	a7,40(sp)
    80008fa6:	7842                	ld	a6,48(sp)
    80008fa8:	77e2                	ld	a5,56(sp)
    80008faa:	6706                	ld	a4,64(sp)
    80008fac:	66a6                	ld	a3,72(sp)
    80008fae:	0cc59463          	bne	a1,a2,80009076 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    80008fb2:	0509a483          	lw	s1,80(s3)
    80008fb6:	4605                	li	a2,1
    80008fb8:	02c48b63          	beq	s1,a2,80008fee <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    80008fbc:	02843303          	ld	t1,40(s0)
    80008fc0:	4885                	li	a7,1
    80008fc2:	8826                	mv	a6,s1
    80008fc4:	00084797          	auipc	a5,0x84
    80008fc8:	8ec78793          	addi	a5,a5,-1812 # 8008c8b0 <CSWTCH.21+0x150>
    80008fcc:	00084717          	auipc	a4,0x84
    80008fd0:	94470713          	addi	a4,a4,-1724 # 8008c910 <CSWTCH.21+0x1b0>
    80008fd4:	0a100693          	li	a3,161
    80008fd8:	00084617          	auipc	a2,0x84
    80008fdc:	14860613          	addi	a2,a2,328 # 8008d120 <CSWTCH.21+0x9c0>
    80008fe0:	00084597          	auipc	a1,0x84
    80008fe4:	91058593          	addi	a1,a1,-1776 # 8008c8f0 <CSWTCH.21+0x190>
    80008fe8:	8522                	mv	a0,s0
    80008fea:	9302                	jalr	t1
    80008fec:	b705                	j	80008f0c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x56>
    const auto* affine_quantization =
    80008fee:	0589b603          	ld	a2,88(s3)
    TFLITE_DCHECK(affine_quantization != nullptr);
    80008ff2:	ec060fe3          	beqz	a2,80008ed0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    80008ff6:	00063303          	ld	t1,0(a2)
    80008ffa:	ec030be3          	beqz	t1,80008ed0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    80008ffe:	6608                	ld	a0,8(a2)
    80009000:	ec0508e3          	beqz	a0,80008ed0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TF_LITE_ENSURE(
    80009004:	00032603          	lw	a2,0(t1)
    80009008:	4305                	li	t1,1
    8000900a:	02660a63          	beq	a2,t1,8000903e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>
    8000900e:	0109b303          	ld	t1,16(s3)
    80009012:	01032303          	lw	t1,16(t1)
    80009016:	02c30463          	beq	t1,a2,8000903e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>
    8000901a:	741c                	ld	a5,40(s0)
    8000901c:	00084717          	auipc	a4,0x84
    80009020:	16470713          	addi	a4,a4,356 # 8008d180 <CSWTCH.21+0xa20>
    80009024:	0aa00693          	li	a3,170
    80009028:	00084617          	auipc	a2,0x84
    8000902c:	0f860613          	addi	a2,a2,248 # 8008d120 <CSWTCH.21+0x9c0>
    80009030:	00083597          	auipc	a1,0x83
    80009034:	4c858593          	addi	a1,a1,1224 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80009038:	8522                	mv	a0,s0
    8000903a:	9782                	jalr	a5
    8000903c:	bdc9                	j	80008f0e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    8000903e:	4108                	lw	a0,0(a0)
    80009040:	02a60b63          	beq	a2,a0,80009076 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
    80009044:	02843303          	ld	t1,40(s0)
    80009048:	88aa                	mv	a7,a0
    8000904a:	8832                	mv	a6,a2
    8000904c:	00084797          	auipc	a5,0x84
    80009050:	0ac78793          	addi	a5,a5,172 # 8008d0f8 <CSWTCH.21+0x998>
    80009054:	00084717          	auipc	a4,0x84
    80009058:	98470713          	addi	a4,a4,-1660 # 8008c9d8 <CSWTCH.21+0x278>
    8000905c:	0af00693          	li	a3,175
    80009060:	00084617          	auipc	a2,0x84
    80009064:	0c060613          	addi	a2,a2,192 # 8008d120 <CSWTCH.21+0x9c0>
    80009068:	00084597          	auipc	a1,0x84
    8000906c:	88858593          	addi	a1,a1,-1912 # 8008c8f0 <CSWTCH.21+0x190>
    80009070:	8522                	mv	a0,s0
    80009072:	9302                	jalr	t1
    80009074:	bd69                	j	80008f0e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    80009076:	e42e                	sd	a1,8(sp)
    80009078:	e852                	sd	s4,16(sp)
    8000907a:	e05a                	sd	s6,0(sp)
    8000907c:	8656                	mv	a2,s5
    8000907e:	85ca                	mv	a1,s2
    80009080:	8522                	mv	a0,s0
    80009082:	bfdff0ef          	jal	ra,80008c7e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    80009086:	84aa                	mv	s1,a0
    80009088:	b559                	j	80008f0e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x58>

000000008000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
    8000908a:	7179                	addi	sp,sp,-48
    8000908c:	f022                	sd	s0,32(sp)
    8000908e:	f406                	sd	ra,40(sp)
    80009090:	ec26                	sd	s1,24(sp)
    80009092:	842a                	mv	s0,a0
  if (tensor == nullptr || tensor->dims == nullptr) {
    80009094:	c199                	beqz	a1,8000909a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x10>
    80009096:	658c                	ld	a1,8(a1)
    80009098:	e989                	bnez	a1,800090aa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
  RuntimeShape() : size_(0) {}
    8000909a:	00042023          	sw	zero,0(s0)
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
    8000909e:	70a2                	ld	ra,40(sp)
    800090a0:	8522                	mv	a0,s0
    800090a2:	7402                	ld	s0,32(sp)
    800090a4:	64e2                	ld	s1,24(sp)
    800090a6:	6145                	addi	sp,sp,48
    800090a8:	8082                	ret
  const int dims_size = dims->size;
    800090aa:	419c                	lw	a5,0(a1)
    if (dimensions_count > kMaxSmallSize) {
    800090ac:	4495                	li	s1,5
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
    800090ae:	0591                	addi	a1,a1,4
    size_ = dimensions_count;
    800090b0:	c11c                	sw	a5,0(a0)
      dims_pointer_ = new int32_t[dimensions_count];
    800090b2:	00279613          	slli	a2,a5,0x2
    if (dimensions_count > kMaxSmallSize) {
    800090b6:	00f4c763          	blt	s1,a5,800090c4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    800090ba:	00840513          	addi	a0,s0,8
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
    800090be:	d79f80ef          	jal	ra,80001e36 <memcpy>
  }
    800090c2:	bff1                	j	8000909e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x14>
      dims_pointer_ = new int32_t[dimensions_count];
    800090c4:	8532                	mv	a0,a2
    800090c6:	e42e                	sd	a1,8(sp)
    800090c8:	e032                	sd	a2,0(sp)
    800090ca:	33a040ef          	jal	ra,8000d404 <_Znam>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    800090ce:	401c                	lw	a5,0(s0)
      dims_pointer_ = new int32_t[dimensions_count];
    800090d0:	e408                	sd	a0,8(s0)
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    800090d2:	6602                	ld	a2,0(sp)
    800090d4:	65a2                	ld	a1,8(sp)
    800090d6:	fef4c4e3          	blt	s1,a5,800090be <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x34>
    800090da:	b7c5                	j	800090ba <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x30>

00000000800090dc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
    800090dc:	4705                	li	a4,1
PaddingType RuntimePaddingType(TfLitePadding padding) {
    800090de:	87aa                	mv	a5,a0
  switch (padding) {
    800090e0:	00e50863          	beq	a0,a4,800090f0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x14>
    800090e4:	4709                	li	a4,2
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
    800090e6:	4501                	li	a0,0
  switch (padding) {
    800090e8:	00e79563          	bne	a5,a4,800090f2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
    800090ec:	4509                	li	a0,2
    800090ee:	8082                	ret
      return PaddingType::kSame;
    800090f0:	4505                	li	a0,1
  }
}
    800090f2:	8082                	ret

00000000800090f4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
  return flat_size;
}

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
    800090f4:	7139                	addi	sp,sp,-64
    800090f6:	ec4e                	sd	s3,24(sp)
  inline int32_t DimensionsCount() const { return size_; }
    800090f8:	00052983          	lw	s3,0(a0)
                                   const RuntimeShape& check_shape_0) {
    800090fc:	f822                	sd	s0,48(sp)
    800090fe:	f426                	sd	s1,40(sp)
    80009100:	f04a                	sd	s2,32(sp)
    80009102:	e852                	sd	s4,16(sp)
    80009104:	fc06                	sd	ra,56(sp)
    80009106:	e456                	sd	s5,8(sp)
    80009108:	84aa                	mv	s1,a0
    8000910a:	842e                	mv	s0,a1
    8000910c:	8a32                	mv	s4,a2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    8000910e:	4901                	li	s2,0
    80009110:	03395363          	bge	s2,s3,80009136 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x42>
    if (i != skip_dim) {
    80009114:	00890f63          	beq	s2,s0,80009132 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    80009118:	85ca                	mv	a1,s2
    8000911a:	8526                	mv	a0,s1
    8000911c:	960fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009120:	8aaa                	mv	s5,a0
    80009122:	85ca                	mv	a1,s2
    80009124:	8552                	mv	a0,s4
    80009126:	956fe0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000912a:	00aa8463          	beq	s5,a0,80009132 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
    8000912e:	061040ef          	jal	ra,8000d98e <abort>
  for (int i = 0; i < dims_count; ++i) {
    80009132:	2905                	addiw	s2,s2,1
    80009134:	bff1                	j	80009110 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    80009136:	fe044ce3          	bltz	s0,8000912e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3a>
    8000913a:	ff345ae3          	bge	s0,s3,8000912e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    8000913e:	4795                	li	a5,5
    80009140:	00848613          	addi	a2,s1,8
    80009144:	0137d363          	bge	a5,s3,8000914a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x56>
    80009148:	6490                	ld	a2,8(s1)
  for (int i = 0; i < dims_count; ++i) {
    8000914a:	4781                	li	a5,0
  int flat_size = 1;
    8000914c:	4505                	li	a0,1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    8000914e:	0007871b          	sext.w	a4,a5
    80009152:	4685                	li	a3,1
    80009154:	00e40663          	beq	s0,a4,80009160 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x6c>
    80009158:	00279713          	slli	a4,a5,0x2
    8000915c:	9732                	add	a4,a4,a2
    8000915e:	4314                	lw	a3,0(a4)
  for (int i = 0; i < dims_count; ++i) {
    80009160:	0785                	addi	a5,a5,1
    80009162:	0007871b          	sext.w	a4,a5
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    80009166:	02a6853b          	mulw	a0,a3,a0
  for (int i = 0; i < dims_count; ++i) {
    8000916a:	ff3742e3          	blt	a4,s3,8000914e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x5a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
    8000916e:	70e2                	ld	ra,56(sp)
    80009170:	7442                	ld	s0,48(sp)
    80009172:	74a2                	ld	s1,40(sp)
    80009174:	7902                	ld	s2,32(sp)
    80009176:	69e2                	ld	s3,24(sp)
    80009178:	6a42                	ld	s4,16(sp)
    8000917a:	6aa2                	ld	s5,8(sp)
    8000917c:	6121                	addi	sp,sp,64
    8000917e:	8082                	ret

0000000080009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    80009180:	4701                	li	a4,0
    80009182:	00b51863          	bne	a0,a1,80009192 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x12>
    80009186:	80000737          	lui	a4,0x80000
    8000918a:	40e50733          	sub	a4,a0,a4
    8000918e:	00173713          	seqz	a4,a4
  std::int64_t ab_64 = a_64 * b_64;
    80009192:	02b505b3          	mul	a1,a0,a1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    80009196:	40000537          	lui	a0,0x40000
    8000919a:	0005d663          	bgez	a1,800091a6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x26>
    8000919e:	c00007b7          	lui	a5,0xc0000
    800091a2:	00178513          	addi	a0,a5,1 # ffffffffc0000001 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffc0000002>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    800091a6:	eb01                	bnez	a4,800091b6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x36>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    800091a8:	4785                	li	a5,1
    800091aa:	952e                	add	a0,a0,a1
    800091ac:	07fe                	slli	a5,a5,0x1f
    800091ae:	02f54533          	div	a0,a0,a5
}
    800091b2:	2501                	sext.w	a0,a0
    800091b4:	8082                	ret
    800091b6:	80000537          	lui	a0,0x80000
    800091ba:	fff54513          	not	a0,a0
    800091be:	bfd5                	j	800091b2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x32>

00000000800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    800091c0:	1141                	addi	sp,sp,-16
    800091c2:	e406                	sd	ra,8(sp)
  assert(exponent >= 0);
    800091c4:	0205d263          	bgez	a1,800091e8 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x28>
    800091c8:	00084697          	auipc	a3,0x84
    800091cc:	04068693          	addi	a3,a3,64 # 8008d208 <CSWTCH.21+0xaa8>
    800091d0:	00084617          	auipc	a2,0x84
    800091d4:	ad060613          	addi	a2,a2,-1328 # 8008cca0 <CSWTCH.21+0x540>
    800091d8:	16600593          	li	a1,358
  assert(exponent <= 31);
    800091dc:	00084517          	auipc	a0,0x84
    800091e0:	b1c50513          	addi	a0,a0,-1252 # 8008ccf8 <CSWTCH.21+0x598>
    800091e4:	7ba040ef          	jal	ra,8000d99e <__assert_func>
    800091e8:	47fd                	li	a5,31
    800091ea:	00b7dd63          	bge	a5,a1,80009204 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>
    800091ee:	00084697          	auipc	a3,0x84
    800091f2:	aa268693          	addi	a3,a3,-1374 # 8008cc90 <CSWTCH.21+0x530>
    800091f6:	00084617          	auipc	a2,0x84
    800091fa:	aaa60613          	addi	a2,a2,-1366 # 8008cca0 <CSWTCH.21+0x540>
    800091fe:	16700593          	li	a1,359
    80009202:	bfe9                	j	800091dc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x1c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    80009204:	4785                	li	a5,1
    80009206:	00b797b3          	sll	a5,a5,a1
    8000920a:	fff7871b          	addiw	a4,a5,-1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    8000920e:	60a2                	ld	ra,8(sp)
  return a & b;
    80009210:	03f55693          	srli	a3,a0,0x3f
  return a >> offset;
    80009214:	4017579b          	sraiw	a5,a4,0x1
  return a ? BitNot(zero) : zero;
    80009218:	9fb5                	addw	a5,a5,a3
    8000921a:	8f69                	and	a4,a4,a0
  return a & b;
    8000921c:	00e7a7b3          	slt	a5,a5,a4
  return a >> offset;
    80009220:	40b5553b          	sraw	a0,a0,a1
}
    80009224:	9d3d                	addw	a0,a0,a5
    80009226:	0141                	addi	sp,sp,16
    80009228:	8082                	ret

000000008000922a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    8000922a:	715d                	addi	sp,sp,-80
    8000922c:	fc26                	sd	s1,56(sp)
  std::int64_t sum = a64 + b64;
    8000922e:	800004b7          	lui	s1,0x80000
    80009232:	fff4c493          	not	s1,s1
  std::int64_t a64 = a;
    80009236:	2501                	sext.w	a0,a0
  std::int64_t sum = a64 + b64;
    80009238:	9526                	add	a0,a0,s1
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    8000923a:	e486                	sd	ra,72(sp)
    8000923c:	e0a2                	sd	s0,64(sp)
    8000923e:	f84a                	sd	s2,48(sp)
    80009240:	f44e                	sd	s3,40(sp)
    80009242:	f052                	sd	s4,32(sp)
    80009244:	ec56                	sd	s5,24(sp)
    80009246:	e85a                	sd	s6,16(sp)
    80009248:	e45e                	sd	s7,8(sp)
    8000924a:	e062                	sd	s8,0(sp)
  std::int64_t sign = sum >= 0 ? 1 : -1;
    8000924c:	57fd                	li	a5,-1
    8000924e:	54fd                	li	s1,-1
    80009250:	00f50363          	beq	a0,a5,80009256 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x2c>
    80009254:	4485                	li	s1,1
  return static_cast<std::int32_t>((sum + sign) / 2);
    80009256:	94aa                	add	s1,s1,a0
    80009258:	4509                	li	a0,2
    8000925a:	02a4c4b3          	div	s1,s1,a0
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    8000925e:	c3c3c5b7          	lui	a1,0xc3c3c
    80009262:	3c458593          	addi	a1,a1,964 # ffffffffc3c3c3c4 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffc3c3c3c5>
  return a + b;
    80009266:	5a5a6437          	lui	s0,0x5a5a6
    8000926a:	a5a4041b          	addiw	s0,s0,-1446
  return a ? BitNot(zero) : zero;
    8000926e:	e0000ab7          	lui	s5,0xe0000
             ? min
    80009272:	80000b37          	lui	s6,0x80000
  return a + b;
    80009276:	498d                	li	s3,3
  return a - b;
    80009278:	20000937          	lui	s2,0x20000
  return a ? BitNot(zero) : zero;
    8000927c:	20000c37          	lui	s8,0x20000
    80009280:	0a85                	addi	s5,s5,1
             : wide_shifted > max ? max
    80009282:	fffb4a13          	not	s4,s6
  return a & b;
    80009286:	80000bb7          	lui	s7,0x80000
  return static_cast<std::int32_t>((sum + sign) / 2);
    8000928a:	2481                	sext.w	s1,s1
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    8000928c:	8526                	mv	a0,s1
    8000928e:	ef3ff0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    80009292:	9c29                	addw	s0,s0,a0
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    80009294:	85a2                	mv	a1,s0
    80009296:	8526                	mv	a0,s1
    80009298:	ee9ff0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    8000929c:	40a905bb          	subw	a1,s2,a0
    800092a0:	8522                	mv	a0,s0
    800092a2:	edfff0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    800092a6:	0b855463          	bge	a0,s8,8000934e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x124>
    800092aa:	01552733          	slt	a4,a0,s5
    800092ae:	40e0073b          	negw	a4,a4
    800092b2:	4681                	li	a3,0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    800092b4:	050a                	slli	a0,a0,0x2
             ? min
    800092b6:	800007b7          	lui	a5,0x80000
    800092ba:	01654763          	blt	a0,s6,800092c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9e>
             : wide_shifted > max ? max
    800092be:	87d2                	mv	a5,s4
    800092c0:	00aa4463          	blt	s4,a0,800092c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9e>
    800092c4:	0005079b          	sext.w	a5,a0
  return ~a;
    800092c8:	fff6c613          	not	a2,a3
  return a & b;
    800092cc:	8ff1                	and	a5,a5,a2
    800092ce:	0146f6b3          	and	a3,a3,s4
  return a ^ b;
    800092d2:	8fb5                	xor	a5,a5,a3
  return ~a;
    800092d4:	fff74693          	not	a3,a4
  return a & b;
    800092d8:	8ff5                	and	a5,a5,a3
    800092da:	01777733          	and	a4,a4,s7
  return a ^ b;
    800092de:	8fb9                	xor	a5,a5,a4
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    800092e0:	39fd                	addiw	s3,s3,-1
  return a + b;
    800092e2:	9c3d                	addw	s0,s0,a5
  for (int i = 0; i < 3; i++) {
    800092e4:	fa0998e3          	bnez	s3,80009294 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6a>
  return a ? BitNot(zero) : zero;
    800092e8:	400007b7          	lui	a5,0x40000
    800092ec:	06f45463          	bge	s0,a5,80009354 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x12a>
    800092f0:	c00007b7          	lui	a5,0xc0000
    800092f4:	0785                	addi	a5,a5,1
    800092f6:	00f427b3          	slt	a5,s0,a5
    800092fa:	40f007bb          	negw	a5,a5
    800092fe:	4701                	li	a4,0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    80009300:	0406                	slli	s0,s0,0x1
             ? min
    80009302:	800006b7          	lui	a3,0x80000
    80009306:	80000537          	lui	a0,0x80000
    8000930a:	00d44963          	blt	s0,a3,8000931c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf2>
             : wide_shifted > max ? max
    8000930e:	fff6c693          	not	a3,a3
    80009312:	8536                	mv	a0,a3
    80009314:	0086c463          	blt	a3,s0,8000931c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf2>
    80009318:	0004051b          	sext.w	a0,s0
  return ~a;
    8000931c:	fff74693          	not	a3,a4
  return a & b;
    80009320:	1706                	slli	a4,a4,0x21
    80009322:	9305                	srli	a4,a4,0x21
    80009324:	8d75                	and	a0,a0,a3
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    80009326:	60a6                	ld	ra,72(sp)
    80009328:	6406                	ld	s0,64(sp)
  return a ^ b;
    8000932a:	8d39                	xor	a0,a0,a4
  return ~a;
    8000932c:	fff7c713          	not	a4,a5
  return a & b;
    80009330:	8d79                	and	a0,a0,a4
    80009332:	80000737          	lui	a4,0x80000
    80009336:	8ff9                	and	a5,a5,a4
}
    80009338:	74e2                	ld	s1,56(sp)
    8000933a:	7942                	ld	s2,48(sp)
    8000933c:	79a2                	ld	s3,40(sp)
    8000933e:	7a02                	ld	s4,32(sp)
    80009340:	6ae2                	ld	s5,24(sp)
    80009342:	6b42                	ld	s6,16(sp)
    80009344:	6ba2                	ld	s7,8(sp)
    80009346:	6c02                	ld	s8,0(sp)
    80009348:	8d3d                	xor	a0,a0,a5
    8000934a:	6161                	addi	sp,sp,80
    8000934c:	8082                	ret
  return a ? BitNot(zero) : zero;
    8000934e:	56fd                	li	a3,-1
    80009350:	4701                	li	a4,0
    80009352:	b78d                	j	800092b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
    80009354:	577d                	li	a4,-1
    80009356:	4781                	li	a5,0
    80009358:	b765                	j	80009300 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd6>

000000008000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
    8000935a:	4581                	li	a1,0
    8000935c:	e65ff06f          	j	800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>

0000000080009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    80009360:	1141                	addi	sp,sp,-16
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    80009362:	2581                	sext.w	a1,a1
    80009364:	2501                	sext.w	a0,a0
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    80009366:	e406                	sd	ra,8(sp)
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    80009368:	e19ff0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
    8000936c:	60a2                	ld	ra,8(sp)
    8000936e:	0141                	addi	sp,sp,16
    80009370:	8082                	ret

0000000080009372 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    80009372:	7179                	addi	sp,sp,-48
    80009374:	f022                	sd	s0,32(sp)
    80009376:	842a                	mv	s0,a0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    80009378:	70f5b537          	lui	a0,0x70f5b
    8000937c:	89450513          	addi	a0,a0,-1900 # 70f5a894 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x705d1214>
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    80009380:	f406                	sd	ra,40(sp)
    80009382:	ec26                	sd	s1,24(sp)
    80009384:	e84a                	sd	s2,16(sp)
    80009386:	e44e                	sd	s3,8(sp)
    80009388:	e052                	sd	s4,0(sp)
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    8000938a:	fd1ff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    8000938e:	892a                	mv	s2,a0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    80009390:	2aaab537          	lui	a0,0x2aaab
    80009394:	aab50513          	addi	a0,a0,-1365 # 2aaaaaab <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a12142b>
    80009398:	fc3ff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    8000939c:	8a2a                	mv	s4,a0
  return a + b;
    8000939e:	10000537          	lui	a0,0x10000
    800093a2:	9c29                	addw	s0,s0,a0
  F x2 = x * x;
    800093a4:	85a2                	mv	a1,s0
    800093a6:	8522                	mv	a0,s0
    800093a8:	fb9ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    800093ac:	85a2                	mv	a1,s0
  F x2 = x * x;
    800093ae:	84aa                	mv	s1,a0
  F x3 = x2 * x;
    800093b0:	fb1ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    800093b4:	89aa                	mv	s3,a0
  F x4 = x2 * x2;
    800093b6:	85a6                	mv	a1,s1
    800093b8:	8526                	mv	a0,s1
    800093ba:	fa7ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    800093be:	4589                	li	a1,2
    800093c0:	2501                	sext.w	a0,a0
    800093c2:	dffff0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    800093c6:	85d2                	mv	a1,s4
    800093c8:	00a9853b          	addw	a0,s3,a0
    800093cc:	f95ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    800093d0:	4585                	li	a1,1
    800093d2:	9d25                	addw	a0,a0,s1
    800093d4:	dedff0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    800093d8:	00a405bb          	addw	a1,s0,a0
    800093dc:	854a                	mv	a0,s2
    800093de:	f83ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    800093e2:	70a2                	ld	ra,40(sp)
    800093e4:	7402                	ld	s0,32(sp)
    800093e6:	64e2                	ld	s1,24(sp)
    800093e8:	69a2                	ld	s3,8(sp)
    800093ea:	6a02                	ld	s4,0(sp)
    800093ec:	0125053b          	addw	a0,a0,s2
    800093f0:	6942                	ld	s2,16(sp)
    800093f2:	6145                	addi	sp,sp,48
    800093f4:	8082                	ret

00000000800093f6 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    800093f6:	7139                	addi	sp,sp,-64
    800093f8:	e852                	sd	s4,16(sp)
    800093fa:	8a2a                	mv	s4,a0
    800093fc:	f822                	sd	s0,48(sp)
  return a & b;
    800093fe:	028a1413          	slli	s0,s4,0x28
FixedPoint<tRawType, 0> exp_on_negative_values(
    80009402:	f426                	sd	s1,40(sp)
    80009404:	0005049b          	sext.w	s1,a0
  return a & b;
    80009408:	02845513          	srli	a0,s0,0x28
  return a - b;
    8000940c:	ff000437          	lui	s0,0xff000
    80009410:	9c29                	addw	s0,s0,a0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    80009412:	0054151b          	slliw	a0,s0,0x5
FixedPoint<tRawType, 0> exp_on_negative_values(
    80009416:	fc06                	sd	ra,56(sp)
    80009418:	f04a                	sd	s2,32(sp)
    8000941a:	ec4e                	sd	s3,24(sp)
    8000941c:	e456                	sd	s5,8(sp)
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    8000941e:	f55ff0ef          	jal	ra,80009372 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    80009422:	00050a9b          	sext.w	s5,a0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    80009426:	63afc537          	lui	a0,0x63afc
  return a - b;
    8000942a:	4144043b          	subw	s0,s0,s4
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    8000942e:	e7b50513          	addi	a0,a0,-389 # 63afbe7b <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x631727fb>
    80009432:	f29ff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ? BitNot(zero) : zero;
    80009436:	41845a1b          	sraiw	s4,s0,0x18
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    8000943a:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    8000943c:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    80009440:	8556                	mv	a0,s5
    80009442:	f1fff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    80009446:	414009bb          	negw	s3,s4
  return a & b;
    8000944a:	3a7d                	addiw	s4,s4,-1
    8000944c:	014afa33          	and	s4,s5,s4
    80009450:	013579b3          	and	s3,a0,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    80009454:	4da2d537          	lui	a0,0x4da2d
  return a ^ b;
    80009458:	0149c9b3          	xor	s3,s3,s4
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    8000945c:	bf250513          	addi	a0,a0,-1038 # 4da2cbf2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d0a3572>
    80009460:	efbff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    80009464:	2981                	sext.w	s3,s3
  return a ? BitNot(zero) : zero;
    80009466:	41945a1b          	sraiw	s4,s0,0x19
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    8000946a:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    8000946c:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    80009470:	854e                	mv	a0,s3
    80009472:	eefff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    80009476:	4140093b          	negw	s2,s4
  return a & b;
    8000947a:	3a7d                	addiw	s4,s4,-1
    8000947c:	0149f9b3          	and	s3,s3,s4
    80009480:	01257933          	and	s2,a0,s2
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    80009484:	2f16b537          	lui	a0,0x2f16b
  return a ^ b;
    80009488:	01394933          	xor	s2,s2,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    8000948c:	c6c50513          	addi	a0,a0,-916 # 2f16ac6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e7e15ec>
    80009490:	ecbff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    80009494:	2901                	sext.w	s2,s2
  return a ? BitNot(zero) : zero;
    80009496:	41a45a1b          	sraiw	s4,s0,0x1a
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    8000949a:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    8000949c:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    800094a0:	854a                	mv	a0,s2
    800094a2:	ebfff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    800094a6:	414009bb          	negw	s3,s4
  return a & b;
    800094aa:	3a7d                	addiw	s4,s4,-1
    800094ac:	01497933          	and	s2,s2,s4
    800094b0:	013579b3          	and	s3,a0,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    800094b4:	1152b537          	lui	a0,0x1152b
  return a ^ b;
    800094b8:	0129c9b3          	xor	s3,s3,s2
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    800094bc:	aa450513          	addi	a0,a0,-1372 # 1152aaa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10ba1424>
    800094c0:	e9bff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    800094c4:	2981                	sext.w	s3,s3
  return a ? BitNot(zero) : zero;
    800094c6:	41b45a1b          	sraiw	s4,s0,0x1b
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    800094ca:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    800094cc:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    800094d0:	854e                	mv	a0,s3
    800094d2:	e8fff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    800094d6:	4140093b          	negw	s2,s4
  return a & b;
    800094da:	3a7d                	addiw	s4,s4,-1
    800094dc:	0149f9b3          	and	s3,s3,s4
    800094e0:	01257933          	and	s2,a0,s2
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    800094e4:	02583537          	lui	a0,0x2583
  return a ^ b;
    800094e8:	01394933          	xor	s2,s2,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    800094ec:	ab750513          	addi	a0,a0,-1353 # 2582ab7 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bf9437>
    800094f0:	e6bff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    800094f4:	2901                	sext.w	s2,s2
  return a ? BitNot(zero) : zero;
    800094f6:	41c45a1b          	sraiw	s4,s0,0x1c
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    800094fa:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    800094fc:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    80009500:	854a                	mv	a0,s2
    80009502:	e5fff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    80009506:	414009bb          	negw	s3,s4
  return a & b;
    8000950a:	3a7d                	addiw	s4,s4,-1
    8000950c:	01497933          	and	s2,s2,s4
    80009510:	013579b3          	and	s3,a0,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    80009514:	000b0537          	lui	a0,0xb0
  return a ^ b;
    80009518:	0129c9b3          	xor	s3,s3,s2
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    8000951c:	e1150513          	addi	a0,a0,-495 # afe11 <__rom_region_size+0x223e5>
    80009520:	e3bff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    80009524:	2981                	sext.w	s3,s3
  return a ? BitNot(zero) : zero;
    80009526:	41d45a1b          	sraiw	s4,s0,0x1d
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    8000952a:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    8000952c:	001a7a13          	andi	s4,s4,1
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    80009530:	854e                	mv	a0,s3
    80009532:	e2fff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    80009536:	4140093b          	negw	s2,s4
  return a & b;
    8000953a:	3a7d                	addiw	s4,s4,-1
    8000953c:	0149f9b3          	and	s3,s3,s4
    80009540:	01257933          	and	s2,a0,s2
  return a ^ b;
    80009544:	01394933          	xor	s2,s2,s3
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    80009548:	0f200513          	li	a0,242
    8000954c:	e0fff0ef          	jal	ra,8000935a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
    80009550:	2901                	sext.w	s2,s2
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    80009552:	85aa                	mv	a1,a0
  return a ? BitNot(zero) : zero;
    80009554:	41e4541b          	sraiw	s0,s0,0x1e
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    80009558:	854a                	mv	a0,s2
    8000955a:	e07ff0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    8000955e:	8805                	andi	s0,s0,1
    80009560:	408007bb          	negw	a5,s0
  return a & b;
    80009564:	347d                	addiw	s0,s0,-1
    80009566:	8d7d                	and	a0,a0,a5
    80009568:	00897433          	and	s0,s2,s0
  return a ? BitNot(zero) : zero;
    8000956c:	0014b793          	seqz	a5,s1
  return a ^ b;
    80009570:	8c29                	xor	s0,s0,a0
    80009572:	0004051b          	sext.w	a0,s0
  return a & b;
    80009576:	fff7841b          	addiw	s0,a5,-1
}
    8000957a:	70e2                	ld	ra,56(sp)
  return a & b;
    8000957c:	8d61                	and	a0,a0,s0
  return a ? BitNot(zero) : zero;
    8000957e:	40f007bb          	negw	a5,a5
}
    80009582:	7442                	ld	s0,48(sp)
  return a & b;
    80009584:	1786                	slli	a5,a5,0x21
    80009586:	9385                	srli	a5,a5,0x21
}
    80009588:	74a2                	ld	s1,40(sp)
    8000958a:	7902                	ld	s2,32(sp)
    8000958c:	69e2                	ld	s3,24(sp)
    8000958e:	6a42                	ld	s4,16(sp)
    80009590:	6aa2                	ld	s5,8(sp)
    80009592:	8d3d                	xor	a0,a0,a5
    80009594:	6121                	addi	sp,sp,64
    80009596:	8082                	ret

0000000080009598 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    80009598:	793c                	ld	a5,112(a0)
    8000959a:	e789                	bnez	a5,800095a4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0xc>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    8000959c:	1141                	addi	sp,sp,-16
    8000959e:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    800095a0:	3ee040ef          	jal	ra,8000d98e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
    800095a4:	02000593          	li	a1,32
    800095a8:	8782                	jr	a5

00000000800095aa <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    800095aa:	7179                	addi	sp,sp,-48
    800095ac:	e84a                	sd	s2,16(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    800095ae:	0285b903          	ld	s2,40(a1)
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    800095b2:	f406                	sd	ra,40(sp)
    800095b4:	f022                	sd	s0,32(sp)
    800095b6:	ec26                	sd	s1,24(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    800095b8:	00091463          	bnez	s2,800095c0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
    800095bc:	3d2040ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    800095c0:	7194                	ld	a3,32(a1)
    800095c2:	84ae                	mv	s1,a1
    800095c4:	e436                	sd	a3,8(sp)
    800095c6:	dafd                	beqz	a3,800095bc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x12>
  return GetMutableEvalInput(context, node, index);
    800095c8:	00006617          	auipc	a2,0x6
    800095cc:	cd062603          	lw	a2,-816(a2) # 8000f298 <_ZN6tflite19kPoolingInputTensorE>
    800095d0:	842a                	mv	s0,a0
    800095d2:	c7bfd0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    800095d6:	e02a                	sd	a0,0(sp)
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    800095d8:	00006617          	auipc	a2,0x6
    800095dc:	cc462603          	lw	a2,-828(a2) # 8000f29c <_ZN6tflite20kPoolingOutputTensorE>
    800095e0:	85a6                	mv	a1,s1
    800095e2:	8522                	mv	a0,s0
    800095e4:	c81fd0ef          	jal	ra,80007264 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
    800095e8:	6702                	ld	a4,0(sp)
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    800095ea:	87aa                	mv	a5,a0
  switch (input->type) {
    800095ec:	4605                	li	a2,1
    800095ee:	4b08                	lw	a0,16(a4)
    800095f0:	66a2                	ld	a3,8(sp)
    800095f2:	02c50163          	beq	a0,a2,80009614 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
    800095f6:	4625                	li	a2,9
    800095f8:	02c50a63          	beq	a0,a2,8000962c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    800095fc:	7404                	ld	s1,40(s0)
    800095fe:	d23fc0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    80009602:	862a                	mv	a2,a0
    80009604:	00084597          	auipc	a1,0x84
    80009608:	c1458593          	addi	a1,a1,-1004 # 8008d218 <CSWTCH.21+0xab8>
    8000960c:	8522                	mv	a0,s0
    8000960e:	9482                	jalr	s1
      return kTfLiteError;
    80009610:	4505                	li	a0,1
    80009612:	a039                	j	80009620 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    80009614:	864a                	mv	a2,s2
    80009616:	85a6                	mv	a1,s1
    80009618:	8522                	mv	a0,s0
    8000961a:	6ae000ef          	jal	ra,80009cc8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    8000961e:	4501                	li	a0,0
}
    80009620:	70a2                	ld	ra,40(sp)
    80009622:	7402                	ld	s0,32(sp)
    80009624:	64e2                	ld	s1,24(sp)
    80009626:	6942                	ld	s2,16(sp)
    80009628:	6145                	addi	sp,sp,48
    8000962a:	8082                	ret
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    8000962c:	864a                	mv	a2,s2
    8000962e:	85a6                	mv	a1,s1
    80009630:	8522                	mv	a0,s0
    80009632:	0c3000ef          	jal	ra,80009ef4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
    80009636:	b7e5                	j	8000961e <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x74>

0000000080009638 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    80009638:	7179                	addi	sp,sp,-48
    8000963a:	e84a                	sd	s2,16(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    8000963c:	0285b903          	ld	s2,40(a1)
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    80009640:	f406                	sd	ra,40(sp)
    80009642:	f022                	sd	s0,32(sp)
    80009644:	ec26                	sd	s1,24(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    80009646:	00091463          	bnez	s2,8000964e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
    8000964a:	344040ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    8000964e:	7194                	ld	a3,32(a1)
    80009650:	84ae                	mv	s1,a1
    80009652:	e436                	sd	a3,8(sp)
    80009654:	dafd                	beqz	a3,8000964a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
    80009656:	00006617          	auipc	a2,0x6
    8000965a:	c4262603          	lw	a2,-958(a2) # 8000f298 <_ZN6tflite19kPoolingInputTensorE>
    8000965e:	842a                	mv	s0,a0
    80009660:	bedfd0ef          	jal	ra,8000724c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    80009664:	e02a                	sd	a0,0(sp)
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    80009666:	00006617          	auipc	a2,0x6
    8000966a:	c3662603          	lw	a2,-970(a2) # 8000f29c <_ZN6tflite20kPoolingOutputTensorE>
    8000966e:	85a6                	mv	a1,s1
    80009670:	8522                	mv	a0,s0
    80009672:	bf3fd0ef          	jal	ra,80007264 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
    80009676:	6702                	ld	a4,0(sp)
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    80009678:	87aa                	mv	a5,a0
  switch (input->type) {
    8000967a:	4605                	li	a2,1
    8000967c:	4b08                	lw	a0,16(a4)
    8000967e:	66a2                	ld	a3,8(sp)
    80009680:	02c50163          	beq	a0,a2,800096a2 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
    80009684:	4625                	li	a2,9
    80009686:	02c50a63          	beq	a0,a2,800096ba <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    8000968a:	7404                	ld	s1,40(s0)
    8000968c:	c95fc0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    80009690:	862a                	mv	a2,a0
    80009692:	00084597          	auipc	a1,0x84
    80009696:	bb658593          	addi	a1,a1,-1098 # 8008d248 <CSWTCH.21+0xae8>
    8000969a:	8522                	mv	a0,s0
    8000969c:	9482                	jalr	s1
      return kTfLiteError;
    8000969e:	4505                	li	a0,1
    800096a0:	a039                	j	800096ae <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    800096a2:	864a                	mv	a2,s2
    800096a4:	85a6                	mv	a1,s1
    800096a6:	8522                	mv	a0,s0
    800096a8:	293000ef          	jal	ra,8000a13a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    800096ac:	4501                	li	a0,0
}
    800096ae:	70a2                	ld	ra,40(sp)
    800096b0:	7402                	ld	s0,32(sp)
    800096b2:	64e2                	ld	s1,24(sp)
    800096b4:	6942                	ld	s2,16(sp)
    800096b6:	6145                	addi	sp,sp,48
    800096b8:	8082                	ret
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    800096ba:	864a                	mv	a2,s2
    800096bc:	85a6                	mv	a1,s1
    800096be:	8522                	mv	a0,s0
    800096c0:	2ed000ef          	jal	ra,8000a1ac <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
    800096c4:	b7e5                	j	800096ac <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>

00000000800096c6 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    800096c6:	1141                	addi	sp,sp,-16
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    800096c8:	04000613          	li	a2,64
    800096cc:	00006597          	auipc	a1,0x6
    800096d0:	cb458593          	addi	a1,a1,-844 # 8000f380 <_ZN6tflite20kPoolingOutputTensorE+0xe4>
TfLiteRegistration Register_AVERAGE_POOL_2D() {
    800096d4:	e022                	sd	s0,0(sp)
    800096d6:	e406                	sd	ra,8(sp)
    800096d8:	842a                	mv	s0,a0
          /*version=*/0};
    800096da:	f5cf80ef          	jal	ra,80001e36 <memcpy>
}
    800096de:	60a2                	ld	ra,8(sp)
    800096e0:	8522                	mv	a0,s0
    800096e2:	6402                	ld	s0,0(sp)
    800096e4:	0141                	addi	sp,sp,16
    800096e6:	8082                	ret

00000000800096e8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  return true;
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
    800096e8:	712d                	addi	sp,sp,-288
    800096ea:	e0ba                	sd	a4,64(sp)
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    800096ec:	511c                	lw	a5,32(a0)
    800096ee:	4d58                	lw	a4,28(a0)
                    int8_t* output_data) {
    800096f0:	ee06                	sd	ra,280(sp)
    800096f2:	ea22                	sd	s0,272(sp)
    800096f4:	e626                	sd	s1,264(sp)
    800096f6:	e24a                	sd	s2,256(sp)
    800096f8:	fdce                	sd	s3,248(sp)
    800096fa:	f9d2                	sd	s4,240(sp)
    800096fc:	f5d6                	sd	s5,232(sp)
    800096fe:	f1da                	sd	s6,224(sp)
    80009700:	edde                	sd	s7,216(sp)
    80009702:	e9e2                	sd	s8,208(sp)
    80009704:	e5e6                	sd	s9,200(sp)
    80009706:	e1ea                	sd	s10,192(sp)
    80009708:	fd6e                	sd	s11,184(sp)
    8000970a:	fc32                	sd	a2,56(sp)
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    8000970c:	00e7d463          	bge	a5,a4,80009714 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x2c>
    80009710:	27e040ef          	jal	ra,8000d98e <abort>
    80009714:	89b6                	mv	s3,a3
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
    80009716:	f8000693          	li	a3,-128
    8000971a:	fed74be3          	blt	a4,a3,80009710 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
    8000971e:	07f00713          	li	a4,127
    80009722:	fef747e3          	blt	a4,a5,80009710 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80009726:	419c                	lw	a5,0(a1)
    80009728:	4711                	li	a4,4
    8000972a:	892e                	mv	s2,a1
    8000972c:	fee792e3          	bne	a5,a4,80009710 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    80009730:	0009a703          	lw	a4,0(s3)
    80009734:	fcf71ee3          	bne	a4,a5,80009710 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28>
    80009738:	842a                	mv	s0,a0
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    8000973a:	4681                	li	a3,0
    8000973c:	864e                	mv	a2,s3
    8000973e:	4581                	li	a1,0
    80009740:	854a                	mv	a0,s2
    80009742:	bf1fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009746:	468d                	li	a3,3
    80009748:	864e                	mv	a2,s3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    8000974a:	e42a                	sd	a0,8(sp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    8000974c:	458d                	li	a1,3
    8000974e:	854a                	mv	a0,s2
    80009750:	be3fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80009754:	e82a                	sd	a0,16(sp)
  const int input_height = input_shape.Dims(1);
    80009756:	4585                	li	a1,1
    80009758:	854a                	mv	a0,s2
    8000975a:	b23fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000975e:	ec2a                	sd	a0,24(sp)
  const int input_width = input_shape.Dims(2);
    80009760:	4589                	li	a1,2
    80009762:	854a                	mv	a0,s2
    80009764:	b19fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009768:	f02a                	sd	a0,32(sp)
  const int output_height = output_shape.Dims(1);
    8000976a:	4585                	li	a1,1
    8000976c:	854e                	mv	a0,s3
    8000976e:	b0ffd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009772:	f42a                	sd	a0,40(sp)
  const int output_width = output_shape.Dims(2);
    80009774:	4589                	li	a1,2
    80009776:	854e                	mv	a0,s3
    80009778:	b05fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000977c:	445c                	lw	a5,12(s0)
    8000977e:	f82a                	sd	a0,48(sp)
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    80009780:	4581                	li	a1,0
    80009782:	e4be                	sd	a5,72(sp)
    80009784:	481c                	lw	a5,16(s0)
    80009786:	e8be                	sd	a5,80(sp)
    80009788:	67a2                	ld	a5,8(sp)
    8000978a:	14f5da63          	bge	a1,a5,800098de <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
    8000978e:	4a81                	li	s5,0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009790:	4b01                	li	s6,0
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int8_t max = std::numeric_limits<int8_t>::lowest();
    80009792:	f8000d93          	li	s11,-128
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009796:	77a2                	ld	a5,40(sp)
    80009798:	14fb5163          	bge	s6,a5,800098da <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f2>
    8000979c:	000a8b9b          	sext.w	s7,s5
    800097a0:	4c81                	li	s9,0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    800097a2:	4d01                	li	s10,0
    800097a4:	77c2                	ld	a5,48(sp)
    800097a6:	12fd5563          	bge	s10,a5,800098d0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e8>
    800097aa:	000c8c1b          	sext.w	s8,s9
        for (int channel = 0; channel < depth; ++channel) {
    800097ae:	4701                	li	a4,0
    800097b0:	67c2                	ld	a5,16(sp)
    800097b2:	10f75a63          	bge	a4,a5,800098c6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1de>
              (out_x * stride_width) - params.padding_values.width;
    800097b6:	00241803          	lh	a6,2(s0) # ffffffffff000002 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffff000003>
              (out_y * stride_height) - params.padding_values.height;
    800097ba:	00441483          	lh	s1,4(s0)
          const int in_x_origin =
    800097be:	410c0fbb          	subw	t6,s8,a6
          const int in_y_origin =
    800097c2:	409b82bb          	subw	t0,s7,s1
          const int filter_x_start = std::max(0, -in_x_origin);
    800097c6:	418806bb          	subw	a3,a6,s8
          const int in_x_origin =
    800097ca:	8a7e                	mv	s4,t6
          const int in_y_origin =
    800097cc:	8796                	mv	a5,t0
          const int filter_x_start = std::max(0, -in_x_origin);
    800097ce:	8836                	mv	a6,a3
    800097d0:	0006d363          	bgez	a3,800097d6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xee>
    800097d4:	4801                	li	a6,0
          const int filter_x_end =
    800097d6:	7602                	ld	a2,32(sp)
    800097d8:	4c14                	lw	a3,24(s0)
    800097da:	4146053b          	subw	a0,a2,s4
    800097de:	0006861b          	sext.w	a2,a3
    800097e2:	8a2a                	mv	s4,a0
    800097e4:	00a65463          	bge	a2,a0,800097ec <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
    800097e8:	00068a1b          	sext.w	s4,a3
          const int filter_y_start = std::max(0, -in_y_origin);
    800097ec:	417486bb          	subw	a3,s1,s7
    800097f0:	84b6                	mv	s1,a3
    800097f2:	0006d363          	bgez	a3,800097f8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x110>
    800097f6:	4481                	li	s1,0
          const int filter_y_end =
    800097f8:	6662                	ld	a2,24(sp)
    800097fa:	4854                	lw	a3,20(s0)
    800097fc:	40f6053b          	subw	a0,a2,a5
    80009800:	0006861b          	sext.w	a2,a3
    80009804:	87aa                	mv	a5,a0
    80009806:	00a65463          	bge	a2,a0,8000980e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x126>
    8000980a:	0006879b          	sext.w	a5,a3
          int8_t max = std::numeric_limits<int8_t>::lowest();
    8000980e:	0bb107a3          	sb	s11,175(sp)
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009812:	06f4d063          	bge	s1,a5,80009872 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x18a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009816:	8e42                	mv	t3,a6
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    80009818:	0054863b          	addw	a2,s1,t0
      if (__a < __b)
    8000981c:	0af10383          	lb	t2,175(sp)
    80009820:	ed1e                	sd	t2,152(sp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009822:	054e5663          	bge	t3,s4,8000986e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    80009826:	01fe06bb          	addw	a3,t3,t6
    8000982a:	854a                	mv	a0,s2
    8000982c:	e942                	sd	a6,144(sp)
    8000982e:	e516                	sd	t0,136(sp)
    80009830:	e13e                	sd	a5,128(sp)
    80009832:	fcba                	sd	a4,120(sp)
    80009834:	f8fe                	sd	t6,112(sp)
    80009836:	f4f2                	sd	t3,104(sp)
    80009838:	f0b2                	sd	a2,96(sp)
    8000983a:	ecae                	sd	a1,88(sp)
    8000983c:	a95fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    80009840:	77e2                	ld	a5,56(sp)
    80009842:	63ea                	ld	t2,152(sp)
    80009844:	65e6                	ld	a1,88(sp)
    80009846:	953e                	add	a0,a0,a5
    80009848:	00050683          	lb	a3,0(a0)
    8000984c:	7606                	ld	a2,96(sp)
    8000984e:	7e26                	ld	t3,104(sp)
    80009850:	7fc6                	ld	t6,112(sp)
    80009852:	7766                	ld	a4,120(sp)
    80009854:	678a                	ld	a5,128(sp)
    80009856:	62aa                	ld	t0,136(sp)
    80009858:	684a                	ld	a6,144(sp)
    8000985a:	00d3c463          	blt	t2,a3,80009862 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17a>
      return __a;
    8000985e:	0af10513          	addi	a0,sp,175
              max = std::max(
    80009862:	00050683          	lb	a3,0(a0)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009866:	2e05                	addiw	t3,t3,1
              max = std::max(
    80009868:	0ad107a3          	sb	a3,175(sp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000986c:	bf45                	j	8000981c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x134>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    8000986e:	2485                	addiw	s1,s1,1
    80009870:	b74d                	j	80009812 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12a>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
    80009872:	4c5c                	lw	a5,28(s0)
    80009874:	0af14683          	lbu	a3,175(sp)
    80009878:	84be                	mv	s1,a5
    8000987a:	0186961b          	slliw	a2,a3,0x18
    8000987e:	0187979b          	slliw	a5,a5,0x18
    80009882:	4187d79b          	sraiw	a5,a5,0x18
    80009886:	4186561b          	sraiw	a2,a2,0x18
    8000988a:	00c7d363          	bge	a5,a2,80009890 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
    8000988e:	84b6                	mv	s1,a3
          max = std::min<int8_t>(max, params.quantized_activation_max);
    80009890:	501c                	lw	a5,32(s0)
    80009892:	0184961b          	slliw	a2,s1,0x18
    80009896:	4186561b          	sraiw	a2,a2,0x18
    8000989a:	0187969b          	slliw	a3,a5,0x18
    8000989e:	4186d69b          	sraiw	a3,a3,0x18
    800098a2:	00c6d363          	bge	a3,a2,800098a8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1c0>
    800098a6:	84be                	mv	s1,a5
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    800098a8:	86ea                	mv	a3,s10
    800098aa:	865a                	mv	a2,s6
    800098ac:	854e                	mv	a0,s3
    800098ae:	f0ba                	sd	a4,96(sp)
    800098b0:	ecae                	sd	a1,88(sp)
    800098b2:	a1ffd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    800098b6:	6786                	ld	a5,64(sp)
        for (int channel = 0; channel < depth; ++channel) {
    800098b8:	7706                	ld	a4,96(sp)
    800098ba:	65e6                	ld	a1,88(sp)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    800098bc:	953e                	add	a0,a0,a5
    800098be:	00950023          	sb	s1,0(a0)
        for (int channel = 0; channel < depth; ++channel) {
    800098c2:	2705                	addiw	a4,a4,1
    800098c4:	b5f5                	j	800097b0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xc8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    800098c6:	67c6                	ld	a5,80(sp)
    800098c8:	2d05                	addiw	s10,s10,1
    800098ca:	01978cbb          	addw	s9,a5,s9
    800098ce:	bdd9                	j	800097a4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xbc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    800098d0:	67a6                	ld	a5,72(sp)
    800098d2:	2b05                	addiw	s6,s6,1
    800098d4:	00fa8abb          	addw	s5,s5,a5
    800098d8:	bd7d                	j	80009796 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xae>
  for (int batch = 0; batch < batches; ++batch) {
    800098da:	2585                	addiw	a1,a1,1
    800098dc:	b575                	j	80009788 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa0>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
    800098de:	60f2                	ld	ra,280(sp)
    800098e0:	6452                	ld	s0,272(sp)
    800098e2:	64b2                	ld	s1,264(sp)
    800098e4:	6912                	ld	s2,256(sp)
    800098e6:	79ee                	ld	s3,248(sp)
    800098e8:	7a4e                	ld	s4,240(sp)
    800098ea:	7aae                	ld	s5,232(sp)
    800098ec:	7b0e                	ld	s6,224(sp)
    800098ee:	6bee                	ld	s7,216(sp)
    800098f0:	6c4e                	ld	s8,208(sp)
    800098f2:	6cae                	ld	s9,200(sp)
    800098f4:	6d0e                	ld	s10,192(sp)
    800098f6:	7dea                	ld	s11,184(sp)
    800098f8:	6115                	addi	sp,sp,288
    800098fa:	8082                	ret

00000000800098fc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
    800098fc:	712d                	addi	sp,sp,-288
    800098fe:	f8ba                	sd	a4,112(sp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80009900:	4198                	lw	a4,0(a1)
                    float* output_data) {
    80009902:	e626                	sd	s1,264(sp)
    80009904:	ee06                	sd	ra,280(sp)
    80009906:	84b6                	mv	s1,a3
    80009908:	ea22                	sd	s0,272(sp)
    8000990a:	e24a                	sd	s2,256(sp)
    8000990c:	fdce                	sd	s3,248(sp)
    8000990e:	f9d2                	sd	s4,240(sp)
    80009910:	f5d6                	sd	s5,232(sp)
    80009912:	f1da                	sd	s6,224(sp)
    80009914:	edde                	sd	s7,216(sp)
    80009916:	e9e2                	sd	s8,208(sp)
    80009918:	e5e6                	sd	s9,200(sp)
    8000991a:	e1ea                	sd	s10,192(sp)
    8000991c:	fd6e                	sd	s11,184(sp)
    8000991e:	f4b2                	sd	a2,104(sp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80009920:	4691                	li	a3,4
    80009922:	00d70463          	beq	a4,a3,8000992a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x2e>
    80009926:	068040ef          	jal	ra,8000d98e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    8000992a:	4094                	lw	a3,0(s1)
    8000992c:	fee69de3          	bne	a3,a4,80009926 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x2a>
    80009930:	842e                	mv	s0,a1
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009932:	8c2a                	mv	s8,a0
    80009934:	4681                	li	a3,0
    80009936:	8626                	mv	a2,s1
    80009938:	4581                	li	a1,0
    8000993a:	8522                	mv	a0,s0
    8000993c:	9f7fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009940:	468d                	li	a3,3
    80009942:	8626                	mv	a2,s1
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009944:	ec2a                	sd	a0,24(sp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009946:	458d                	li	a1,3
    80009948:	8522                	mv	a0,s0
    8000994a:	9e9fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8000994e:	f02a                	sd	a0,32(sp)
  const int input_height = input_shape.Dims(1);
    80009950:	4585                	li	a1,1
    80009952:	8522                	mv	a0,s0
    80009954:	929fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009958:	f42a                	sd	a0,40(sp)
  const int input_width = input_shape.Dims(2);
    8000995a:	4589                	li	a1,2
    8000995c:	8522                	mv	a0,s0
    8000995e:	91ffd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009962:	f82a                	sd	a0,48(sp)
  const int output_height = output_shape.Dims(1);
    80009964:	4585                	li	a1,1
    80009966:	8526                	mv	a0,s1
    80009968:	915fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    8000996c:	fc2a                	sd	a0,56(sp)
  const int output_width = output_shape.Dims(2);
    8000996e:	4589                	li	a1,2
    80009970:	8526                	mv	a0,s1
    80009972:	90bfd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
    80009976:	00cc2783          	lw	a5,12(s8) # 2000000c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f67698c>
  const int output_width = output_shape.Dims(2);
    8000997a:	e0aa                	sd	a0,64(sp)
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    8000997c:	4b81                	li	s7,0
  const int stride_height = params.stride_height;
    8000997e:	e4be                	sd	a5,72(sp)
  const int stride_width = params.stride_width;
    80009980:	010c2783          	lw	a5,16(s8)
    80009984:	e8be                	sd	a5,80(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80009986:	67e2                	ld	a5,24(sp)
    80009988:	14fbdf63          	bge	s7,a5,80009ae6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ea>
    8000998c:	47a6                	lw	a5,72(sp)
    8000998e:	4a81                	li	s5,0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009990:	4981                	li	s3,0
    80009992:	ecbe                	sd	a5,88(sp)
    80009994:	77e2                	ld	a5,56(sp)
    80009996:	14f9d663          	bge	s3,a5,80009ae2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
    8000999a:	000a879b          	sext.w	a5,s5
    8000999e:	e43e                	sd	a5,8(sp)
    800099a0:	47c6                	lw	a5,80(sp)
    800099a2:	4b01                	li	s6,0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    800099a4:	4a01                	li	s4,0
    800099a6:	f0be                	sd	a5,96(sp)
    800099a8:	6786                	ld	a5,64(sp)
    800099aa:	12fa5763          	bge	s4,a5,80009ad8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1dc>
    800099ae:	000b079b          	sext.w	a5,s6
    800099b2:	e03e                	sd	a5,0(sp)
        for (int channel = 0; channel < depth; ++channel) {
    800099b4:	4d81                	li	s11,0
    800099b6:	7782                	ld	a5,32(sp)
    800099b8:	10fddb63          	bge	s11,a5,80009ace <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1d2>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
    800099bc:	002c1803          	lh	a6,2(s8)
          const int in_x_origin =
    800099c0:	6782                	ld	a5,0(sp)
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
    800099c2:	004c1903          	lh	s2,4(s8)
          const int in_x_origin =
    800099c6:	41078e3b          	subw	t3,a5,a6
          const int in_y_origin =
    800099ca:	67a2                	ld	a5,8(sp)
          const int in_x_origin =
    800099cc:	8d72                	mv	s10,t3
          const int in_y_origin =
    800099ce:	41278ebb          	subw	t4,a5,s2
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
    800099d2:	6782                	ld	a5,0(sp)
          const int in_y_origin =
    800099d4:	8cf6                	mv	s9,t4
          const int filter_x_start = std::max(0, -in_x_origin);
    800099d6:	40f806bb          	subw	a3,a6,a5
    800099da:	8836                	mv	a6,a3
    800099dc:	0006d363          	bgez	a3,800099e2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe6>
    800099e0:	4801                	li	a6,0
          const int filter_x_end =
    800099e2:	018c2683          	lw	a3,24(s8)
    800099e6:	77c2                	ld	a5,48(sp)
    800099e8:	0006861b          	sext.w	a2,a3
    800099ec:	41a785bb          	subw	a1,a5,s10
    800099f0:	8d2e                	mv	s10,a1
    800099f2:	00b65463          	bge	a2,a1,800099fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
    800099f6:	00068d1b          	sext.w	s10,a3
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
    800099fa:	67a2                	ld	a5,8(sp)
    800099fc:	40f906bb          	subw	a3,s2,a5
    80009a00:	8936                	mv	s2,a3
    80009a02:	0006d363          	bgez	a3,80009a08 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x10c>
    80009a06:	4901                	li	s2,0
          const int filter_y_end =
    80009a08:	014c2683          	lw	a3,20(s8)
    80009a0c:	77a2                	ld	a5,40(sp)
    80009a0e:	0006861b          	sext.w	a2,a3
    80009a12:	419785bb          	subw	a1,a5,s9
    80009a16:	8cae                	mv	s9,a1
    80009a18:	00b65463          	bge	a2,a1,80009a20 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x124>
    80009a1c:	00068c9b          	sext.w	s9,a3
              std::min(params.filter_height, input_height - in_y_origin);
          float max = std::numeric_limits<float>::lowest();
    80009a20:	00006797          	auipc	a5,0x6
    80009a24:	85478793          	addi	a5,a5,-1964 # 8000f274 <_global_impure_ptr+0x24>
    80009a28:	4394                	lw	a3,0(a5)
    80009a2a:	d736                	sw	a3,172(sp)
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009a2c:	05995e63          	bge	s2,s9,80009a88 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009a30:	8342                	mv	t1,a6
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    80009a32:	01d9063b          	addw	a2,s2,t4
      if (__a < __b)
    80009a36:	5f3a                	lw	t5,172(sp)
    80009a38:	c87a                	sw	t5,16(sp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009a3a:	05a35563          	bge	t1,s10,80009a84 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    80009a3e:	01c306bb          	addw	a3,t1,t3
    80009a42:	876e                	mv	a4,s11
    80009a44:	85de                	mv	a1,s7
    80009a46:	8522                	mv	a0,s0
    80009a48:	ed42                	sd	a6,152(sp)
    80009a4a:	e976                	sd	t4,144(sp)
    80009a4c:	e572                	sd	t3,136(sp)
    80009a4e:	e11a                	sd	t1,128(sp)
    80009a50:	fcb2                	sd	a2,120(sp)
    80009a52:	87ffd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    80009a56:	77a6                	ld	a5,104(sp)
    80009a58:	00251693          	slli	a3,a0,0x2
    80009a5c:	4f42                	lw	t5,16(sp)
    80009a5e:	96be                	add	a3,a3,a5
    80009a60:	4288                	lw	a0,0(a3)
    80009a62:	85fa                	mv	a1,t5
    80009a64:	e836                	sd	a3,16(sp)
    80009a66:	b05f70ef          	jal	ra,8000156a <__gesf2>
    80009a6a:	66c2                	ld	a3,16(sp)
    80009a6c:	7666                	ld	a2,120(sp)
    80009a6e:	630a                	ld	t1,128(sp)
    80009a70:	6e2a                	ld	t3,136(sp)
    80009a72:	6eca                	ld	t4,144(sp)
    80009a74:	686a                	ld	a6,152(sp)
    80009a76:	00a04363          	bgtz	a0,80009a7c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x180>
      return __a;
    80009a7a:	1174                	addi	a3,sp,172
              max = std::max(
    80009a7c:	4294                	lw	a3,0(a3)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009a7e:	2305                	addiw	t1,t1,1
              max = std::max(
    80009a80:	d736                	sw	a3,172(sp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009a82:	bf55                	j	80009a36 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009a84:	2905                	addiw	s2,s2,1
    80009a86:	b75d                	j	80009a2c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x130>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
                                           params.float_activation_max);
    80009a88:	028c2783          	lw	a5,40(s8)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    80009a8c:	85de                	mv	a1,s7
    80009a8e:	876e                	mv	a4,s11
    80009a90:	86d2                	mv	a3,s4
    80009a92:	864e                	mv	a2,s3
    80009a94:	8526                	mv	a0,s1
                                           params.float_activation_max);
    80009a96:	c83e                	sw	a5,16(sp)
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    80009a98:	5d3a                	lw	s10,172(sp)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    80009a9a:	837fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    80009a9e:	024c2c83          	lw	s9,36(s8)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    80009aa2:	77c6                	ld	a5,112(sp)
    80009aa4:	00251913          	slli	s2,a0,0x2
      if (__a < __b)
    80009aa8:	85e6                	mv	a1,s9
    80009aaa:	856a                	mv	a0,s10
    80009aac:	993e                	add	s2,s2,a5
    80009aae:	b41f70ef          	jal	ra,800015ee <__lesf2>
    80009ab2:	00054363          	bltz	a0,80009ab8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1bc>
      return __a;
    80009ab6:	8cea                	mv	s9,s10
      if (__b < __a)
    80009ab8:	4542                	lw	a0,16(sp)
    80009aba:	85e6                	mv	a1,s9
    80009abc:	b33f70ef          	jal	ra,800015ee <__lesf2>
    80009ac0:	00055363          	bgez	a0,80009ac6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ca>
	return __b;
    80009ac4:	4cc2                	lw	s9,16(sp)
    80009ac6:	01992023          	sw	s9,0(s2) # 20000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f676980>
        for (int channel = 0; channel < depth; ++channel) {
    80009aca:	2d85                	addiw	s11,s11,1
    80009acc:	b5ed                	j	800099b6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80009ace:	7786                	ld	a5,96(sp)
    80009ad0:	2a05                	addiw	s4,s4,1
    80009ad2:	01678b3b          	addw	s6,a5,s6
    80009ad6:	bdc9                	j	800099a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009ad8:	67e6                	ld	a5,88(sp)
    80009ada:	2985                	addiw	s3,s3,1
    80009adc:	01578abb          	addw	s5,a5,s5
    80009ae0:	bd55                	j	80009994 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
  for (int batch = 0; batch < batches; ++batch) {
    80009ae2:	2b85                	addiw	s7,s7,1
    80009ae4:	b54d                	j	80009986 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
        }
      }
    }
  }
}
    80009ae6:	60f2                	ld	ra,280(sp)
    80009ae8:	6452                	ld	s0,272(sp)
    80009aea:	64b2                	ld	s1,264(sp)
    80009aec:	6912                	ld	s2,256(sp)
    80009aee:	79ee                	ld	s3,248(sp)
    80009af0:	7a4e                	ld	s4,240(sp)
    80009af2:	7aae                	ld	s5,232(sp)
    80009af4:	7b0e                	ld	s6,224(sp)
    80009af6:	6bee                	ld	s7,216(sp)
    80009af8:	6c4e                	ld	s8,208(sp)
    80009afa:	6cae                	ld	s9,200(sp)
    80009afc:	6d0e                	ld	s10,192(sp)
    80009afe:	7dea                	ld	s11,184(sp)
    80009b00:	6115                	addi	sp,sp,288
    80009b02:	8082                	ret

0000000080009b04 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
  return t->dims->data[dim];
    80009b04:	6a1c                	ld	a5,16(a2)

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
    80009b06:	715d                	addi	sp,sp,-80
    80009b08:	f84a                	sd	s2,48(sp)
    80009b0a:	f44e                	sd	s3,40(sp)
    80009b0c:	00c7a903          	lw	s2,12(a5)

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
      params->filter_width, params->padding, &out_height, &out_width);
    80009b10:	00c5a983          	lw	s3,12(a1)
                                    OpDataPooling* data) {
    80009b14:	f052                	sd	s4,32(sp)
    80009b16:	e062                	sd	s8,0(sp)
      params->stride_height, params->stride_width,
    80009b18:	0045aa03          	lw	s4,4(a1)
      params->filter_width, params->padding, &out_height, &out_width);
    80009b1c:	0005ac03          	lw	s8,0(a1)
                                    OpDataPooling* data) {
    80009b20:	ec56                	sd	s5,24(sp)
    80009b22:	e85a                	sd	s6,16(sp)
    80009b24:	0087aa83          	lw	s5,8(a5)
      /*dilation_rate_width=*/1, height, width, params->filter_height,
    80009b28:	0105ab03          	lw	s6,16(a1)
                                    OpDataPooling* data) {
    80009b2c:	e45e                	sd	s7,8(sp)
      params->stride_height, params->stride_width,
    80009b2e:	0085ab83          	lw	s7,8(a1)
                                    OpDataPooling* data) {
    80009b32:	fc26                	sd	s1,56(sp)
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    80009b34:	86d2                	mv	a3,s4
    80009b36:	864e                	mv	a2,s3
    80009b38:	85ca                	mv	a1,s2
    80009b3a:	84ba                	mv	s1,a4
    80009b3c:	8562                	mv	a0,s8
    80009b3e:	4705                	li	a4,1
    80009b40:	e486                	sd	ra,72(sp)
    80009b42:	e0a2                	sd	s0,64(sp)
    80009b44:	b3efe0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    80009b48:	85d6                	mv	a1,s5
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    80009b4a:	842a                	mv	s0,a0
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    80009b4c:	4705                	li	a4,1
    80009b4e:	86de                	mv	a3,s7
    80009b50:	865a                	mv	a2,s6
    80009b52:	8562                	mv	a0,s8
    80009b54:	b2efe0ef          	jal	ra,80007e82 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80009b58:	fff5059b          	addiw	a1,a0,-1
    80009b5c:	037585bb          	mulw	a1,a1,s7
    80009b60:	016585bb          	addw	a1,a1,s6
  int total_padding =
    80009b64:	415587bb          	subw	a5,a1,s5
  total_padding = total_padding > 0 ? total_padding : 0;
    80009b68:	4581                	li	a1,0
    80009b6a:	0007c363          	bltz	a5,80009b70 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x6c>
    80009b6e:	85be                	mv	a1,a5
      ((out_size - 1) * stride + effective_filter_size - in_size);
    80009b70:	fff4061b          	addiw	a2,s0,-1
    80009b74:	0346063b          	mulw	a2,a2,s4
    80009b78:	0136063b          	addw	a2,a2,s3
  int total_padding =
    80009b7c:	4126063b          	subw	a2,a2,s2
  total_padding = total_padding > 0 ? total_padding : 0;
    80009b80:	0006079b          	sext.w	a5,a2
    80009b84:	0007d363          	bgez	a5,80009b8a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x86>
    80009b88:	4601                	li	a2,0
  return total_padding / 2;
    80009b8a:	4016579b          	sraiw	a5,a2,0x1

  return kTfLiteOk;
}
    80009b8e:	60a6                	ld	ra,72(sp)
    80009b90:	6406                	ld	s0,64(sp)
      params->filter_width, params->padding, &out_height, &out_width);
    80009b92:	c09c                	sw	a5,0(s1)
  *offset = total_padding % 2;
    80009b94:	8a05                	andi	a2,a2,1
  return total_padding / 2;
    80009b96:	4015d79b          	sraiw	a5,a1,0x1
  *offset = total_padding % 2;
    80009b9a:	8985                	andi	a1,a1,1
    80009b9c:	c0dc                	sw	a5,4(s1)
    80009b9e:	c490                	sw	a2,8(s1)
    80009ba0:	c4cc                	sw	a1,12(s1)
}
    80009ba2:	7942                	ld	s2,48(sp)
    80009ba4:	74e2                	ld	s1,56(sp)
    80009ba6:	79a2                	ld	s3,40(sp)
    80009ba8:	7a02                	ld	s4,32(sp)
    80009baa:	6ae2                	ld	s5,24(sp)
    80009bac:	6b42                	ld	s6,16(sp)
    80009bae:	6ba2                	ld	s7,8(sp)
    80009bb0:	6c02                	ld	s8,0(sp)
    80009bb2:	4501                	li	a0,0
    80009bb4:	6161                	addi	sp,sp,80
    80009bb6:	8082                	ret

0000000080009bb8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    80009bb8:	7139                	addi	sp,sp,-64
    80009bba:	e456                	sd	s5,8(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    80009bbc:	0285ba83          	ld	s5,40(a1)
TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    80009bc0:	fc06                	sd	ra,56(sp)
    80009bc2:	f822                	sd	s0,48(sp)
    80009bc4:	f426                	sd	s1,40(sp)
    80009bc6:	f04a                	sd	s2,32(sp)
    80009bc8:	ec4e                	sd	s3,24(sp)
    80009bca:	e852                	sd	s4,16(sp)
  TFLITE_DCHECK(node->builtin_data != nullptr);
    80009bcc:	000a9463          	bnez	s5,80009bd4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x1c>
    80009bd0:	5bf030ef          	jal	ra,8000d98e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    80009bd4:	7180                	ld	s0,32(a1)
    80009bd6:	892e                	mv	s2,a1
    80009bd8:	dc65                	beqz	s0,80009bd0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x18>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    80009bda:	4601                	li	a2,0
    80009bdc:	84aa                	mv	s1,a0
    80009bde:	999fc0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    80009be2:	8a2a                	mv	s4,a0
  TF_LITE_ENSURE(context, input != nullptr);
    80009be4:	ed0d                	bnez	a0,80009c1e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
    80009be6:	749c                	ld	a5,40(s1)
    80009be8:	00083717          	auipc	a4,0x83
    80009bec:	44870713          	addi	a4,a4,1096 # 8008d030 <CSWTCH.21+0x8d0>
    80009bf0:	03a00693          	li	a3,58
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
    80009bf4:	00083617          	auipc	a2,0x83
    80009bf8:	67c60613          	addi	a2,a2,1660 # 8008d270 <CSWTCH.21+0xb10>
    80009bfc:	00083597          	auipc	a1,0x83
    80009c00:	8fc58593          	addi	a1,a1,-1796 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    80009c04:	8526                	mv	a0,s1
    80009c06:	9782                	jalr	a5
    80009c08:	4905                	li	s2,1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    80009c0a:	70e2                	ld	ra,56(sp)
    80009c0c:	7442                	ld	s0,48(sp)
    80009c0e:	74a2                	ld	s1,40(sp)
    80009c10:	69e2                	ld	s3,24(sp)
    80009c12:	6a42                	ld	s4,16(sp)
    80009c14:	6aa2                	ld	s5,8(sp)
    80009c16:	854a                	mv	a0,s2
    80009c18:	7902                	ld	s2,32(sp)
    80009c1a:	6121                	addi	sp,sp,64
    80009c1c:	8082                	ret
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    80009c1e:	4601                	li	a2,0
    80009c20:	85ca                	mv	a1,s2
    80009c22:	8526                	mv	a0,s1
    80009c24:	957fc0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    80009c28:	89aa                	mv	s3,a0
  TF_LITE_ENSURE(context, output != nullptr);
    80009c2a:	e909                	bnez	a0,80009c3c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x84>
    80009c2c:	749c                	ld	a5,40(s1)
    80009c2e:	00083717          	auipc	a4,0x83
    80009c32:	43270713          	addi	a4,a4,1074 # 8008d060 <CSWTCH.21+0x900>
    80009c36:	03c00693          	li	a3,60
    80009c3a:	bf6d                	j	80009bf4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE_STATUS(
    80009c3c:	86aa                	mv	a3,a0
    80009c3e:	8722                	mv	a4,s0
    80009c40:	8652                	mv	a2,s4
    80009c42:	85d6                	mv	a1,s5
    80009c44:	8526                	mv	a0,s1
    80009c46:	ebfff0ef          	jal	ra,80009b04 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    80009c4a:	892a                	mv	s2,a0
    80009c4c:	fd5d                	bnez	a0,80009c0a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x52>
  if (input->type == kTfLiteFloat32) {
    80009c4e:	000a2783          	lw	a5,0(s4)
    80009c52:	4705                	li	a4,1
    80009c54:	04e79c63          	bne	a5,a4,80009cac <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf4>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    80009c58:	014aa703          	lw	a4,20(s5) # ffffffffe0000014 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffe0000015>
  if (activation == kTfLiteActRelu) {
    80009c5c:	00f71a63          	bne	a4,a5,80009c70 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
    *activation_min = 0;
    80009c60:	00000793          	li	a5,0
    *activation_min = std::numeric_limits<T>::lowest();
    80009c64:	cc1c                	sw	a5,24(s0)
    *activation_max = std::numeric_limits<T>::max();
    80009c66:	00005797          	auipc	a5,0x5
    80009c6a:	60a7a783          	lw	a5,1546(a5) # 8000f270 <_global_impure_ptr+0x20>
    80009c6e:	a819                	j	80009c84 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  } else if (activation == kTfLiteActRelu6) {
    80009c70:	478d                	li	a5,3
    80009c72:	00f71b63          	bne	a4,a5,80009c88 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    *activation_min = 0;
    80009c76:	00000793          	li	a5,0
    80009c7a:	cc1c                	sw	a5,24(s0)
    *activation_max = 6;
    80009c7c:	00005797          	auipc	a5,0x5
    80009c80:	5e87a783          	lw	a5,1512(a5) # 8000f264 <_global_impure_ptr+0x14>
    *activation_max = std::numeric_limits<T>::max();
    80009c84:	cc5c                	sw	a5,28(s0)
    80009c86:	b751                	j	80009c0a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x52>
  } else if (activation == kTfLiteActReluN1To1) {
    80009c88:	4789                	li	a5,2
    80009c8a:	00f71c63          	bne	a4,a5,80009ca2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    *activation_min = -1;
    80009c8e:	00005797          	auipc	a5,0x5
    80009c92:	5da7a783          	lw	a5,1498(a5) # 8000f268 <_global_impure_ptr+0x18>
    80009c96:	cc1c                	sw	a5,24(s0)
    *activation_max = 1;
    80009c98:	00005797          	auipc	a5,0x5
    80009c9c:	5d47a783          	lw	a5,1492(a5) # 8000f26c <_global_impure_ptr+0x1c>
    80009ca0:	b7d5                	j	80009c84 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    *activation_min = std::numeric_limits<T>::lowest();
    80009ca2:	00005797          	auipc	a5,0x5
    80009ca6:	5d27a783          	lw	a5,1490(a5) # 8000f274 <_global_impure_ptr+0x24>
    80009caa:	bf6d                	j	80009c64 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>
  } else if (input->type == kTfLiteInt8) {
    80009cac:	4725                	li	a4,9
    80009cae:	f4e79ee3          	bne	a5,a4,80009c0a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x52>
    CalculateActivationRangeQuantized(context, params->activation, output,
    80009cb2:	014aa583          	lw	a1,20(s5)
    80009cb6:	01440713          	addi	a4,s0,20
    80009cba:	01040693          	addi	a3,s0,16
    80009cbe:	864e                	mv	a2,s3
    80009cc0:	8526                	mv	a0,s1
    80009cc2:	a1dfc0ef          	jal	ra,800066de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    80009cc6:	b791                	j	80009c0a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x52>

0000000080009cc8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
    80009cc8:	7109                	addi	sp,sp,-384
    80009cca:	faa2                	sd	s0,368(sp)
    80009ccc:	843e                	mv	s0,a5
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
    80009cce:	461c                	lw	a5,8(a2)
                             TfLiteEvalTensor* output) {
    80009cd0:	f6a6                	sd	s1,360(sp)
  op_params.filter_width = params->filter_width;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    80009cd2:	85ba                	mv	a1,a4
  op_params.stride_height = params->stride_height;
    80009cd4:	f83e                	sd	a5,48(sp)
  op_params.stride_width = params->stride_width;
    80009cd6:	425c                	lw	a5,4(a2)
                             TfLiteEvalTensor* output) {
    80009cd8:	84ba                	mv	s1,a4
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    80009cda:	0988                	addi	a0,sp,208
  op_params.stride_width = params->stride_width;
    80009cdc:	fc3e                	sd	a5,56(sp)
  op_params.filter_height = params->filter_height;
    80009cde:	4a1c                	lw	a5,16(a2)
                             TfLiteEvalTensor* output) {
    80009ce0:	f2ca                	sd	s2,352(sp)
    80009ce2:	fe86                	sd	ra,376(sp)
  op_params.filter_height = params->filter_height;
    80009ce4:	e43e                	sd	a5,8(sp)
  op_params.filter_width = params->filter_width;
    80009ce6:	465c                	lw	a5,12(a2)
                             TfLiteEvalTensor* output) {
    80009ce8:	eece                	sd	s3,344(sp)
    80009cea:	ead2                	sd	s4,336(sp)
  op_params.filter_width = params->filter_width;
    80009cec:	e83e                	sd	a5,16(sp)
  op_params.padding_values.width = data->padding.width;
    80009cee:	00069783          	lh	a5,0(a3) # ffffffff80000000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000001>
                             TfLiteEvalTensor* output) {
    80009cf2:	e6d6                	sd	s5,328(sp)
    80009cf4:	e2da                	sd	s6,320(sp)
  op_params.padding_values.width = data->padding.width;
    80009cf6:	ec3e                	sd	a5,24(sp)
  op_params.float_activation_min = data->activation_min_f32;
    80009cf8:	4e9c                	lw	a5,24(a3)
                             TfLiteEvalTensor* output) {
    80009cfa:	fe5e                	sd	s7,312(sp)
    80009cfc:	fa62                	sd	s8,304(sp)
  op_params.float_activation_min = data->activation_min_f32;
    80009cfe:	d03e                	sw	a5,32(sp)
  op_params.float_activation_max = data->activation_max_f32;
    80009d00:	4edc                	lw	a5,28(a3)
                             TfLiteEvalTensor* output) {
    80009d02:	f666                	sd	s9,296(sp)
    80009d04:	f26a                	sd	s10,288(sp)
    80009d06:	ee6e                	sd	s11,280(sp)
  op_params.padding_values.height = data->padding.height;
    80009d08:	00469903          	lh	s2,4(a3)
  op_params.float_activation_max = data->activation_max_f32;
    80009d0c:	d23e                	sw	a5,36(sp)
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    80009d0e:	b7cff0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    80009d12:	e099                	bnez	s1,80009d18 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x50>
    80009d14:	47b030ef          	jal	ra,8000d98e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
    80009d18:	609c                	ld	a5,0(s1)
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
    80009d1a:	85a2                	mv	a1,s0
    80009d1c:	1988                	addi	a0,sp,240
    80009d1e:	e0be                	sd	a5,64(sp)
    80009d20:	b6aff0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80009d24:	c011                	beqz	s0,80009d28 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x60>
    80009d26:	6000                	ld	s0,0(s0)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80009d28:	47ce                	lw	a5,208(sp)
    80009d2a:	4711                	li	a4,4
    80009d2c:	fee794e3          	bne	a5,a4,80009d14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    80009d30:	574e                	lw	a4,240(sp)
    80009d32:	fef711e3          	bne	a4,a5,80009d14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009d36:	4681                	li	a3,0
    80009d38:	1990                	addi	a2,sp,240
    80009d3a:	4581                	li	a1,0
    80009d3c:	0988                	addi	a0,sp,208
    80009d3e:	df4fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009d42:	468d                	li	a3,3
    80009d44:	1990                	addi	a2,sp,240
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009d46:	e4aa                	sd	a0,72(sp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009d48:	458d                	li	a1,3
    80009d4a:	0988                	addi	a0,sp,208
    80009d4c:	de6fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80009d50:	e8aa                	sd	a0,80(sp)
  const int input_height = input_shape.Dims(1);
    80009d52:	4585                	li	a1,1
    80009d54:	0988                	addi	a0,sp,208
    80009d56:	d26fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009d5a:	ecaa                	sd	a0,88(sp)
  const int input_width = input_shape.Dims(2);
    80009d5c:	4589                	li	a1,2
    80009d5e:	0988                	addi	a0,sp,208
    80009d60:	d1cfd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009d64:	f0aa                	sd	a0,96(sp)
  const int output_height = output_shape.Dims(1);
    80009d66:	4585                	li	a1,1
    80009d68:	1988                	addi	a0,sp,240
    80009d6a:	d12fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009d6e:	f4aa                	sd	a0,104(sp)
  const int output_width = output_shape.Dims(2);
    80009d70:	4589                	li	a1,2
    80009d72:	1988                	addi	a0,sp,240
    80009d74:	d08fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009d78:	0009079b          	sext.w	a5,s2
    80009d7c:	f53e                	sd	a5,168(sp)
    80009d7e:	412007bb          	negw	a5,s2
    80009d82:	f8aa                	sd	a0,112(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80009d84:	4481                	li	s1,0
    80009d86:	f93e                	sd	a5,176(sp)
    80009d88:	67a6                	ld	a5,72(sp)
    80009d8a:	14f4d063          	bge	s1,a5,80009eca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x202>
    80009d8e:	57c2                	lw	a5,48(sp)
    80009d90:	792a                	ld	s2,168(sp)
    80009d92:	7c4a                	ld	s8,176(sp)
    80009d94:	f43e                	sd	a5,40(sp)
    80009d96:	47e2                	lw	a5,24(sp)
    80009d98:	5de2                	lw	s11,56(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009d9a:	4b01                	li	s6,0
    80009d9c:	ed3e                	sd	a5,152(sp)
    80009d9e:	67e2                	ld	a5,24(sp)
    80009da0:	40f007bb          	negw	a5,a5
    80009da4:	f13e                	sd	a5,160(sp)
    80009da6:	77a6                	ld	a5,104(sp)
    80009da8:	10fb5f63          	bge	s6,a5,80009ec6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1fe>
    80009dac:	0009079b          	sext.w	a5,s2
    80009db0:	00095363          	bgez	s2,80009db6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xee>
    80009db4:	4781                	li	a5,0
    80009db6:	e13e                	sd	a5,128(sp)
    80009db8:	67e6                	ld	a5,88(sp)
    80009dba:	66a2                	ld	a3,8(sp)
    80009dbc:	0127873b          	addw	a4,a5,s2
    80009dc0:	87ba                	mv	a5,a4
    80009dc2:	00e6d363          	bge	a3,a4,80009dc8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x100>
    80009dc6:	47a2                	lw	a5,8(sp)
    80009dc8:	69ea                	ld	s3,152(sp)
    80009dca:	7c8a                	ld	s9,160(sp)
    80009dcc:	2781                	sext.w	a5,a5
    80009dce:	fcbe                	sd	a5,120(sp)
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80009dd0:	4b81                	li	s7,0
    80009dd2:	77c6                	ld	a5,112(sp)
    80009dd4:	0efbd263          	bge	s7,a5,80009eb8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1f0>
    80009dd8:	0009879b          	sext.w	a5,s3
    80009ddc:	0009d363          	bgez	s3,80009de2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11a>
    80009de0:	4781                	li	a5,0
    80009de2:	e93e                	sd	a5,144(sp)
    80009de4:	7786                	ld	a5,96(sp)
    80009de6:	66c2                	ld	a3,16(sp)
    80009de8:	0137873b          	addw	a4,a5,s3
    80009dec:	87ba                	mv	a5,a4
    80009dee:	00e6d363          	bge	a3,a4,80009df4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
    80009df2:	47c2                	lw	a5,16(sp)
    80009df4:	2781                	sext.w	a5,a5
    80009df6:	e53e                	sd	a5,136(sp)
        for (int channel = 0; channel < depth; ++channel) {
    80009df8:	4a01                	li	s4,0
    80009dfa:	67c6                	ld	a5,80(sp)
    80009dfc:	0afa5863          	bge	s4,a5,80009eac <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e4>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009e00:	680a                	ld	a6,128(sp)
          float filter_count = 0;
    80009e02:	00000d13          	li	s10,0
          float total = 0.f;
    80009e06:	8aea                	mv	s5,s10
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009e08:	77e6                	ld	a5,120(sp)
    80009e0a:	04f85a63          	bge	a6,a5,80009e5e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x196>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009e0e:	68ca                	ld	a7,144(sp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    80009e10:	0188063b          	addw	a2,a6,s8
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009e14:	67aa                	ld	a5,136(sp)
    80009e16:	04f8d263          	bge	a7,a5,80009e5a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x192>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    80009e1a:	019886bb          	addw	a3,a7,s9
    80009e1e:	8752                	mv	a4,s4
    80009e20:	85a6                	mv	a1,s1
    80009e22:	0988                	addi	a0,sp,208
    80009e24:	e5c2                	sd	a6,200(sp)
    80009e26:	e1c6                	sd	a7,192(sp)
    80009e28:	fd32                	sd	a2,184(sp)
    80009e2a:	ca6fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    80009e2e:	6786                	ld	a5,64(sp)
    80009e30:	050a                	slli	a0,a0,0x2
    80009e32:	953e                	add	a0,a0,a5
              total +=
    80009e34:	410c                	lw	a1,0(a0)
    80009e36:	8556                	mv	a0,s5
    80009e38:	99af70ef          	jal	ra,80000fd2 <__addsf3>
              filter_count++;
    80009e3c:	00005797          	auipc	a5,0x5
    80009e40:	43078793          	addi	a5,a5,1072 # 8000f26c <_global_impure_ptr+0x1c>
    80009e44:	438c                	lw	a1,0(a5)
              total +=
    80009e46:	8aaa                	mv	s5,a0
              filter_count++;
    80009e48:	856a                	mv	a0,s10
    80009e4a:	988f70ef          	jal	ra,80000fd2 <__addsf3>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009e4e:	688e                	ld	a7,192(sp)
    80009e50:	766a                	ld	a2,184(sp)
    80009e52:	682e                	ld	a6,200(sp)
              filter_count++;
    80009e54:	8d2a                	mv	s10,a0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    80009e56:	2885                	addiw	a7,a7,1
    80009e58:	bf75                	j	80009e14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    80009e5a:	2805                	addiw	a6,a6,1
    80009e5c:	b775                	j	80009e08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x140>
          if (filter_count == 0) return false;
    80009e5e:	00000593          	li	a1,0
    80009e62:	856a                	mv	a0,s10
    80009e64:	e98f70ef          	jal	ra,800014fc <__eqsf2>
    80009e68:	c12d                	beqz	a0,80009eca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x202>
          const float average = total / filter_count;
    80009e6a:	85ea                	mv	a1,s10
    80009e6c:	8556                	mv	a0,s5
    80009e6e:	ca6f70ef          	jal	ra,80001314 <__divsf3>
    80009e72:	8d2a                	mv	s10,a0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    80009e74:	85a6                	mv	a1,s1
    80009e76:	8752                	mv	a4,s4
    80009e78:	86de                	mv	a3,s7
    80009e7a:	865a                	mv	a2,s6
    80009e7c:	1988                	addi	a0,sp,240
    80009e7e:	c52fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    80009e82:	00251a93          	slli	s5,a0,0x2
      if (__a < __b)
    80009e86:	5502                	lw	a0,32(sp)
    80009e88:	85ea                	mv	a1,s10
    80009e8a:	9aa2                	add	s5,s5,s0
    80009e8c:	edef70ef          	jal	ra,8000156a <__gesf2>
    80009e90:	00a05363          	blez	a0,80009e96 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ce>
	return __b;
    80009e94:	5d02                	lw	s10,32(sp)
      if (__b < __a)
    80009e96:	5512                	lw	a0,36(sp)
    80009e98:	85ea                	mv	a1,s10
    80009e9a:	f54f70ef          	jal	ra,800015ee <__lesf2>
    80009e9e:	00055363          	bgez	a0,80009ea4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
	return __b;
    80009ea2:	5d12                	lw	s10,36(sp)
    80009ea4:	01aaa023          	sw	s10,0(s5)
        for (int channel = 0; channel < depth; ++channel) {
    80009ea8:	2a05                	addiw	s4,s4,1
    80009eaa:	bf81                	j	80009dfa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x132>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    80009eac:	2b85                	addiw	s7,s7,1
    80009eae:	41b989bb          	subw	s3,s3,s11
    80009eb2:	01bc8cbb          	addw	s9,s9,s11
    80009eb6:	bf31                	j	80009dd2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x10a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009eb8:	77a2                	ld	a5,40(sp)
    80009eba:	2b05                	addiw	s6,s6,1
    80009ebc:	40f9093b          	subw	s2,s2,a5
    80009ec0:	00fc0c3b          	addw	s8,s8,a5
    80009ec4:	b5cd                	j	80009da6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xde>
  for (int batch = 0; batch < batches; ++batch) {
    80009ec6:	2485                	addiw	s1,s1,1
    80009ec8:	b5c1                	j	80009d88 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc0>
    80009eca:	1988                	addi	a0,sp,240
    80009ecc:	b6efd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    80009ed0:	0988                	addi	a0,sp,208
    80009ed2:	b68fd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
    80009ed6:	70f6                	ld	ra,376(sp)
    80009ed8:	7456                	ld	s0,368(sp)
    80009eda:	74b6                	ld	s1,360(sp)
    80009edc:	7916                	ld	s2,352(sp)
    80009ede:	69f6                	ld	s3,344(sp)
    80009ee0:	6a56                	ld	s4,336(sp)
    80009ee2:	6ab6                	ld	s5,328(sp)
    80009ee4:	6b16                	ld	s6,320(sp)
    80009ee6:	7bf2                	ld	s7,312(sp)
    80009ee8:	7c52                	ld	s8,304(sp)
    80009eea:	7cb2                	ld	s9,296(sp)
    80009eec:	7d12                	ld	s10,288(sp)
    80009eee:	6df2                	ld	s11,280(sp)
    80009ef0:	6119                	addi	sp,sp,384
    80009ef2:	8082                	ret

0000000080009ef4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:

void AveragePoolingEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                                 const TfLitePoolParams* params,
                                 const OpDataPooling* data,
                                 const TfLiteEvalTensor* input,
                                 TfLiteEvalTensor* output) {
    80009ef4:	7109                	addi	sp,sp,-384
    80009ef6:	eece                	sd	s3,344(sp)
    80009ef8:	89ba                	mv	s3,a4
  TFLITE_DCHECK(input->type == kTfLiteInt8);
    80009efa:	4b18                	lw	a4,16(a4)
                                 TfLiteEvalTensor* output) {
    80009efc:	f6a6                	sd	s1,360(sp)
    80009efe:	fe86                	sd	ra,376(sp)
    80009f00:	84be                	mv	s1,a5
    80009f02:	faa2                	sd	s0,368(sp)
    80009f04:	f2ca                	sd	s2,352(sp)
    80009f06:	ead2                	sd	s4,336(sp)
    80009f08:	e6d6                	sd	s5,328(sp)
    80009f0a:	e2da                	sd	s6,320(sp)
    80009f0c:	fe5e                	sd	s7,312(sp)
    80009f0e:	fa62                	sd	s8,304(sp)
    80009f10:	f666                	sd	s9,296(sp)
    80009f12:	f26a                	sd	s10,288(sp)
    80009f14:	ee6e                	sd	s11,280(sp)
  TFLITE_DCHECK(input->type == kTfLiteInt8);
    80009f16:	47a5                	li	a5,9
    80009f18:	00f70463          	beq	a4,a5,80009f20 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2c>
    80009f1c:	273030ef          	jal	ra,8000d98e <abort>

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
  op_params.stride_width = params->stride_width;
    80009f20:	425c                	lw	a5,4(a2)
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->activation_min;
  op_params.quantized_activation_max = data->activation_max;

  reference_integer_ops::AveragePool(
      op_params, tflite::micro::GetTensorShape(input),
    80009f22:	85ce                	mv	a1,s3
    80009f24:	0988                	addi	a0,sp,208
  op_params.stride_width = params->stride_width;
    80009f26:	f83e                	sd	a5,48(sp)
  op_params.filter_height = params->filter_height;
    80009f28:	4a1c                	lw	a5,16(a2)
  op_params.stride_height = params->stride_height;
    80009f2a:	00862a83          	lw	s5,8(a2)
  op_params.padding_values.height = data->padding.height;
    80009f2e:	00469903          	lh	s2,4(a3)
  op_params.filter_height = params->filter_height;
    80009f32:	e43e                	sd	a5,8(sp)
  op_params.filter_width = params->filter_width;
    80009f34:	465c                	lw	a5,12(a2)
  op_params.padding_values.width = data->padding.width;
    80009f36:	00069403          	lh	s0,0(a3)
  op_params.quantized_activation_min = data->activation_min;
    80009f3a:	0106ab03          	lw	s6,16(a3)
  op_params.filter_width = params->filter_width;
    80009f3e:	e83e                	sd	a5,16(sp)
  op_params.quantized_activation_max = data->activation_max;
    80009f40:	0146ab83          	lw	s7,20(a3)
      op_params, tflite::micro::GetTensorShape(input),
    80009f44:	946ff0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    80009f48:	0009b783          	ld	a5,0(s3)
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(output),
    80009f4c:	85a6                	mv	a1,s1
    80009f4e:	1988                	addi	a0,sp,240
    80009f50:	fc3e                	sd	a5,56(sp)
    80009f52:	938ff0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80009f56:	c091                	beqz	s1,80009f5a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x66>
    80009f58:	6084                	ld	s1,0(s1)
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    80009f5a:	fd6bc1e3          	blt	s7,s6,80009f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x28>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    80009f5e:	47ce                	lw	a5,208(sp)
    80009f60:	4711                	li	a4,4
    80009f62:	fae79de3          	bne	a5,a4,80009f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x28>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    80009f66:	574e                	lw	a4,240(sp)
    80009f68:	faf71ae3          	bne	a4,a5,80009f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x28>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009f6c:	4681                	li	a3,0
    80009f6e:	1990                	addi	a2,sp,240
    80009f70:	4581                	li	a1,0
    80009f72:	0988                	addi	a0,sp,208
    80009f74:	bbefd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009f78:	468d                	li	a3,3
    80009f7a:	1990                	addi	a2,sp,240
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    80009f7c:	e0aa                	sd	a0,64(sp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    80009f7e:	458d                	li	a1,3
    80009f80:	0988                	addi	a0,sp,208
    80009f82:	bb0fd0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80009f86:	e4aa                	sd	a0,72(sp)
  const int input_height = input_shape.Dims(1);
    80009f88:	4585                	li	a1,1
    80009f8a:	0988                	addi	a0,sp,208
    80009f8c:	af0fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009f90:	e8aa                	sd	a0,80(sp)
  const int input_width = input_shape.Dims(2);
    80009f92:	4589                	li	a1,2
    80009f94:	0988                	addi	a0,sp,208
    80009f96:	ae6fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009f9a:	ecaa                	sd	a0,88(sp)
  const int output_height = output_shape.Dims(1);
    80009f9c:	4585                	li	a1,1
    80009f9e:	1988                	addi	a0,sp,240
    80009fa0:	adcfd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009fa4:	f0aa                	sd	a0,96(sp)
  const int output_width = output_shape.Dims(2);
    80009fa6:	4589                	li	a1,2
    80009fa8:	1988                	addi	a0,sp,240
    80009faa:	ad2fd0ef          	jal	ra,8000727c <_ZNK6tflite12RuntimeShape4DimsEi>
    80009fae:	000a879b          	sext.w	a5,s5
    80009fb2:	f43e                	sd	a5,40(sp)
    80009fb4:	0009079b          	sext.w	a5,s2
    80009fb8:	e13e                	sd	a5,128(sp)
    80009fba:	412007bb          	negw	a5,s2
    80009fbe:	e53e                	sd	a5,136(sp)
    80009fc0:	0004079b          	sext.w	a5,s0
    80009fc4:	e93e                	sd	a5,144(sp)
    80009fc6:	408007bb          	negw	a5,s0
    80009fca:	f4aa                	sd	a0,104(sp)
  for (int batch = 0; batch < batches; ++batch) {
    80009fcc:	4581                	li	a1,0
    80009fce:	ed3e                	sd	a5,152(sp)
    80009fd0:	6786                	ld	a5,64(sp)
    80009fd2:	12f5df63          	bge	a1,a5,8000a110 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x21c>
    80009fd6:	6c8a                	ld	s9,128(sp)
    80009fd8:	6c2a                	ld	s8,136(sp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
    80009fda:	4d01                	li	s10,0
    80009fdc:	7786                	ld	a5,96(sp)
    80009fde:	12fd5763          	bge	s10,a5,8000a10c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x218>
    80009fe2:	8766                	mv	a4,s9
    80009fe4:	000cd363          	bgez	s9,80009fea <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf6>
    80009fe8:	4701                	li	a4,0
    80009fea:	0007079b          	sext.w	a5,a4
    80009fee:	f8be                	sd	a5,112(sp)
    80009ff0:	67c6                	ld	a5,80(sp)
    80009ff2:	019786bb          	addw	a3,a5,s9
    80009ff6:	67a2                	ld	a5,8(sp)
    80009ff8:	8736                	mv	a4,a3
    80009ffa:	00d7d363          	bge	a5,a3,8000a000 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x10c>
    80009ffe:	4722                	lw	a4,8(sp)
    8000a000:	0007079b          	sext.w	a5,a4
    8000a004:	fcbe                	sd	a5,120(sp)
    8000a006:	57c2                	lw	a5,48(sp)
    8000a008:	6aca                	ld	s5,144(sp)
    8000a00a:	6dea                	ld	s11,152(sp)
    8000a00c:	f03e                	sd	a5,32(sp)
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8000a00e:	4301                	li	t1,0
    8000a010:	77a6                	ld	a5,104(sp)
    8000a012:	0ef35663          	bge	t1,a5,8000a0fe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x20a>
    8000a016:	000a899b          	sext.w	s3,s5
    8000a01a:	000ad363          	bgez	s5,8000a020 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12c>
    8000a01e:	4981                	li	s3,0
    8000a020:	67e6                	ld	a5,88(sp)
    8000a022:	0157873b          	addw	a4,a5,s5
    8000a026:	67c2                	ld	a5,16(sp)
    8000a028:	8a3a                	mv	s4,a4
    8000a02a:	00e7d363          	bge	a5,a4,8000a030 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
    8000a02e:	4a42                	lw	s4,16(sp)
    8000a030:	000a079b          	sext.w	a5,s4
    8000a034:	ec3e                	sd	a5,24(sp)
        for (int channel = 0; channel < depth; ++channel) {
    8000a036:	4701                	li	a4,0
    8000a038:	413a0a3b          	subw	s4,s4,s3
    8000a03c:	67a6                	ld	a5,72(sp)
    8000a03e:	0af75963          	bge	a4,a5,8000a0f0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1fc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    8000a042:	7e46                	ld	t3,112(sp)
          int32_t acc = 0;
    8000a044:	4901                	li	s2,0
          int filter_count = 0;
    8000a046:	4401                	li	s0,0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    8000a048:	77e6                	ld	a5,120(sp)
    8000a04a:	04fe5963          	bge	t3,a5,8000a09c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a8>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000a04e:	8ece                	mv	t4,s3
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    8000a050:	018e063b          	addw	a2,t3,s8
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000a054:	67e2                	ld	a5,24(sp)
    8000a056:	02fedb63          	bge	t4,a5,8000a08c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x198>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    8000a05a:	01be86bb          	addw	a3,t4,s11
    8000a05e:	0988                	addi	a0,sp,208
    8000a060:	e5f2                	sd	t3,200(sp)
    8000a062:	e19a                	sd	t1,192(sp)
    8000a064:	fd3a                	sd	a4,184(sp)
    8000a066:	f976                	sd	t4,176(sp)
    8000a068:	f532                	sd	a2,168(sp)
    8000a06a:	f12e                	sd	a1,160(sp)
    8000a06c:	a64fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    8000a070:	77e2                	ld	a5,56(sp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000a072:	7eca                	ld	t4,176(sp)
    8000a074:	758a                	ld	a1,160(sp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    8000a076:	953e                	add	a0,a0,a5
              acc +=
    8000a078:	00050683          	lb	a3,0(a0)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000a07c:	762a                	ld	a2,168(sp)
    8000a07e:	776a                	ld	a4,184(sp)
    8000a080:	630e                	ld	t1,192(sp)
    8000a082:	6e2e                	ld	t3,200(sp)
              acc +=
    8000a084:	0126893b          	addw	s2,a3,s2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    8000a088:	2e85                	addiw	t4,t4,1
    8000a08a:	b7e9                	j	8000a054 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x160>
    8000a08c:	67e2                	ld	a5,24(sp)
    8000a08e:	4681                	li	a3,0
    8000a090:	0137c363          	blt	a5,s3,8000a096 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    8000a094:	86d2                	mv	a3,s4
    8000a096:	9c35                	addw	s0,s0,a3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    8000a098:	2e05                	addiw	t3,t3,1
    8000a09a:	b77d                	j	8000a048 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x154>
          if (filter_count == 0) return false;
    8000a09c:	c835                	beqz	s0,8000a110 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x21c>
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
    8000a09e:	05205363          	blez	s2,8000a0e4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
    8000a0a2:	4014569b          	sraiw	a3,s0,0x1
    8000a0a6:	0126893b          	addw	s2,a3,s2
    8000a0aa:	0289443b          	divw	s0,s2,s0
          acc = std::min(acc, params.quantized_activation_max);
    8000a0ae:	86da                	mv	a3,s6
    8000a0b0:	008b5363          	bge	s6,s0,8000a0b6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c2>
    8000a0b4:	86a2                	mv	a3,s0
    8000a0b6:	0006861b          	sext.w	a2,a3
    8000a0ba:	00cbd363          	bge	s7,a2,8000a0c0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1cc>
    8000a0be:	86de                	mv	a3,s7
    8000a0c0:	0006841b          	sext.w	s0,a3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    8000a0c4:	866a                	mv	a2,s10
    8000a0c6:	869a                	mv	a3,t1
    8000a0c8:	1988                	addi	a0,sp,240
    8000a0ca:	f93a                	sd	a4,176(sp)
    8000a0cc:	f51a                	sd	t1,168(sp)
    8000a0ce:	f12e                	sd	a1,160(sp)
    8000a0d0:	a00fd0ef          	jal	ra,800072d0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int channel = 0; channel < depth; ++channel) {
    8000a0d4:	774a                	ld	a4,176(sp)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    8000a0d6:	9526                	add	a0,a0,s1
        for (int channel = 0; channel < depth; ++channel) {
    8000a0d8:	758a                	ld	a1,160(sp)
    8000a0da:	732a                	ld	t1,168(sp)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    8000a0dc:	00850023          	sb	s0,0(a0)
        for (int channel = 0; channel < depth; ++channel) {
    8000a0e0:	2705                	addiw	a4,a4,1
    8000a0e2:	bfa9                	j	8000a03c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x148>
                        : (acc - filter_count / 2) / filter_count;
    8000a0e4:	4689                	li	a3,2
    8000a0e6:	02d446bb          	divw	a3,s0,a3
    8000a0ea:	40d9093b          	subw	s2,s2,a3
    8000a0ee:	bf75                	j	8000a0aa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8000a0f0:	7782                	ld	a5,32(sp)
    8000a0f2:	2305                	addiw	t1,t1,1
    8000a0f4:	40fa8abb          	subw	s5,s5,a5
    8000a0f8:	00fd8dbb          	addw	s11,s11,a5
    8000a0fc:	bf11                	j	8000a010 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x11c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8000a0fe:	77a2                	ld	a5,40(sp)
    8000a100:	2d05                	addiw	s10,s10,1
    8000a102:	40fc8cbb          	subw	s9,s9,a5
    8000a106:	00fc0c3b          	addw	s8,s8,a5
    8000a10a:	bdc9                	j	80009fdc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xe8>
  for (int batch = 0; batch < batches; ++batch) {
    8000a10c:	2585                	addiw	a1,a1,1
    8000a10e:	b5c9                	j	80009fd0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xdc>
    8000a110:	1988                	addi	a0,sp,240
    8000a112:	928fd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
    8000a116:	0988                	addi	a0,sp,208
    8000a118:	922fd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
    8000a11c:	70f6                	ld	ra,376(sp)
    8000a11e:	7456                	ld	s0,368(sp)
    8000a120:	74b6                	ld	s1,360(sp)
    8000a122:	7916                	ld	s2,352(sp)
    8000a124:	69f6                	ld	s3,344(sp)
    8000a126:	6a56                	ld	s4,336(sp)
    8000a128:	6ab6                	ld	s5,328(sp)
    8000a12a:	6b16                	ld	s6,320(sp)
    8000a12c:	7bf2                	ld	s7,312(sp)
    8000a12e:	7c52                	ld	s8,304(sp)
    8000a130:	7cb2                	ld	s9,296(sp)
    8000a132:	7d12                	ld	s10,288(sp)
    8000a134:	6df2                	ld	s11,280(sp)
    8000a136:	6119                	addi	sp,sp,384
    8000a138:	8082                	ret

000000008000a13a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
    8000a13a:	7135                	addi	sp,sp,-160
    8000a13c:	e922                	sd	s0,144(sp)
    8000a13e:	843e                	mv	s0,a5
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
    8000a140:	461c                	lw	a5,8(a2)
                         TfLiteEvalTensor* output) {
    8000a142:	e526                	sd	s1,136(sp)
  op_params.filter_width = params->filter_width;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    8000a144:	85ba                	mv	a1,a4
  op_params.stride_height = params->stride_height;
    8000a146:	cebe                	sw	a5,92(sp)
  op_params.stride_width = params->stride_width;
    8000a148:	425c                	lw	a5,4(a2)
                         TfLiteEvalTensor* output) {
    8000a14a:	84ba                	mv	s1,a4
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    8000a14c:	0808                	addi	a0,sp,16
  op_params.stride_width = params->stride_width;
    8000a14e:	d0be                	sw	a5,96(sp)
  op_params.filter_height = params->filter_height;
    8000a150:	4a1c                	lw	a5,16(a2)
                         TfLiteEvalTensor* output) {
    8000a152:	ed06                	sd	ra,152(sp)
  op_params.filter_height = params->filter_height;
    8000a154:	d2be                	sw	a5,100(sp)
  op_params.filter_width = params->filter_width;
    8000a156:	465c                	lw	a5,12(a2)
    8000a158:	d4be                	sw	a5,104(sp)
  op_params.padding_values.height = data->padding.height;
    8000a15a:	42dc                	lw	a5,4(a3)
    8000a15c:	04f11a23          	sh	a5,84(sp)
  op_params.padding_values.width = data->padding.width;
    8000a160:	429c                	lw	a5,0(a3)
    8000a162:	04f11923          	sh	a5,82(sp)
  op_params.float_activation_min = data->activation_min_f32;
    8000a166:	4e9c                	lw	a5,24(a3)
    8000a168:	dabe                	sw	a5,116(sp)
  op_params.float_activation_max = data->activation_max_f32;
    8000a16a:	4edc                	lw	a5,28(a3)
    8000a16c:	dcbe                	sw	a5,120(sp)
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    8000a16e:	f1dfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8000a172:	e099                	bnez	s1,8000a178 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3e>
    8000a174:	01b030ef          	jal	ra,8000d98e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8000a178:	6090                	ld	a2,0(s1)
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
    8000a17a:	85a2                	mv	a1,s0
    8000a17c:	1808                	addi	a0,sp,48
    8000a17e:	e432                	sd	a2,8(sp)
    8000a180:	f0bfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8000a184:	6622                	ld	a2,8(sp)
    8000a186:	c011                	beqz	s0,8000a18a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x50>
    8000a188:	6000                	ld	s0,0(s0)
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    8000a18a:	8722                	mv	a4,s0
    8000a18c:	1814                	addi	a3,sp,48
    8000a18e:	080c                	addi	a1,sp,16
    8000a190:	0888                	addi	a0,sp,80
    8000a192:	f6aff0ef          	jal	ra,800098fc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
    8000a196:	1808                	addi	a0,sp,48
    8000a198:	8a2fd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    8000a19c:	0808                	addi	a0,sp,16
    8000a19e:	89cfd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
    8000a1a2:	60ea                	ld	ra,152(sp)
    8000a1a4:	644a                	ld	s0,144(sp)
    8000a1a6:	64aa                	ld	s1,136(sp)
    8000a1a8:	610d                	addi	sp,sp,160
    8000a1aa:	8082                	ret

000000008000a1ac <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
    8000a1ac:	7135                	addi	sp,sp,-160
    8000a1ae:	e922                	sd	s0,144(sp)
    8000a1b0:	843e                	mv	s0,a5
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
    8000a1b2:	461c                	lw	a5,8(a2)
                             TfLiteEvalTensor* output) {
    8000a1b4:	e526                	sd	s1,136(sp)
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->activation_min;
  op_params.quantized_activation_max = data->activation_max;

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
    8000a1b6:	85ba                	mv	a1,a4
  op_params.stride_height = params->stride_height;
    8000a1b8:	cebe                	sw	a5,92(sp)
  op_params.stride_width = params->stride_width;
    8000a1ba:	425c                	lw	a5,4(a2)
                             TfLiteEvalTensor* output) {
    8000a1bc:	84ba                	mv	s1,a4
                                 tflite::micro::GetTensorShape(input),
    8000a1be:	0808                	addi	a0,sp,16
  op_params.stride_width = params->stride_width;
    8000a1c0:	d0be                	sw	a5,96(sp)
  op_params.filter_height = params->filter_height;
    8000a1c2:	4a1c                	lw	a5,16(a2)
                             TfLiteEvalTensor* output) {
    8000a1c4:	ed06                	sd	ra,152(sp)
  op_params.filter_height = params->filter_height;
    8000a1c6:	d2be                	sw	a5,100(sp)
  op_params.filter_width = params->filter_width;
    8000a1c8:	465c                	lw	a5,12(a2)
    8000a1ca:	d4be                	sw	a5,104(sp)
  op_params.padding_values.height = data->padding.height;
    8000a1cc:	42dc                	lw	a5,4(a3)
    8000a1ce:	04f11a23          	sh	a5,84(sp)
  op_params.padding_values.width = data->padding.width;
    8000a1d2:	429c                	lw	a5,0(a3)
    8000a1d4:	04f11923          	sh	a5,82(sp)
  op_params.quantized_activation_min = data->activation_min;
    8000a1d8:	4a9c                	lw	a5,16(a3)
    8000a1da:	d6be                	sw	a5,108(sp)
  op_params.quantized_activation_max = data->activation_max;
    8000a1dc:	4adc                	lw	a5,20(a3)
    8000a1de:	d8be                	sw	a5,112(sp)
                                 tflite::micro::GetTensorShape(input),
    8000a1e0:	eabfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8000a1e4:	e099                	bnez	s1,8000a1ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3e>
    8000a1e6:	7a8030ef          	jal	ra,8000d98e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8000a1ea:	6090                	ld	a2,0(s1)
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
    8000a1ec:	85a2                	mv	a1,s0
    8000a1ee:	1808                	addi	a0,sp,48
    8000a1f0:	e432                	sd	a2,8(sp)
    8000a1f2:	e99fe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8000a1f6:	6622                	ld	a2,8(sp)
    8000a1f8:	c011                	beqz	s0,8000a1fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x50>
    8000a1fa:	6000                	ld	s0,0(s0)
  reference_integer_ops::MaxPool(op_params,
    8000a1fc:	8722                	mv	a4,s0
    8000a1fe:	1814                	addi	a3,sp,48
    8000a200:	080c                	addi	a1,sp,16
    8000a202:	0888                	addi	a0,sp,80
    8000a204:	ce4ff0ef          	jal	ra,800096e8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
                                 tflite::micro::GetTensorShape(output),
    8000a208:	1808                	addi	a0,sp,48
    8000a20a:	830fd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorShape(input),
    8000a20e:	0808                	addi	a0,sp,16
    8000a210:	82afd0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
    8000a214:	60ea                	ld	ra,152(sp)
    8000a216:	644a                	ld	s0,144(sp)
    8000a218:	64aa                	ld	s1,136(sp)
    8000a21a:	610d                	addi	sp,sp,160
    8000a21c:	8082                	ret

000000008000a21e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    8000a21e:	7179                	addi	sp,sp,-48
    8000a220:	f406                	sd	ra,40(sp)
    8000a222:	f022                	sd	s0,32(sp)
    8000a224:	ec26                	sd	s1,24(sp)
    8000a226:	e84a                	sd	s2,16(sp)
  TFLITE_DCHECK(context != nullptr);
    8000a228:	e119                	bnez	a0,8000a22e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x10>
    8000a22a:	764030ef          	jal	ra,8000d98e <abort>
    8000a22e:	892e                	mv	s2,a1
  TFLITE_DCHECK(node != nullptr);
    8000a230:	dded                	beqz	a1,8000a22a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8000a232:	6198                	ld	a4,0(a1)
    8000a234:	755c                	ld	a5,168(a0)
    8000a236:	84aa                	mv	s1,a0
    8000a238:	434c                	lw	a1,4(a4)
    8000a23a:	9782                	jalr	a5
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8000a23c:	00893703          	ld	a4,8(s2)
    8000a240:	74dc                	ld	a5,168(s1)
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8000a242:	842a                	mv	s0,a0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8000a244:	434c                	lw	a1,4(a4)
    8000a246:	8526                	mv	a0,s1
    8000a248:	9782                	jalr	a5
    8000a24a:	892a                	mv	s2,a0
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
    8000a24c:	4808                	lw	a0,16(s0)
    8000a24e:	002c                	addi	a1,sp,8
    8000a250:	acdf90ef          	jal	ra,80003d1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
    8000a254:	84aa                	mv	s1,a0
    8000a256:	ed05                	bnez	a0,8000a28e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x70>
  input_bytes *= ElementCount(*input->dims);
    8000a258:	6408                	ld	a0,8(s0)
    8000a25a:	86cfa0ef          	jal	ra,800042c6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    8000a25e:	67a2                	ld	a5,8(sp)

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
    8000a260:	6014                	ld	a3,0(s0)
    8000a262:	00093703          	ld	a4,0(s2)
  input_bytes *= ElementCount(*input->dims);
    8000a266:	02a787b3          	mul	a5,a5,a0
    8000a26a:	e43e                	sd	a5,8(sp)
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
    8000a26c:	4781                	li	a5,0
  if (input->data.raw != output->data.raw) {
    8000a26e:	02e68063          	beq	a3,a4,8000a28e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x70>
    for (size_t i = 0; i < input_bytes; ++i) {
    8000a272:	6722                	ld	a4,8(sp)
    8000a274:	00e7fd63          	bgeu	a5,a4,8000a28e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x70>
      output->data.raw[i] = input->data.raw[i];
    8000a278:	6018                	ld	a4,0(s0)
    8000a27a:	973e                	add	a4,a4,a5
    8000a27c:	00074683          	lbu	a3,0(a4)
    8000a280:	00093703          	ld	a4,0(s2)
    8000a284:	973e                	add	a4,a4,a5
    8000a286:	00d70023          	sb	a3,0(a4)
    for (size_t i = 0; i < input_bytes; ++i) {
    8000a28a:	0785                	addi	a5,a5,1
    8000a28c:	b7dd                	j	8000a272 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x54>
    }
  }
  return kTfLiteOk;
}
    8000a28e:	70a2                	ld	ra,40(sp)
    8000a290:	7402                	ld	s0,32(sp)
    8000a292:	6942                	ld	s2,16(sp)
    8000a294:	8526                	mv	a0,s1
    8000a296:	64e2                	ld	s1,24(sp)
    8000a298:	6145                	addi	sp,sp,48
    8000a29a:	8082                	ret

000000008000a29c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    8000a29c:	7139                	addi	sp,sp,-64
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    8000a29e:	4601                	li	a2,0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    8000a2a0:	f822                	sd	s0,48(sp)
    8000a2a2:	ec4e                	sd	s3,24(sp)
    8000a2a4:	fc06                	sd	ra,56(sp)
    8000a2a6:	f426                	sd	s1,40(sp)
    8000a2a8:	f04a                	sd	s2,32(sp)
    8000a2aa:	842a                	mv	s0,a0
    8000a2ac:	89ae                	mv	s3,a1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    8000a2ae:	ac8fc0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    8000a2b2:	e915                	bnez	a0,8000a2e6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4a>
    8000a2b4:	741c                	ld	a5,40(s0)
    8000a2b6:	00083717          	auipc	a4,0x83
    8000a2ba:	d7a70713          	addi	a4,a4,-646 # 8008d030 <CSWTCH.21+0x8d0>
    8000a2be:	02300693          	li	a3,35
  TF_LITE_ENSURE(context, output != nullptr);
    8000a2c2:	00083617          	auipc	a2,0x83
    8000a2c6:	00660613          	addi	a2,a2,6 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a2ca:	00082597          	auipc	a1,0x82
    8000a2ce:	22e58593          	addi	a1,a1,558 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    8000a2d2:	8522                	mv	a0,s0
    8000a2d4:	9782                	jalr	a5
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    8000a2d6:	4505                	li	a0,1
}
    8000a2d8:	70e2                	ld	ra,56(sp)
    8000a2da:	7442                	ld	s0,48(sp)
    8000a2dc:	74a2                	ld	s1,40(sp)
    8000a2de:	7902                	ld	s2,32(sp)
    8000a2e0:	69e2                	ld	s3,24(sp)
    8000a2e2:	6121                	addi	sp,sp,64
    8000a2e4:	8082                	ret
    8000a2e6:	892a                	mv	s2,a0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    8000a2e8:	4601                	li	a2,0
    8000a2ea:	85ce                	mv	a1,s3
    8000a2ec:	8522                	mv	a0,s0
    8000a2ee:	a8cfc0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    8000a2f2:	84aa                	mv	s1,a0
  TF_LITE_ENSURE(context, output != nullptr);
    8000a2f4:	e909                	bnez	a0,8000a306 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6a>
    8000a2f6:	741c                	ld	a5,40(s0)
    8000a2f8:	00083717          	auipc	a4,0x83
    8000a2fc:	d6870713          	addi	a4,a4,-664 # 8008d060 <CSWTCH.21+0x900>
    8000a300:	02500693          	li	a3,37
    8000a304:	bf7d                	j	8000a2c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x26>
  int num_input_elements = NumElements(input);
    8000a306:	01093783          	ld	a5,16(s2)
  for (int i = 0; i < dims->size; ++i) {
    8000a30a:	4681                	li	a3,0
  int64_t count = 1;
    8000a30c:	4705                	li	a4,1
  for (int i = 0; i < dims->size; ++i) {
    8000a30e:	438c                	lw	a1,0(a5)
    8000a310:	0791                	addi	a5,a5,4
    8000a312:	00b6d863          	bge	a3,a1,8000a322 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x86>
    count *= dims->data[i];
    8000a316:	4390                	lw	a2,0(a5)
  for (int i = 0; i < dims->size; ++i) {
    8000a318:	2685                	addiw	a3,a3,1
    8000a31a:	0791                	addi	a5,a5,4
    count *= dims->data[i];
    8000a31c:	02c70733          	mul	a4,a4,a2
  for (int i = 0; i < dims->size; ++i) {
    8000a320:	bfcd                	j	8000a312 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    8000a322:	0009b683          	ld	a3,0(s3)
      output_shape->size == 1 && output_shape->data[0] == 0) {
    8000a326:	4605                	li	a2,1
  TfLiteIntArray* output_shape = output->dims;
    8000a328:	689c                	ld	a5,16(s1)
      output_shape->size == 1 && output_shape->data[0] == 0) {
    8000a32a:	4294                	lw	a3,0(a3)
  int num_input_elements = NumElements(input);
    8000a32c:	2701                	sext.w	a4,a4
      output_shape->size == 1 && output_shape->data[0] == 0) {
    8000a32e:	00c69963          	bne	a3,a2,8000a340 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    8000a332:	4390                	lw	a2,0(a5)
    8000a334:	00d61663          	bne	a2,a3,8000a340 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    8000a338:	43d4                	lw	a3,4(a5)
    8000a33a:	e299                	bnez	a3,8000a340 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
    output_shape->size = 0;
    8000a33c:	0007a023          	sw	zero,0(a5)
  for (int i = 0; i < output_shape->size; ++i) {
    8000a340:	0007a303          	lw	t1,0(a5)
    8000a344:	00478613          	addi	a2,a5,4
    8000a348:	4681                	li	a3,0
  int stretch_dim = -1;
    8000a34a:	587d                	li	a6,-1
  int num_output_elements = 1;
    8000a34c:	4885                	li	a7,1
    if (value == -1) {
    8000a34e:	55fd                	li	a1,-1
  for (int i = 0; i < output_shape->size; ++i) {
    8000a350:	0466d663          	bge	a3,t1,8000a39c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x100>
    int value = output_shape->data[i];
    8000a354:	4208                	lw	a0,0(a2)
    if (value == -1) {
    8000a356:	02b51c63          	bne	a0,a1,8000a38e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    8000a35a:	02b80f63          	beq	a6,a1,8000a398 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>
    8000a35e:	02843303          	ld	t1,40(s0)
    8000a362:	58fd                	li	a7,-1
    8000a364:	00083797          	auipc	a5,0x83
    8000a368:	fb478793          	addi	a5,a5,-76 # 8008d318 <CSWTCH.21+0xbb8>
    8000a36c:	00083717          	auipc	a4,0x83
    8000a370:	fb470713          	addi	a4,a4,-76 # 8008d320 <CSWTCH.21+0xbc0>
    8000a374:	03a00693          	li	a3,58
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    8000a378:	00083617          	auipc	a2,0x83
    8000a37c:	f5060613          	addi	a2,a2,-176 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a380:	00082597          	auipc	a1,0x82
    8000a384:	57058593          	addi	a1,a1,1392 # 8008c8f0 <CSWTCH.21+0x190>
    8000a388:	8522                	mv	a0,s0
    8000a38a:	9302                	jalr	t1
    8000a38c:	b7a9                	j	8000a2d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3a>
      num_output_elements *= value;
    8000a38e:	02a888bb          	mulw	a7,a7,a0
  for (int i = 0; i < output_shape->size; ++i) {
    8000a392:	2685                	addiw	a3,a3,1
    8000a394:	0611                	addi	a2,a2,4
    8000a396:	bf6d                	j	8000a350 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
    8000a398:	8836                	mv	a6,a3
    8000a39a:	bfe5                	j	8000a392 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
  if (stretch_dim != -1) {
    8000a39c:	56fd                	li	a3,-1
    8000a39e:	00d80963          	beq	a6,a3,8000a3b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    8000a3a2:	031746bb          	divw	a3,a4,a7
    8000a3a6:	080a                	slli	a6,a6,0x2
    8000a3a8:	97c2                	add	a5,a5,a6
    num_output_elements *= output_shape->data[stretch_dim];
    8000a3aa:	031688bb          	mulw	a7,a3,a7
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    8000a3ae:	c3d4                	sw	a3,4(a5)
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    8000a3b0:	00092503          	lw	a0,0(s2)
    8000a3b4:	409c                	lw	a5,0(s1)
    8000a3b6:	04a78163          	beq	a5,a0,8000a3f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>
    8000a3ba:	02843903          	ld	s2,40(s0)
    8000a3be:	f63fb0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000a3c2:	e42a                	sd	a0,8(sp)
    8000a3c4:	4088                	lw	a0,0(s1)
    8000a3c6:	f5bfb0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000a3ca:	6822                	ld	a6,8(sp)
    8000a3cc:	88aa                	mv	a7,a0
    8000a3ce:	00083797          	auipc	a5,0x83
    8000a3d2:	aba78793          	addi	a5,a5,-1350 # 8008ce88 <CSWTCH.21+0x728>
    8000a3d6:	00083717          	auipc	a4,0x83
    8000a3da:	ac270713          	addi	a4,a4,-1342 # 8008ce98 <CSWTCH.21+0x738>
    8000a3de:	04500693          	li	a3,69
    8000a3e2:	00083617          	auipc	a2,0x83
    8000a3e6:	ee660613          	addi	a2,a2,-282 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a3ea:	00083597          	auipc	a1,0x83
    8000a3ee:	f4658593          	addi	a1,a1,-186 # 8008d330 <CSWTCH.21+0xbd0>
    8000a3f2:	8522                	mv	a0,s0
    8000a3f4:	9902                	jalr	s2
    8000a3f6:	b5c5                	j	8000a2d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3a>
  return kTfLiteOk;
    8000a3f8:	4501                	li	a0,0
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    8000a3fa:	ece88fe3          	beq	a7,a4,8000a2d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3c>
    8000a3fe:	883a                	mv	a6,a4
    8000a400:	02843303          	ld	t1,40(s0)
    8000a404:	00083797          	auipc	a5,0x83
    8000a408:	f4c78793          	addi	a5,a5,-180 # 8008d350 <CSWTCH.21+0xbf0>
    8000a40c:	00083717          	auipc	a4,0x83
    8000a410:	f5c70713          	addi	a4,a4,-164 # 8008d368 <CSWTCH.21+0xc08>
    8000a414:	04600693          	li	a3,70
    8000a418:	b785                	j	8000a378 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xdc>

000000008000a41a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
    8000a41a:	619c                	ld	a5,0(a1)
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    8000a41c:	1101                	addi	sp,sp,-32
    8000a41e:	e822                	sd	s0,16(sp)
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    8000a420:	439c                	lw	a5,0(a5)
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    8000a422:	ec06                	sd	ra,24(sp)
    8000a424:	e426                	sd	s1,8(sp)
    8000a426:	e04a                	sd	s2,0(sp)
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    8000a428:	37fd                	addiw	a5,a5,-1
    8000a42a:	4705                	li	a4,1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    8000a42c:	842a                	mv	s0,a0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    8000a42e:	02f77963          	bgeu	a4,a5,8000a460 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
    8000a432:	751c                	ld	a5,40(a0)
    8000a434:	00083717          	auipc	a4,0x83
    8000a438:	f4c70713          	addi	a4,a4,-180 # 8008d380 <CSWTCH.21+0xc20>
    8000a43c:	04b00693          	li	a3,75
    8000a440:	00083617          	auipc	a2,0x83
    8000a444:	e8860613          	addi	a2,a2,-376 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a448:	00082597          	auipc	a1,0x82
    8000a44c:	0b058593          	addi	a1,a1,176 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    8000a450:	9782                	jalr	a5
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    8000a452:	4505                	li	a0,1
}
    8000a454:	60e2                	ld	ra,24(sp)
    8000a456:	6442                	ld	s0,16(sp)
    8000a458:	64a2                	ld	s1,8(sp)
    8000a45a:	6902                	ld	s2,0(sp)
    8000a45c:	6105                	addi	sp,sp,32
    8000a45e:	8082                	ret
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    8000a460:	659c                	ld	a5,8(a1)
    8000a462:	84ae                	mv	s1,a1
    8000a464:	0007a803          	lw	a6,0(a5)
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    8000a468:	02e80963          	beq	a6,a4,8000a49a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    8000a46c:	02853303          	ld	t1,40(a0)
    8000a470:	4885                	li	a7,1
    8000a472:	00083797          	auipc	a5,0x83
    8000a476:	00678793          	addi	a5,a5,6 # 8008d478 <CSWTCH.21+0xd18>
    8000a47a:	00083717          	auipc	a4,0x83
    8000a47e:	f3670713          	addi	a4,a4,-202 # 8008d3b0 <CSWTCH.21+0xc50>
    8000a482:	04c00693          	li	a3,76
    8000a486:	00083617          	auipc	a2,0x83
    8000a48a:	e4260613          	addi	a2,a2,-446 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a48e:	00082597          	auipc	a1,0x82
    8000a492:	46258593          	addi	a1,a1,1122 # 8008c8f0 <CSWTCH.21+0x190>
    8000a496:	9302                	jalr	t1
    8000a498:	bf6d                	j	8000a452 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    8000a49a:	e03ff0ef          	jal	ra,8000a29c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    8000a49e:	d95d                	beqz	a0,8000a454 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    8000a4a0:	85a6                	mv	a1,s1
    8000a4a2:	02843903          	ld	s2,40(s0)
    8000a4a6:	8522                	mv	a0,s0
    8000a4a8:	df5ff0ef          	jal	ra,8000a29c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    8000a4ac:	0005081b          	sext.w	a6,a0
    8000a4b0:	4881                	li	a7,0
    8000a4b2:	00083797          	auipc	a5,0x83
    8000a4b6:	f1678793          	addi	a5,a5,-234 # 8008d3c8 <CSWTCH.21+0xc68>
    8000a4ba:	00083717          	auipc	a4,0x83
    8000a4be:	f1e70713          	addi	a4,a4,-226 # 8008d3d8 <CSWTCH.21+0xc78>
    8000a4c2:	04d00693          	li	a3,77
    8000a4c6:	00083617          	auipc	a2,0x83
    8000a4ca:	e0260613          	addi	a2,a2,-510 # 8008d2c8 <CSWTCH.21+0xb68>
    8000a4ce:	00082597          	auipc	a1,0x82
    8000a4d2:	42258593          	addi	a1,a1,1058 # 8008c8f0 <CSWTCH.21+0x190>
    8000a4d6:	8522                	mv	a0,s0
    8000a4d8:	9902                	jalr	s2
    8000a4da:	bfa5                	j	8000a452 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x38>

000000008000a4dc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    8000a4dc:	1141                	addi	sp,sp,-16
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    8000a4de:	04000613          	li	a2,64
    8000a4e2:	00005597          	auipc	a1,0x5
    8000a4e6:	f1e58593          	addi	a1,a1,-226 # 8000f400 <_ZN6tflite20kPoolingOutputTensorE+0x164>
TfLiteRegistration Register_RESHAPE() {
    8000a4ea:	e022                	sd	s0,0(sp)
    8000a4ec:	e406                	sd	ra,8(sp)
    8000a4ee:	842a                	mv	s0,a0
          /*version=*/0};
    8000a4f0:	947f70ef          	jal	ra,80001e36 <memcpy>
}
    8000a4f4:	60a2                	ld	ra,8(sp)
    8000a4f6:	8522                	mv	a0,s0
    8000a4f8:	6402                	ld	s0,0(sp)
    8000a4fa:	0141                	addi	sp,sp,16
    8000a4fc:	8082                	ret

000000008000a4fe <_ZN6tflite26generic_int16_table_lookupEsPKs>:
}

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    8000a4fe:	4075579b          	sraiw	a5,a0,0x7
    8000a502:	17c2                	slli	a5,a5,0x30
    8000a504:	93c1                	srli	a5,a5,0x30
    8000a506:	1007871b          	addiw	a4,a5,256
  assert(index < 512 && "LUT index out of range.");
  int16_t offset = value & 0x7f;

  // base and slope are Q0.15
  int16_t base = lut[index];
  int16_t slope = lut[index + 1] - lut[index];
    8000a50a:	1017879b          	addiw	a5,a5,257
  int16_t base = lut[index];
    8000a50e:	1742                	slli	a4,a4,0x30
  int16_t slope = lut[index + 1] - lut[index];
    8000a510:	17c2                	slli	a5,a5,0x30
    8000a512:	93bd                	srli	a5,a5,0x2f
  int16_t base = lut[index];
    8000a514:	933d                	srli	a4,a4,0x2f
    8000a516:	972e                	add	a4,a4,a1
  int16_t slope = lut[index + 1] - lut[index];
    8000a518:	95be                	add	a1,a1,a5
    8000a51a:	00075703          	lhu	a4,0(a4)
    8000a51e:	0005d783          	lhu	a5,0(a1)

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    8000a522:	07f57513          	andi	a0,a0,127
  int16_t slope = lut[index + 1] - lut[index];
    8000a526:	9f99                	subw	a5,a5,a4
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    8000a528:	0107979b          	slliw	a5,a5,0x10
    8000a52c:	4107d79b          	sraiw	a5,a5,0x10
    8000a530:	02a7853b          	mulw	a0,a5,a0
    8000a534:	0405051b          	addiw	a0,a0,64
    8000a538:	4075551b          	sraiw	a0,a0,0x7

  // Q0.15 + Q0.15
  return base + delta;
    8000a53c:	9d39                	addw	a0,a0,a4
}
    8000a53e:	0105151b          	slliw	a0,a0,0x10
    8000a542:	4105551b          	sraiw	a0,a0,0x10
    8000a546:	8082                	ret

000000008000a548 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    8000a548:	7175                	addi	sp,sp,-144
    8000a54a:	f4ce                	sd	s3,104(sp)
    8000a54c:	89b2                	mv	s3,a2
    8000a54e:	8636                	mv	a2,a3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a550:	4194                	lw	a3,0(a1)
                    const RuntimeShape& output_shape, float* output_data) {
    8000a552:	e122                	sd	s0,128(sp)
    8000a554:	842e                	mv	s0,a1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a556:	36fd                	addiw	a3,a3,-1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a558:	85b6                	mv	a1,a3
                    const RuntimeShape& output_shape, float* output_data) {
    8000a55a:	e0e2                	sd	s8,64(sp)
    8000a55c:	8c2a                	mv	s8,a0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a55e:	8522                	mv	a0,s0
                    const RuntimeShape& output_shape, float* output_data) {
    8000a560:	e506                	sd	ra,136(sp)
    8000a562:	fca6                	sd	s1,120(sp)
    8000a564:	f0d2                	sd	s4,96(sp)
    8000a566:	ecd6                	sd	s5,88(sp)
    8000a568:	e8da                	sd	s6,80(sp)
    8000a56a:	e4de                	sd	s7,72(sp)
    8000a56c:	fc66                	sd	s9,56(sp)
    8000a56e:	f86a                	sd	s10,48(sp)
    8000a570:	8a3a                	mv	s4,a4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a572:	e432                	sd	a2,8(sp)
    8000a574:	e036                	sd	a3,0(sp)
                    const RuntimeShape& output_shape, float* output_data) {
    8000a576:	f8ca                	sd	s2,112(sp)
    8000a578:	f46e                	sd	s11,40(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a57a:	b7bfe0ef          	jal	ra,800090f4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a57e:	6682                	ld	a3,0(sp)
    8000a580:	6622                	ld	a2,8(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a582:	8baa                	mv	s7,a0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a584:	85b6                	mv	a1,a3
    8000a586:	8522                	mv	a0,s0
    8000a588:	dabfc0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8000a58c:	84aa                	mv	s1,a0

  for (int i = 0; i < outer_size; ++i) {
    8000a58e:	00050c9b          	sext.w	s9,a0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a592:	4a81                	li	s5,0
  for (int i = 0; i < outer_size; ++i) {
    8000a594:	4b01                	li	s6,0
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    8000a596:	00005d17          	auipc	s10,0x5
    8000a59a:	cded0d13          	addi	s10,s10,-802 # 8000f274 <_global_impure_ptr+0x24>
  for (int i = 0; i < outer_size; ++i) {
    8000a59e:	0b7b5063          	bge	s6,s7,8000a63e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
    float max = std::numeric_limits<float>::lowest();
    8000a5a2:	000d2783          	lw	a5,0(s10)
    8000a5a6:	002a9413          	slli	s0,s5,0x2
    8000a5aa:	00898933          	add	s2,s3,s0
    8000a5ae:	ce3e                	sw	a5,28(sp)
    for (int c = 0; c < depth; ++c) {
    8000a5b0:	4d81                	li	s11,0
    8000a5b2:	029dd163          	bge	s11,s1,8000a5d4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
      if (__a < __b)
    8000a5b6:	45f2                	lw	a1,28(sp)
    8000a5b8:	00092503          	lw	a0,0(s2)
      max = std::max(max, input_data[i * depth + c]);
    8000a5bc:	e04a                	sd	s2,0(sp)
    8000a5be:	fadf60ef          	jal	ra,8000156a <__gesf2>
    8000a5c2:	87ca                	mv	a5,s2
    8000a5c4:	00a04363          	bgtz	a0,8000a5ca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x82>
      return __a;
    8000a5c8:	087c                	addi	a5,sp,28
    8000a5ca:	439c                	lw	a5,0(a5)
    for (int c = 0; c < depth; ++c) {
    8000a5cc:	2d85                	addiw	s11,s11,1
    8000a5ce:	0911                	addi	s2,s2,4
      max = std::max(max, input_data[i * depth + c]);
    8000a5d0:	ce3e                	sw	a5,28(sp)
    for (int c = 0; c < depth; ++c) {
    8000a5d2:	b7c5                	j	8000a5b2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x6a>
    8000a5d4:	8da2                	mv	s11,s0
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
    8000a5d6:	4781                	li	a5,0
    float sum = 0.f;
    8000a5d8:	00000913          	li	s2,0
    for (int c = 0; c < depth; ++c) {
    8000a5dc:	0097ce63          	blt	a5,s1,8000a5f8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb0>
    8000a5e0:	9452                	add	s0,s0,s4
      output_data[i * depth + c] = exp_c;
      sum += exp_c;
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    8000a5e2:	4d81                	li	s11,0
    8000a5e4:	049dd963          	bge	s11,s1,8000a636 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    8000a5e8:	4008                	lw	a0,0(s0)
    8000a5ea:	85ca                	mv	a1,s2
    for (int c = 0; c < depth; ++c) {
    8000a5ec:	2d85                	addiw	s11,s11,1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    8000a5ee:	d27f60ef          	jal	ra,80001314 <__divsf3>
    8000a5f2:	c008                	sw	a0,0(s0)
    for (int c = 0; c < depth; ++c) {
    8000a5f4:	0411                	addi	s0,s0,4
    8000a5f6:	b7fd                	j	8000a5e4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9c>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    8000a5f8:	01b98733          	add	a4,s3,s11
    8000a5fc:	45f2                	lw	a1,28(sp)
    8000a5fe:	4308                	lw	a0,0(a4)
    8000a600:	e43e                	sd	a5,8(sp)
    8000a602:	a5af70ef          	jal	ra,8000185c <__subsf3>
    8000a606:	c02a                	sw	a0,0(sp)
                                   static_cast<float>(params.beta));
    8000a608:	000c3503          	ld	a0,0(s8)
    8000a60c:	f4ef70ef          	jal	ra,80001d5a <__truncdfsf2>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    8000a610:	4702                	lw	a4,0(sp)
                                   static_cast<float>(params.beta));
    8000a612:	85aa                	mv	a1,a0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    8000a614:	853a                	mv	a0,a4
    8000a616:	85cf70ef          	jal	ra,80001672 <__mulsf3>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    8000a61a:	08a030ef          	jal	ra,8000d6a4 <expf>
      output_data[i * depth + c] = exp_c;
    8000a61e:	01ba0733          	add	a4,s4,s11
    8000a622:	85aa                	mv	a1,a0
    8000a624:	c308                	sw	a0,0(a4)
      sum += exp_c;
    8000a626:	854a                	mv	a0,s2
    8000a628:	9abf60ef          	jal	ra,80000fd2 <__addsf3>
    for (int c = 0; c < depth; ++c) {
    8000a62c:	67a2                	ld	a5,8(sp)
      sum += exp_c;
    8000a62e:	892a                	mv	s2,a0
    for (int c = 0; c < depth; ++c) {
    8000a630:	0d91                	addi	s11,s11,4
    8000a632:	2785                	addiw	a5,a5,1
    8000a634:	b765                	j	8000a5dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x94>
  for (int i = 0; i < outer_size; ++i) {
    8000a636:	2b05                	addiw	s6,s6,1
    8000a638:	019a8abb          	addw	s5,s5,s9
    8000a63c:	b78d                	j	8000a59e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x56>
    }
  }
}
    8000a63e:	60aa                	ld	ra,136(sp)
    8000a640:	640a                	ld	s0,128(sp)
    8000a642:	74e6                	ld	s1,120(sp)
    8000a644:	7946                	ld	s2,112(sp)
    8000a646:	79a6                	ld	s3,104(sp)
    8000a648:	7a06                	ld	s4,96(sp)
    8000a64a:	6ae6                	ld	s5,88(sp)
    8000a64c:	6b46                	ld	s6,80(sp)
    8000a64e:	6ba6                	ld	s7,72(sp)
    8000a650:	6c06                	ld	s8,64(sp)
    8000a652:	7ce2                	ld	s9,56(sp)
    8000a654:	7d42                	ld	s10,48(sp)
    8000a656:	7da2                	ld	s11,40(sp)
    8000a658:	6149                	addi	sp,sp,144
    8000a65a:	8082                	ret

000000008000a65c <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    8000a65c:	1141                	addi	sp,sp,-16
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    8000a65e:	04000613          	li	a2,64
    8000a662:	00005597          	auipc	a1,0x5
    8000a666:	dde58593          	addi	a1,a1,-546 # 8000f440 <_ZN6tflite20kPoolingOutputTensorE+0x1a4>
TfLiteRegistration Register_SOFTMAX() {
    8000a66a:	e022                	sd	s0,0(sp)
    8000a66c:	e406                	sd	ra,8(sp)
    8000a66e:	842a                	mv	s0,a0
          /*version=*/0};
    8000a670:	fc6f70ef          	jal	ra,80001e36 <memcpy>
}
    8000a674:	60a2                	ld	ra,8(sp)
    8000a676:	8522                	mv	a0,s0
    8000a678:	6402                	ld	s0,0(sp)
    8000a67a:	0141                	addi	sp,sp,16
    8000a67c:	8082                	ret

000000008000a67e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
    8000a67e:	7155                	addi	sp,sp,-208
    8000a680:	f152                	sd	s4,160(sp)
    8000a682:	8a32                	mv	s4,a2
    8000a684:	8636                	mv	a2,a3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a686:	4194                	lw	a3,0(a1)
                         int16_t* output_data) {
    8000a688:	e1a2                	sd	s0,192(sp)
    8000a68a:	842e                	mv	s0,a1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a68c:	36fd                	addiw	a3,a3,-1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a68e:	85b6                	mv	a1,a3
                         int16_t* output_data) {
    8000a690:	fd26                	sd	s1,184(sp)
    8000a692:	84aa                	mv	s1,a0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a694:	8522                	mv	a0,s0
                         int16_t* output_data) {
    8000a696:	e586                	sd	ra,200(sp)
    8000a698:	f54e                	sd	s3,168(sp)
    8000a69a:	ed56                	sd	s5,152(sp)
    8000a69c:	e95a                	sd	s6,144(sp)
    8000a69e:	e55e                	sd	s7,136(sp)
    8000a6a0:	fce6                	sd	s9,120(sp)
    8000a6a2:	f8ea                	sd	s10,112(sp)
    8000a6a4:	f43a                	sd	a4,40(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a6a6:	ec32                	sd	a2,24(sp)
    8000a6a8:	e836                	sd	a3,16(sp)
                         int16_t* output_data) {
    8000a6aa:	f94a                	sd	s2,176(sp)
    8000a6ac:	e162                	sd	s8,128(sp)
    8000a6ae:	f4ee                	sd	s11,104(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a6b0:	a45fe0ef          	jal	ra,800090f4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a6b4:	66c2                	ld	a3,16(sp)
    8000a6b6:	6662                	ld	a2,24(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a6b8:	e42a                	sd	a0,8(sp)
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a6ba:	85b6                	mv	a1,a3
    8000a6bc:	8522                	mv	a0,s0
    8000a6be:	c75fc0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8000a6c2:	0005079b          	sext.w	a5,a0
    8000a6c6:	e83e                	sd	a5,16(sp)
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8000a6c8:	6ca1                	lui	s9,0x8
    8000a6ca:	00151793          	slli	a5,a0,0x1
    8000a6ce:	ec3e                	sd	a5,24(sp)
               static_cast<int32_t>(32767));
    8000a6d0:	6aa1                	lui	s5,0x8
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8000a6d2:	fffc879b          	addiw	a5,s9,-1
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a6d6:	842a                	mv	s0,a0
    8000a6d8:	4981                	li	s3,0
    8000a6da:	4b01                	li	s6,0

  for (int i = 0; i < outer_size; ++i) {
    8000a6dc:	4b81                	li	s7,0
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8000a6de:	da3e                	sw	a5,52(sp)
               static_cast<int32_t>(32767));
    8000a6e0:	fffa8d13          	addi	s10,s5,-1 # 7fff <CONFIG_MAIN_STACK_SIZE+0x6fff>
  for (int i = 0; i < outer_size; ++i) {
    8000a6e4:	67a2                	ld	a5,8(sp)
    8000a6e6:	16fbdc63          	bge	s7,a5,8000a85e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    8000a6ea:	77e1                	lui	a5,0xffff8
    8000a6ec:	04f11723          	sh	a5,78(sp)
    for (int c = 0; c < depth; ++c) {
    8000a6f0:	001b1793          	slli	a5,s6,0x1
    8000a6f4:	97d2                	add	a5,a5,s4
    8000a6f6:	4701                	li	a4,0
    8000a6f8:	02875263          	bge	a4,s0,8000a71c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
      if (__a < __b)
    8000a6fc:	00079583          	lh	a1,0(a5) # ffffffffffff8000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff8001>
    8000a700:	04e11603          	lh	a2,78(sp)
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000a704:	86be                	mv	a3,a5
    8000a706:	00b64463          	blt	a2,a1,8000a70e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x90>
      return __a;
    8000a70a:	04e10693          	addi	a3,sp,78
    8000a70e:	00069683          	lh	a3,0(a3)
    for (int c = 0; c < depth; ++c) {
    8000a712:	2705                	addiw	a4,a4,1
    8000a714:	0789                	addi	a5,a5,2
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000a716:	04d11723          	sh	a3,78(sp)
    for (int c = 0; c < depth; ++c) {
    8000a71a:	bff9                	j	8000a6f8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7a>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    8000a71c:	77a2                	ld	a5,40(sp)
    8000a71e:	013a0db3          	add	s11,s4,s3
    for (int c = 0; c < depth; ++c) {
    8000a722:	4c81                	li	s9,0
    8000a724:	01378933          	add	s2,a5,s3
    8000a728:	f04a                	sd	s2,32(sp)
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    8000a72a:	4c01                	li	s8,0
    for (int c = 0; c < depth; ++c) {
    8000a72c:	000c869b          	sext.w	a3,s9
    8000a730:	0686da63          	bge	a3,s0,8000a7a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x126>
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    8000a734:	04e11683          	lh	a3,78(sp)
    8000a738:	000d9503          	lh	a0,0(s11)
      input_diff, params.input_multiplier, params.input_left_shift);
    8000a73c:	44d0                	lw	a2,12(s1)
    8000a73e:	448c                	lw	a1,8(s1)
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    8000a740:	9d15                	subw	a0,a0,a3
  int left_shift = shift > 0 ? shift : 0;
    8000a742:	0006069b          	sext.w	a3,a2
    8000a746:	00065363          	bgez	a2,8000a74c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xce>
    8000a74a:	4681                	li	a3,0
  int right_shift = shift > 0 ? 0 : -shift;
    8000a74c:	4881                	li	a7,0
    8000a74e:	00c04463          	bgtz	a2,8000a756 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xd8>
    8000a752:	40c008bb          	negw	a7,a2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    8000a756:	00d5153b          	sllw	a0,a0,a3
    8000a75a:	fc46                	sd	a7,56(sp)
    8000a75c:	a25fe0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    8000a760:	78e2                	ld	a7,56(sp)
    8000a762:	85c6                	mv	a1,a7
    8000a764:	a5dfe0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8000a768:	57d2                	lw	a5,52(sp)
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    8000a76a:	7661                	lui	a2,0xffff8
    8000a76c:	ceb2                	sw	a2,92(sp)
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8000a76e:	00a785bb          	addw	a1,a5,a0
    8000a772:	caae                	sw	a1,84(sp)
    8000a774:	08d4                	addi	a3,sp,84
      if (__a < __b)
    8000a776:	00c5d363          	bge	a1,a2,8000a77c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xfe>
	return __b;
    8000a77a:	08f4                	addi	a3,sp,92
      if (__b < __a)
    8000a77c:	4290                	lw	a2,0(a3)
               static_cast<int32_t>(32767));
    8000a77e:	ccea                	sw	s10,88(sp)
    8000a780:	01564363          	blt	a2,s5,8000a786 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x108>
	return __b;
    8000a784:	08b4                	addi	a3,sp,88
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    8000a786:	00069503          	lh	a0,0(a3)
    8000a78a:	788c                	ld	a1,48(s1)
    8000a78c:	0d89                	addi	s11,s11,2
    8000a78e:	d71ff0ef          	jal	ra,8000a4fe <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
    8000a792:	001c9693          	slli	a3,s9,0x1
    8000a796:	96ca                	add	a3,a3,s2
    8000a798:	00a69023          	sh	a0,0(a3)
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    8000a79c:	01850c3b          	addw	s8,a0,s8
    for (int c = 0; c < depth; ++c) {
    8000a7a0:	0c85                	addi	s9,s9,1
    8000a7a2:	b769                	j	8000a72c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xae>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    8000a7a4:	000c051b          	sext.w	a0,s8
  return integer_input ? __builtin_clz(integer_input)
    8000a7a8:	02000713          	li	a4,32
    8000a7ac:	000c0863          	beqz	s8,8000a7bc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x13e>
    8000a7b0:	1502                	slli	a0,a0,0x20
    8000a7b2:	9101                	srli	a0,a0,0x20
    8000a7b4:	9f1f50ef          	jal	ra,800001a4 <__clzdi2>
    8000a7b8:	fe05071b          	addiw	a4,a0,-32
    8000a7bc:	0ff77613          	andi	a2,a4,255
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    8000a7c0:	377d                	addiw	a4,a4,-1
    8000a7c2:	00ec17b3          	sll	a5,s8,a4
    8000a7c6:	6709                	lui	a4,0x2
    8000a7c8:	97ba                	add	a5,a5,a4
         (1 << 13)) >>
    8000a7ca:	87b9                	srai	a5,a5,0xe
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    8000a7cc:	7721                	lui	a4,0xfffe8
    8000a7ce:	00f705bb          	addw	a1,a4,a5
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    8000a7d2:	76e1                	lui	a3,0xffff8
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    8000a7d4:	c8ae                	sw	a1,80(sp)
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    8000a7d6:	ccb6                	sw	a3,88(sp)
      return __a;
    8000a7d8:	0898                	addi	a4,sp,80
      if (__a < __b)
    8000a7da:	00d5d363          	bge	a1,a3,8000a7e0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x162>
	return __b;
    8000a7de:	08b8                	addi	a4,sp,88
      if (__b < __a)
    8000a7e0:	431c                	lw	a5,0(a4)
                 static_cast<int32_t>(32767)));
    8000a7e2:	ceea                	sw	s10,92(sp)
    8000a7e4:	0157c363          	blt	a5,s5,8000a7ea <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16c>
	return __b;
    8000a7e8:	08f8                	addi	a4,sp,92
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    8000a7ea:	7c8c                	ld	a1,56(s1)
    8000a7ec:	00071503          	lh	a0,0(a4) # fffffffffffe8000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7ffffffffffe8001>
    8000a7f0:	fc32                	sd	a2,56(sp)
    8000a7f2:	d0dff0ef          	jal	ra,8000a4fe <_ZN6tflite26generic_int16_table_lookupEsPKs>
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
    8000a7f6:	7662                	ld	a2,56(sp)
    8000a7f8:	47fd                	li	a5,31
      int64_t round = 1 << (right_shift - 1);
    8000a7fa:	4701                	li	a4,0
      uint8_t right_shift = 31 - headroom_plus_one;
    8000a7fc:	9f91                	subw	a5,a5,a2
    8000a7fe:	0ff7f593          	andi	a1,a5,255
      int64_t round = 1 << (right_shift - 1);
    8000a802:	fff5879b          	addiw	a5,a1,-1
    8000a806:	862e                	mv	a2,a1
    8000a808:	4585                	li	a1,1
    8000a80a:	00f595bb          	sllw	a1,a1,a5
    for (int c = 0; c < depth; ++c) {
    8000a80e:	0007079b          	sext.w	a5,a4
    8000a812:	0287df63          	bge	a5,s0,8000a850 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d2>
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    8000a816:	7682                	ld	a3,32(sp)
    8000a818:	00171793          	slli	a5,a4,0x1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    8000a81c:	cc82                	sw	zero,88(sp)
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    8000a81e:	97b6                	add	a5,a5,a3
    8000a820:	00079783          	lh	a5,0(a5)
      return __a;
    8000a824:	08d4                	addi	a3,sp,84
    8000a826:	02a787b3          	mul	a5,a5,a0
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    8000a82a:	97ae                	add	a5,a5,a1
                        round) >>
    8000a82c:	40c7d7b3          	sra	a5,a5,a2
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    8000a830:	2781                	sext.w	a5,a5
    8000a832:	cabe                	sw	a5,84(sp)
      if (__a < __b)
    8000a834:	0007d363          	bgez	a5,8000a83a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1bc>
	return __b;
    8000a838:	08b4                	addi	a3,sp,88
      if (__b < __a)
    8000a83a:	429c                	lw	a5,0(a3)
                   static_cast<int32_t>(32767)));
    8000a83c:	ceea                	sw	s10,92(sp)
    8000a83e:	0157c363          	blt	a5,s5,8000a844 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1c6>
	return __b;
    8000a842:	08f4                	addi	a3,sp,92
      output_data[i * depth + c] = static_cast<int16_t>(
    8000a844:	429c                	lw	a5,0(a3)
    8000a846:	0705                	addi	a4,a4,1
    8000a848:	0909                	addi	s2,s2,2
    8000a84a:	fef91f23          	sh	a5,-2(s2)
    for (int c = 0; c < depth; ++c) {
    8000a84e:	b7c1                	j	8000a80e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x190>
  for (int i = 0; i < outer_size; ++i) {
    8000a850:	67c2                	ld	a5,16(sp)
    8000a852:	2b85                	addiw	s7,s7,1
    8000a854:	00fb0b3b          	addw	s6,s6,a5
    8000a858:	67e2                	ld	a5,24(sp)
    8000a85a:	99be                	add	s3,s3,a5
    8000a85c:	b561                	j	8000a6e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x66>
    }
  }
}
    8000a85e:	60ae                	ld	ra,200(sp)
    8000a860:	640e                	ld	s0,192(sp)
    8000a862:	74ea                	ld	s1,184(sp)
    8000a864:	794a                	ld	s2,176(sp)
    8000a866:	79aa                	ld	s3,168(sp)
    8000a868:	7a0a                	ld	s4,160(sp)
    8000a86a:	6aea                	ld	s5,152(sp)
    8000a86c:	6b4a                	ld	s6,144(sp)
    8000a86e:	6baa                	ld	s7,136(sp)
    8000a870:	6c0a                	ld	s8,128(sp)
    8000a872:	7ce6                	ld	s9,120(sp)
    8000a874:	7d46                	ld	s10,112(sp)
    8000a876:	7da6                	ld	s11,104(sp)
    8000a878:	6169                	addi	sp,sp,208
    8000a87a:	8082                	ret

000000008000a87c <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
    8000a87c:	1101                	addi	sp,sp,-32
    8000a87e:	e822                	sd	s0,16(sp)
    8000a880:	e426                	sd	s1,8(sp)
    8000a882:	e04a                	sd	s2,0(sp)
    8000a884:	ec06                	sd	ra,24(sp)
    8000a886:	84ae                	mv	s1,a1
    8000a888:	8932                	mv	s2,a2
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    8000a88a:	842a                	mv	s0,a0
  return integer_input ? __builtin_clz(integer_input)
    8000a88c:	c51d                	beqz	a0,8000a8ba <_ZN6tflite13GetReciprocalEiiPi+0x3e>
    8000a88e:	1502                	slli	a0,a0,0x20
    8000a890:	9101                	srli	a0,a0,0x20
    8000a892:	913f50ef          	jal	ra,800001a4 <__clzdi2>
    8000a896:	3501                	addiw	a0,a0,-32
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    8000a898:	9c89                	subw	s1,s1,a0
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    8000a89a:	00a4143b          	sllw	s0,s0,a0
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    8000a89e:	80000537          	lui	a0,0x80000
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    8000a8a2:	00992023          	sw	s1,0(s2)
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    8000a8a6:	9d21                	addw	a0,a0,s0
    8000a8a8:	983fe0ef          	jal	ra,8000922a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
    8000a8ac:	60e2                	ld	ra,24(sp)
    8000a8ae:	6442                	ld	s0,16(sp)
    8000a8b0:	64a2                	ld	s1,8(sp)
    8000a8b2:	6902                	ld	s2,0(sp)
    8000a8b4:	2501                	sext.w	a0,a0
    8000a8b6:	6105                	addi	sp,sp,32
    8000a8b8:	8082                	ret
  return integer_input ? __builtin_clz(integer_input)
    8000a8ba:	02000513          	li	a0,32
    8000a8be:	bfe9                	j	8000a898 <_ZN6tflite13GetReciprocalEiiPi+0x1c>

000000008000a8c0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    8000a8c0:	7171                	addi	sp,sp,-176
    8000a8c2:	e832                	sd	a2,16(sp)
    8000a8c4:	8636                	mv	a2,a3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a8c6:	4194                	lw	a3,0(a1)
inline void Softmax(const SoftmaxParams& params,
    8000a8c8:	f122                	sd	s0,160(sp)
    8000a8ca:	842e                	mv	s0,a1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000a8cc:	36fd                	addiw	a3,a3,-1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a8ce:	85b6                	mv	a1,a3
inline void Softmax(const SoftmaxParams& params,
    8000a8d0:	f4de                	sd	s7,104(sp)
    8000a8d2:	f0e2                	sd	s8,96(sp)
    8000a8d4:	ece6                	sd	s9,88(sp)
  const int32_t input_beta_multiplier = params.input_multiplier;
    8000a8d6:	00852b83          	lw	s7,8(a0) # ffffffff80000008 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000009>
  const int32_t input_beta_left_shift = params.input_left_shift;
    8000a8da:	00c52c03          	lw	s8,12(a0)
  const int diff_min = params.diff_min;
    8000a8de:	01852c83          	lw	s9,24(a0)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a8e2:	8522                	mv	a0,s0
inline void Softmax(const SoftmaxParams& params,
    8000a8e4:	f506                	sd	ra,168(sp)
    8000a8e6:	ed26                	sd	s1,152(sp)
    8000a8e8:	e94a                	sd	s2,144(sp)
    8000a8ea:	e54e                	sd	s3,136(sp)
    8000a8ec:	e152                	sd	s4,128(sp)
    8000a8ee:	e8ea                	sd	s10,80(sp)
    8000a8f0:	e4ee                	sd	s11,72(sp)
    8000a8f2:	8a3a                	mv	s4,a4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a8f4:	ec32                	sd	a2,24(sp)
    8000a8f6:	e436                	sd	a3,8(sp)
inline void Softmax(const SoftmaxParams& params,
    8000a8f8:	fcd6                	sd	s5,120(sp)
    8000a8fa:	f8da                	sd	s6,112(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a8fc:	ff8fe0ef          	jal	ra,800090f4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a900:	66a2                	ld	a3,8(sp)
    8000a902:	6662                	ld	a2,24(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000a904:	e02a                	sd	a0,0(sp)
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a906:	85b6                	mv	a1,a3
    8000a908:	8522                	mv	a0,s0
    8000a90a:	a29fc0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8000a90e:	0005079b          	sext.w	a5,a0
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    8000a912:	6d21                	lui	s10,0x8
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000a914:	84aa                	mv	s1,a0
    8000a916:	e43e                	sd	a5,8(sp)
    8000a918:	4901                	li	s2,0
  for (int i = 0; i < outer_size; ++i) {
    8000a91a:	4981                	li	s3,0
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    8000a91c:	fffd0d93          	addi	s11,s10,-1 # 7fff <CONFIG_MAIN_STACK_SIZE+0x6fff>
  for (int i = 0; i < outer_size; ++i) {
    8000a920:	6782                	ld	a5,0(sp)
    8000a922:	10f9d663          	bge	s3,a5,8000aa2e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    8000a926:	f8000793          	li	a5,-128
    8000a92a:	02f107a3          	sb	a5,47(sp)
    8000a92e:	67c2                	ld	a5,16(sp)
    8000a930:	0009041b          	sext.w	s0,s2
    for (int c = 0; c < depth; ++c) {
    8000a934:	4701                	li	a4,0
    8000a936:	01278ab3          	add	s5,a5,s2
    8000a93a:	87d6                	mv	a5,s5
    8000a93c:	02975263          	bge	a4,s1,8000a960 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      if (__a < __b)
    8000a940:	00078583          	lb	a1,0(a5)
    8000a944:	02f10603          	lb	a2,47(sp)
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000a948:	86be                	mv	a3,a5
    8000a94a:	00b64463          	blt	a2,a1,8000a952 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x92>
      return __a;
    8000a94e:	02f10693          	addi	a3,sp,47
    8000a952:	00068683          	lb	a3,0(a3) # ffffffffffff8000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff8001>
    for (int c = 0; c < depth; ++c) {
    8000a956:	2705                	addiw	a4,a4,1
    8000a958:	0785                	addi	a5,a5,1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000a95a:	02d107a3          	sb	a3,47(sp)
    for (int c = 0; c < depth; ++c) {
    8000a95e:	bff9                	j	8000a93c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    8000a960:	4b01                	li	s6,0
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    8000a962:	4781                	li	a5,0
    for (int c = 0; c < depth; ++c) {
    8000a964:	000b071b          	sext.w	a4,s6
    8000a968:	02975c63          	bge	a4,s1,8000a9a0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xe0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    8000a96c:	016a8733          	add	a4,s5,s6
    8000a970:	00070503          	lb	a0,0(a4)
    8000a974:	02f10703          	lb	a4,47(sp)
      int32_t input_diff =
    8000a978:	40e5073b          	subw	a4,a0,a4
      if (input_diff >= diff_min) {
    8000a97c:	03974063          	blt	a4,s9,8000a99c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xdc>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    8000a980:	85de                	mv	a1,s7
    8000a982:	0187153b          	sllw	a0,a4,s8
    8000a986:	ec3e                	sd	a5,24(sp)
    8000a988:	ff8fe0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    8000a98c:	a6bfe0ef          	jal	ra,800093f6 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    8000a990:	45b1                	li	a1,12
    8000a992:	2501                	sext.w	a0,a0
    8000a994:	82dfe0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    8000a998:	67e2                	ld	a5,24(sp)
    8000a99a:	9fa9                	addw	a5,a5,a0
    for (int c = 0; c < depth; ++c) {
    8000a99c:	0b05                	addi	s6,s6,1
    8000a99e:	b7d9                	j	8000a964 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    8000a9a0:	1810                	addi	a2,sp,48
    8000a9a2:	45b1                	li	a1,12
    8000a9a4:	853e                	mv	a0,a5
    8000a9a6:	ed7ff0ef          	jal	ra,8000a87c <_ZN6tflite13GetReciprocalEiiPi>
    8000a9aa:	0406                	slli	s0,s0,0x1
    8000a9ac:	8b2a                	mv	s6,a0
    8000a9ae:	9452                	add	s0,s0,s4
    8000a9b0:	4701                	li	a4,0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    8000a9b2:	76e1                	lui	a3,0xffff8
    for (int c = 0; c < depth; ++c) {
    8000a9b4:	0007079b          	sext.w	a5,a4
    8000a9b8:	0697d663          	bge	a5,s1,8000aa24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x164>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    8000a9bc:	00ea87b3          	add	a5,s5,a4
    8000a9c0:	00078503          	lb	a0,0(a5)
    8000a9c4:	02f10783          	lb	a5,47(sp)
      int32_t input_diff =
    8000a9c8:	40f507bb          	subw	a5,a0,a5
      if (input_diff >= diff_min) {
    8000a9cc:	0597c963          	blt	a5,s9,8000aa1e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x15e>
    8000a9d0:	0187953b          	sllw	a0,a5,s8
    8000a9d4:	85de                	mv	a1,s7
    8000a9d6:	ec3a                	sd	a4,24(sp)
    8000a9d8:	fa8fe0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    8000a9dc:	a1bfe0ef          	jal	ra,800093f6 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    8000a9e0:	85aa                	mv	a1,a0
            (shifted_scale * exp_in_0).raw(),
    8000a9e2:	855a                	mv	a0,s6
    8000a9e4:	97dfe0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    8000a9e8:	55c2                	lw	a1,48(sp)
    8000a9ea:	2501                	sext.w	a0,a0
    8000a9ec:	25bd                	addiw	a1,a1,15
    8000a9ee:	fd2fe0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
    8000a9f2:	7661                	lui	a2,0xffff8
    8000a9f4:	00a605bb          	addw	a1,a2,a0
        const int32_t shifted_output =
    8000a9f8:	da2e                	sw	a1,52(sp)
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    8000a9fa:	dc6e                	sw	s11,56(sp)
      if (__b < __a)
    8000a9fc:	6762                	ld	a4,24(sp)
      return __a;
    8000a9fe:	185c                	addi	a5,sp,52
      if (__b < __a)
    8000aa00:	76e1                	lui	a3,0xffff8
    8000aa02:	01a5c363          	blt	a1,s10,8000aa08 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x148>
	return __b;
    8000aa06:	183c                	addi	a5,sp,56
      if (__a < __b)
    8000aa08:	438c                	lw	a1,0(a5)
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    8000aa0a:	de36                	sw	a3,60(sp)
    8000aa0c:	00d5d363          	bge	a1,a3,8000aa12 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x152>
	return __b;
    8000aa10:	187c                	addi	a5,sp,60
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    8000aa12:	439c                	lw	a5,0(a5)
    8000aa14:	00f41023          	sh	a5,0(s0)
    for (int c = 0; c < depth; ++c) {
    8000aa18:	0705                	addi	a4,a4,1
    8000aa1a:	0409                	addi	s0,s0,2
    8000aa1c:	bf61                	j	8000a9b4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf4>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    8000aa1e:	00d41023          	sh	a3,0(s0)
    8000aa22:	bfdd                	j	8000aa18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x158>
  for (int i = 0; i < outer_size; ++i) {
    8000aa24:	67a2                	ld	a5,8(sp)
    8000aa26:	2985                	addiw	s3,s3,1
    8000aa28:	00f9093b          	addw	s2,s2,a5
    8000aa2c:	bdd5                	j	8000a920 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x60>
}
    8000aa2e:	70aa                	ld	ra,168(sp)
    8000aa30:	740a                	ld	s0,160(sp)
    8000aa32:	64ea                	ld	s1,152(sp)
    8000aa34:	694a                	ld	s2,144(sp)
    8000aa36:	69aa                	ld	s3,136(sp)
    8000aa38:	6a0a                	ld	s4,128(sp)
    8000aa3a:	7ae6                	ld	s5,120(sp)
    8000aa3c:	7b46                	ld	s6,112(sp)
    8000aa3e:	7ba6                	ld	s7,104(sp)
    8000aa40:	7c06                	ld	s8,96(sp)
    8000aa42:	6ce6                	ld	s9,88(sp)
    8000aa44:	6d46                	ld	s10,80(sp)
    8000aa46:	6da6                	ld	s11,72(sp)
    8000aa48:	614d                	addi	sp,sp,176
    8000aa4a:	8082                	ret

000000008000aa4c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    8000aa4c:	7135                	addi	sp,sp,-160
    8000aa4e:	e14a                	sd	s2,128(sp)
    8000aa50:	8932                	mv	s2,a2
    8000aa52:	8636                	mv	a2,a3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000aa54:	4194                	lw	a3,0(a1)
inline void Softmax(const SoftmaxParams& params,
    8000aa56:	e922                	sd	s0,144(sp)
    8000aa58:	842e                	mv	s0,a1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    8000aa5a:	36fd                	addiw	a3,a3,-1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000aa5c:	85b6                	mv	a1,a3
inline void Softmax(const SoftmaxParams& params,
    8000aa5e:	e8e2                	sd	s8,80(sp)
    8000aa60:	e4e6                	sd	s9,72(sp)
    8000aa62:	e0ea                	sd	s10,64(sp)
  const int32_t input_beta_multiplier = params.input_multiplier;
    8000aa64:	00852c03          	lw	s8,8(a0)
  const int32_t input_beta_left_shift = params.input_left_shift;
    8000aa68:	00c52c83          	lw	s9,12(a0)
  const int diff_min = params.diff_min;
    8000aa6c:	01852d03          	lw	s10,24(a0)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000aa70:	8522                	mv	a0,s0
inline void Softmax(const SoftmaxParams& params,
    8000aa72:	ed06                	sd	ra,152(sp)
    8000aa74:	e526                	sd	s1,136(sp)
    8000aa76:	f8d2                	sd	s4,112(sp)
    8000aa78:	f4d6                	sd	s5,104(sp)
    8000aa7a:	f0da                	sd	s6,96(sp)
    8000aa7c:	fc6e                	sd	s11,56(sp)
    8000aa7e:	8b3a                	mv	s6,a4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000aa80:	e432                	sd	a2,8(sp)
    8000aa82:	e036                	sd	a3,0(sp)
inline void Softmax(const SoftmaxParams& params,
    8000aa84:	fcce                	sd	s3,120(sp)
    8000aa86:	ecde                	sd	s7,88(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000aa88:	e6cfe0ef          	jal	ra,800090f4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000aa8c:	6682                	ld	a3,0(sp)
    8000aa8e:	6622                	ld	a2,8(sp)
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8000aa90:	8aaa                	mv	s5,a0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8000aa92:	85b6                	mv	a1,a3
    8000aa94:	8522                	mv	a0,s0
    8000aa96:	89dfc0ef          	jal	ra,80007332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8000aa9a:	842a                	mv	s0,a0
    8000aa9c:	00050d9b          	sext.w	s11,a0
    8000aaa0:	4481                	li	s1,0
  for (int i = 0; i < outer_size; ++i) {
    8000aaa2:	4a01                	li	s4,0
    8000aaa4:	115a5963          	bge	s4,s5,8000abb6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    8000aaa8:	f8000793          	li	a5,-128
    8000aaac:	009906b3          	add	a3,s2,s1
    8000aab0:	00f10fa3          	sb	a5,31(sp)
    8000aab4:	0004899b          	sext.w	s3,s1
    8000aab8:	87b6                	mv	a5,a3
    for (int c = 0; c < depth; ++c) {
    8000aaba:	4701                	li	a4,0
    8000aabc:	02875263          	bge	a4,s0,8000aae0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      if (__a < __b)
    8000aac0:	00078503          	lb	a0,0(a5)
    8000aac4:	01f10583          	lb	a1,31(sp)
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000aac8:	863e                	mv	a2,a5
    8000aaca:	00a5c463          	blt	a1,a0,8000aad2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
      return __a;
    8000aace:	01f10613          	addi	a2,sp,31
    8000aad2:	00060603          	lb	a2,0(a2) # ffffffffffff8000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffffffff8001>
    for (int c = 0; c < depth; ++c) {
    8000aad6:	2705                	addiw	a4,a4,1
    8000aad8:	0785                	addi	a5,a5,1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8000aada:	00c10fa3          	sb	a2,31(sp)
    for (int c = 0; c < depth; ++c) {
    8000aade:	bff9                	j	8000aabc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
    8000aae0:	4b81                	li	s7,0
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    8000aae2:	4781                	li	a5,0
    for (int c = 0; c < depth; ++c) {
    8000aae4:	000b871b          	sext.w	a4,s7
    8000aae8:	02875e63          	bge	a4,s0,8000ab24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd8>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    8000aaec:	01768733          	add	a4,a3,s7
    8000aaf0:	00070503          	lb	a0,0(a4)
    8000aaf4:	01f10703          	lb	a4,31(sp)
      int32_t input_diff =
    8000aaf8:	40e5073b          	subw	a4,a0,a4
      if (input_diff >= diff_min) {
    8000aafc:	03a74263          	blt	a4,s10,8000ab20 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
    8000ab00:	85e2                	mv	a1,s8
    8000ab02:	0197153b          	sllw	a0,a4,s9
    8000ab06:	e436                	sd	a3,8(sp)
    8000ab08:	e03e                	sd	a5,0(sp)
    8000ab0a:	e76fe0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    8000ab0e:	8e9fe0ef          	jal	ra,800093f6 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    8000ab12:	45b1                	li	a1,12
    8000ab14:	2501                	sext.w	a0,a0
    8000ab16:	eaafe0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    8000ab1a:	6782                	ld	a5,0(sp)
    8000ab1c:	66a2                	ld	a3,8(sp)
    8000ab1e:	9fa9                	addw	a5,a5,a0
    for (int c = 0; c < depth; ++c) {
    8000ab20:	0b85                	addi	s7,s7,1
    8000ab22:	b7c9                	j	8000aae4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x98>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    8000ab24:	1010                	addi	a2,sp,32
    8000ab26:	45b1                	li	a1,12
    8000ab28:	853e                	mv	a0,a5
    8000ab2a:	d53ff0ef          	jal	ra,8000a87c <_ZN6tflite13GetReciprocalEiiPi>
    8000ab2e:	8baa                	mv	s7,a0
    for (int c = 0; c < depth; ++c) {
    8000ab30:	4701                	li	a4,0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    8000ab32:	f8000693          	li	a3,-128
    for (int c = 0; c < depth; ++c) {
    8000ab36:	06875c63          	bge	a4,s0,8000abae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x162>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    8000ab3a:	013907b3          	add	a5,s2,s3
    8000ab3e:	00078503          	lb	a0,0(a5)
    8000ab42:	01f10783          	lb	a5,31(sp)
    8000ab46:	013b0833          	add	a6,s6,s3
      int32_t input_diff =
    8000ab4a:	40f507bb          	subw	a5,a0,a5
      if (input_diff >= diff_min) {
    8000ab4e:	05a7cd63          	blt	a5,s10,8000aba8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x15c>
    8000ab52:	0197953b          	sllw	a0,a5,s9
    8000ab56:	85e2                	mv	a1,s8
    8000ab58:	e442                	sd	a6,8(sp)
    8000ab5a:	e03a                	sd	a4,0(sp)
    8000ab5c:	e24fe0ef          	jal	ra,80009180 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    8000ab60:	897fe0ef          	jal	ra,800093f6 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    8000ab64:	85aa                	mv	a1,a0
            (shifted_scale * exp_in_0).raw(),
    8000ab66:	855e                	mv	a0,s7
    8000ab68:	ff8fe0ef          	jal	ra,80009360 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    8000ab6c:	5582                	lw	a1,32(sp)
    8000ab6e:	2501                	sext.w	a0,a0
    8000ab70:	25dd                	addiw	a1,a1,23
    8000ab72:	e4efe0ef          	jal	ra,800091c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
    8000ab76:	f805059b          	addiw	a1,a0,-128
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    8000ab7a:	07f00613          	li	a2,127
        const int32_t shifted_output =
    8000ab7e:	d22e                	sw	a1,36(sp)
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    8000ab80:	d432                	sw	a2,40(sp)
      if (__b < __a)
    8000ab82:	6702                	ld	a4,0(sp)
    8000ab84:	6822                	ld	a6,8(sp)
      return __a;
    8000ab86:	105c                	addi	a5,sp,36
      if (__b < __a)
    8000ab88:	f8000693          	li	a3,-128
    8000ab8c:	00b65363          	bge	a2,a1,8000ab92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
	return __b;
    8000ab90:	103c                	addi	a5,sp,40
      if (__a < __b)
    8000ab92:	438c                	lw	a1,0(a5)
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    8000ab94:	d636                	sw	a3,44(sp)
    8000ab96:	00d5d363          	bge	a1,a3,8000ab9c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
	return __b;
    8000ab9a:	107c                	addi	a5,sp,44
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    8000ab9c:	439c                	lw	a5,0(a5)
    8000ab9e:	00f80023          	sb	a5,0(a6)
    for (int c = 0; c < depth; ++c) {
    8000aba2:	2705                	addiw	a4,a4,1
    8000aba4:	0985                	addi	s3,s3,1
    8000aba6:	bf41                	j	8000ab36 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xea>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    8000aba8:	00d80023          	sb	a3,0(a6)
    8000abac:	bfdd                	j	8000aba2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x156>
  for (int i = 0; i < outer_size; ++i) {
    8000abae:	2a05                	addiw	s4,s4,1
    8000abb0:	01b484bb          	addw	s1,s1,s11
    8000abb4:	bdc5                	j	8000aaa4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
}
    8000abb6:	60ea                	ld	ra,152(sp)
    8000abb8:	644a                	ld	s0,144(sp)
    8000abba:	64aa                	ld	s1,136(sp)
    8000abbc:	690a                	ld	s2,128(sp)
    8000abbe:	79e6                	ld	s3,120(sp)
    8000abc0:	7a46                	ld	s4,112(sp)
    8000abc2:	7aa6                	ld	s5,104(sp)
    8000abc4:	7b06                	ld	s6,96(sp)
    8000abc6:	6be6                	ld	s7,88(sp)
    8000abc8:	6c46                	ld	s8,80(sp)
    8000abca:	6ca6                	ld	s9,72(sp)
    8000abcc:	6d06                	ld	s10,64(sp)
    8000abce:	7de2                	ld	s11,56(sp)
    8000abd0:	610d                	addi	sp,sp,160
    8000abd2:	8082                	ret

000000008000abd4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    8000abd4:	7155                	addi	sp,sp,-208
    8000abd6:	e586                	sd	ra,200(sp)
    8000abd8:	e1a2                	sd	s0,192(sp)
    8000abda:	fd26                	sd	s1,184(sp)
    8000abdc:	f94a                	sd	s2,176(sp)
    8000abde:	f54e                	sd	s3,168(sp)
  TFLITE_DCHECK(context != nullptr);
    8000abe0:	e119                	bnez	a0,8000abe6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
    8000abe2:	5ad020ef          	jal	ra,8000d98e <abort>
    8000abe6:	892e                	mv	s2,a1
  TFLITE_DCHECK(node != nullptr);
    8000abe8:	dded                	beqz	a1,8000abe2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8000abea:	6198                	ld	a4,0(a1)
    8000abec:	755c                	ld	a5,168(a0)
    8000abee:	89aa                	mv	s3,a0
    8000abf0:	434c                	lw	a1,4(a4)
    8000abf2:	9782                	jalr	a5
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8000abf4:	00893703          	ld	a4,8(s2)
    8000abf8:	0a89b783          	ld	a5,168(s3)
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8000abfc:	84aa                	mv	s1,a0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8000abfe:	434c                	lw	a1,4(a4)
    8000ac00:	854e                	mv	a0,s3
    8000ac02:	9782                	jalr	a5
  TFLITE_DCHECK(node->user_data != nullptr);
    8000ac04:	02093583          	ld	a1,32(s2)
    8000ac08:	842a                	mv	s0,a0
    8000ac0a:	dde1                	beqz	a1,8000abe2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
    8000ac0c:	05000613          	li	a2,80
    8000ac10:	0888                	addi	a0,sp,80
    8000ac12:	a24f70ef          	jal	ra,80001e36 <memcpy>
  switch (input->type) {
    8000ac16:	4888                	lw	a0,16(s1)
    8000ac18:	ff95091b          	addiw	s2,a0,-7
    8000ac1c:	ffd97913          	andi	s2,s2,-3
    8000ac20:	2901                	sext.w	s2,s2
    8000ac22:	04090763          	beqz	s2,8000ac70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9c>
    8000ac26:	4785                	li	a5,1
    8000ac28:	0cf51763          	bne	a0,a5,8000acf6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
          op_data, tflite::micro::GetTensorShape(input),
    8000ac2c:	85a6                	mv	a1,s1
    8000ac2e:	0808                	addi	a0,sp,16
    8000ac30:	c5afe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8000ac34:	6090                	ld	a2,0(s1)
          tflite::micro::GetTensorShape(output),
    8000ac36:	85a2                	mv	a1,s0
    8000ac38:	1808                	addi	a0,sp,48
    8000ac3a:	e432                	sd	a2,8(sp)
    8000ac3c:	c4efe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8000ac40:	6622                	ld	a2,8(sp)
    8000ac42:	c011                	beqz	s0,8000ac46 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
    8000ac44:	6000                	ld	s0,0(s0)
      tflite::reference_ops::Softmax(
    8000ac46:	8722                	mv	a4,s0
    8000ac48:	1814                	addi	a3,sp,48
    8000ac4a:	080c                	addi	a1,sp,16
    8000ac4c:	0888                	addi	a0,sp,80
    8000ac4e:	8fbff0ef          	jal	ra,8000a548 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
    8000ac52:	1808                	addi	a0,sp,48
    8000ac54:	de6fc0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
    8000ac58:	0808                	addi	a0,sp,16
    8000ac5a:	de0fc0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    8000ac5e:	4901                	li	s2,0
}
    8000ac60:	60ae                	ld	ra,200(sp)
    8000ac62:	640e                	ld	s0,192(sp)
    8000ac64:	74ea                	ld	s1,184(sp)
    8000ac66:	79aa                	ld	s3,168(sp)
    8000ac68:	854a                	mv	a0,s2
    8000ac6a:	794a                	ld	s2,176(sp)
    8000ac6c:	6169                	addi	sp,sp,208
    8000ac6e:	8082                	ret
  if (input->type == kTfLiteInt8) {
    8000ac70:	47a5                	li	a5,9
    8000ac72:	04f51e63          	bne	a0,a5,8000acce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfa>
    if (output->type == kTfLiteInt16) {
    8000ac76:	4818                	lw	a4,16(s0)
    8000ac78:	479d                	li	a5,7
          op_data, tflite::micro::GetTensorShape(input),
    8000ac7a:	85a6                	mv	a1,s1
    8000ac7c:	1808                	addi	a0,sp,48
    if (output->type == kTfLiteInt16) {
    8000ac7e:	02f71863          	bne	a4,a5,8000acae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xda>
          op_data, tflite::micro::GetTensorShape(input),
    8000ac82:	c08fe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8000ac86:	6090                	ld	a2,0(s1)
          tflite::micro::GetTensorShape(output),
    8000ac88:	85a2                	mv	a1,s0
    8000ac8a:	0808                	addi	a0,sp,16
    8000ac8c:	e432                	sd	a2,8(sp)
    8000ac8e:	bfcfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    8000ac92:	6018                	ld	a4,0(s0)
    8000ac94:	6622                	ld	a2,8(sp)
    8000ac96:	0814                	addi	a3,sp,16
    8000ac98:	180c                	addi	a1,sp,48
    8000ac9a:	0888                	addi	a0,sp,80
    8000ac9c:	c25ff0ef          	jal	ra,8000a8c0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
    8000aca0:	0808                	addi	a0,sp,16
    8000aca2:	d98fc0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
    8000aca6:	1808                	addi	a0,sp,48
    8000aca8:	d92fc0ef          	jal	ra,8000723a <_ZN6tflite12RuntimeShapeD1Ev>
    8000acac:	bf55                	j	8000ac60 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
          op_data, tflite::micro::GetTensorShape(input),
    8000acae:	bdcfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    8000acb2:	6090                	ld	a2,0(s1)
          tflite::micro::GetTensorShape(output),
    8000acb4:	85a2                	mv	a1,s0
    8000acb6:	0808                	addi	a0,sp,16
    8000acb8:	e432                	sd	a2,8(sp)
    8000acba:	bd0fe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    8000acbe:	6018                	ld	a4,0(s0)
    8000acc0:	6622                	ld	a2,8(sp)
    8000acc2:	0814                	addi	a3,sp,16
    8000acc4:	180c                	addi	a1,sp,48
    8000acc6:	0888                	addi	a0,sp,80
    8000acc8:	d85ff0ef          	jal	ra,8000aa4c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    8000accc:	bfd1                	j	8000aca0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
        op_data, tflite::micro::GetTensorShape(input),
    8000acce:	85a6                	mv	a1,s1
    8000acd0:	1808                	addi	a0,sp,48
    8000acd2:	bb8fe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    8000acd6:	6090                	ld	a2,0(s1)
        tflite::micro::GetTensorShape(output),
    8000acd8:	85a2                	mv	a1,s0
    8000acda:	0808                	addi	a0,sp,16
    8000acdc:	e432                	sd	a2,8(sp)
    8000acde:	bacfe0ef          	jal	ra,8000908a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8000ace2:	6622                	ld	a2,8(sp)
    8000ace4:	c011                	beqz	s0,8000ace8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
    8000ace6:	6000                	ld	s0,0(s0)
    tflite::reference_ops::SoftmaxInt16(
    8000ace8:	8722                	mv	a4,s0
    8000acea:	0814                	addi	a3,sp,16
    8000acec:	180c                	addi	a1,sp,48
    8000acee:	0888                	addi	a0,sp,80
    8000acf0:	98fff0ef          	jal	ra,8000a67e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
    8000acf4:	b775                	j	8000aca0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8000acf6:	0289b403          	ld	s0,40(s3)
    8000acfa:	e26fb0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000acfe:	4894                	lw	a3,16(s1)
    8000ad00:	862a                	mv	a2,a0
    8000ad02:	00082597          	auipc	a1,0x82
    8000ad06:	27658593          	addi	a1,a1,630 # 8008cf78 <CSWTCH.21+0x818>
    8000ad0a:	854e                	mv	a0,s3
    8000ad0c:	9402                	jalr	s0
      return kTfLiteError;
    8000ad0e:	4905                	li	s2,1
    8000ad10:	bf81                	j	8000ac60 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>

000000008000ad12 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    8000ad12:	1141                	addi	sp,sp,-16
    8000ad14:	e022                	sd	s0,0(sp)
    8000ad16:	00004417          	auipc	s0,0x4
    8000ad1a:	55640413          	addi	s0,s0,1366 # 8000f26c <_global_impure_ptr+0x1c>
    8000ad1e:	400c                	lw	a1,0(s0)
    8000ad20:	e406                	sd	ra,8(sp)
    8000ad22:	ab0f60ef          	jal	ra,80000fd2 <__addsf3>
    8000ad26:	85aa                	mv	a1,a0
    8000ad28:	4008                	lw	a0,0(s0)
    8000ad2a:	deaf60ef          	jal	ra,80001314 <__divsf3>
    8000ad2e:	60a2                	ld	ra,8(sp)
    8000ad30:	6402                	ld	s0,0(sp)
    8000ad32:	0141                	addi	sp,sp,16
    8000ad34:	8082                	ret

000000008000ad36 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    8000ad36:	16f0206f          	j	8000d6a4 <expf>

000000008000ad3a <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
    8000ad3a:	7171                	addi	sp,sp,-176
    8000ad3c:	f122                	sd	s0,160(sp)
    8000ad3e:	842a                	mv	s0,a0
  float step = (max - min) / (num - 1);
    8000ad40:	8532                	mv	a0,a2
                    const int num) {
    8000ad42:	f506                	sd	ra,168(sp)
    8000ad44:	e036                	sd	a3,0(sp)
    8000ad46:	e43a                	sd	a4,8(sp)
    8000ad48:	ed26                	sd	s1,152(sp)
    8000ad4a:	e94a                	sd	s2,144(sp)
    8000ad4c:	e54e                	sd	s3,136(sp)
    8000ad4e:	8932                	mv	s2,a2
    8000ad50:	e152                	sd	s4,128(sp)
    8000ad52:	fcd6                	sd	s5,120(sp)
    8000ad54:	8a2e                	mv	s4,a1
    8000ad56:	f4de                	sd	s7,104(sp)
    8000ad58:	f0e2                	sd	s8,96(sp)
    8000ad5a:	ece6                	sd	s9,88(sp)
    8000ad5c:	e8ea                	sd	s10,80(sp)
    8000ad5e:	e4ee                	sd	s11,72(sp)
  float step = (max - min) / (num - 1);
    8000ad60:	fff70d1b          	addiw	s10,a4,-1
                    const int num) {
    8000ad64:	f8da                	sd	s6,112(sp)
  float step = (max - min) / (num - 1);
    8000ad66:	af7f60ef          	jal	ra,8000185c <__subsf3>
    8000ad6a:	84aa                	mv	s1,a0
    8000ad6c:	856a                	mv	a0,s10
    8000ad6e:	eb1f60ef          	jal	ra,80001c1e <__floatsisf>
    8000ad72:	85aa                	mv	a1,a0
    8000ad74:	8526                	mv	a0,s1
    8000ad76:	d9ef60ef          	jal	ra,80001314 <__divsf3>
  float half_step = step / 2.0f;
    8000ad7a:	00004597          	auipc	a1,0x4
    8000ad7e:	5265a583          	lw	a1,1318(a1) # 8000f2a0 <_ZN6tflite20kPoolingOutputTensorE+0x4>
  float step = (max - min) / (num - 1);
    8000ad82:	89aa                	mv	s3,a0
  float half_step = step / 2.0f;
    8000ad84:	8eff60ef          	jal	ra,80001672 <__mulsf3>
    8000ad88:	6b82                	ld	s7,0(sp)
    8000ad8a:	ca2a                	sw	a0,20(sp)
  for (int i = 0; i < num - 1; i++) {
    8000ad8c:	4481                	li	s1,0
    8000ad8e:	00004c97          	auipc	s9,0x4
    8000ad92:	51ac8c93          	addi	s9,s9,1306 # 8000f2a8 <_ZN6tflite20kPoolingOutputTensorE+0xc>
    8000ad96:	00004c17          	auipc	s8,0x4
    8000ad9a:	516c0c13          	addi	s8,s8,1302 # 8000f2ac <_ZN6tflite20kPoolingOutputTensorE+0x10>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    8000ad9e:	00004a97          	auipc	s5,0x4
    8000ada2:	506aaa83          	lw	s5,1286(s5) # 8000f2a4 <_ZN6tflite20kPoolingOutputTensorE+0x8>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8000ada6:	00004d97          	auipc	s11,0x4
    8000adaa:	4fadad83          	lw	s11,1274(s11) # 8000f2a0 <_ZN6tflite20kPoolingOutputTensorE+0x4>
  for (int i = 0; i < num - 1; i++) {
    8000adae:	13a4d063          	bge	s1,s10,8000aece <_ZN6tflite7gen_lutEPFffEffPsi+0x194>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    8000adb2:	8526                	mv	a0,s1
    8000adb4:	e6bf60ef          	jal	ra,80001c1e <__floatsisf>
    8000adb8:	85ce                	mv	a1,s3
    8000adba:	8b9f60ef          	jal	ra,80001672 <__mulsf3>
    8000adbe:	85d2                	mv	a1,s4
    8000adc0:	a12f60ef          	jal	ra,80000fd2 <__addsf3>
    8000adc4:	8b2a                	mv	s6,a0
    8000adc6:	9402                	jalr	s0
    8000adc8:	85d6                	mv	a1,s5
    8000adca:	8a9f60ef          	jal	ra,80001672 <__mulsf3>
    8000adce:	f21f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000add2:	00d020ef          	jal	ra,8000d5de <round>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8000add6:	2485                	addiw	s1,s1,1
    8000add8:	f42a                	sd	a0,40(sp)
    8000adda:	8526                	mv	a0,s1
    8000addc:	e43f60ef          	jal	ra,80001c1e <__floatsisf>
    8000ade0:	85ce                	mv	a1,s3
    8000ade2:	891f60ef          	jal	ra,80001672 <__mulsf3>
    8000ade6:	85d2                	mv	a1,s4
    8000ade8:	9eaf60ef          	jal	ra,80000fd2 <__addsf3>
    8000adec:	9402                	jalr	s0
    8000adee:	cc2a                	sw	a0,24(sp)
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    8000adf0:	855a                	mv	a0,s6
    8000adf2:	9402                	jalr	s0
    8000adf4:	85d6                	mv	a1,s5
    8000adf6:	87df60ef          	jal	ra,80001672 <__mulsf3>
    8000adfa:	ef5f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000adfe:	7e0020ef          	jal	ra,8000d5de <round>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8000ae02:	47e2                	lw	a5,24(sp)
    8000ae04:	85d6                	mv	a1,s5
    8000ae06:	f02a                	sd	a0,32(sp)
    8000ae08:	853e                	mv	a0,a5
    8000ae0a:	869f60ef          	jal	ra,80001672 <__mulsf3>
    8000ae0e:	7682                	ld	a3,32(sp)
    8000ae10:	cc2a                	sw	a0,24(sp)
    8000ae12:	8536                	mv	a0,a3
    8000ae14:	f47f60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000ae18:	47e2                	lw	a5,24(sp)
    8000ae1a:	85aa                	mv	a1,a0
    8000ae1c:	853e                	mv	a0,a5
    8000ae1e:	9b4f60ef          	jal	ra,80000fd2 <__addsf3>
    8000ae22:	85ee                	mv	a1,s11
    8000ae24:	84ff60ef          	jal	ra,80001672 <__mulsf3>
    8000ae28:	ec7f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000ae2c:	7b2020ef          	jal	ra,8000d5de <round>
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    8000ae30:	45d2                	lw	a1,20(sp)
    8000ae32:	f02a                	sd	a0,32(sp)
    8000ae34:	855a                	mv	a0,s6
    8000ae36:	99cf60ef          	jal	ra,80000fd2 <__addsf3>
    8000ae3a:	9402                	jalr	s0
    8000ae3c:	85d6                	mv	a1,s5
    8000ae3e:	835f60ef          	jal	ra,80001672 <__mulsf3>
    8000ae42:	eadf60ef          	jal	ra,80001cee <__extendsfdf2>
    8000ae46:	798020ef          	jal	ra,8000d5de <round>
    8000ae4a:	7682                	ld	a3,32(sp)
    8000ae4c:	ec2a                	sd	a0,24(sp)
    8000ae4e:	8536                	mv	a0,a3
    8000ae50:	f0bf60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000ae54:	67e2                	ld	a5,24(sp)
    8000ae56:	8b2a                	mv	s6,a0
    8000ae58:	853e                	mv	a0,a5
    8000ae5a:	f01f60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000ae5e:	85aa                	mv	a1,a0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    8000ae60:	855a                	mv	a0,s6
    8000ae62:	9fbf60ef          	jal	ra,8000185c <__subsf3>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    8000ae66:	85ee                	mv	a1,s11
    8000ae68:	80bf60ef          	jal	ra,80001672 <__mulsf3>
    8000ae6c:	e83f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000ae70:	76e020ef          	jal	ra,8000d5de <round>
    8000ae74:	7722                	ld	a4,40(sp)
    8000ae76:	ec2a                	sd	a0,24(sp)
    8000ae78:	853a                	mv	a0,a4
    8000ae7a:	ee1f60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000ae7e:	67e2                	ld	a5,24(sp)
    8000ae80:	8b2a                	mv	s6,a0
    8000ae82:	853e                	mv	a0,a5
    8000ae84:	ed7f60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000ae88:	85aa                	mv	a1,a0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    8000ae8a:	855a                	mv	a0,s6
    8000ae8c:	9d1f60ef          	jal	ra,8000185c <__subsf3>
    8000ae90:	000ca583          	lw	a1,0(s9)
    8000ae94:	da2a                	sw	a0,52(sp)
    8000ae96:	03810b13          	addi	s6,sp,56
    8000ae9a:	dc2e                	sw	a1,56(sp)
      if (__a < __b)
    8000ae9c:	f52f60ef          	jal	ra,800015ee <__lesf2>
    8000aea0:	00054463          	bltz	a0,8000aea8 <_ZN6tflite7gen_lutEPFffEffPsi+0x16e>
      return __a;
    8000aea4:	03410b13          	addi	s6,sp,52
                               32767.0f);
    8000aea8:	000c2583          	lw	a1,0(s8)
      if (__b < __a)
    8000aeac:	000b2503          	lw	a0,0(s6) # ffffffff80000000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000001>
    8000aeb0:	de2e                	sw	a1,60(sp)
    8000aeb2:	eb8f60ef          	jal	ra,8000156a <__gesf2>
    8000aeb6:	00a05463          	blez	a0,8000aebe <_ZN6tflite7gen_lutEPFffEffPsi+0x184>
	return __b;
    8000aeba:	03c10b13          	addi	s6,sp,60
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    8000aebe:	000b2503          	lw	a0,0(s6)
    8000aec2:	0b89                	addi	s7,s7,2
    8000aec4:	ceff60ef          	jal	ra,80001bb2 <__fixsfsi>
    8000aec8:	feab9f23          	sh	a0,-2(s7) # ffffffff7ffffffe <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff7fffffff>
  for (int i = 0; i < num - 1; i++) {
    8000aecc:	b5cd                	j	8000adae <_ZN6tflite7gen_lutEPFffEffPsi+0x74>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    8000aece:	854a                	mv	a0,s2
    8000aed0:	9402                	jalr	s0
    8000aed2:	00004597          	auipc	a1,0x4
    8000aed6:	3d25a583          	lw	a1,978(a1) # 8000f2a4 <_ZN6tflite20kPoolingOutputTensorE+0x8>
    8000aeda:	f98f60ef          	jal	ra,80001672 <__mulsf3>
    8000aede:	e11f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000aee2:	6fc020ef          	jal	ra,8000d5de <round>
    8000aee6:	e75f60ef          	jal	ra,80001d5a <__truncdfsf2>
    8000aeea:	000ca583          	lw	a1,0(s9)
    8000aeee:	da2a                	sw	a0,52(sp)
	return __b;
    8000aef0:	1824                	addi	s1,sp,56
    8000aef2:	dc2e                	sw	a1,56(sp)
      if (__a < __b)
    8000aef4:	efaf60ef          	jal	ra,800015ee <__lesf2>
    8000aef8:	00054363          	bltz	a0,8000aefe <_ZN6tflite7gen_lutEPFffEffPsi+0x1c4>
      return __a;
    8000aefc:	1844                	addi	s1,sp,52
    8000aefe:	000c2583          	lw	a1,0(s8)
      if (__b < __a)
    8000af02:	4088                	lw	a0,0(s1)
    8000af04:	de2e                	sw	a1,60(sp)
    8000af06:	e64f60ef          	jal	ra,8000156a <__gesf2>
    8000af0a:	00a05363          	blez	a0,8000af10 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d6>
	return __b;
    8000af0e:	1864                	addi	s1,sp,60
  table[num - 1] = std::min<float>(
    8000af10:	67a2                	ld	a5,8(sp)
    8000af12:	4088                	lw	a0,0(s1)
    8000af14:	00179413          	slli	s0,a5,0x1
    8000af18:	6782                	ld	a5,0(sp)
    8000af1a:	943e                	add	s0,s0,a5
    8000af1c:	c97f60ef          	jal	ra,80001bb2 <__fixsfsi>
}
    8000af20:	70aa                	ld	ra,168(sp)
  table[num - 1] = std::min<float>(
    8000af22:	fea41f23          	sh	a0,-2(s0)
}
    8000af26:	740a                	ld	s0,160(sp)
    8000af28:	64ea                	ld	s1,152(sp)
    8000af2a:	694a                	ld	s2,144(sp)
    8000af2c:	69aa                	ld	s3,136(sp)
    8000af2e:	6a0a                	ld	s4,128(sp)
    8000af30:	7ae6                	ld	s5,120(sp)
    8000af32:	7b46                	ld	s6,112(sp)
    8000af34:	7ba6                	ld	s7,104(sp)
    8000af36:	7c06                	ld	s8,96(sp)
    8000af38:	6ce6                	ld	s9,88(sp)
    8000af3a:	6d46                	ld	s10,80(sp)
    8000af3c:	6da6                	ld	s11,72(sp)
    8000af3e:	614d                	addi	sp,sp,176
    8000af40:	8082                	ret

000000008000af42 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcm>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    8000af42:	793c                	ld	a5,112(a0)
    8000af44:	e789                	bnez	a5,8000af4e <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcm+0xc>
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
    8000af46:	1141                	addi	sp,sp,-16
    8000af48:	e406                	sd	ra,8(sp)
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    8000af4a:	245020ef          	jal	ra,8000d98e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
    8000af4e:	05000593          	li	a1,80
    8000af52:	8782                	jr	a5

000000008000af54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    8000af54:	619c                	ld	a5,0(a1)
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    8000af56:	711d                	addi	sp,sp,-96
    8000af58:	e8a2                	sd	s0,80(sp)
    8000af5a:	439c                	lw	a5,0(a5)
    8000af5c:	ec86                	sd	ra,88(sp)
    8000af5e:	e4a6                	sd	s1,72(sp)
    8000af60:	e0ca                	sd	s2,64(sp)
    8000af62:	fc4e                	sd	s3,56(sp)
    8000af64:	f852                	sd	s4,48(sp)
    8000af66:	f456                	sd	s5,40(sp)
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    8000af68:	4705                	li	a4,1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    8000af6a:	842a                	mv	s0,a0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    8000af6c:	04e78463          	beq	a5,a4,8000afb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x60>
    8000af70:	02853303          	ld	t1,40(a0)
    8000af74:	883e                	mv	a6,a5
    8000af76:	4885                	li	a7,1
    8000af78:	00082797          	auipc	a5,0x82
    8000af7c:	50078793          	addi	a5,a5,1280 # 8008d478 <CSWTCH.21+0xd18>
    8000af80:	00082717          	auipc	a4,0x82
    8000af84:	47870713          	addi	a4,a4,1144 # 8008d3f8 <CSWTCH.21+0xc98>
    8000af88:	05d00693          	li	a3,93
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    8000af8c:	00082617          	auipc	a2,0x82
    8000af90:	47c60613          	addi	a2,a2,1148 # 8008d408 <CSWTCH.21+0xca8>
    8000af94:	00082597          	auipc	a1,0x82
    8000af98:	95c58593          	addi	a1,a1,-1700 # 8008c8f0 <CSWTCH.21+0x190>
    8000af9c:	9302                	jalr	t1
    8000af9e:	4485                	li	s1,1
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    8000afa0:	60e6                	ld	ra,88(sp)
    8000afa2:	6446                	ld	s0,80(sp)
    8000afa4:	6906                	ld	s2,64(sp)
    8000afa6:	79e2                	ld	s3,56(sp)
    8000afa8:	7a42                	ld	s4,48(sp)
    8000afaa:	7aa2                	ld	s5,40(sp)
    8000afac:	8526                	mv	a0,s1
    8000afae:	64a6                	ld	s1,72(sp)
    8000afb0:	6125                	addi	sp,sp,96
    8000afb2:	8082                	ret
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    8000afb4:	6598                	ld	a4,8(a1)
    8000afb6:	84ae                	mv	s1,a1
    8000afb8:	00072803          	lw	a6,0(a4)
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    8000afbc:	02f80063          	beq	a6,a5,8000afdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    8000afc0:	02853303          	ld	t1,40(a0)
    8000afc4:	4885                	li	a7,1
    8000afc6:	00082797          	auipc	a5,0x82
    8000afca:	4b278793          	addi	a5,a5,1202 # 8008d478 <CSWTCH.21+0xd18>
    8000afce:	00082717          	auipc	a4,0x82
    8000afd2:	3e270713          	addi	a4,a4,994 # 8008d3b0 <CSWTCH.21+0xc50>
    8000afd6:	05e00693          	li	a3,94
    8000afda:	bf4d                	j	8000af8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38>
  const TfLiteTensor* input = GetInput(context, node, 0);
    8000afdc:	4601                	li	a2,0
    8000afde:	d98fb0ef          	jal	ra,80006576 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    8000afe2:	8a2a                	mv	s4,a0
  TF_LITE_ENSURE(context, input != nullptr);
    8000afe4:	e11d                	bnez	a0,8000b00a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
    8000afe6:	741c                	ld	a5,40(s0)
    8000afe8:	00082717          	auipc	a4,0x82
    8000afec:	04870713          	addi	a4,a4,72 # 8008d030 <CSWTCH.21+0x8d0>
    8000aff0:	06000693          	li	a3,96
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    8000aff4:	00082617          	auipc	a2,0x82
    8000aff8:	41460613          	addi	a2,a2,1044 # 8008d408 <CSWTCH.21+0xca8>
    8000affc:	00081597          	auipc	a1,0x81
    8000b000:	4fc58593          	addi	a1,a1,1276 # 8008c4f8 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names+0xdf8>
    8000b004:	8522                	mv	a0,s0
    8000b006:	9782                	jalr	a5
    8000b008:	bf59                	j	8000af9e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    8000b00a:	691c                	ld	a5,16(a0)
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    8000b00c:	439c                	lw	a5,0(a5)
    8000b00e:	00f04a63          	bgtz	a5,8000b022 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    8000b012:	741c                	ld	a5,40(s0)
    8000b014:	00082717          	auipc	a4,0x82
    8000b018:	44c70713          	addi	a4,a4,1100 # 8008d460 <CSWTCH.21+0xd00>
    8000b01c:	06100693          	li	a3,97
    8000b020:	bfd1                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  TfLiteTensor* output = GetOutput(context, node, 0);
    8000b022:	4601                	li	a2,0
    8000b024:	85a6                	mv	a1,s1
    8000b026:	8522                	mv	a0,s0
    8000b028:	d52fb0ef          	jal	ra,8000657a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    8000b02c:	892a                	mv	s2,a0
  TF_LITE_ENSURE(context, output != nullptr);
    8000b02e:	e909                	bnez	a0,8000b040 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
    8000b030:	741c                	ld	a5,40(s0)
    8000b032:	00082717          	auipc	a4,0x82
    8000b036:	02e70713          	addi	a4,a4,46 # 8008d060 <CSWTCH.21+0x900>
    8000b03a:	06300693          	li	a3,99
    8000b03e:	bf5d                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    8000b040:	0204b983          	ld	s3,32(s1) # ffffffff80000020 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000021>
    8000b044:	00099a63          	bnez	s3,8000b058 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
    8000b048:	741c                	ld	a5,40(s0)
    8000b04a:	00082717          	auipc	a4,0x82
    8000b04e:	43670713          	addi	a4,a4,1078 # 8008d480 <CSWTCH.21+0xd20>
    8000b052:	06500693          	li	a3,101
    8000b056:	bf79                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  if (input->type == kTfLiteInt16) {
    8000b058:	000a2703          	lw	a4,0(s4)
    8000b05c:	479d                	li	a5,7
    8000b05e:	04f71263          	bne	a4,a5,8000b0a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    8000b062:	783c                	ld	a5,112(s0)
    8000b064:	40200593          	li	a1,1026
    8000b068:	8522                	mv	a0,s0
    8000b06a:	9782                	jalr	a5
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    8000b06c:	e909                	bnez	a0,8000b07e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12a>
    8000b06e:	741c                	ld	a5,40(s0)
    8000b070:	00082717          	auipc	a4,0x82
    8000b074:	43070713          	addi	a4,a4,1072 # 8008d4a0 <CSWTCH.21+0xd40>
    8000b078:	06b00693          	li	a3,107
    8000b07c:	bfa5                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    8000b07e:	783c                	ld	a5,112(s0)
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    8000b080:	02a9b823          	sd	a0,48(s3)
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    8000b084:	40200593          	li	a1,1026
    8000b088:	8522                	mv	a0,s0
    8000b08a:	9782                	jalr	a5
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    8000b08c:	e909                	bnez	a0,8000b09e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    8000b08e:	741c                	ld	a5,40(s0)
    8000b090:	00082717          	auipc	a4,0x82
    8000b094:	42870713          	addi	a4,a4,1064 # 8008d4b8 <CSWTCH.21+0xd58>
    8000b098:	06f00693          	li	a3,111
    8000b09c:	bfa1                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    op_data->one_over_one_plus_x_lut =
    8000b09e:	02a9bc23          	sd	a0,56(s3)
  if (output->type == kTfLiteInt16) {
    8000b0a2:	00092883          	lw	a7,0(s2)
    8000b0a6:	479d                	li	a5,7
    TF_LITE_ENSURE(context,
    8000b0a8:	000a2803          	lw	a6,0(s4)
  if (output->type == kTfLiteInt16) {
    8000b0ac:	00f89f63          	bne	a7,a5,8000b0ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x176>
    TF_LITE_ENSURE(context,
    8000b0b0:	47a5                	li	a5,9
    8000b0b2:	0af80e63          	beq	a6,a5,8000b16e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21a>
    8000b0b6:	05180263          	beq	a6,a7,8000b0fa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1a6>
    8000b0ba:	741c                	ld	a5,40(s0)
    8000b0bc:	00082717          	auipc	a4,0x82
    8000b0c0:	8ac70713          	addi	a4,a4,-1876 # 8008c968 <CSWTCH.21+0x208>
    8000b0c4:	07500693          	li	a3,117
    8000b0c8:	b735                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    8000b0ca:	0b088263          	beq	a7,a6,8000b16e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21a>
    8000b0ce:	02843303          	ld	t1,40(s0)
    8000b0d2:	00082797          	auipc	a5,0x82
    8000b0d6:	db678793          	addi	a5,a5,-586 # 8008ce88 <CSWTCH.21+0x728>
    8000b0da:	00082717          	auipc	a4,0x82
    8000b0de:	dbe70713          	addi	a4,a4,-578 # 8008ce98 <CSWTCH.21+0x738>
    8000b0e2:	07800693          	li	a3,120
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    8000b0e6:	00082617          	auipc	a2,0x82
    8000b0ea:	32260613          	addi	a2,a2,802 # 8008d408 <CSWTCH.21+0xca8>
    8000b0ee:	00082597          	auipc	a1,0x82
    8000b0f2:	80258593          	addi	a1,a1,-2046 # 8008c8f0 <CSWTCH.21+0x190>
    8000b0f6:	8522                	mv	a0,s0
    8000b0f8:	b555                	j	8000af9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    8000b0fa:	01c92803          	lw	a6,28(s2)
    8000b0fe:	02080063          	beqz	a6,8000b11e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
    8000b102:	02843303          	ld	t1,40(s0)
    8000b106:	4881                	li	a7,0
    8000b108:	00082797          	auipc	a5,0x82
    8000b10c:	c6878793          	addi	a5,a5,-920 # 8008cd70 <CSWTCH.21+0x610>
    8000b110:	00082717          	auipc	a4,0x82
    8000b114:	3d070713          	addi	a4,a4,976 # 8008d4e0 <CSWTCH.21+0xd80>
    8000b118:	07d00693          	li	a3,125
    8000b11c:	b7e9                	j	8000b0e6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x192>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    8000b11e:	0309b683          	ld	a3,48(s3)
    8000b122:	20100713          	li	a4,513
    8000b126:	00000613          	li	a2,0
    8000b12a:	00004597          	auipc	a1,0x4
    8000b12e:	1865a583          	lw	a1,390(a1) # 8000f2b0 <_ZN6tflite20kPoolingOutputTensorE+0x14>
    8000b132:	00000517          	auipc	a0,0x0
    8000b136:	c0450513          	addi	a0,a0,-1020 # 8000ad36 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    8000b13a:	c01ff0ef          	jal	ra,8000ad3a <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    8000b13e:	0389b683          	ld	a3,56(s3)
    8000b142:	20100713          	li	a4,513
    8000b146:	00004617          	auipc	a2,0x4
    8000b14a:	12662603          	lw	a2,294(a2) # 8000f26c <_global_impure_ptr+0x1c>
    8000b14e:	00000593          	li	a1,0
    8000b152:	00000517          	auipc	a0,0x0
    8000b156:	bc050513          	addi	a0,a0,-1088 # 8000ad12 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    8000b15a:	be1ff0ef          	jal	ra,8000ad3a <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    8000b15e:	01c92783          	lw	a5,28(s2)
    8000b162:	00f9ae23          	sw	a5,28(s3)
    op_data->scale = output->params.scale;
    8000b166:	01892783          	lw	a5,24(s2)
    8000b16a:	02f9a023          	sw	a5,32(s3)
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    8000b16e:	0284ba83          	ld	s5,40(s1)
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    8000b172:	000a2483          	lw	s1,0(s4)
    8000b176:	47a5                	li	a5,9
    8000b178:	0af48163          	beq	s1,a5,8000b21a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c6>
    8000b17c:	479d                	li	a5,7
    8000b17e:	22f49d63          	bne	s1,a5,8000b3b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    8000b182:	01c92803          	lw	a6,28(s2)
    8000b186:	02080063          	beqz	a6,8000b1a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x252>
    8000b18a:	02843303          	ld	t1,40(s0)
    8000b18e:	4881                	li	a7,0
    8000b190:	00082797          	auipc	a5,0x82
    8000b194:	be078793          	addi	a5,a5,-1056 # 8008cd70 <CSWTCH.21+0x610>
    8000b198:	00082717          	auipc	a4,0x82
    8000b19c:	34870713          	addi	a4,a4,840 # 8008d4e0 <CSWTCH.21+0xd80>
    8000b1a0:	02500693          	li	a3,37
    8000b1a4:	b789                	j	8000b0e6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    8000b1a6:	01892483          	lw	s1,24(s2)
    8000b1aa:	00004917          	auipc	s2,0x4
    8000b1ae:	10a92903          	lw	s2,266(s2) # 8000f2b4 <_ZN6tflite20kPoolingOutputTensorE+0x18>
    8000b1b2:	85ca                	mv	a1,s2
    8000b1b4:	8526                	mv	a0,s1
    8000b1b6:	bb4f60ef          	jal	ra,8000156a <__gesf2>
    8000b1ba:	04a05d63          	blez	a0,8000b214 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>
    8000b1be:	85ca                	mv	a1,s2
    8000b1c0:	8526                	mv	a0,s1
    8000b1c2:	e9af60ef          	jal	ra,8000185c <__subsf3>
    8000b1c6:	00004597          	auipc	a1,0x4
    8000b1ca:	0f25a583          	lw	a1,242(a1) # 8000f2b8 <_ZN6tflite20kPoolingOutputTensorE+0x1c>
    8000b1ce:	b9cf60ef          	jal	ra,8000156a <__gesf2>
    8000b1d2:	16a05263          	blez	a0,8000b336 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3e2>
    8000b1d6:	8526                	mv	a0,s1
    8000b1d8:	b17f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b1dc:	02843303          	ld	t1,40(s0)
    8000b1e0:	00004897          	auipc	a7,0x4
    8000b1e4:	0308b883          	ld	a7,48(a7) # 8000f210 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x50>
    8000b1e8:	882a                	mv	a6,a0
    8000b1ea:	00082797          	auipc	a5,0x82
    8000b1ee:	31678793          	addi	a5,a5,790 # 8008d500 <CSWTCH.21+0xda0>
    8000b1f2:	00082717          	auipc	a4,0x82
    8000b1f6:	31e70713          	addi	a4,a4,798 # 8008d510 <CSWTCH.21+0xdb0>
    8000b1fa:	02600693          	li	a3,38
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    8000b1fe:	00082617          	auipc	a2,0x82
    8000b202:	20a60613          	addi	a2,a2,522 # 8008d408 <CSWTCH.21+0xca8>
    8000b206:	00082597          	auipc	a1,0x82
    8000b20a:	32258593          	addi	a1,a1,802 # 8008d528 <CSWTCH.21+0xdc8>
    8000b20e:	8522                	mv	a0,s0
    8000b210:	9302                	jalr	t1
    8000b212:	b371                	j	8000af9e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    8000b214:	85a6                	mv	a1,s1
    8000b216:	854a                	mv	a0,s2
    8000b218:	b76d                	j	8000b1c2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26e>
      if (output->type == kTfLiteInt16) {
    8000b21a:	00092503          	lw	a0,0(s2)
    8000b21e:	479d                	li	a5,7
    8000b220:	08f51563          	bne	a0,a5,8000b2aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x356>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    8000b224:	01c92803          	lw	a6,28(s2)
    8000b228:	77e1                	lui	a5,0xffff8
    8000b22a:	02f80063          	beq	a6,a5,8000b24a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    8000b22e:	02843303          	ld	t1,40(s0)
    8000b232:	78e1                	lui	a7,0xffff8
    8000b234:	00082797          	auipc	a5,0x82
    8000b238:	31478793          	addi	a5,a5,788 # 8008d548 <CSWTCH.21+0xde8>
    8000b23c:	00082717          	auipc	a4,0x82
    8000b240:	2a470713          	addi	a4,a4,676 # 8008d4e0 <CSWTCH.21+0xd80>
    8000b244:	02b00693          	li	a3,43
    8000b248:	bd79                	j	8000b0e6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x192>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    8000b24a:	01892483          	lw	s1,24(s2)
    8000b24e:	00004917          	auipc	s2,0x4
    8000b252:	06e92903          	lw	s2,110(s2) # 8000f2bc <_ZN6tflite20kPoolingOutputTensorE+0x20>
    8000b256:	85ca                	mv	a1,s2
    8000b258:	8526                	mv	a0,s1
    8000b25a:	b10f60ef          	jal	ra,8000156a <__gesf2>
    8000b25e:	04a05363          	blez	a0,8000b2a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x350>
    8000b262:	85ca                	mv	a1,s2
    8000b264:	8526                	mv	a0,s1
    8000b266:	df6f60ef          	jal	ra,8000185c <__subsf3>
    8000b26a:	00004597          	auipc	a1,0x4
    8000b26e:	0565a583          	lw	a1,86(a1) # 8000f2c0 <_ZN6tflite20kPoolingOutputTensorE+0x24>
    8000b272:	af8f60ef          	jal	ra,8000156a <__gesf2>
    8000b276:	0ea05e63          	blez	a0,8000b372 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x41e>
    8000b27a:	8526                	mv	a0,s1
    8000b27c:	a73f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b280:	02843303          	ld	t1,40(s0)
    8000b284:	00004897          	auipc	a7,0x4
    8000b288:	f948b883          	ld	a7,-108(a7) # 8000f218 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x58>
    8000b28c:	882a                	mv	a6,a0
    8000b28e:	00082797          	auipc	a5,0x82
    8000b292:	2c278793          	addi	a5,a5,706 # 8008d550 <CSWTCH.21+0xdf0>
    8000b296:	00082717          	auipc	a4,0x82
    8000b29a:	27a70713          	addi	a4,a4,634 # 8008d510 <CSWTCH.21+0xdb0>
    8000b29e:	02c00693          	li	a3,44
    8000b2a2:	bfb1                	j	8000b1fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2aa>
    8000b2a4:	85a6                	mv	a1,s1
    8000b2a6:	854a                	mv	a0,s2
    8000b2a8:	bf7d                	j	8000b266 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x312>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    8000b2aa:	04950063          	beq	a0,s1,8000b2ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x396>
    8000b2ae:	7404                	ld	s1,40(s0)
    8000b2b0:	870fb0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b2b4:	e02a                	sd	a0,0(sp)
    8000b2b6:	4525                	li	a0,9
    8000b2b8:	868fb0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b2bc:	6802                	ld	a6,0(sp)
    8000b2be:	88aa                	mv	a7,a0
    8000b2c0:	00081797          	auipc	a5,0x81
    8000b2c4:	6e878793          	addi	a5,a5,1768 # 8008c9a8 <CSWTCH.21+0x248>
    8000b2c8:	00082717          	auipc	a4,0x82
    8000b2cc:	bc070713          	addi	a4,a4,-1088 # 8008ce88 <CSWTCH.21+0x728>
    8000b2d0:	02f00693          	li	a3,47
    8000b2d4:	00082617          	auipc	a2,0x82
    8000b2d8:	13460613          	addi	a2,a2,308 # 8008d408 <CSWTCH.21+0xca8>
    8000b2dc:	00082597          	auipc	a1,0x82
    8000b2e0:	05458593          	addi	a1,a1,84 # 8008d330 <CSWTCH.21+0xbd0>
    8000b2e4:	8522                	mv	a0,s0
    8000b2e6:	9482                	jalr	s1
    8000b2e8:	b95d                	j	8000af9e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    8000b2ea:	01c92803          	lw	a6,28(s2)
    8000b2ee:	f8000793          	li	a5,-128
    8000b2f2:	02f80163          	beq	a6,a5,8000b314 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3c0>
    8000b2f6:	02843303          	ld	t1,40(s0)
    8000b2fa:	f8000893          	li	a7,-128
    8000b2fe:	00082797          	auipc	a5,0x82
    8000b302:	26278793          	addi	a5,a5,610 # 8008d560 <CSWTCH.21+0xe00>
    8000b306:	00082717          	auipc	a4,0x82
    8000b30a:	1da70713          	addi	a4,a4,474 # 8008d4e0 <CSWTCH.21+0xd80>
    8000b30e:	03000693          	li	a3,48
    8000b312:	bbd1                	j	8000b0e6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x192>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    8000b314:	01892503          	lw	a0,24(s2)
    8000b318:	00004597          	auipc	a1,0x4
    8000b31c:	fac5a583          	lw	a1,-84(a1) # 8000f2c4 <_ZN6tflite20kPoolingOutputTensorE+0x28>
    8000b320:	9dcf60ef          	jal	ra,800014fc <__eqsf2>
    8000b324:	c539                	beqz	a0,8000b372 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x41e>
    8000b326:	741c                	ld	a5,40(s0)
    8000b328:	00082717          	auipc	a4,0x82
    8000b32c:	24070713          	addi	a4,a4,576 # 8008d568 <CSWTCH.21+0xe08>
    8000b330:	03100693          	li	a3,49
    8000b334:	b1c1                	j	8000aff4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
          static_cast<double>(input->params.scale) *
    8000b336:	018a2503          	lw	a0,24(s4)
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    8000b33a:	00898493          	addi	s1,s3,8
          static_cast<double>(input->params.scale) *
    8000b33e:	9b1f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b342:	842a                	mv	s0,a0
          static_cast<double>(params->beta) /
    8000b344:	000aa503          	lw	a0,0(s5)
    8000b348:	9a7f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b34c:	85aa                	mv	a1,a0
          static_cast<double>(input->params.scale) *
    8000b34e:	8522                	mv	a0,s0
    8000b350:	d46f50ef          	jal	ra,80000896 <__muldf3>
      double input_scale_beta_rescale =
    8000b354:	00004597          	auipc	a1,0x4
    8000b358:	ecc5b583          	ld	a1,-308(a1) # 8000f220 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x60>
    8000b35c:	99ef50ef          	jal	ra,800004fa <__divdf3>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    8000b360:	0870                	addi	a2,sp,28
    8000b362:	85a6                	mv	a1,s1
    8000b364:	fe3fa0ef          	jal	ra,80006346 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    8000b368:	47f2                	lw	a5,28(sp)
    8000b36a:	00f9a623          	sw	a5,12(s3)
  return kTfLiteOk;
    8000b36e:	4481                	li	s1,0
    8000b370:	b905                	j	8000afa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
      tflite::PreprocessSoftmaxScaling(
    8000b372:	018a2503          	lw	a0,24(s4)
    8000b376:	00898693          	addi	a3,s3,8
    8000b37a:	e436                	sd	a3,8(sp)
    8000b37c:	973f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b380:	e02a                	sd	a0,0(sp)
    8000b382:	000aa503          	lw	a0,0(s5)
    8000b386:	969f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b38a:	66a2                	ld	a3,8(sp)
    8000b38c:	6582                	ld	a1,0(sp)
    8000b38e:	0878                	addi	a4,sp,28
    8000b390:	4615                	li	a2,5
    8000b392:	86afb0ef          	jal	ra,800063fc <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    8000b396:	45f2                	lw	a1,28(sp)
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    8000b398:	467d                	li	a2,31
    8000b39a:	4515                	li	a0,5
      op_data->input_left_shift = input_left_shift;
    8000b39c:	00b9a623          	sw	a1,12(s3)
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    8000b3a0:	8b8fb0ef          	jal	ra,80006458 <_ZN6tflite20CalculateInputRadiusEiii>
    8000b3a4:	ac1f50ef          	jal	ra,80000e64 <__floatsidf>
      op_data->diff_min =
    8000b3a8:	57fd                	li	a5,-1
    8000b3aa:	17fe                	slli	a5,a5,0x3f
    8000b3ac:	8d3d                	xor	a0,a0,a5
    8000b3ae:	a69f50ef          	jal	ra,80000e16 <__fixdfsi>
    8000b3b2:	00a9ac23          	sw	a0,24(s3)
    8000b3b6:	bf65                	j	8000b36e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x41a>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    8000b3b8:	4785                	li	a5,1
    8000b3ba:	04f48263          	beq	s1,a5,8000b3fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    8000b3be:	8526                	mv	a0,s1
    8000b3c0:	02843903          	ld	s2,40(s0)
    8000b3c4:	f5dfa0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b3c8:	e02a                	sd	a0,0(sp)
    8000b3ca:	4505                	li	a0,1
    8000b3cc:	f55fa0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b3d0:	6802                	ld	a6,0(sp)
    8000b3d2:	88aa                	mv	a7,a0
    8000b3d4:	00082797          	auipc	a5,0x82
    8000b3d8:	1bc78793          	addi	a5,a5,444 # 8008d590 <CSWTCH.21+0xe30>
    8000b3dc:	00082717          	auipc	a4,0x82
    8000b3e0:	abc70713          	addi	a4,a4,-1348 # 8008ce98 <CSWTCH.21+0x738>
    8000b3e4:	04e00693          	li	a3,78
    8000b3e8:	00082617          	auipc	a2,0x82
    8000b3ec:	02060613          	addi	a2,a2,32 # 8008d408 <CSWTCH.21+0xca8>
    8000b3f0:	00082597          	auipc	a1,0x82
    8000b3f4:	f4058593          	addi	a1,a1,-192 # 8008d330 <CSWTCH.21+0xbd0>
    8000b3f8:	8522                	mv	a0,s0
    8000b3fa:	9902                	jalr	s2
    8000b3fc:	b64d                	j	8000af9e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    8000b3fe:	00092503          	lw	a0,0(s2)
    8000b402:	04950163          	beq	a0,s1,8000b444 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f0>
    8000b406:	02843903          	ld	s2,40(s0)
    8000b40a:	f17fa0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b40e:	e02a                	sd	a0,0(sp)
    8000b410:	4505                	li	a0,1
    8000b412:	f0ffa0ef          	jal	ra,80006320 <TfLiteTypeGetName>
    8000b416:	6802                	ld	a6,0(sp)
    8000b418:	88aa                	mv	a7,a0
    8000b41a:	00082797          	auipc	a5,0x82
    8000b41e:	17678793          	addi	a5,a5,374 # 8008d590 <CSWTCH.21+0xe30>
    8000b422:	00082717          	auipc	a4,0x82
    8000b426:	a6670713          	addi	a4,a4,-1434 # 8008ce88 <CSWTCH.21+0x728>
    8000b42a:	04f00693          	li	a3,79
    8000b42e:	00082617          	auipc	a2,0x82
    8000b432:	fda60613          	addi	a2,a2,-38 # 8008d408 <CSWTCH.21+0xca8>
    8000b436:	00082597          	auipc	a1,0x82
    8000b43a:	efa58593          	addi	a1,a1,-262 # 8008d330 <CSWTCH.21+0xbd0>
    8000b43e:	8522                	mv	a0,s0
    8000b440:	9902                	jalr	s2
    8000b442:	beb9                	j	8000afa0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
    op_data->beta = static_cast<double>(params->beta);
    8000b444:	000aa503          	lw	a0,0(s5)
    8000b448:	8a7f60ef          	jal	ra,80001cee <__extendsfdf2>
    8000b44c:	00a9b023          	sd	a0,0(s3)
    8000b450:	bf39                	j	8000b36e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x41a>

000000008000b452 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    8000b452:	8082                	ret

000000008000b454 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8000b454:	00351713          	slli	a4,a0,0x3
    8000b458:	2505                	addiw	a0,a0,1
    8000b45a:	00082797          	auipc	a5,0x82
    8000b45e:	14678793          	addi	a5,a5,326 # 8008d5a0 <levels.0>
    8000b462:	050e                	slli	a0,a0,0x3
{
    8000b464:	7179                	addi	sp,sp,-48
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8000b466:	973e                	add	a4,a4,a5
    8000b468:	953e                	add	a0,a0,a5
{
    8000b46a:	f022                	sd	s0,32(sp)
    8000b46c:	e84a                	sd	s2,16(sp)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8000b46e:	6300                	ld	s0,0(a4)
    8000b470:	00053903          	ld	s2,0(a0)
{
    8000b474:	e44e                	sd	s3,8(sp)
    8000b476:	f406                	sd	ra,40(sp)
    8000b478:	ec26                	sd	s1,24(sp)
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    8000b47a:	0ff00993          	li	s3,255
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8000b47e:	01246963          	bltu	s0,s2,8000b490 <z_sys_init_run_level+0x3c>
			}
			dev->state->initialized = true;
		}
	}
}
    8000b482:	70a2                	ld	ra,40(sp)
    8000b484:	7402                	ld	s0,32(sp)
    8000b486:	64e2                	ld	s1,24(sp)
    8000b488:	6942                	ld	s2,16(sp)
    8000b48a:	69a2                	ld	s3,8(sp)
    8000b48c:	6145                	addi	sp,sp,48
    8000b48e:	8082                	ret
		const struct device *dev = entry->dev;
    8000b490:	6404                	ld	s1,8(s0)
		int rc = entry->init(dev);
    8000b492:	601c                	ld	a5,0(s0)
    8000b494:	8526                	mv	a0,s1
    8000b496:	9782                	jalr	a5
		if (dev != NULL) {
    8000b498:	c48d                	beqz	s1,8000b4c2 <z_sys_init_run_level+0x6e>
				dev->state->init_res = rc;
    8000b49a:	6c9c                	ld	a5,24(s1)
			if (rc != 0) {
    8000b49c:	cd09                	beqz	a0,8000b4b6 <z_sys_init_run_level+0x62>
				if (rc < 0) {
    8000b49e:	41f5571b          	sraiw	a4,a0,0x1f
    8000b4a2:	8d39                	xor	a0,a0,a4
    8000b4a4:	40e5073b          	subw	a4,a0,a4
    8000b4a8:	853a                	mv	a0,a4
				dev->state->init_res = rc;
    8000b4aa:	00e9d463          	bge	s3,a4,8000b4b2 <z_sys_init_run_level+0x5e>
    8000b4ae:	0ff00513          	li	a0,255
    8000b4b2:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
    8000b4b6:	0007d703          	lhu	a4,0(a5)
    8000b4ba:	10076713          	ori	a4,a4,256
    8000b4be:	00e79023          	sh	a4,0(a5)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8000b4c2:	0441                	addi	s0,s0,16
    8000b4c4:	bf6d                	j	8000b47e <z_sys_init_run_level+0x2a>

000000008000b4c6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8000b4c6:	c911                	beqz	a0,8000b4da <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8000b4c8:	6d1c                	ld	a5,24(a0)
    8000b4ca:	4388                	lw	a0,0(a5)
    8000b4cc:	1ff57513          	andi	a0,a0,511
    8000b4d0:	f0050513          	addi	a0,a0,-256
    8000b4d4:	00153513          	seqz	a0,a0
    8000b4d8:	8082                	ret
		return false;
    8000b4da:	4501                	li	a0,0
}
    8000b4dc:	8082                	ret

000000008000b4de <z_impl_z_errno>:
}
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
    8000b4de:	1141                	addi	sp,sp,-16
    8000b4e0:	e406                	sd	ra,8(sp)
	return z_impl_z_current_get();
    8000b4e2:	183000ef          	jal	ra,8000be64 <z_impl_z_current_get>
	return &_current->errno_var;
}
    8000b4e6:	60a2                	ld	ra,8(sp)
    8000b4e8:	0e050513          	addi	a0,a0,224
    8000b4ec:	0141                	addi	sp,sp,16
    8000b4ee:	8082                	ret

000000008000b4f0 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000b4f0:	300477f3          	csrrci	a5,mstatus,8
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    8000b4f4:	a001                	j	8000b4f4 <arch_system_halt+0x4>

000000008000b4f6 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    8000b4f6:	1141                	addi	sp,sp,-16
    8000b4f8:	e406                	sd	ra,8(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    8000b4fa:	ff7ff0ef          	jal	ra,8000b4f0 <arch_system_halt>

000000008000b4fe <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8000b4fe:	7179                	addi	sp,sp,-48
    8000b500:	e84a                	sd	s2,16(sp)
    8000b502:	f406                	sd	ra,40(sp)
    8000b504:	f022                	sd	s0,32(sp)
    8000b506:	ec26                	sd	s1,24(sp)
    8000b508:	892a                	mv	s2,a0
    8000b50a:	e42e                	sd	a1,8(sp)
    8000b50c:	300474f3          	csrrci	s1,mstatus,8
    8000b510:	155000ef          	jal	ra,8000be64 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8000b514:	65a2                	ld	a1,8(sp)
    8000b516:	842a                	mv	s0,a0
    8000b518:	854a                	mv	a0,s2
    8000b51a:	fddff0ef          	jal	ra,8000b4f6 <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
    8000b51e:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000b520:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
    8000b524:	8522                	mv	a0,s0
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8000b526:	7402                	ld	s0,32(sp)
    8000b528:	70a2                	ld	ra,40(sp)
    8000b52a:	64e2                	ld	s1,24(sp)
    8000b52c:	6942                	ld	s2,16(sp)
    8000b52e:	6145                	addi	sp,sp,48
    8000b530:	0050106f          	j	8000cd34 <z_impl_k_thread_abort>

000000008000b534 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    8000b534:	1141                	addi	sp,sp,-16
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8000b536:	4785                	li	a5,1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8000b538:	4509                	li	a0,2
{
    8000b53a:	e406                	sd	ra,8(sp)
	z_sys_post_kernel = true;
    8000b53c:	00082717          	auipc	a4,0x82
    8000b540:	5ef70223          	sb	a5,1508(a4) # 8008db20 <z_sys_post_kernel>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8000b544:	f11ff0ef          	jal	ra,8000b454 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8000b548:	671010ef          	jal	ra,8000d3b8 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    8000b54c:	bedf70ef          	jal	ra,80003138 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8000b550:	450d                	li	a0,3
    8000b552:	f03ff0ef          	jal	ra,8000b454 <z_sys_init_run_level>

	z_init_static_threads();
    8000b556:	334000ef          	jal	ra,8000b88a <z_init_static_threads>
	__ASSERT_NO_MSG(arch_mem_coherent(&_kernel));
#endif

#ifdef CONFIG_SMP
	if (!IS_ENABLED(CONFIG_SMP_BOOT_DELAY)) {
		z_smp_init();
    8000b55a:	22d010ef          	jal	ra,8000cf86 <z_smp_init>
	}
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
    8000b55e:	4511                	li	a0,4
    8000b560:	ef5ff0ef          	jal	ra,8000b454 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    8000b564:	936f70ef          	jal	ra,8000269a <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8000b568:	0009c717          	auipc	a4,0x9c
    8000b56c:	ea070713          	addi	a4,a4,-352 # 800a7408 <z_main_thread>
    8000b570:	01874783          	lbu	a5,24(a4)
    8000b574:	9bf9                	andi	a5,a5,-2
    8000b576:	00f70c23          	sb	a5,24(a4)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8000b57a:	60a2                	ld	ra,8(sp)
    8000b57c:	0141                	addi	sp,sp,16
    8000b57e:	8082                	ret

000000008000b580 <z_early_memset>:

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    8000b580:	8cdf606f          	j	80001e4c <memset>

000000008000b584 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8000b584:	00082517          	auipc	a0,0x82
    8000b588:	4ac50513          	addi	a0,a0,1196 # 8008da30 <_ZGVZ5setupvE17micro_op_resolver>
    8000b58c:	0009c617          	auipc	a2,0x9c
    8000b590:	f9460613          	addi	a2,a2,-108 # 800a7520 <_ZN12_GLOBAL__N_116loop1_stack_areaE>
    8000b594:	8e09                	sub	a2,a2,a0
    8000b596:	4581                	li	a1,0
    8000b598:	fe9ff06f          	j	8000b580 <z_early_memset>

000000008000b59c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8000b59c:	7139                	addi	sp,sp,-64
    8000b59e:	f426                	sd	s1,40(sp)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8000b5a0:	02800713          	li	a4,40
	struct k_thread *thread = &z_idle_threads[i];
    8000b5a4:	11800493          	li	s1,280
    8000b5a8:	029507b3          	mul	a5,a0,s1
{
    8000b5ac:	f04a                	sd	s2,32(sp)
	struct k_thread *thread = &z_idle_threads[i];
    8000b5ae:	0009c497          	auipc	s1,0x9c
    8000b5b2:	c2a48493          	addi	s1,s1,-982 # 800a71d8 <z_idle_threads>
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8000b5b6:	0009c917          	auipc	s2,0x9c
    8000b5ba:	bba90913          	addi	s2,s2,-1094 # 800a7170 <_kernel>
{
    8000b5be:	f822                	sd	s0,48(sp)
    8000b5c0:	ec4e                	sd	s3,24(sp)
    8000b5c2:	842a                	mv	s0,a0
	z_setup_new_thread(thread, stack,
    8000b5c4:	4985                	li	s3,1
	k_thread_stack_t *stack = z_idle_stacks[i];
    8000b5c6:	00a51593          	slli	a1,a0,0xa
	z_setup_new_thread(thread, stack,
    8000b5ca:	e04e                	sd	s3,0(sp)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8000b5cc:	02e50733          	mul	a4,a0,a4
	struct k_thread *thread = &z_idle_threads[i];
    8000b5d0:	94be                	add	s1,s1,a5
	z_setup_new_thread(thread, stack,
    8000b5d2:	0009e517          	auipc	a0,0x9e
    8000b5d6:	71e50513          	addi	a0,a0,1822 # 800a9cf0 <z_idle_stacks>
    8000b5da:	e402                	sd	zero,8(sp)
    8000b5dc:	4781                	li	a5,0
    8000b5de:	95aa                	add	a1,a1,a0
    8000b5e0:	48bd                	li	a7,15
    8000b5e2:	8526                	mv	a0,s1
    8000b5e4:	4801                	li	a6,0
    8000b5e6:	00000697          	auipc	a3,0x0
    8000b5ea:	34c68693          	addi	a3,a3,844 # 8000b932 <idle>
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8000b5ee:	993a                	add	s2,s2,a4
	z_setup_new_thread(thread, stack,
    8000b5f0:	874a                	mv	a4,s2
    8000b5f2:	40000613          	li	a2,1024
{
    8000b5f6:	fc06                	sd	ra,56(sp)
	z_setup_new_thread(thread, stack,
    8000b5f8:	1d2000ef          	jal	ra,8000b7ca <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8000b5fc:	0194c783          	lbu	a5,25(s1)
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    8000b600:	02890223          	sb	s0,36(s2)
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8000b604:	0405                	addi	s0,s0,1
    8000b606:	9bed                	andi	a5,a5,-5
    8000b608:	00f48ca3          	sb	a5,25(s1)
    8000b60c:	042e                	slli	s0,s0,0xb
    8000b60e:	0009f797          	auipc	a5,0x9f
    8000b612:	ee278793          	addi	a5,a5,-286 # 800aa4f0 <z_interrupt_stacks>
    8000b616:	943e                	add	s0,s0,a5
	_kernel.cpus[id].irq_stack =
    8000b618:	00893423          	sd	s0,8(s2)
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    8000b61c:	70e2                	ld	ra,56(sp)
    8000b61e:	7442                	ld	s0,48(sp)
	thread->base.is_idle = 1U;
    8000b620:	03348023          	sb	s3,32(s1)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8000b624:	00993c23          	sd	s1,24(s2)
}
    8000b628:	69e2                	ld	s3,24(sp)
    8000b62a:	74a2                	ld	s1,40(sp)
    8000b62c:	7902                	ld	s2,32(sp)
    8000b62e:	6121                	addi	sp,sp,64
    8000b630:	8082                	ret

000000008000b632 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8000b632:	7149                	addi	sp,sp,-368
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    8000b634:	10100793          	li	a5,257
    8000b638:	f686                	sd	ra,360(sp)
    8000b63a:	f2a2                	sd	s0,352(sp)
    8000b63c:	eea6                	sd	s1,344(sp)
    8000b63e:	eaca                	sd	s2,336(sp)
    8000b640:	e6ce                	sd	s3,328(sp)
    8000b642:	e2d2                	sd	s4,320(sp)
    8000b644:	fe56                	sd	s5,312(sp)
    8000b646:	02f11823          	sh	a5,48(sp)
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    8000b64a:	e202                	sd	zero,256(sp)
	dummy_thread->stack_info.size = 0U;
    8000b64c:	e602                	sd	zero,264(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    8000b64e:	f602                	sd	zero,296(sp)
    8000b650:	f14027f3          	csrr	a5,mhartid
#endif

	_current_cpu->current = dummy_thread;
    8000b654:	1782                	slli	a5,a5,0x20
    8000b656:	02800713          	li	a4,40
    8000b65a:	9381                	srli	a5,a5,0x20
    8000b65c:	02e787b3          	mul	a5,a5,a4
    8000b660:	0009c917          	auipc	s2,0x9c
    8000b664:	b1090913          	addi	s2,s2,-1264 # 800a7170 <_kernel>
    8000b668:	0838                	addi	a4,sp,24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8000b66a:	0009c417          	auipc	s0,0x9c
    8000b66e:	d9e40413          	addi	s0,s0,-610 # 800a7408 <z_main_thread>
    8000b672:	97ca                	add	a5,a5,s2
    8000b674:	eb98                	sd	a4,16(a5)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8000b676:	dddff0ef          	jal	ra,8000b452 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8000b67a:	4501                	li	a0,0
    8000b67c:	dd9ff0ef          	jal	ra,8000b454 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8000b680:	4505                	li	a0,1
    8000b682:	dd3ff0ef          	jal	ra,8000b454 <z_sys_init_run_level>
	z_sched_init();
    8000b686:	0c3000ef          	jal	ra,8000bf48 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8000b68a:	00082797          	auipc	a5,0x82
    8000b68e:	f4678793          	addi	a5,a5,-186 # 8008d5d0 <levels.0+0x30>
    8000b692:	e43e                	sd	a5,8(sp)
    8000b694:	4785                	li	a5,1
    8000b696:	4881                	li	a7,0
    8000b698:	4801                	li	a6,0
    8000b69a:	4701                	li	a4,0
    8000b69c:	00000697          	auipc	a3,0x0
    8000b6a0:	e9868693          	addi	a3,a3,-360 # 8000b534 <bg_thread_main>
    8000b6a4:	6605                	lui	a2,0x1
    8000b6a6:	0009d597          	auipc	a1,0x9d
    8000b6aa:	64a58593          	addi	a1,a1,1610 # 800a8cf0 <z_main_stack>
    8000b6ae:	e03e                	sd	a5,0(sp)
    8000b6b0:	8522                	mv	a0,s0
    8000b6b2:	4781                	li	a5,0
    8000b6b4:	116000ef          	jal	ra,8000b7ca <z_setup_new_thread>
    8000b6b8:	01944783          	lbu	a5,25(s0)
	z_ready_thread(&z_main_thread);
    8000b6bc:	8522                	mv	a0,s0
    8000b6be:	9bed                	andi	a5,a5,-5
    8000b6c0:	00f40ca3          	sb	a5,25(s0)
    8000b6c4:	461000ef          	jal	ra,8000c324 <z_ready_thread>
	z_init_cpu(0);
    8000b6c8:	4501                	li	a0,0
    8000b6ca:	ed3ff0ef          	jal	ra,8000b59c <z_init_cpu>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000b6ce:	300479f3          	csrrci	s3,mstatus,8
	return z_impl_z_current_get();
    8000b6d2:	792000ef          	jal	ra,8000be64 <z_impl_z_current_get>
    8000b6d6:	84aa                	mv	s1,a0
	z_check_stack_sentinel();
    8000b6d8:	0be000ef          	jal	ra,8000b796 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
    8000b6dc:	57d5                	li	a5,-11
    8000b6de:	10f4a023          	sw	a5,256(s1)
    8000b6e2:	300477f3          	csrrci	a5,mstatus,8
    8000b6e6:	00082a97          	auipc	s5,0x82
    8000b6ea:	3d2a8a93          	addi	s5,s5,978 # 8008dab8 <sched_spinlock>
    8000b6ee:	4705                	li	a4,1
    8000b6f0:	8a56                	mv	s4,s5
    8000b6f2:	0f50000f          	fence	iorw,ow
    8000b6f6:	140ab7af          	lr.d.aq	a5,(s5)
    8000b6fa:	e781                	bnez	a5,8000b702 <z_cstart+0xd0>
    8000b6fc:	1ceab6af          	sc.d.aq	a3,a4,(s5)
    8000b700:	fafd                	bnez	a3,8000b6f6 <z_cstart+0xc4>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000b702:	fbe5                	bnez	a5,8000b6f2 <z_cstart+0xc0>
	new_thread = z_swap_next_thread();
    8000b704:	579000ef          	jal	ra,8000c47c <z_swap_next_thread>
    8000b708:	842a                	mv	s0,a0
	if (new_thread != old_thread) {
    8000b70a:	08950063          	beq	a0,s1,8000b78a <z_cstart+0x158>
    8000b70e:	f1402773          	csrr	a4,mhartid
		_current_cpu->swap_ok = 0;
    8000b712:	1702                	slli	a4,a4,0x20
    8000b714:	02800693          	li	a3,40
    8000b718:	9301                	srli	a4,a4,0x20
    8000b71a:	02d70733          	mul	a4,a4,a3
    8000b71e:	974a                	add	a4,a4,s2
    8000b720:	020702a3          	sb	zero,37(a4)
    8000b724:	f14027f3          	csrr	a5,mhartid
		new_thread->base.cpu = arch_curr_cpu()->id;
    8000b728:	1782                	slli	a5,a5,0x20
    8000b72a:	9381                	srli	a5,a5,0x20
    8000b72c:	02d787b3          	mul	a5,a5,a3
    8000b730:	97ca                	add	a5,a5,s2
    8000b732:	0247c783          	lbu	a5,36(a5)
    8000b736:	02f500a3          	sb	a5,33(a0)
	while (*shp == NULL) {
    8000b73a:	10843783          	ld	a5,264(s0)
    8000b73e:	c3b1                	beqz	a5,8000b782 <z_cstart+0x150>
    8000b740:	f14027f3          	csrr	a5,mhartid
		_current_cpu->current = new_thread;
    8000b744:	1782                	slli	a5,a5,0x20
    8000b746:	02800713          	li	a4,40
    8000b74a:	9381                	srli	a5,a5,0x20
    8000b74c:	02e787b3          	mul	a5,a5,a4
		z_reset_time_slice(new_thread);
    8000b750:	8522                	mv	a0,s0
		_current_cpu->current = new_thread;
    8000b752:	993e                	add	s2,s2,a5
    8000b754:	00893823          	sd	s0,16(s2)
		z_reset_time_slice(new_thread);
    8000b758:	652000ef          	jal	ra,8000bdaa <z_reset_time_slice>
		z_requeue_current(old_thread);
    8000b75c:	8526                	mv	a0,s1
    8000b75e:	5f6000ef          	jal	ra,8000bd54 <z_requeue_current>
		void *newsh = new_thread->switch_handle;
    8000b762:	10843503          	ld	a0,264(s0)
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000b766:	4781                	li	a5,0
			new_thread->switch_handle = NULL;
    8000b768:	10043423          	sd	zero,264(s0)
    8000b76c:	0f50000f          	fence	iorw,ow
    8000b770:	0cfa37af          	amoswap.d.aq	a5,a5,(s4)
	extern void z_riscv_switch(struct k_thread *new, struct k_thread *old);
	struct k_thread *new = switch_to;
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);

	z_riscv_switch(new, old);
    8000b774:	85a6                	mv	a1,s1
    8000b776:	f52f60ef          	jal	ra,80001ec8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
    8000b77a:	0089f993          	andi	s3,s3,8
	__asm__ volatile ("csrs mstatus, %0"
    8000b77e:	3009a073          	csrs	mstatus,s3
	z_impl_k_busy_wait(usec_to_wait);
    8000b782:	4505                	li	a0,1
    8000b784:	3ed010ef          	jal	ra,8000d370 <z_impl_k_busy_wait>
}
    8000b788:	bf4d                	j	8000b73a <z_cstart+0x108>
    8000b78a:	4781                	li	a5,0
    8000b78c:	0f50000f          	fence	iorw,ow
    8000b790:	0cfab7af          	amoswap.d.aq	a5,a5,(s5)
    8000b794:	b7dd                	j	8000b77a <z_cstart+0x148>

000000008000b796 <z_check_stack_sentinel>:
 *
 * If the check fails, the thread will be terminated appropriately through
 * the system fatal error handler.
 */
void z_check_stack_sentinel(void)
{
    8000b796:	1141                	addi	sp,sp,-16
    8000b798:	e406                	sd	ra,8(sp)
	return z_impl_z_current_get();
    8000b79a:	6ca000ef          	jal	ra,8000be64 <z_impl_z_current_get>
	uint32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
    8000b79e:	01954783          	lbu	a5,25(a0)
    8000b7a2:	8b85                	andi	a5,a5,1
    8000b7a4:	ef91                	bnez	a5,8000b7c0 <z_check_stack_sentinel+0x2a>
		return;
	}

	stack = (uint32_t *)_current->stack_info.start;
    8000b7a6:	7578                	ld	a4,232(a0)
	if (*stack != STACK_SENTINEL) {
    8000b7a8:	f0f0f7b7          	lui	a5,0xf0f0f
    8000b7ac:	0f078793          	addi	a5,a5,240 # fffffffff0f0f0f0 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7ffffffff0f0f0f1>
    8000b7b0:	4314                	lw	a3,0(a4)
    8000b7b2:	00f68763          	beq	a3,a5,8000b7c0 <z_check_stack_sentinel+0x2a>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
    8000b7b6:	c31c                	sw	a5,0(a4)
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register ulong_t a0 __asm__ ("a0") = arg1;
    8000b7b8:	4509                	li	a0,2
	register ulong_t a7 __asm__ ("a7") = call_id;
    8000b7ba:	4881                	li	a7,0

	__asm__ volatile ("ecall"
    8000b7bc:	00000073          	ecall
		z_except_reason(K_ERR_STACK_CHK_FAIL);
	}
}
    8000b7c0:	60a2                	ld	ra,8(sp)
    8000b7c2:	0141                	addi	sp,sp,16
    8000b7c4:	8082                	ret

000000008000b7c6 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
    8000b7c6:	08c0106f          	j	8000c852 <z_sched_start>

000000008000b7ca <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    8000b7ca:	1101                	addi	sp,sp,-32
    8000b7cc:	e822                	sd	s0,16(sp)
    8000b7ce:	e426                	sd	s1,8(sp)
    8000b7d0:	ec06                	sd	ra,24(sp)
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8000b7d2:	0d050e13          	addi	t3,a0,208
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    8000b7d6:	0dc53823          	sd	t3,208(a0)
	list->tail = (sys_dnode_t *)list;
    8000b7da:	0dc53c23          	sd	t3,216(a0)
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8000b7de:	5e02                	lw	t3,32(sp)
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8000b7e0:	063d                	addi	a2,a2,15
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    8000b7e2:	01150d23          	sb	a7,26(a0)
	thread_base->user_options = (uint8_t)options;
    8000b7e6:	01c50c23          	sb	t3,24(a0)
	thread_base->thread_state = (uint8_t)initial_state;
    8000b7ea:	4e11                	li	t3,4
    8000b7ec:	01c50ca3          	sb	t3,25(a0)
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
    8000b7f0:	f0f0fe37          	lui	t3,0xf0f0f
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8000b7f4:	ff067893          	andi	a7,a2,-16
	thread_base->pended_on = NULL;
    8000b7f8:	00053823          	sd	zero,16(a0)

	thread_base->sched_locked = 0U;
    8000b7fc:	00050da3          	sb	zero,27(a0)

#ifdef CONFIG_SMP
	thread_base->is_idle = 0;
    8000b800:	02050023          	sb	zero,32(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    8000b804:	02053823          	sd	zero,48(a0)
	node->prev = NULL;
    8000b808:	02053c23          	sd	zero,56(a0)
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
    8000b80c:	0f0e0e13          	addi	t3,t3,240 # fffffffff0f0f0f0 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7ffffffff0f0f0f1>
    8000b810:	01c5a023          	sw	t3,0(a1)
	stack_ptr = (char *)stack + stack_obj_size;
    8000b814:	011584b3          	add	s1,a1,a7
{
    8000b818:	842a                	mv	s0,a0
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    8000b81a:	f56c                	sd	a1,232(a0)
	new_thread->stack_info.size = stack_buf_size;
    8000b81c:	0f153823          	sd	a7,240(a0)
	new_thread->stack_info.delta = delta;
    8000b820:	0e053c23          	sd	zero,248(a0)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8000b824:	8626                	mv	a2,s1
    8000b826:	a9ff70ef          	jal	ra,800032c4 <arch_new_thread>
	new_thread->init_data = NULL;
    8000b82a:	0c043423          	sd	zero,200(s0)
    8000b82e:	636000ef          	jal	ra,8000be64 <z_impl_z_current_get>
	new_thread->resource_pool = _current->resource_pool;
    8000b832:	11053783          	ld	a5,272(a0)
}
    8000b836:	60e2                	ld	ra,24(sp)
    8000b838:	8526                	mv	a0,s1
	new_thread->resource_pool = _current->resource_pool;
    8000b83a:	10f43823          	sd	a5,272(s0)
}
    8000b83e:	6442                	ld	s0,16(sp)
    8000b840:	64a2                	ld	s1,8(sp)
    8000b842:	6105                	addi	sp,sp,32
    8000b844:	8082                	ret

000000008000b846 <z_impl_k_thread_create>:
{
    8000b846:	7179                	addi	sp,sp,-48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8000b848:	5342                	lw	t1,48(sp)
{
    8000b84a:	ec26                	sd	s1,24(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8000b84c:	e402                	sd	zero,8(sp)
{
    8000b84e:	74e2                	ld	s1,56(sp)
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8000b850:	e01a                	sd	t1,0(sp)
{
    8000b852:	f022                	sd	s0,32(sp)
    8000b854:	f406                	sd	ra,40(sp)
    8000b856:	842a                	mv	s0,a0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8000b858:	f73ff0ef          	jal	ra,8000b7ca <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8000b85c:	57fd                	li	a5,-1
    8000b85e:	00f48663          	beq	s1,a5,8000b86a <z_impl_k_thread_create+0x24>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8000b862:	e891                	bnez	s1,8000b876 <z_impl_k_thread_create+0x30>
	z_sched_start(thread);
    8000b864:	8522                	mv	a0,s0
    8000b866:	7ed000ef          	jal	ra,8000c852 <z_sched_start>
}
    8000b86a:	70a2                	ld	ra,40(sp)
    8000b86c:	8522                	mv	a0,s0
    8000b86e:	7402                	ld	s0,32(sp)
    8000b870:	64e2                	ld	s1,24(sp)
    8000b872:	6145                	addi	sp,sp,48
    8000b874:	8082                	ret

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8000b876:	8626                	mv	a2,s1
    8000b878:	00001597          	auipc	a1,0x1
    8000b87c:	b0058593          	addi	a1,a1,-1280 # 8000c378 <z_thread_timeout>
    8000b880:	03040513          	addi	a0,s0,48
    8000b884:	003010ef          	jal	ra,8000d086 <z_add_timeout>
    8000b888:	b7cd                	j	8000b86a <z_impl_k_thread_create+0x24>

000000008000b88a <z_init_static_threads>:
{
    8000b88a:	715d                	addi	sp,sp,-80
    8000b88c:	e0a2                	sd	s0,64(sp)
    8000b88e:	fc26                	sd	s1,56(sp)
    8000b890:	e486                	sd	ra,72(sp)
    8000b892:	f84a                	sd	s2,48(sp)
    8000b894:	f44e                	sd	s3,40(sp)
    8000b896:	f052                	sd	s4,32(sp)
    8000b898:	ec56                	sd	s5,24(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
    8000b89a:	83418413          	addi	s0,gp,-1996 # 800ab5fc <__device_states_end>
    8000b89e:	83418493          	addi	s1,gp,-1996 # 800ab5fc <__device_states_end>
    8000b8a2:	02946963          	bltu	s0,s1,8000b8d4 <z_init_static_threads+0x4a>
	k_sched_lock();
    8000b8a6:	7dc000ef          	jal	ra,8000c082 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8000b8aa:	83418413          	addi	s0,gp,-1996 # 800ab5fc <__device_states_end>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8000b8ae:	597d                	li	s2,-1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8000b8b0:	49a5                	li	s3,9
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
    8000b8b2:	4a29                	li	s4,10
    8000b8b4:	00001a97          	auipc	s5,0x1
    8000b8b8:	ac4a8a93          	addi	s5,s5,-1340 # 8000c378 <z_thread_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
    8000b8bc:	04946263          	bltu	s0,s1,8000b900 <z_init_static_threads+0x76>
}
    8000b8c0:	6406                	ld	s0,64(sp)
    8000b8c2:	60a6                	ld	ra,72(sp)
    8000b8c4:	74e2                	ld	s1,56(sp)
    8000b8c6:	7942                	ld	s2,48(sp)
    8000b8c8:	79a2                	ld	s3,40(sp)
    8000b8ca:	7a02                	ld	s4,32(sp)
    8000b8cc:	6ae2                	ld	s5,24(sp)
    8000b8ce:	6161                	addi	sp,sp,80
	k_sched_unlock();
    8000b8d0:	5fb0006f          	j	8000c6ca <k_sched_unlock>
		z_setup_new_thread(
    8000b8d4:	683c                	ld	a5,80(s0)
    8000b8d6:	03842883          	lw	a7,56(s0)
    8000b8da:	03043803          	ld	a6,48(s0)
    8000b8de:	e43e                	sd	a5,8(sp)
    8000b8e0:	5c5c                	lw	a5,60(s0)
    8000b8e2:	7018                	ld	a4,32(s0)
    8000b8e4:	6c14                	ld	a3,24(s0)
    8000b8e6:	01046603          	lwu	a2,16(s0)
    8000b8ea:	640c                	ld	a1,8(s0)
    8000b8ec:	6008                	ld	a0,0(s0)
    8000b8ee:	e03e                	sd	a5,0(sp)
    8000b8f0:	741c                	ld	a5,40(s0)
    8000b8f2:	ed9ff0ef          	jal	ra,8000b7ca <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8000b8f6:	601c                	ld	a5,0(s0)
    8000b8f8:	e7e0                	sd	s0,200(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
    8000b8fa:	05840413          	addi	s0,s0,88
    8000b8fe:	b755                	j	8000b8a2 <z_init_static_threads+0x18>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8000b900:	403c                	lw	a5,64(s0)
    8000b902:	01278d63          	beq	a5,s2,8000b91c <z_init_static_threads+0x92>
			schedule_new_thread(thread_data->init_thread,
    8000b906:	6008                	ld	a0,0(s0)
					    K_MSEC(thread_data->init_delay));
    8000b908:	0007861b          	sext.w	a2,a5
    8000b90c:	0007d363          	bgez	a5,8000b912 <z_init_static_threads+0x88>
    8000b910:	4601                	li	a2,0
		t += off;
    8000b912:	0625                	addi	a2,a2,9
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8000b914:	01361763          	bne	a2,s3,8000b922 <z_init_static_threads+0x98>
	z_sched_start(thread);
    8000b918:	73b000ef          	jal	ra,8000c852 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8000b91c:	05840413          	addi	s0,s0,88
    8000b920:	bf71                	j	8000b8bc <z_init_static_threads+0x32>
    8000b922:	03465633          	divu	a2,a2,s4
    8000b926:	85d6                	mv	a1,s5
    8000b928:	03050513          	addi	a0,a0,48
    8000b92c:	75a010ef          	jal	ra,8000d086 <z_add_timeout>
    8000b930:	b7f5                	j	8000b91c <z_init_static_threads+0x92>

000000008000b932 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8000b932:	1141                	addi	sp,sp,-16
    8000b934:	e406                	sd	ra,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000b936:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    8000b93a:	facf70ef          	jal	ra,800030e6 <arch_cpu_idle>
    8000b93e:	bfe5                	j	8000b936 <idle+0x4>

000000008000b940 <atomic_clear.constprop.0.isra.0>:
    8000b940:	00082717          	auipc	a4,0x82
    8000b944:	16870713          	addi	a4,a4,360 # 8008daa8 <lock>
    8000b948:	4781                	li	a5,0
    8000b94a:	0f50000f          	fence	iorw,ow
    8000b94e:	0cf737af          	amoswap.d.aq	a5,a5,(a4)
}
    8000b952:	8082                	ret

000000008000b954 <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    8000b954:	01a50783          	lb	a5,26(a0)
    8000b958:	00b78463          	beq	a5,a1,8000b960 <adjust_owner_prio.isra.0+0xc>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    8000b95c:	1940106f          	j	8000caf0 <z_set_prio>
	}
	return false;
}
    8000b960:	4501                	li	a0,0
    8000b962:	8082                	ret

000000008000b964 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    8000b964:	00053823          	sd	zero,16(a0)
	mutex->lock_count = 0U;
    8000b968:	00052c23          	sw	zero,24(a0)
	list->head = (sys_dnode_t *)list;
    8000b96c:	e108                	sd	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
    8000b96e:	e508                	sd	a0,8(a0)
}
    8000b970:	4501                	li	a0,0
    8000b972:	8082                	ret

000000008000b974 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8000b974:	7139                	addi	sp,sp,-64
    8000b976:	f822                	sd	s0,48(sp)
    8000b978:	ec4e                	sd	s3,24(sp)
    8000b97a:	fc06                	sd	ra,56(sp)
    8000b97c:	f426                	sd	s1,40(sp)
    8000b97e:	f04a                	sd	s2,32(sp)
    8000b980:	e852                	sd	s4,16(sp)
    8000b982:	e456                	sd	s5,8(sp)
    8000b984:	842a                	mv	s0,a0
    8000b986:	89ae                	mv	s3,a1
    8000b988:	300474f3          	csrrci	s1,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8000b98c:	00082797          	auipc	a5,0x82
    8000b990:	11c78793          	addi	a5,a5,284 # 8008daa8 <lock>
    8000b994:	4685                	li	a3,1
    8000b996:	8a3e                	mv	s4,a5
    8000b998:	0f50000f          	fence	iorw,ow
    8000b99c:	1407b72f          	lr.d.aq	a4,(a5)
    8000b9a0:	e701                	bnez	a4,8000b9a8 <z_impl_k_mutex_lock+0x34>
    8000b9a2:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000b9a6:	fa7d                	bnez	a2,8000b99c <z_impl_k_mutex_lock+0x28>
    8000b9a8:	fb65                	bnez	a4,8000b998 <z_impl_k_mutex_lock+0x24>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8000b9aa:	01842903          	lw	s2,24(s0)
    8000b9ae:	0c090a63          	beqz	s2,8000ba82 <z_impl_k_mutex_lock+0x10e>
    8000b9b2:	01043a83          	ld	s5,16(s0)
    8000b9b6:	4ae000ef          	jal	ra,8000be64 <z_impl_z_current_get>
    8000b9ba:	0eaa8e63          	beq	s5,a0,8000bab6 <z_impl_k_mutex_lock+0x142>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8000b9be:	00099963          	bnez	s3,8000b9d0 <z_impl_k_mutex_lock+0x5c>
	atomic_clear(&l->locked);
    8000b9c2:	f7fff0ef          	jal	ra,8000b940 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000b9c6:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000b9c8:	3004a073          	csrs	mstatus,s1
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8000b9cc:	5541                	li	a0,-16
    8000b9ce:	a8d9                	j	8000baa4 <z_impl_k_mutex_lock+0x130>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
    8000b9d0:	01a50603          	lb	a2,26(a0)
    8000b9d4:	01aa8683          	lb	a3,26(s5)
    8000b9d8:	87b2                	mv	a5,a2
    8000b9da:	00c6d363          	bge	a3,a2,8000b9e0 <z_impl_k_mutex_lock+0x6c>
    8000b9de:	87b6                	mv	a5,a3
    8000b9e0:	0007871b          	sext.w	a4,a5
    8000b9e4:	f8100613          	li	a2,-127
    8000b9e8:	00c75463          	bge	a4,a2,8000b9f0 <z_impl_k_mutex_lock+0x7c>
    8000b9ec:	f8100793          	li	a5,-127
    8000b9f0:	0007859b          	sext.w	a1,a5
	bool resched = false;
    8000b9f4:	4901                	li	s2,0
					    mutex->owner->base.prio);

	LOG_DBG("adjusting prio up on mutex %p", mutex);

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8000b9f6:	00d5d663          	bge	a1,a3,8000ba02 <z_impl_k_mutex_lock+0x8e>
		resched = adjust_owner_prio(mutex, new_prio);
    8000b9fa:	6808                	ld	a0,16(s0)
    8000b9fc:	f59ff0ef          	jal	ra,8000b954 <adjust_owner_prio.isra.0>
    8000ba00:	892a                	mv	s2,a0
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8000ba02:	86ce                	mv	a3,s3
    8000ba04:	8622                	mv	a2,s0
    8000ba06:	85a6                	mv	a1,s1
    8000ba08:	00082517          	auipc	a0,0x82
    8000ba0c:	0a050513          	addi	a0,a0,160 # 8008daa8 <lock>
    8000ba10:	6ab000ef          	jal	ra,8000c8ba <z_pend_curr>
	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
    8000ba14:	c941                	beqz	a0,8000baa4 <z_impl_k_mutex_lock+0x130>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000ba16:	300474f3          	csrrci	s1,mstatus,8
    8000ba1a:	4705                	li	a4,1
    8000ba1c:	0f50000f          	fence	iorw,ow
    8000ba20:	140a37af          	lr.d.aq	a5,(s4)
    8000ba24:	e781                	bnez	a5,8000ba2c <z_impl_k_mutex_lock+0xb8>
    8000ba26:	1cea36af          	sc.d.aq	a3,a4,(s4)
    8000ba2a:	fafd                	bnez	a3,8000ba20 <z_impl_k_mutex_lock+0xac>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000ba2c:	fbe5                	bnez	a5,8000ba1c <z_impl_k_mutex_lock+0xa8>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8000ba2e:	601c                	ld	a5,0(s0)
	key = k_spin_lock(&lock);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);

	new_prio = (waiter != NULL) ?
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8000ba30:	4c4c                	lw	a1,28(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000ba32:	02f40363          	beq	s0,a5,8000ba58 <z_impl_k_mutex_lock+0xe4>
    8000ba36:	c38d                	beqz	a5,8000ba58 <z_impl_k_mutex_lock+0xe4>
    8000ba38:	01a78703          	lb	a4,26(a5)
    8000ba3c:	87ba                	mv	a5,a4
    8000ba3e:	00e5d363          	bge	a1,a4,8000ba44 <z_impl_k_mutex_lock+0xd0>
    8000ba42:	87ae                	mv	a5,a1
    8000ba44:	0007871b          	sext.w	a4,a5
    8000ba48:	f8100693          	li	a3,-127
    8000ba4c:	00d75463          	bge	a4,a3,8000ba54 <z_impl_k_mutex_lock+0xe0>
    8000ba50:	f8100793          	li	a5,-127
    8000ba54:	0007859b          	sext.w	a1,a5
		mutex->owner_orig_prio;

	LOG_DBG("adjusting prio down on mutex %p", mutex);

	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8000ba58:	6808                	ld	a0,16(s0)
    8000ba5a:	efbff0ef          	jal	ra,8000b954 <adjust_owner_prio.isra.0>
    8000ba5e:	e119                	bnez	a0,8000ba64 <z_impl_k_mutex_lock+0xf0>

	if (resched) {
    8000ba60:	00090b63          	beqz	s2,8000ba76 <z_impl_k_mutex_lock+0x102>
		z_reschedule(&lock, key);
    8000ba64:	85a6                	mv	a1,s1
    8000ba66:	00082517          	auipc	a0,0x82
    8000ba6a:	04250513          	addi	a0,a0,66 # 8008daa8 <lock>
    8000ba6e:	5a7000ef          	jal	ra,8000c814 <z_reschedule>
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
    8000ba72:	5555                	li	a0,-11
    8000ba74:	a805                	j	8000baa4 <z_impl_k_mutex_lock+0x130>
	atomic_clear(&l->locked);
    8000ba76:	ecbff0ef          	jal	ra,8000b940 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000ba7a:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000ba7c:	3004a073          	csrs	mstatus,s1
    8000ba80:	bfcd                	j	8000ba72 <z_impl_k_mutex_lock+0xfe>
    8000ba82:	3e2000ef          	jal	ra,8000be64 <z_impl_z_current_get>
					_current->base.prio :
    8000ba86:	01a50783          	lb	a5,26(a0)
		mutex->lock_count++;
    8000ba8a:	2905                	addiw	s2,s2,1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8000ba8c:	cc5c                	sw	a5,28(s0)
		mutex->lock_count++;
    8000ba8e:	01242c23          	sw	s2,24(s0)
    8000ba92:	3d2000ef          	jal	ra,8000be64 <z_impl_z_current_get>
		mutex->owner = _current;
    8000ba96:	e808                	sd	a0,16(s0)
    8000ba98:	ea9ff0ef          	jal	ra,8000b940 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000ba9c:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000ba9e:	3004a073          	csrs	mstatus,s1
		return 0;
    8000baa2:	4501                	li	a0,0
}
    8000baa4:	70e2                	ld	ra,56(sp)
    8000baa6:	7442                	ld	s0,48(sp)
    8000baa8:	74a2                	ld	s1,40(sp)
    8000baaa:	7902                	ld	s2,32(sp)
    8000baac:	69e2                	ld	s3,24(sp)
    8000baae:	6a42                	ld	s4,16(sp)
    8000bab0:	6aa2                	ld	s5,8(sp)
    8000bab2:	6121                	addi	sp,sp,64
    8000bab4:	8082                	ret
					_current->base.prio :
    8000bab6:	4c5c                	lw	a5,28(s0)
    8000bab8:	bfc9                	j	8000ba8a <z_impl_k_mutex_lock+0x116>

000000008000baba <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8000baba:	1101                	addi	sp,sp,-32
    8000babc:	e426                	sd	s1,8(sp)

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8000babe:	6904                	ld	s1,16(a0)
{
    8000bac0:	ec06                	sd	ra,24(sp)
    8000bac2:	e822                	sd	s0,16(sp)
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
    8000bac4:	57a9                	li	a5,-22
	CHECKIF(mutex->owner == NULL) {
    8000bac6:	cc91                	beqz	s1,8000bae2 <z_impl_k_mutex_unlock+0x28>
    8000bac8:	842a                	mv	s0,a0
    8000baca:	39a000ef          	jal	ra,8000be64 <z_impl_z_current_get>
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
    8000bace:	57fd                	li	a5,-1
	CHECKIF(mutex->owner != _current) {
    8000bad0:	00a49963          	bne	s1,a0,8000bae2 <z_impl_k_mutex_unlock+0x28>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8000bad4:	4c1c                	lw	a5,24(s0)
    8000bad6:	4705                	li	a4,1
    8000bad8:	00f77b63          	bgeu	a4,a5,8000baee <z_impl_k_mutex_unlock+0x34>
		mutex->lock_count--;
    8000badc:	37fd                	addiw	a5,a5,-1
    8000bade:	cc1c                	sw	a5,24(s0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    8000bae0:	4781                	li	a5,0
}
    8000bae2:	60e2                	ld	ra,24(sp)
    8000bae4:	6442                	ld	s0,16(sp)
    8000bae6:	64a2                	ld	s1,8(sp)
    8000bae8:	853e                	mv	a0,a5
    8000baea:	6105                	addi	sp,sp,32
    8000baec:	8082                	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000baee:	300474f3          	csrrci	s1,mstatus,8
    8000baf2:	00082797          	auipc	a5,0x82
    8000baf6:	fb678793          	addi	a5,a5,-74 # 8008daa8 <lock>
    8000bafa:	4685                	li	a3,1
    8000bafc:	0f50000f          	fence	iorw,ow
    8000bb00:	1407b72f          	lr.d.aq	a4,(a5)
    8000bb04:	e701                	bnez	a4,8000bb0c <z_impl_k_mutex_unlock+0x52>
    8000bb06:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000bb0a:	fa7d                	bnez	a2,8000bb00 <z_impl_k_mutex_unlock+0x46>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000bb0c:	fb65                	bnez	a4,8000bafc <z_impl_k_mutex_unlock+0x42>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8000bb0e:	4c4c                	lw	a1,28(s0)
    8000bb10:	6808                	ld	a0,16(s0)
    8000bb12:	e43ff0ef          	jal	ra,8000b954 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8000bb16:	8522                	mv	a0,s0
    8000bb18:	2f0000ef          	jal	ra,8000be08 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8000bb1c:	e808                	sd	a0,16(s0)
	if (new_owner != NULL) {
    8000bb1e:	c105                	beqz	a0,8000bb3e <z_impl_k_mutex_unlock+0x84>
		mutex->owner_orig_prio = new_owner->base.prio;
    8000bb20:	01a50703          	lb	a4,26(a0)
    8000bb24:	cc58                	sw	a4,28(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
    8000bb26:	10052023          	sw	zero,256(a0)
		z_ready_thread(new_owner);
    8000bb2a:	7fa000ef          	jal	ra,8000c324 <z_ready_thread>
		z_reschedule(&lock, key);
    8000bb2e:	85a6                	mv	a1,s1
    8000bb30:	00082517          	auipc	a0,0x82
    8000bb34:	f7850513          	addi	a0,a0,-136 # 8008daa8 <lock>
    8000bb38:	4dd000ef          	jal	ra,8000c814 <z_reschedule>
    8000bb3c:	b755                	j	8000bae0 <z_impl_k_mutex_unlock+0x26>
		mutex->lock_count = 0U;
    8000bb3e:	00042c23          	sw	zero,24(s0)
	atomic_clear(&l->locked);
    8000bb42:	dffff0ef          	jal	ra,8000b940 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000bb46:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000bb48:	3004a073          	csrs	mstatus,s1
    8000bb4c:	bf51                	j	8000bae0 <z_impl_k_mutex_unlock+0x26>

000000008000bb4e <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8000bb4e:	1101                	addi	sp,sp,-32
    8000bb50:	e822                	sd	s0,16(sp)
    8000bb52:	ec06                	sd	ra,24(sp)
    8000bb54:	e426                	sd	s1,8(sp)
    8000bb56:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000bb58:	300474f3          	csrrci	s1,mstatus,8
    8000bb5c:	00082797          	auipc	a5,0x82
    8000bb60:	f5478793          	addi	a5,a5,-172 # 8008dab0 <lock>
    8000bb64:	4685                	li	a3,1
    8000bb66:	0f50000f          	fence	iorw,ow
    8000bb6a:	1407b72f          	lr.d.aq	a4,(a5)
    8000bb6e:	e701                	bnez	a4,8000bb76 <z_impl_k_sem_give+0x28>
    8000bb70:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000bb74:	fa7d                	bnez	a2,8000bb6a <z_impl_k_sem_give+0x1c>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000bb76:	fb65                	bnez	a4,8000bb66 <z_impl_k_sem_give+0x18>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8000bb78:	8522                	mv	a0,s0
    8000bb7a:	28e000ef          	jal	ra,8000be08 <z_unpend_first_thread>

	if (thread != NULL) {
    8000bb7e:	c105                	beqz	a0,8000bb9e <z_impl_k_sem_give+0x50>
    8000bb80:	10052023          	sw	zero,256(a0)
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8000bb84:	7a0000ef          	jal	ra,8000c324 <z_ready_thread>
	}

	z_reschedule(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8000bb88:	6442                	ld	s0,16(sp)
    8000bb8a:	60e2                	ld	ra,24(sp)
	z_reschedule(&lock, key);
    8000bb8c:	85a6                	mv	a1,s1
}
    8000bb8e:	64a2                	ld	s1,8(sp)
	z_reschedule(&lock, key);
    8000bb90:	00082517          	auipc	a0,0x82
    8000bb94:	f2050513          	addi	a0,a0,-224 # 8008dab0 <lock>
}
    8000bb98:	6105                	addi	sp,sp,32
	z_reschedule(&lock, key);
    8000bb9a:	47b0006f          	j	8000c814 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8000bb9e:	4818                	lw	a4,16(s0)
    8000bba0:	485c                	lw	a5,20(s0)
    8000bba2:	8f99                	sub	a5,a5,a4
    8000bba4:	00f037b3          	snez	a5,a5
    8000bba8:	9fb9                	addw	a5,a5,a4
    8000bbaa:	c81c                	sw	a5,16(s0)
}
    8000bbac:	bff1                	j	8000bb88 <z_impl_k_sem_give+0x3a>

000000008000bbae <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8000bbae:	862a                	mv	a2,a0
    8000bbb0:	86ae                	mv	a3,a1
    8000bbb2:	300475f3          	csrrci	a1,mstatus,8
    8000bbb6:	00082797          	auipc	a5,0x82
    8000bbba:	efa78793          	addi	a5,a5,-262 # 8008dab0 <lock>
    8000bbbe:	4505                	li	a0,1
    8000bbc0:	0f50000f          	fence	iorw,ow
    8000bbc4:	1407b72f          	lr.d.aq	a4,(a5)
    8000bbc8:	e709                	bnez	a4,8000bbd2 <z_impl_k_sem_take+0x24>
    8000bbca:	1ca7b82f          	sc.d.aq	a6,a0,(a5)
    8000bbce:	fe081be3          	bnez	a6,8000bbc4 <z_impl_k_sem_take+0x16>
    8000bbd2:	f77d                	bnez	a4,8000bbc0 <z_impl_k_sem_take+0x12>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8000bbd4:	4a18                	lw	a4,16(a2)
    8000bbd6:	cf09                	beqz	a4,8000bbf0 <z_impl_k_sem_take+0x42>
		sem->count--;
    8000bbd8:	377d                	addiw	a4,a4,-1
    8000bbda:	ca18                	sw	a4,16(a2)
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000bbdc:	4701                	li	a4,0
    8000bbde:	0f50000f          	fence	iorw,ow
    8000bbe2:	0ce7b72f          	amoswap.d.aq	a4,a4,(a5)
			  : "r" (key & MSTATUS_IEN)
    8000bbe6:	89a1                	andi	a1,a1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000bbe8:	3005a073          	csrs	mstatus,a1
		k_spin_unlock(&lock, key);
		ret = 0;
    8000bbec:	4501                	li	a0,0
		goto out;
    8000bbee:	8082                	ret
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8000bbf0:	ea91                	bnez	a3,8000bc04 <z_impl_k_sem_take+0x56>
    8000bbf2:	0f50000f          	fence	iorw,ow
    8000bbf6:	0cd7b6af          	amoswap.d.aq	a3,a3,(a5)
			  : "r" (key & MSTATUS_IEN)
    8000bbfa:	89a1                	andi	a1,a1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000bbfc:	3005a073          	csrs	mstatus,a1
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
    8000bc00:	5541                	li	a0,-16

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8000bc02:	8082                	ret
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8000bc04:	00082517          	auipc	a0,0x82
    8000bc08:	eac50513          	addi	a0,a0,-340 # 8008dab0 <lock>
    8000bc0c:	4af0006f          	j	8000c8ba <z_pend_curr>

000000008000bc10 <sys_dlist_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8000bc10:	6518                	ld	a4,8(a0)
	sys_dnode_t *const next = node->next;
    8000bc12:	611c                	ld	a5,0(a0)

	prev->next = next;
    8000bc14:	e31c                	sd	a5,0(a4)
	next->prev = prev;
    8000bc16:	e798                	sd	a4,8(a5)
	node->next = NULL;
    8000bc18:	00053023          	sd	zero,0(a0)
	node->prev = NULL;
    8000bc1c:	00053423          	sd	zero,8(a0)
	sys_dnode_init(node);
}
    8000bc20:	8082                	ret

000000008000bc22 <arch_is_in_isr>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000bc22:	30047773          	csrrci	a4,mstatus,8
    8000bc26:	f14027f3          	csrr	a5,mhartid

static inline bool arch_is_in_isr(void)
{
#ifdef CONFIG_SMP
	unsigned int key = arch_irq_lock();
	bool ret = arch_curr_cpu()->nested != 0U;
    8000bc2a:	1782                	slli	a5,a5,0x20
    8000bc2c:	02800693          	li	a3,40
    8000bc30:	9381                	srli	a5,a5,0x20
    8000bc32:	02d787b3          	mul	a5,a5,a3
    8000bc36:	0009b697          	auipc	a3,0x9b
    8000bc3a:	53a68693          	addi	a3,a3,1338 # 800a7170 <_kernel>
    8000bc3e:	97b6                	add	a5,a5,a3
    8000bc40:	4388                	lw	a0,0(a5)
			  : "r" (key & MSTATUS_IEN)
    8000bc42:	00877793          	andi	a5,a4,8
    8000bc46:	00a03533          	snez	a0,a0
	__asm__ volatile ("csrs mstatus, %0"
    8000bc4a:	3007a073          	csrs	mstatus,a5
	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
#endif
}
    8000bc4e:	8082                	ret

000000008000bc50 <update_cache>:
    8000bc50:	f14027f3          	csrr	a5,mhartid
	 * "cooperative swapping is OK" flag until the next reschedule
	 * call or context switch.  It doesn't need to be tracked per
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
    8000bc54:	1782                	slli	a5,a5,0x20
    8000bc56:	02800713          	li	a4,40
    8000bc5a:	9381                	srli	a5,a5,0x20
    8000bc5c:	02e787b3          	mul	a5,a5,a4
    8000bc60:	0009b717          	auipc	a4,0x9b
    8000bc64:	51070713          	addi	a4,a4,1296 # 800a7170 <_kernel>
    8000bc68:	97ba                	add	a5,a5,a4
    8000bc6a:	02a782a3          	sb	a0,37(a5)
#endif
}
    8000bc6e:	8082                	ret

000000008000bc70 <thread_active_elsewhere>:

static bool thread_active_elsewhere(struct k_thread *thread)
{
    8000bc70:	872a                	mv	a4,a0
    8000bc72:	f14027f3          	csrr	a5,mhartid
	/* True if the thread is currently running on another CPU.
	 * There are more scalable designs to answer this question in
	 * constant time, but this is fine for now.
	 */
#ifdef CONFIG_SMP
	int currcpu = _current_cpu->id;
    8000bc76:	1782                	slli	a5,a5,0x20
    8000bc78:	9381                	srli	a5,a5,0x20
    8000bc7a:	02800613          	li	a2,40
    8000bc7e:	02c787b3          	mul	a5,a5,a2
    8000bc82:	0009b697          	auipc	a3,0x9b
    8000bc86:	4ee68693          	addi	a3,a3,1262 # 800a7170 <_kernel>
    8000bc8a:	97b6                	add	a5,a5,a3
    8000bc8c:	0247c783          	lbu	a5,36(a5)

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		if ((i != currcpu) &&
    8000bc90:	cb89                	beqz	a5,8000bca2 <thread_active_elsewhere+0x32>
    8000bc92:	6a90                	ld	a2,16(a3)
		    (_kernel.cpus[i].current == thread)) {
			return true;
    8000bc94:	4505                	li	a0,1
		if ((i != currcpu) &&
    8000bc96:	00c70b63          	beq	a4,a2,8000bcac <thread_active_elsewhere+0x3c>
    8000bc9a:	4605                	li	a2,1
		}
	}
#endif
	return false;
    8000bc9c:	4501                	li	a0,0
		if ((i != currcpu) &&
    8000bc9e:	00c78763          	beq	a5,a2,8000bcac <thread_active_elsewhere+0x3c>
    8000bca2:	7e9c                	ld	a5,56(a3)
    8000bca4:	40e78533          	sub	a0,a5,a4
    8000bca8:	00153513          	seqz	a0,a0
}
    8000bcac:	8082                	ret

000000008000bcae <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
	pend(thread, wait_q, timeout);
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
    8000bcae:	1141                	addi	sp,sp,-16
    8000bcb0:	e022                	sd	s0,0(sp)
    8000bcb2:	e406                	sd	ra,8(sp)
    8000bcb4:	842a                	mv	s0,a0

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8000bcb6:	f5bff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    8000bcba:	01944783          	lbu	a5,25(s0)
}
    8000bcbe:	60a2                	ld	ra,8(sp)
	thread->base.pended_on = NULL;
    8000bcc0:	00043823          	sd	zero,16(s0)
    8000bcc4:	9bf5                	andi	a5,a5,-3
    8000bcc6:	00f40ca3          	sb	a5,25(s0)
}
    8000bcca:	6402                	ld	s0,0(sp)
    8000bccc:	0141                	addi	sp,sp,16
    8000bcce:	8082                	ret

000000008000bcd0 <resched>:
    8000bcd0:	f14027f3          	csrr	a5,mhartid
	_current_cpu->swap_ok = 0;
    8000bcd4:	1782                	slli	a5,a5,0x20
    8000bcd6:	02800713          	li	a4,40
    8000bcda:	9381                	srli	a5,a5,0x20
    8000bcdc:	02e787b3          	mul	a5,a5,a4
    8000bce0:	0009b717          	auipc	a4,0x9b
    8000bce4:	49070713          	addi	a4,a4,1168 # 800a7170 <_kernel>
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8000bce8:	8921                	andi	a0,a0,8
	_current_cpu->swap_ok = 0;
    8000bcea:	97ba                	add	a5,a5,a4
    8000bcec:	020782a3          	sb	zero,37(a5)
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8000bcf0:	cd09                	beqz	a0,8000bd0a <resched+0x3a>
{
    8000bcf2:	1141                	addi	sp,sp,-16
    8000bcf4:	e406                	sd	ra,8(sp)
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8000bcf6:	f2dff0ef          	jal	ra,8000bc22 <arch_is_in_isr>
}
    8000bcfa:	60a2                	ld	ra,8(sp)
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8000bcfc:	00154513          	xori	a0,a0,1
    8000bd00:	0ff57513          	andi	a0,a0,255
}
    8000bd04:	8905                	andi	a0,a0,1
    8000bd06:	0141                	addi	sp,sp,16
    8000bd08:	8082                	ret
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8000bd0a:	4501                	li	a0,0
}
    8000bd0c:	8905                	andi	a0,a0,1
    8000bd0e:	8082                	ret

000000008000bd10 <signal_pending_ipi>:
		if (_kernel.pending_ipi) {
    8000bd10:	0009b797          	auipc	a5,0x9b
    8000bd14:	4c07c783          	lbu	a5,1216(a5) # 800a71d0 <_kernel+0x60>
    8000bd18:	c799                	beqz	a5,8000bd26 <signal_pending_ipi+0x16>
			_kernel.pending_ipi = false;
    8000bd1a:	0009b797          	auipc	a5,0x9b
    8000bd1e:	4a078b23          	sb	zero,1206(a5) # 800a71d0 <_kernel+0x60>
			arch_sched_ipi();
    8000bd22:	d5ef706f          	j	80003280 <arch_sched_ipi>
}
    8000bd26:	8082                	ret

000000008000bd28 <wait_for_switch>:
{
    8000bd28:	1141                	addi	sp,sp,-16
    8000bd2a:	e022                	sd	s0,0(sp)
    8000bd2c:	e406                	sd	ra,8(sp)
    8000bd2e:	842a                	mv	s0,a0
	while (*shp == NULL) {
    8000bd30:	10843783          	ld	a5,264(s0)
    8000bd34:	c789                	beqz	a5,8000bd3e <wait_for_switch+0x16>
}
    8000bd36:	60a2                	ld	ra,8(sp)
    8000bd38:	6402                	ld	s0,0(sp)
    8000bd3a:	0141                	addi	sp,sp,16
    8000bd3c:	8082                	ret
	z_impl_k_busy_wait(usec_to_wait);
    8000bd3e:	4505                	li	a0,1
    8000bd40:	630010ef          	jal	ra,8000d370 <z_impl_k_busy_wait>
}
    8000bd44:	b7f5                	j	8000bd30 <wait_for_switch+0x8>

000000008000bd46 <atomic_clear>:
{
    8000bd46:	87aa                	mv	a5,a0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000bd48:	4501                	li	a0,0
    8000bd4a:	0f50000f          	fence	iorw,ow
    8000bd4e:	0ca7b52f          	amoswap.d.aq	a0,a0,(a5)
}
    8000bd52:	8082                	ret

000000008000bd54 <z_requeue_current>:
	if (z_is_thread_queued(curr)) {
    8000bd54:	01950783          	lb	a5,25(a0)
    8000bd58:	0207de63          	bgez	a5,8000bd94 <z_requeue_current+0x40>
	return list->head == list;
    8000bd5c:	0009b697          	auipc	a3,0x9b
    8000bd60:	41468693          	addi	a3,a3,1044 # 800a7170 <_kernel>
    8000bd64:	6abc                	ld	a5,80(a3)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000bd66:	0009b597          	auipc	a1,0x9b
    8000bd6a:	45a58593          	addi	a1,a1,1114 # 800a71c0 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
    8000bd6e:	6eb0                	ld	a2,88(a3)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000bd70:	02b78863          	beq	a5,a1,8000bda0 <z_requeue_current+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000bd74:	c795                	beqz	a5,8000bda0 <z_requeue_current+0x4c>
	int32_t b1 = thread_1->base.prio;
    8000bd76:	01a50803          	lb	a6,26(a0)
	int32_t b2 = thread_2->base.prio;
    8000bd7a:	01a78883          	lb	a7,26(a5)
	if (b1 != b2) {
    8000bd7e:	01180d63          	beq	a6,a7,8000bd98 <z_requeue_current+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000bd82:	4108873b          	subw	a4,a7,a6
    8000bd86:	00e05963          	blez	a4,8000bd98 <z_requeue_current+0x44>
	sys_dnode_t *const prev = successor->prev;
    8000bd8a:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000bd8c:	e11c                	sd	a5,0(a0)
	node->prev = prev;
    8000bd8e:	e518                	sd	a4,8(a0)
	prev->next = node;
    8000bd90:	e308                	sd	a0,0(a4)
	successor->prev = node;
    8000bd92:	e788                	sd	a0,8(a5)
	signal_pending_ipi();
    8000bd94:	f7dff06f          	j	8000bd10 <signal_pending_ipi>
	return (node == list->tail) ? NULL : node->next;
    8000bd98:	00c78463          	beq	a5,a2,8000bda0 <z_requeue_current+0x4c>
    8000bd9c:	639c                	ld	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000bd9e:	fff1                	bnez	a5,8000bd7a <z_requeue_current+0x26>
	node->next = list;
    8000bda0:	e10c                	sd	a1,0(a0)
	node->prev = tail;
    8000bda2:	e510                	sd	a2,8(a0)
	tail->next = node;
    8000bda4:	e208                	sd	a0,0(a2)
	list->tail = node;
    8000bda6:	eea8                	sd	a0,88(a3)
}
    8000bda8:	b7f5                	j	8000bd94 <z_requeue_current+0x40>

000000008000bdaa <z_reset_time_slice>:
{
    8000bdaa:	1101                	addi	sp,sp,-32
    8000bdac:	e426                	sd	s1,8(sp)
	int ret = slice_ticks;
    8000bdae:	00082497          	auipc	s1,0x82
    8000bdb2:	d6648493          	addi	s1,s1,-666 # 8008db14 <slice_ticks>
{
    8000bdb6:	e822                	sd	s0,16(sp)
	int ret = slice_ticks;
    8000bdb8:	4080                	lw	s0,0(s1)
{
    8000bdba:	ec06                	sd	ra,24(sp)
	if (slice_time(curr) != 0) {
    8000bdbc:	c81d                	beqz	s0,8000bdf2 <z_reset_time_slice+0x48>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    8000bdbe:	cc9f70ef          	jal	ra,80003a86 <sys_clock_elapsed>
    8000bdc2:	2501                	sext.w	a0,a0
    8000bdc4:	f14027f3          	csrr	a5,mhartid
    8000bdc8:	1782                	slli	a5,a5,0x20
    8000bdca:	02800713          	li	a4,40
    8000bdce:	9381                	srli	a5,a5,0x20
    8000bdd0:	02e787b3          	mul	a5,a5,a4
    8000bdd4:	0009b717          	auipc	a4,0x9b
    8000bdd8:	39c70713          	addi	a4,a4,924 # 800a7170 <_kernel>
    8000bddc:	9c29                	addw	s0,s0,a0
}
    8000bdde:	60e2                	ld	ra,24(sp)
		z_set_timeout_expiry(slice_time(curr), false);
    8000bde0:	4088                	lw	a0,0(s1)
}
    8000bde2:	64a2                	ld	s1,8(sp)
		z_set_timeout_expiry(slice_time(curr), false);
    8000bde4:	4581                	li	a1,0
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    8000bde6:	97ba                	add	a5,a5,a4
    8000bde8:	d380                	sw	s0,32(a5)
}
    8000bdea:	6442                	ld	s0,16(sp)
    8000bdec:	6105                	addi	sp,sp,32
		z_set_timeout_expiry(slice_time(curr), false);
    8000bdee:	3d20106f          	j	8000d1c0 <z_set_timeout_expiry>
}
    8000bdf2:	60e2                	ld	ra,24(sp)
    8000bdf4:	6442                	ld	s0,16(sp)
    8000bdf6:	64a2                	ld	s1,8(sp)
    8000bdf8:	6105                	addi	sp,sp,32
    8000bdfa:	8082                	ret

000000008000bdfc <z_priq_dumb_best>:
}

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    8000bdfc:	87aa                	mv	a5,a0
	return list->head == list;
    8000bdfe:	6108                	ld	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000be00:	00a79363          	bne	a5,a0,8000be06 <z_priq_dumb_best+0xa>
	struct k_thread *thread = NULL;
    8000be04:	4501                	li	a0,0

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    8000be06:	8082                	ret

000000008000be08 <z_unpend_first_thread>:
{
    8000be08:	1101                	addi	sp,sp,-32
    8000be0a:	ec06                	sd	ra,24(sp)
    8000be0c:	e822                	sd	s0,16(sp)
    8000be0e:	e426                	sd	s1,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000be10:	300474f3          	csrrci	s1,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8000be14:	00082797          	auipc	a5,0x82
    8000be18:	ca478793          	addi	a5,a5,-860 # 8008dab8 <sched_spinlock>
    8000be1c:	4685                	li	a3,1
    8000be1e:	0f50000f          	fence	iorw,ow
    8000be22:	1407b72f          	lr.d.aq	a4,(a5)
    8000be26:	e701                	bnez	a4,8000be2e <z_unpend_first_thread+0x26>
    8000be28:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000be2c:	fa7d                	bnez	a2,8000be22 <z_unpend_first_thread+0x1a>
    8000be2e:	fb65                	bnez	a4,8000be1e <z_unpend_first_thread+0x16>
		thread = _priq_wait_best(&wait_q->waitq);
    8000be30:	fcdff0ef          	jal	ra,8000bdfc <z_priq_dumb_best>
    8000be34:	842a                	mv	s0,a0
		if (thread != NULL) {
    8000be36:	c519                	beqz	a0,8000be44 <z_unpend_first_thread+0x3c>
			unpend_thread_no_timeout(thread);
    8000be38:	e77ff0ef          	jal	ra,8000bcae <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8000be3c:	03040513          	addi	a0,s0,48
    8000be40:	336010ef          	jal	ra,8000d176 <z_abort_timeout>
	atomic_clear(&l->locked);
    8000be44:	00082517          	auipc	a0,0x82
    8000be48:	c7450513          	addi	a0,a0,-908 # 8008dab8 <sched_spinlock>
    8000be4c:	efbff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000be50:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000be52:	3004a073          	csrs	mstatus,s1
}
    8000be56:	60e2                	ld	ra,24(sp)
    8000be58:	8522                	mv	a0,s0
    8000be5a:	6442                	ld	s0,16(sp)
    8000be5c:	64a2                	ld	s1,8(sp)
    8000be5e:	6105                	addi	sp,sp,32
    8000be60:	8082                	ret

000000008000be62 <z_sched_ipi>:
	 * at appropriate location when !CONFIG_SCHED_IPI_SUPPORTED.
	 */
#ifdef CONFIG_TRACE_SCHED_IPI
	z_trace_sched_ipi();
#endif
}
    8000be62:	8082                	ret

000000008000be64 <z_impl_z_current_get>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000be64:	30047773          	csrrci	a4,mstatus,8
    8000be68:	f14027f3          	csrr	a5,mhartid
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    8000be6c:	1782                	slli	a5,a5,0x20
    8000be6e:	02800693          	li	a3,40
    8000be72:	9381                	srli	a5,a5,0x20
    8000be74:	02d787b3          	mul	a5,a5,a3
    8000be78:	0009b697          	auipc	a3,0x9b
    8000be7c:	2f868693          	addi	a3,a3,760 # 800a7170 <_kernel>
    8000be80:	97b6                	add	a5,a5,a3
    8000be82:	6b88                	ld	a0,16(a5)
			  : "r" (key & MSTATUS_IEN)
    8000be84:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
    8000be88:	3007a073          	csrs	mstatus,a5

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8000be8c:	8082                	ret

000000008000be8e <z_current_get>:
	return z_impl_z_current_get();
    8000be8e:	fd7ff06f          	j	8000be64 <z_impl_z_current_get>

000000008000be92 <k_sched_time_slice_set>:
{
    8000be92:	1141                	addi	sp,sp,-16
    8000be94:	e406                	sd	ra,8(sp)
    8000be96:	e022                	sd	s0,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000be98:	30047473          	csrrci	s0,mstatus,8
    8000be9c:	00082797          	auipc	a5,0x82
    8000bea0:	c1c78793          	addi	a5,a5,-996 # 8008dab8 <sched_spinlock>
    8000bea4:	4685                	li	a3,1
    8000bea6:	0f50000f          	fence	iorw,ow
    8000beaa:	1407b72f          	lr.d.aq	a4,(a5)
    8000beae:	e701                	bnez	a4,8000beb6 <k_sched_time_slice_set+0x24>
    8000beb0:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000beb4:	fa7d                	bnez	a2,8000beaa <k_sched_time_slice_set+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000beb6:	fb65                	bnez	a4,8000bea6 <k_sched_time_slice_set+0x14>
    8000beb8:	f14027f3          	csrr	a5,mhartid
		_current_cpu->slice_ticks = 0;
    8000bebc:	1782                	slli	a5,a5,0x20
    8000bebe:	02800713          	li	a4,40
    8000bec2:	9381                	srli	a5,a5,0x20
    8000bec4:	02e787b3          	mul	a5,a5,a4
    8000bec8:	0009b717          	auipc	a4,0x9b
    8000becc:	2a870713          	addi	a4,a4,680 # 800a7170 <_kernel>
		if (result32 && (t < BIT64(32))) {
    8000bed0:	56fd                	li	a3,-1
    8000bed2:	9281                	srli	a3,a3,0x20
    8000bed4:	97ba                	add	a5,a5,a4
    8000bed6:	0207a023          	sw	zero,32(a5)
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    8000beda:	02051793          	slli	a5,a0,0x20
    8000bede:	9381                	srli	a5,a5,0x20
		t += off;
    8000bee0:	07a5                	addi	a5,a5,9
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8000bee2:	0005071b          	sext.w	a4,a0
		if (result32 && (t < BIT64(32))) {
    8000bee6:	00f6f663          	bgeu	a3,a5,8000bef2 <k_sched_time_slice_set+0x60>
			return t / ((uint64_t)from_hz / to_hz);
    8000beea:	4729                	li	a4,10
    8000beec:	02e7d7b3          	divu	a5,a5,a4
    8000bef0:	a801                	j	8000bf00 <k_sched_time_slice_set+0x6e>
			return ((uint32_t)t) / (from_hz / to_hz);
    8000bef2:	0097079b          	addiw	a5,a4,9
    8000bef6:	4729                	li	a4,10
    8000bef8:	02e7d7bb          	divuw	a5,a5,a4
    8000befc:	1782                	slli	a5,a5,0x20
    8000befe:	9381                	srli	a5,a5,0x20
    8000bf00:	2781                	sext.w	a5,a5
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8000bf02:	00082717          	auipc	a4,0x82
    8000bf06:	c1270713          	addi	a4,a4,-1006 # 8008db14 <slice_ticks>
    8000bf0a:	02a04863          	bgtz	a0,8000bf3a <k_sched_time_slice_set+0xa8>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8000bf0e:	c31c                	sw	a5,0(a4)
		slice_max_prio = prio;
    8000bf10:	00082797          	auipc	a5,0x82
    8000bf14:	c0b7a023          	sw	a1,-1024(a5) # 8008db10 <slice_max_prio>
		z_reset_time_slice(_current);
    8000bf18:	f77ff0ef          	jal	ra,8000be8e <z_current_get>
    8000bf1c:	e8fff0ef          	jal	ra,8000bdaa <z_reset_time_slice>
	atomic_clear(&l->locked);
    8000bf20:	00082517          	auipc	a0,0x82
    8000bf24:	b9850513          	addi	a0,a0,-1128 # 8008dab8 <sched_spinlock>
    8000bf28:	e1fff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000bf2c:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    8000bf2e:	30042073          	csrs	mstatus,s0
}
    8000bf32:	60a2                	ld	ra,8(sp)
    8000bf34:	6402                	ld	s0,0(sp)
    8000bf36:	0141                	addi	sp,sp,16
    8000bf38:	8082                	ret
			slice_ticks = MAX(2, slice_ticks);
    8000bf3a:	4609                	li	a2,2
    8000bf3c:	86be                	mv	a3,a5
    8000bf3e:	00c7d363          	bge	a5,a2,8000bf44 <k_sched_time_slice_set+0xb2>
    8000bf42:	4689                	li	a3,2
    8000bf44:	c314                	sw	a3,0(a4)
    8000bf46:	b7e9                	j	8000bf10 <k_sched_time_slice_set+0x7e>

000000008000bf48 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8000bf48:	0009b797          	auipc	a5,0x9b
    8000bf4c:	22878793          	addi	a5,a5,552 # 800a7170 <_kernel>
    8000bf50:	0009b717          	auipc	a4,0x9b
    8000bf54:	27070713          	addi	a4,a4,624 # 800a71c0 <_kernel+0x50>
    8000bf58:	ebb8                	sd	a4,80(a5)
	list->tail = (sys_dnode_t *)list;
    8000bf5a:	efb8                	sd	a4,88(a5)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8000bf5c:	4581                	li	a1,0
    8000bf5e:	4501                	li	a0,0
    8000bf60:	f33ff06f          	j	8000be92 <k_sched_time_slice_set>

000000008000bf64 <unready_thread>:
{
    8000bf64:	1101                	addi	sp,sp,-32
    8000bf66:	e822                	sd	s0,16(sp)
    8000bf68:	e426                	sd	s1,8(sp)
    8000bf6a:	ec06                	sd	ra,24(sp)
    8000bf6c:	e04a                	sd	s2,0(sp)
	return (thread->base.thread_state & state) != 0U;
    8000bf6e:	01954903          	lbu	s2,25(a0)
    8000bf72:	842a                	mv	s0,a0
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000bf74:	f1bff0ef          	jal	ra,8000be8e <z_current_get>
	if (z_is_thread_queued(thread)) {
    8000bf78:	0189179b          	slliw	a5,s2,0x18
    8000bf7c:	4187d79b          	sraiw	a5,a5,0x18
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000bf80:	84aa                	mv	s1,a0
	if (z_is_thread_queued(thread)) {
    8000bf82:	0007db63          	bgez	a5,8000bf98 <unready_thread+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000bf86:	07f97913          	andi	s2,s2,127
    8000bf8a:	01240ca3          	sb	s2,25(s0)
	if (should_queue_thread(thread)) {
    8000bf8e:	00a40563          	beq	s0,a0,8000bf98 <unready_thread+0x34>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000bf92:	8522                	mv	a0,s0
    8000bf94:	c7dff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
	update_cache(thread == _current);
    8000bf98:	40940533          	sub	a0,s0,s1
}
    8000bf9c:	6442                	ld	s0,16(sp)
    8000bf9e:	60e2                	ld	ra,24(sp)
    8000bfa0:	64a2                	ld	s1,8(sp)
    8000bfa2:	6902                	ld	s2,0(sp)
	update_cache(thread == _current);
    8000bfa4:	00153513          	seqz	a0,a0
}
    8000bfa8:	6105                	addi	sp,sp,32
	update_cache(thread == _current);
    8000bfaa:	ca7ff06f          	j	8000bc50 <update_cache>

000000008000bfae <add_to_waitq_locked>:
{
    8000bfae:	1101                	addi	sp,sp,-32
    8000bfb0:	e822                	sd	s0,16(sp)
    8000bfb2:	e426                	sd	s1,8(sp)
    8000bfb4:	842a                	mv	s0,a0
    8000bfb6:	ec06                	sd	ra,24(sp)
    8000bfb8:	84ae                	mv	s1,a1
	unready_thread(thread);
    8000bfba:	fabff0ef          	jal	ra,8000bf64 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8000bfbe:	01944783          	lbu	a5,25(s0)
    8000bfc2:	0027e793          	ori	a5,a5,2
    8000bfc6:	00f40ca3          	sb	a5,25(s0)
	if (wait_q != NULL) {
    8000bfca:	c48d                	beqz	s1,8000bff4 <add_to_waitq_locked+0x46>
	return list->head == list;
    8000bfcc:	609c                	ld	a5,0(s1)
		thread->base.pended_on = wait_q;
    8000bfce:	e804                	sd	s1,16(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000bfd0:	02f48c63          	beq	s1,a5,8000c008 <add_to_waitq_locked+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000bfd4:	cb95                	beqz	a5,8000c008 <add_to_waitq_locked+0x5a>
	int32_t b1 = thread_1->base.prio;
    8000bfd6:	01a40683          	lb	a3,26(s0)
	int32_t b2 = thread_2->base.prio;
    8000bfda:	01a78603          	lb	a2,26(a5)
	if (b1 != b2) {
    8000bfde:	02c68063          	beq	a3,a2,8000bffe <add_to_waitq_locked+0x50>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000bfe2:	40d6073b          	subw	a4,a2,a3
    8000bfe6:	00e05c63          	blez	a4,8000bffe <add_to_waitq_locked+0x50>
	sys_dnode_t *const prev = successor->prev;
    8000bfea:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000bfec:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000bfee:	e418                	sd	a4,8(s0)
	prev->next = node;
    8000bff0:	e300                	sd	s0,0(a4)
	successor->prev = node;
    8000bff2:	e780                	sd	s0,8(a5)
}
    8000bff4:	60e2                	ld	ra,24(sp)
    8000bff6:	6442                	ld	s0,16(sp)
    8000bff8:	64a2                	ld	s1,8(sp)
    8000bffa:	6105                	addi	sp,sp,32
    8000bffc:	8082                	ret
	return (node == list->tail) ? NULL : node->next;
    8000bffe:	6498                	ld	a4,8(s1)
    8000c000:	00e78463          	beq	a5,a4,8000c008 <add_to_waitq_locked+0x5a>
    8000c004:	639c                	ld	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000c006:	fbf1                	bnez	a5,8000bfda <add_to_waitq_locked+0x2c>
	sys_dnode_t *const tail = list->tail;
    8000c008:	649c                	ld	a5,8(s1)
	node->next = list;
    8000c00a:	e004                	sd	s1,0(s0)
	node->prev = tail;
    8000c00c:	e41c                	sd	a5,8(s0)
	tail->next = node;
    8000c00e:	e380                	sd	s0,0(a5)
	list->tail = node;
    8000c010:	e480                	sd	s0,8(s1)
}
    8000c012:	b7cd                	j	8000bff4 <add_to_waitq_locked+0x46>

000000008000c014 <pend>:
{
    8000c014:	7179                	addi	sp,sp,-48
    8000c016:	f022                	sd	s0,32(sp)
    8000c018:	f406                	sd	ra,40(sp)
    8000c01a:	ec26                	sd	s1,24(sp)
    8000c01c:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c01e:	300474f3          	csrrci	s1,mstatus,8
    8000c022:	00082797          	auipc	a5,0x82
    8000c026:	a9678793          	addi	a5,a5,-1386 # 8008dab8 <sched_spinlock>
    8000c02a:	4685                	li	a3,1
    8000c02c:	0f50000f          	fence	iorw,ow
    8000c030:	1407b72f          	lr.d.aq	a4,(a5)
    8000c034:	e701                	bnez	a4,8000c03c <pend+0x28>
    8000c036:	1cd7b52f          	sc.d.aq	a0,a3,(a5)
    8000c03a:	f97d                	bnez	a0,8000c030 <pend+0x1c>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c03c:	fb65                	bnez	a4,8000c02c <pend+0x18>
		add_to_waitq_locked(thread, wait_q);
    8000c03e:	8522                	mv	a0,s0
    8000c040:	e432                	sd	a2,8(sp)
    8000c042:	f6dff0ef          	jal	ra,8000bfae <add_to_waitq_locked>
	atomic_clear(&l->locked);
    8000c046:	00082517          	auipc	a0,0x82
    8000c04a:	a7250513          	addi	a0,a0,-1422 # 8008dab8 <sched_spinlock>
    8000c04e:	cf9ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c052:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c054:	3004a073          	csrs	mstatus,s1
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8000c058:	6622                	ld	a2,8(sp)
    8000c05a:	57fd                	li	a5,-1
    8000c05c:	00f60e63          	beq	a2,a5,8000c078 <pend+0x64>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8000c060:	03040513          	addi	a0,s0,48
}
    8000c064:	7402                	ld	s0,32(sp)
    8000c066:	70a2                	ld	ra,40(sp)
    8000c068:	64e2                	ld	s1,24(sp)
    8000c06a:	00000597          	auipc	a1,0x0
    8000c06e:	30e58593          	addi	a1,a1,782 # 8000c378 <z_thread_timeout>
    8000c072:	6145                	addi	sp,sp,48
    8000c074:	0120106f          	j	8000d086 <z_add_timeout>
    8000c078:	70a2                	ld	ra,40(sp)
    8000c07a:	7402                	ld	s0,32(sp)
    8000c07c:	64e2                	ld	s1,24(sp)
    8000c07e:	6145                	addi	sp,sp,48
    8000c080:	8082                	ret

000000008000c082 <k_sched_lock>:
{
    8000c082:	1141                	addi	sp,sp,-16
    8000c084:	e406                	sd	ra,8(sp)
    8000c086:	e022                	sd	s0,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c088:	30047473          	csrrci	s0,mstatus,8
    8000c08c:	00082797          	auipc	a5,0x82
    8000c090:	a2c78793          	addi	a5,a5,-1492 # 8008dab8 <sched_spinlock>
    8000c094:	4685                	li	a3,1
    8000c096:	0f50000f          	fence	iorw,ow
    8000c09a:	1407b72f          	lr.d.aq	a4,(a5)
    8000c09e:	e701                	bnez	a4,8000c0a6 <k_sched_lock+0x24>
    8000c0a0:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c0a4:	fa7d                	bnez	a2,8000c09a <k_sched_lock+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c0a6:	fb65                	bnez	a4,8000c096 <k_sched_lock+0x14>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8000c0a8:	de7ff0ef          	jal	ra,8000be8e <z_current_get>
    8000c0ac:	01b54783          	lbu	a5,27(a0)
    8000c0b0:	37fd                	addiw	a5,a5,-1
    8000c0b2:	00f50da3          	sb	a5,27(a0)
	atomic_clear(&l->locked);
    8000c0b6:	00082517          	auipc	a0,0x82
    8000c0ba:	a0250513          	addi	a0,a0,-1534 # 8008dab8 <sched_spinlock>
    8000c0be:	c89ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c0c2:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c0c4:	30042073          	csrs	mstatus,s0
}
    8000c0c8:	60a2                	ld	ra,8(sp)
    8000c0ca:	6402                	ld	s0,0(sp)
    8000c0cc:	0141                	addi	sp,sp,16
    8000c0ce:	8082                	ret

000000008000c0d0 <move_thread_to_end_of_prio_q>:
{
    8000c0d0:	1101                	addi	sp,sp,-32
    8000c0d2:	e822                	sd	s0,16(sp)
    8000c0d4:	e426                	sd	s1,8(sp)
    8000c0d6:	ec06                	sd	ra,24(sp)
    8000c0d8:	e04a                	sd	s2,0(sp)
	return (thread->base.thread_state & state) != 0U;
    8000c0da:	01954903          	lbu	s2,25(a0)
    8000c0de:	842a                	mv	s0,a0
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000c0e0:	dafff0ef          	jal	ra,8000be8e <z_current_get>
	if (z_is_thread_queued(thread)) {
    8000c0e4:	0189179b          	slliw	a5,s2,0x18
    8000c0e8:	4187d79b          	sraiw	a5,a5,0x18
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000c0ec:	84aa                	mv	s1,a0
	if (z_is_thread_queued(thread)) {
    8000c0ee:	0007db63          	bgez	a5,8000c104 <move_thread_to_end_of_prio_q+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000c0f2:	07f97913          	andi	s2,s2,127
    8000c0f6:	01240ca3          	sb	s2,25(s0)
	if (should_queue_thread(thread)) {
    8000c0fa:	00a40563          	beq	s0,a0,8000c104 <move_thread_to_end_of_prio_q+0x34>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000c0fe:	8522                	mv	a0,s0
    8000c100:	b11ff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8000c104:	01944783          	lbu	a5,25(s0)
    8000c108:	0009b717          	auipc	a4,0x9b
    8000c10c:	06870713          	addi	a4,a4,104 # 800a7170 <_kernel>
    8000c110:	f807e793          	ori	a5,a5,-128
    8000c114:	00f40ca3          	sb	a5,25(s0)
	if (should_queue_thread(thread)) {
    8000c118:	04940e63          	beq	s0,s1,8000c174 <move_thread_to_end_of_prio_q+0xa4>
	return list->head == list;
    8000c11c:	6b3c                	ld	a5,80(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000c11e:	0009b597          	auipc	a1,0x9b
    8000c122:	0a258593          	addi	a1,a1,162 # 800a71c0 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
    8000c126:	6f30                	ld	a2,88(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000c128:	04b78163          	beq	a5,a1,8000c16a <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000c12c:	cf9d                	beqz	a5,8000c16a <move_thread_to_end_of_prio_q+0x9a>
	int32_t b1 = thread_1->base.prio;
    8000c12e:	01a40503          	lb	a0,26(s0)
	int32_t b2 = thread_2->base.prio;
    8000c132:	01a78803          	lb	a6,26(a5)
	if (b1 != b2) {
    8000c136:	03050663          	beq	a0,a6,8000c162 <move_thread_to_end_of_prio_q+0x92>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000c13a:	40a806bb          	subw	a3,a6,a0
    8000c13e:	02d05263          	blez	a3,8000c162 <move_thread_to_end_of_prio_q+0x92>
	sys_dnode_t *const prev = successor->prev;
    8000c142:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000c144:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000c146:	e418                	sd	a4,8(s0)
	prev->next = node;
    8000c148:	e300                	sd	s0,0(a4)
	successor->prev = node;
    8000c14a:	e780                	sd	s0,8(a5)
	update_cache(thread == _current);
    8000c14c:	40940533          	sub	a0,s0,s1
}
    8000c150:	6442                	ld	s0,16(sp)
    8000c152:	60e2                	ld	ra,24(sp)
    8000c154:	64a2                	ld	s1,8(sp)
    8000c156:	6902                	ld	s2,0(sp)
	update_cache(thread == _current);
    8000c158:	00153513          	seqz	a0,a0
}
    8000c15c:	6105                	addi	sp,sp,32
	update_cache(thread == _current);
    8000c15e:	af3ff06f          	j	8000bc50 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8000c162:	00c78463          	beq	a5,a2,8000c16a <move_thread_to_end_of_prio_q+0x9a>
    8000c166:	639c                	ld	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000c168:	f7e9                	bnez	a5,8000c132 <move_thread_to_end_of_prio_q+0x62>
	node->next = list;
    8000c16a:	e00c                	sd	a1,0(s0)
	node->prev = tail;
    8000c16c:	e410                	sd	a2,8(s0)
	tail->next = node;
    8000c16e:	e200                	sd	s0,0(a2)
	list->tail = node;
    8000c170:	ef20                	sd	s0,88(a4)
}
    8000c172:	bfe9                	j	8000c14c <move_thread_to_end_of_prio_q+0x7c>
    8000c174:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = true;
    8000c178:	1782                	slli	a5,a5,0x20
    8000c17a:	9381                	srli	a5,a5,0x20
    8000c17c:	02800693          	li	a3,40
    8000c180:	02d787b3          	mul	a5,a5,a3
    8000c184:	973e                	add	a4,a4,a5
    8000c186:	4785                	li	a5,1
    8000c188:	02f702a3          	sb	a5,37(a4)
    8000c18c:	b7c1                	j	8000c14c <move_thread_to_end_of_prio_q+0x7c>

000000008000c18e <z_time_slice>:
{
    8000c18e:	7179                	addi	sp,sp,-48
    8000c190:	e44e                	sd	s3,8(sp)
    8000c192:	f406                	sd	ra,40(sp)
    8000c194:	f022                	sd	s0,32(sp)
    8000c196:	ec26                	sd	s1,24(sp)
    8000c198:	e84a                	sd	s2,16(sp)
    8000c19a:	89aa                	mv	s3,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c19c:	30047973          	csrrci	s2,mstatus,8
    8000c1a0:	00082797          	auipc	a5,0x82
    8000c1a4:	91878793          	addi	a5,a5,-1768 # 8008dab8 <sched_spinlock>
    8000c1a8:	4685                	li	a3,1
    8000c1aa:	0f50000f          	fence	iorw,ow
    8000c1ae:	1407b72f          	lr.d.aq	a4,(a5)
    8000c1b2:	e701                	bnez	a4,8000c1ba <z_time_slice+0x2c>
    8000c1b4:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c1b8:	fa7d                	bnez	a2,8000c1ae <z_time_slice+0x20>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c1ba:	fb65                	bnez	a4,8000c1aa <z_time_slice+0x1c>
	if (slice_time(_current) && sliceable(_current)) {
    8000c1bc:	00082797          	auipc	a5,0x82
    8000c1c0:	9587a783          	lw	a5,-1704(a5) # 8008db14 <slice_ticks>
    8000c1c4:	0009b417          	auipc	s0,0x9b
    8000c1c8:	fac40413          	addi	s0,s0,-84 # 800a7170 <_kernel>
    8000c1cc:	cbc1                	beqz	a5,8000c25c <z_time_slice+0xce>
    8000c1ce:	cc1ff0ef          	jal	ra,8000be8e <z_current_get>
		&& !z_is_idle_thread_object(thread);
    8000c1d2:	01a55703          	lhu	a4,26(a0)
    8000c1d6:	07f00793          	li	a5,127
	if (slice_time(_current) && sliceable(_current)) {
    8000c1da:	84aa                	mv	s1,a0
		&& !z_is_idle_thread_object(thread);
    8000c1dc:	08e7e063          	bltu	a5,a4,8000c25c <z_time_slice+0xce>
		&& !z_is_thread_prevented_from_running(thread)
    8000c1e0:	01954783          	lbu	a5,25(a0)
    8000c1e4:	8bfd                	andi	a5,a5,31
    8000c1e6:	ebbd                	bnez	a5,8000c25c <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8000c1e8:	01a50703          	lb	a4,26(a0)
    8000c1ec:	00082797          	auipc	a5,0x82
    8000c1f0:	9247a783          	lw	a5,-1756(a5) # 8008db10 <slice_max_prio>
    8000c1f4:	06f74463          	blt	a4,a5,8000c25c <z_time_slice+0xce>
	if (slice_time(_current) && sliceable(_current)) {
    8000c1f8:	02054783          	lbu	a5,32(a0)
    8000c1fc:	e3a5                	bnez	a5,8000c25c <z_time_slice+0xce>
    8000c1fe:	f14027f3          	csrr	a5,mhartid
		if (ticks >= _current_cpu->slice_ticks) {
    8000c202:	1782                	slli	a5,a5,0x20
    8000c204:	9381                	srli	a5,a5,0x20
    8000c206:	02800713          	li	a4,40
    8000c20a:	02e787b3          	mul	a5,a5,a4
    8000c20e:	97a2                	add	a5,a5,s0
    8000c210:	539c                	lw	a5,32(a5)
    8000c212:	02f9c863          	blt	s3,a5,8000c242 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    8000c216:	ebbff0ef          	jal	ra,8000c0d0 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
    8000c21a:	8526                	mv	a0,s1
    8000c21c:	b8fff0ef          	jal	ra,8000bdaa <z_reset_time_slice>
	atomic_clear(&l->locked);
    8000c220:	00082517          	auipc	a0,0x82
    8000c224:	89850513          	addi	a0,a0,-1896 # 8008dab8 <sched_spinlock>
    8000c228:	b1fff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c22c:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c230:	30092073          	csrs	mstatus,s2
}
    8000c234:	70a2                	ld	ra,40(sp)
    8000c236:	7402                	ld	s0,32(sp)
    8000c238:	64e2                	ld	s1,24(sp)
    8000c23a:	6942                	ld	s2,16(sp)
    8000c23c:	69a2                	ld	s3,8(sp)
    8000c23e:	6145                	addi	sp,sp,48
    8000c240:	8082                	ret
    8000c242:	f14027f3          	csrr	a5,mhartid
			_current_cpu->slice_ticks -= ticks;
    8000c246:	1782                	slli	a5,a5,0x20
    8000c248:	9381                	srli	a5,a5,0x20
    8000c24a:	02e787b3          	mul	a5,a5,a4
    8000c24e:	943e                	add	s0,s0,a5
    8000c250:	5008                	lw	a0,32(s0)
    8000c252:	413509bb          	subw	s3,a0,s3
    8000c256:	03342023          	sw	s3,32(s0)
    8000c25a:	b7d9                	j	8000c220 <z_time_slice+0x92>
    8000c25c:	f14027f3          	csrr	a5,mhartid
		_current_cpu->slice_ticks = 0;
    8000c260:	1782                	slli	a5,a5,0x20
    8000c262:	9381                	srli	a5,a5,0x20
    8000c264:	02800713          	li	a4,40
    8000c268:	02e787b3          	mul	a5,a5,a4
    8000c26c:	943e                	add	s0,s0,a5
    8000c26e:	02042023          	sw	zero,32(s0)
    8000c272:	b77d                	j	8000c220 <z_time_slice+0x92>

000000008000c274 <ready_thread>:
    8000c274:	01954783          	lbu	a5,25(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8000c278:	0187971b          	slliw	a4,a5,0x18
    8000c27c:	4187571b          	sraiw	a4,a4,0x18
    8000c280:	0a074163          	bltz	a4,8000c322 <ready_thread+0xae>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8000c284:	01f7f713          	andi	a4,a5,31
    8000c288:	ef49                	bnez	a4,8000c322 <ready_thread+0xae>
    8000c28a:	7918                	ld	a4,48(a0)
{
    8000c28c:	1101                	addi	sp,sp,-32
    8000c28e:	e822                	sd	s0,16(sp)
    8000c290:	ec06                	sd	ra,24(sp)
    8000c292:	e426                	sd	s1,8(sp)
    8000c294:	842a                	mv	s0,a0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8000c296:	eb39                	bnez	a4,8000c2ec <ready_thread+0x78>
	thread->base.thread_state |= _THREAD_QUEUED;
    8000c298:	f807e793          	ori	a5,a5,-128
    8000c29c:	00f50ca3          	sb	a5,25(a0)
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000c2a0:	befff0ef          	jal	ra,8000be8e <z_current_get>
    8000c2a4:	0009b497          	auipc	s1,0x9b
    8000c2a8:	ecc48493          	addi	s1,s1,-308 # 800a7170 <_kernel>
	if (should_queue_thread(thread)) {
    8000c2ac:	04a40e63          	beq	s0,a0,8000c308 <ready_thread+0x94>
	return list->head == list;
    8000c2b0:	68bc                	ld	a5,80(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000c2b2:	0009b617          	auipc	a2,0x9b
    8000c2b6:	f0e60613          	addi	a2,a2,-242 # 800a71c0 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
    8000c2ba:	6cb4                	ld	a3,88(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000c2bc:	04c78163          	beq	a5,a2,8000c2fe <ready_thread+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000c2c0:	cf9d                	beqz	a5,8000c2fe <ready_thread+0x8a>
	int32_t b1 = thread_1->base.prio;
    8000c2c2:	01a40583          	lb	a1,26(s0)
	int32_t b2 = thread_2->base.prio;
    8000c2c6:	01a78503          	lb	a0,26(a5)
	if (b1 != b2) {
    8000c2ca:	02a58663          	beq	a1,a0,8000c2f6 <ready_thread+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000c2ce:	40b5073b          	subw	a4,a0,a1
    8000c2d2:	02e05263          	blez	a4,8000c2f6 <ready_thread+0x82>
	sys_dnode_t *const prev = successor->prev;
    8000c2d6:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000c2d8:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000c2da:	e418                	sd	a4,8(s0)
	prev->next = node;
    8000c2dc:	e300                	sd	s0,0(a4)
	successor->prev = node;
    8000c2de:	e780                	sd	s0,8(a5)
		update_cache(0);
    8000c2e0:	4501                	li	a0,0
    8000c2e2:	96fff0ef          	jal	ra,8000bc50 <update_cache>
		_kernel.pending_ipi = true;
    8000c2e6:	4785                	li	a5,1
    8000c2e8:	06f48023          	sb	a5,96(s1)
}
    8000c2ec:	60e2                	ld	ra,24(sp)
    8000c2ee:	6442                	ld	s0,16(sp)
    8000c2f0:	64a2                	ld	s1,8(sp)
    8000c2f2:	6105                	addi	sp,sp,32
    8000c2f4:	8082                	ret
	return (node == list->tail) ? NULL : node->next;
    8000c2f6:	00d78463          	beq	a5,a3,8000c2fe <ready_thread+0x8a>
    8000c2fa:	639c                	ld	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000c2fc:	f7e9                	bnez	a5,8000c2c6 <ready_thread+0x52>
	node->next = list;
    8000c2fe:	e010                	sd	a2,0(s0)
	node->prev = tail;
    8000c300:	e414                	sd	a3,8(s0)
	tail->next = node;
    8000c302:	e280                	sd	s0,0(a3)
	list->tail = node;
    8000c304:	eca0                	sd	s0,88(s1)
}
    8000c306:	bfe9                	j	8000c2e0 <ready_thread+0x6c>
    8000c308:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = true;
    8000c30c:	1782                	slli	a5,a5,0x20
    8000c30e:	02800713          	li	a4,40
    8000c312:	9381                	srli	a5,a5,0x20
    8000c314:	02e787b3          	mul	a5,a5,a4
    8000c318:	4705                	li	a4,1
    8000c31a:	97a6                	add	a5,a5,s1
    8000c31c:	02e782a3          	sb	a4,37(a5)
    8000c320:	b7c1                	j	8000c2e0 <ready_thread+0x6c>
    8000c322:	8082                	ret

000000008000c324 <z_ready_thread>:
{
    8000c324:	1101                	addi	sp,sp,-32
    8000c326:	e822                	sd	s0,16(sp)
    8000c328:	ec06                	sd	ra,24(sp)
    8000c32a:	e426                	sd	s1,8(sp)
    8000c32c:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c32e:	300474f3          	csrrci	s1,mstatus,8
    8000c332:	00081797          	auipc	a5,0x81
    8000c336:	78678793          	addi	a5,a5,1926 # 8008dab8 <sched_spinlock>
    8000c33a:	4685                	li	a3,1
    8000c33c:	0f50000f          	fence	iorw,ow
    8000c340:	1407b72f          	lr.d.aq	a4,(a5)
    8000c344:	e701                	bnez	a4,8000c34c <z_ready_thread+0x28>
    8000c346:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c34a:	fa7d                	bnez	a2,8000c340 <z_ready_thread+0x1c>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c34c:	fb65                	bnez	a4,8000c33c <z_ready_thread+0x18>
		if (!thread_active_elsewhere(thread)) {
    8000c34e:	8522                	mv	a0,s0
    8000c350:	921ff0ef          	jal	ra,8000bc70 <thread_active_elsewhere>
    8000c354:	e501                	bnez	a0,8000c35c <z_ready_thread+0x38>
			ready_thread(thread);
    8000c356:	8522                	mv	a0,s0
    8000c358:	f1dff0ef          	jal	ra,8000c274 <ready_thread>
	atomic_clear(&l->locked);
    8000c35c:	00081517          	auipc	a0,0x81
    8000c360:	75c50513          	addi	a0,a0,1884 # 8008dab8 <sched_spinlock>
    8000c364:	9e3ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c368:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c36a:	3004a073          	csrs	mstatus,s1
}
    8000c36e:	60e2                	ld	ra,24(sp)
    8000c370:	6442                	ld	s0,16(sp)
    8000c372:	64a2                	ld	s1,8(sp)
    8000c374:	6105                	addi	sp,sp,32
    8000c376:	8082                	ret

000000008000c378 <z_thread_timeout>:
{
    8000c378:	7179                	addi	sp,sp,-48
    8000c37a:	f022                	sd	s0,32(sp)
    8000c37c:	f406                	sd	ra,40(sp)
    8000c37e:	ec26                	sd	s1,24(sp)
    8000c380:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c382:	300474f3          	csrrci	s1,mstatus,8
    8000c386:	00081797          	auipc	a5,0x81
    8000c38a:	73278793          	addi	a5,a5,1842 # 8008dab8 <sched_spinlock>
    8000c38e:	4685                	li	a3,1
    8000c390:	0f50000f          	fence	iorw,ow
    8000c394:	1407b72f          	lr.d.aq	a4,(a5)
    8000c398:	e701                	bnez	a4,8000c3a0 <z_thread_timeout+0x28>
    8000c39a:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c39e:	fa7d                	bnez	a2,8000c394 <z_thread_timeout+0x1c>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c3a0:	fb65                	bnez	a4,8000c390 <z_thread_timeout+0x18>
		if (!killed) {
    8000c3a2:	fe944783          	lbu	a5,-23(s0)
    8000c3a6:	0287f793          	andi	a5,a5,40
    8000c3aa:	e38d                	bnez	a5,8000c3cc <z_thread_timeout+0x54>
			if (thread->base.pended_on != NULL) {
    8000c3ac:	fe043783          	ld	a5,-32(s0)
	struct k_thread *thread = CONTAINER_OF(timeout,
    8000c3b0:	fd040513          	addi	a0,s0,-48
			if (thread->base.pended_on != NULL) {
    8000c3b4:	c789                	beqz	a5,8000c3be <z_thread_timeout+0x46>
				unpend_thread_no_timeout(thread);
    8000c3b6:	e42a                	sd	a0,8(sp)
    8000c3b8:	8f7ff0ef          	jal	ra,8000bcae <unpend_thread_no_timeout>
    8000c3bc:	6522                	ld	a0,8(sp)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8000c3be:	fe944783          	lbu	a5,-23(s0)
    8000c3c2:	9bad                	andi	a5,a5,-21
    8000c3c4:	fef404a3          	sb	a5,-23(s0)
			ready_thread(thread);
    8000c3c8:	eadff0ef          	jal	ra,8000c274 <ready_thread>
	atomic_clear(&l->locked);
    8000c3cc:	00081517          	auipc	a0,0x81
    8000c3d0:	6ec50513          	addi	a0,a0,1772 # 8008dab8 <sched_spinlock>
    8000c3d4:	973ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c3d8:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c3da:	3004a073          	csrs	mstatus,s1
}
    8000c3de:	70a2                	ld	ra,40(sp)
    8000c3e0:	7402                	ld	s0,32(sp)
    8000c3e2:	64e2                	ld	s1,24(sp)
    8000c3e4:	6145                	addi	sp,sp,48
    8000c3e6:	8082                	ret

000000008000c3e8 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8000c3e8:	01954783          	lbu	a5,25(a0)
    8000c3ec:	0087f713          	andi	a4,a5,8
    8000c3f0:	e749                	bnez	a4,8000c47a <end_thread+0x92>
		thread->base.thread_state |= _THREAD_DEAD;
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8000c3f2:	fdf7f713          	andi	a4,a5,-33
    8000c3f6:	00876713          	ori	a4,a4,8
{
    8000c3fa:	1101                	addi	sp,sp,-32
		if (z_is_thread_queued(thread)) {
    8000c3fc:	0187169b          	slliw	a3,a4,0x18
{
    8000c400:	e822                	sd	s0,16(sp)
    8000c402:	ec06                	sd	ra,24(sp)
    8000c404:	e426                	sd	s1,8(sp)
    8000c406:	e04a                	sd	s2,0(sp)
		if (z_is_thread_queued(thread)) {
    8000c408:	4186d69b          	sraiw	a3,a3,0x18
    8000c40c:	842a                	mv	s0,a0
    8000c40e:	0206cb63          	bltz	a3,8000c444 <end_thread+0x5c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8000c412:	00e50ca3          	sb	a4,25(a0)
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8000c416:	681c                	ld	a5,16(s0)
    8000c418:	c781                	beqz	a5,8000c420 <end_thread+0x38>
			unpend_thread_no_timeout(thread);
    8000c41a:	8522                	mv	a0,s0
    8000c41c:	893ff0ef          	jal	ra,8000bcae <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8000c420:	03040513          	addi	a0,s0,48
    8000c424:	553000ef          	jal	ra,8000d176 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8000c428:	0d040913          	addi	s2,s0,208
	return list->head == list;
    8000c42c:	6864                	ld	s1,208(s0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000c42e:	01248363          	beq	s1,s2,8000c434 <end_thread+0x4c>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8000c432:	e49d                	bnez	s1,8000c460 <end_thread+0x78>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    8000c434:	6442                	ld	s0,16(sp)
    8000c436:	60e2                	ld	ra,24(sp)
    8000c438:	64a2                	ld	s1,8(sp)
    8000c43a:	6902                	ld	s2,0(sp)
		update_cache(1);
    8000c43c:	4505                	li	a0,1
}
    8000c43e:	6105                	addi	sp,sp,32
		update_cache(1);
    8000c440:	811ff06f          	j	8000bc50 <update_cache>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000c444:	05f7f793          	andi	a5,a5,95
    8000c448:	0087e793          	ori	a5,a5,8
    8000c44c:	00f50ca3          	sb	a5,25(a0)
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000c450:	a3fff0ef          	jal	ra,8000be8e <z_current_get>
	if (should_queue_thread(thread)) {
    8000c454:	fca401e3          	beq	s0,a0,8000c416 <end_thread+0x2e>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000c458:	8522                	mv	a0,s0
    8000c45a:	fb6ff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
}
    8000c45e:	bf65                	j	8000c416 <end_thread+0x2e>
		unpend_thread_no_timeout(thread);
    8000c460:	8526                	mv	a0,s1
    8000c462:	84dff0ef          	jal	ra,8000bcae <unpend_thread_no_timeout>
    8000c466:	03048513          	addi	a0,s1,48
    8000c46a:	50d000ef          	jal	ra,8000d176 <z_abort_timeout>
		ready_thread(thread);
    8000c46e:	8526                	mv	a0,s1
    8000c470:	1004a023          	sw	zero,256(s1)
    8000c474:	e01ff0ef          	jal	ra,8000c274 <ready_thread>
    8000c478:	bf55                	j	8000c42c <end_thread+0x44>
    8000c47a:	8082                	ret

000000008000c47c <z_swap_next_thread>:
{
    8000c47c:	1101                	addi	sp,sp,-32
	return _priq_run_best(curr_cpu_runq());
    8000c47e:	0009b517          	auipc	a0,0x9b
    8000c482:	d4250513          	addi	a0,a0,-702 # 800a71c0 <_kernel+0x50>
{
    8000c486:	ec06                	sd	ra,24(sp)
    8000c488:	e822                	sd	s0,16(sp)
    8000c48a:	e426                	sd	s1,8(sp)
    8000c48c:	e04a                	sd	s2,0(sp)
	return _priq_run_best(curr_cpu_runq());
    8000c48e:	96fff0ef          	jal	ra,8000bdfc <z_priq_dumb_best>
    8000c492:	842a                	mv	s0,a0
	if (is_aborting(_current)) {
    8000c494:	9fbff0ef          	jal	ra,8000be8e <z_current_get>
    8000c498:	01954783          	lbu	a5,25(a0)
    8000c49c:	84aa                	mv	s1,a0
    8000c49e:	0207f793          	andi	a5,a5,32
    8000c4a2:	c399                	beqz	a5,8000c4a8 <z_swap_next_thread+0x2c>
		end_thread(_current);
    8000c4a4:	f45ff0ef          	jal	ra,8000c3e8 <end_thread>
	return (thread->base.thread_state & state) != 0U;
    8000c4a8:	0194c783          	lbu	a5,25(s1)
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    8000c4ac:	0009b917          	auipc	s2,0x9b
    8000c4b0:	cc490913          	addi	s2,s2,-828 # 800a7170 <_kernel>
    8000c4b4:	01f7f693          	andi	a3,a5,31
	if (thread == NULL) {
    8000c4b8:	e819                	bnez	s0,8000c4ce <z_swap_next_thread+0x52>
    8000c4ba:	f1402773          	csrr	a4,mhartid
		thread = _current_cpu->idle_thread;
    8000c4be:	1702                	slli	a4,a4,0x20
    8000c4c0:	9301                	srli	a4,a4,0x20
    8000c4c2:	02800613          	li	a2,40
    8000c4c6:	02c70733          	mul	a4,a4,a2
    8000c4ca:	974a                	add	a4,a4,s2
    8000c4cc:	6f00                	ld	s0,24(a4)
	if (active) {
    8000c4ce:	eea1                	bnez	a3,8000c526 <z_swap_next_thread+0xaa>
	int32_t b1 = thread_1->base.prio;
    8000c4d0:	01a48583          	lb	a1,26(s1)
	int32_t b2 = thread_2->base.prio;
    8000c4d4:	01a40603          	lb	a2,26(s0)
	if (b1 != b2) {
    8000c4d8:	00c58763          	beq	a1,a2,8000c4e6 <z_swap_next_thread+0x6a>
		return b2 - b1;
    8000c4dc:	40b6073b          	subw	a4,a2,a1
		if ((cmp > 0) || ((cmp == 0) && !_current_cpu->swap_ok)) {
    8000c4e0:	00e04f63          	bgtz	a4,8000c4fe <z_swap_next_thread+0x82>
    8000c4e4:	ef11                	bnez	a4,8000c500 <z_swap_next_thread+0x84>
    8000c4e6:	f1402773          	csrr	a4,mhartid
    8000c4ea:	1702                	slli	a4,a4,0x20
    8000c4ec:	9301                	srli	a4,a4,0x20
    8000c4ee:	02800693          	li	a3,40
    8000c4f2:	02d70733          	mul	a4,a4,a3
    8000c4f6:	974a                	add	a4,a4,s2
    8000c4f8:	02574703          	lbu	a4,37(a4)
    8000c4fc:	e311                	bnez	a4,8000c500 <z_swap_next_thread+0x84>
    8000c4fe:	8426                	mv	s0,s1
    8000c500:	f1402773          	csrr	a4,mhartid
		if (!should_preempt(thread, _current_cpu->swap_ok)) {
    8000c504:	1702                	slli	a4,a4,0x20
    8000c506:	9301                	srli	a4,a4,0x20
    8000c508:	02800693          	li	a3,40
    8000c50c:	02d70733          	mul	a4,a4,a3
    8000c510:	974a                	add	a4,a4,s2
	if (preempt_ok != 0) {
    8000c512:	02574703          	lbu	a4,37(a4)
    8000c516:	ef39                	bnez	a4,8000c574 <z_swap_next_thread+0xf8>
	if (is_preempt(_current) || is_metairq(thread)) {
    8000c518:	01a4d683          	lhu	a3,26(s1)
    8000c51c:	07f00713          	li	a4,127
    8000c520:	04d77a63          	bgeu	a4,a3,8000c574 <z_swap_next_thread+0xf8>
    8000c524:	8426                	mv	s0,s1
	return (thread->base.thread_state & state) != 0U;
    8000c526:	01944783          	lbu	a5,25(s0)
	if (z_is_thread_queued(thread)) {
    8000c52a:	0187971b          	slliw	a4,a5,0x18
    8000c52e:	4187571b          	sraiw	a4,a4,0x18
    8000c532:	00075b63          	bgez	a4,8000c548 <z_swap_next_thread+0xcc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000c536:	07f7f793          	andi	a5,a5,127
    8000c53a:	00f40ca3          	sb	a5,25(s0)
	if (should_queue_thread(thread)) {
    8000c53e:	00848563          	beq	s1,s0,8000c548 <z_swap_next_thread+0xcc>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000c542:	8522                	mv	a0,s0
    8000c544:	eccff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
    8000c548:	f14027f3          	csrr	a5,mhartid
	_current_cpu->swap_ok = false;
    8000c54c:	1782                	slli	a5,a5,0x20
    8000c54e:	9381                	srli	a5,a5,0x20
    8000c550:	02800713          	li	a4,40
    8000c554:	02e787b3          	mul	a5,a5,a4
    8000c558:	97ca                	add	a5,a5,s2
    8000c55a:	020782a3          	sb	zero,37(a5)
	if (ret == _current) {
    8000c55e:	00849463          	bne	s1,s0,8000c566 <z_swap_next_thread+0xea>
		signal_pending_ipi();
    8000c562:	faeff0ef          	jal	ra,8000bd10 <signal_pending_ipi>
}
    8000c566:	60e2                	ld	ra,24(sp)
    8000c568:	8522                	mv	a0,s0
    8000c56a:	6442                	ld	s0,16(sp)
    8000c56c:	64a2                	ld	s1,8(sp)
    8000c56e:	6902                	ld	s2,0(sp)
    8000c570:	6105                	addi	sp,sp,32
    8000c572:	8082                	ret
	if (thread != _current && active &&
    8000c574:	fa8489e3          	beq	s1,s0,8000c526 <z_swap_next_thread+0xaa>
    8000c578:	0204c703          	lbu	a4,32(s1)
    8000c57c:	f74d                	bnez	a4,8000c526 <z_swap_next_thread+0xaa>
		!z_is_idle_thread_object(_current) && !queued) {
    8000c57e:	0187971b          	slliw	a4,a5,0x18
    8000c582:	4187571b          	sraiw	a4,a4,0x18
    8000c586:	fa0740e3          	bltz	a4,8000c526 <z_swap_next_thread+0xaa>
	thread->base.thread_state |= _THREAD_QUEUED;
    8000c58a:	f807e793          	ori	a5,a5,-128
    8000c58e:	00f48ca3          	sb	a5,25(s1)
    8000c592:	f1402773          	csrr	a4,mhartid
		_current_cpu->swap_ok = true;
    8000c596:	1702                	slli	a4,a4,0x20
    8000c598:	02800793          	li	a5,40
    8000c59c:	9301                	srli	a4,a4,0x20
    8000c59e:	02f70733          	mul	a4,a4,a5
    8000c5a2:	4785                	li	a5,1
    8000c5a4:	974a                	add	a4,a4,s2
    8000c5a6:	02f702a3          	sb	a5,37(a4)
}
    8000c5aa:	bfb5                	j	8000c526 <z_swap_next_thread+0xaa>

000000008000c5ac <z_swap_irqlock>:
{
    8000c5ac:	7179                	addi	sp,sp,-48
    8000c5ae:	f406                	sd	ra,40(sp)
    8000c5b0:	ec26                	sd	s1,24(sp)
    8000c5b2:	e84a                	sd	s2,16(sp)
    8000c5b4:	f022                	sd	s0,32(sp)
    8000c5b6:	e44e                	sd	s3,8(sp)
    8000c5b8:	e052                	sd	s4,0(sp)
    8000c5ba:	892a                	mv	s2,a0
	old_thread = _current;
    8000c5bc:	8d3ff0ef          	jal	ra,8000be8e <z_current_get>
    8000c5c0:	84aa                	mv	s1,a0
	z_check_stack_sentinel();
    8000c5c2:	9d4ff0ef          	jal	ra,8000b796 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
    8000c5c6:	57d5                	li	a5,-11
    8000c5c8:	10f4a023          	sw	a5,256(s1)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c5cc:	300477f3          	csrrci	a5,mstatus,8
    8000c5d0:	00081797          	auipc	a5,0x81
    8000c5d4:	4e878793          	addi	a5,a5,1256 # 8008dab8 <sched_spinlock>
    8000c5d8:	4685                	li	a3,1
    8000c5da:	0f50000f          	fence	iorw,ow
    8000c5de:	1407b72f          	lr.d.aq	a4,(a5)
    8000c5e2:	e701                	bnez	a4,8000c5ea <z_swap_irqlock+0x3e>
    8000c5e4:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c5e8:	fa7d                	bnez	a2,8000c5de <z_swap_irqlock+0x32>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c5ea:	fb65                	bnez	a4,8000c5da <z_swap_irqlock+0x2e>
	new_thread = z_swap_next_thread();
    8000c5ec:	e91ff0ef          	jal	ra,8000c47c <z_swap_next_thread>
    8000c5f0:	842a                	mv	s0,a0
	if (new_thread != old_thread) {
    8000c5f2:	08a48b63          	beq	s1,a0,8000c688 <z_swap_irqlock+0xdc>
    8000c5f6:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = 0;
    8000c5fa:	1782                	slli	a5,a5,0x20
    8000c5fc:	02800a13          	li	s4,40
    8000c600:	9381                	srli	a5,a5,0x20
    8000c602:	034787b3          	mul	a5,a5,s4
    8000c606:	0009b997          	auipc	s3,0x9b
    8000c60a:	b6a98993          	addi	s3,s3,-1174 # 800a7170 <_kernel>
    8000c60e:	97ce                	add	a5,a5,s3
    8000c610:	020782a3          	sb	zero,37(a5)
    8000c614:	f14027f3          	csrr	a5,mhartid
		new_thread->base.cpu = arch_curr_cpu()->id;
    8000c618:	1782                	slli	a5,a5,0x20
    8000c61a:	9381                	srli	a5,a5,0x20
    8000c61c:	034787b3          	mul	a5,a5,s4
    8000c620:	97ce                	add	a5,a5,s3
    8000c622:	0247c783          	lbu	a5,36(a5)
    8000c626:	02f500a3          	sb	a5,33(a0)
			z_smp_release_global_lock(new_thread);
    8000c62a:	149000ef          	jal	ra,8000cf72 <z_smp_release_global_lock>
		wait_for_switch(new_thread);
    8000c62e:	8522                	mv	a0,s0
    8000c630:	ef8ff0ef          	jal	ra,8000bd28 <wait_for_switch>
    8000c634:	f14027f3          	csrr	a5,mhartid
		_current_cpu->current = new_thread;
    8000c638:	1782                	slli	a5,a5,0x20
    8000c63a:	9381                	srli	a5,a5,0x20
    8000c63c:	034787b3          	mul	a5,a5,s4
		z_reset_time_slice(new_thread);
    8000c640:	8522                	mv	a0,s0
		_current_cpu->current = new_thread;
    8000c642:	99be                	add	s3,s3,a5
    8000c644:	0089b823          	sd	s0,16(s3)
		z_reset_time_slice(new_thread);
    8000c648:	f62ff0ef          	jal	ra,8000bdaa <z_reset_time_slice>
		z_requeue_current(old_thread);
    8000c64c:	8526                	mv	a0,s1
    8000c64e:	f06ff0ef          	jal	ra,8000bd54 <z_requeue_current>
		void *newsh = new_thread->switch_handle;
    8000c652:	10843983          	ld	s3,264(s0)
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
#endif
#ifdef CONFIG_SMP
	atomic_clear(&l->locked);
    8000c656:	00081517          	auipc	a0,0x81
    8000c65a:	46250513          	addi	a0,a0,1122 # 8008dab8 <sched_spinlock>
			new_thread->switch_handle = NULL;
    8000c65e:	10043423          	sd	zero,264(s0)
    8000c662:	ee4ff0ef          	jal	ra,8000bd46 <atomic_clear>
	z_riscv_switch(new, old);
    8000c666:	85a6                	mv	a1,s1
    8000c668:	854e                	mv	a0,s3
    8000c66a:	85ff50ef          	jal	ra,80001ec8 <z_riscv_switch>
		irq_unlock(key);
    8000c66e:	854a                	mv	a0,s2
    8000c670:	0cb000ef          	jal	ra,8000cf3a <z_smp_global_unlock>
}
    8000c674:	70a2                	ld	ra,40(sp)
    8000c676:	7402                	ld	s0,32(sp)
    8000c678:	1004a503          	lw	a0,256(s1)
    8000c67c:	6942                	ld	s2,16(sp)
    8000c67e:	64e2                	ld	s1,24(sp)
    8000c680:	69a2                	ld	s3,8(sp)
    8000c682:	6a02                	ld	s4,0(sp)
    8000c684:	6145                	addi	sp,sp,48
    8000c686:	8082                	ret
    8000c688:	00081517          	auipc	a0,0x81
    8000c68c:	43050513          	addi	a0,a0,1072 # 8008dab8 <sched_spinlock>
    8000c690:	eb6ff0ef          	jal	ra,8000bd46 <atomic_clear>
#endif
}
    8000c694:	bfe9                	j	8000c66e <z_swap_irqlock+0xc2>

000000008000c696 <z_reschedule_irqlock>:
{
    8000c696:	1141                	addi	sp,sp,-16
    8000c698:	e022                	sd	s0,0(sp)
    8000c69a:	e406                	sd	ra,8(sp)
    8000c69c:	842a                	mv	s0,a0
	if (resched(key)) {
    8000c69e:	e32ff0ef          	jal	ra,8000bcd0 <resched>
    8000c6a2:	c519                	beqz	a0,8000c6b0 <z_reschedule_irqlock+0x1a>
		z_swap_irqlock(key);
    8000c6a4:	8522                	mv	a0,s0
}
    8000c6a6:	6402                	ld	s0,0(sp)
    8000c6a8:	60a2                	ld	ra,8(sp)
    8000c6aa:	0141                	addi	sp,sp,16
		z_swap_irqlock(key);
    8000c6ac:	f01ff06f          	j	8000c5ac <z_swap_irqlock>
		irq_unlock(key);
    8000c6b0:	8522                	mv	a0,s0
    8000c6b2:	089000ef          	jal	ra,8000cf3a <z_smp_global_unlock>
}
    8000c6b6:	6402                	ld	s0,0(sp)
    8000c6b8:	60a2                	ld	ra,8(sp)
    8000c6ba:	0141                	addi	sp,sp,16
		signal_pending_ipi();
    8000c6bc:	e54ff06f          	j	8000bd10 <signal_pending_ipi>

000000008000c6c0 <z_reschedule_unlocked>:
    8000c6c0:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
    8000c6c4:	2501                	sext.w	a0,a0
    8000c6c6:	fd1ff06f          	j	8000c696 <z_reschedule_irqlock>

000000008000c6ca <k_sched_unlock>:
{
    8000c6ca:	1141                	addi	sp,sp,-16
    8000c6cc:	e406                	sd	ra,8(sp)
    8000c6ce:	e022                	sd	s0,0(sp)
    8000c6d0:	30047473          	csrrci	s0,mstatus,8
    8000c6d4:	00081797          	auipc	a5,0x81
    8000c6d8:	3e478793          	addi	a5,a5,996 # 8008dab8 <sched_spinlock>
    8000c6dc:	4685                	li	a3,1
    8000c6de:	0f50000f          	fence	iorw,ow
    8000c6e2:	1407b72f          	lr.d.aq	a4,(a5)
    8000c6e6:	e701                	bnez	a4,8000c6ee <k_sched_unlock+0x24>
    8000c6e8:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c6ec:	fa7d                	bnez	a2,8000c6e2 <k_sched_unlock+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c6ee:	fb65                	bnez	a4,8000c6de <k_sched_unlock+0x14>
		++_current->base.sched_locked;
    8000c6f0:	f9eff0ef          	jal	ra,8000be8e <z_current_get>
    8000c6f4:	01b54783          	lbu	a5,27(a0)
			  : "r" (key & MSTATUS_IEN)
    8000c6f8:	8821                	andi	s0,s0,8
    8000c6fa:	2785                	addiw	a5,a5,1
    8000c6fc:	00f50da3          	sb	a5,27(a0)
		update_cache(0);
    8000c700:	4501                	li	a0,0
    8000c702:	d4eff0ef          	jal	ra,8000bc50 <update_cache>
	atomic_clear(&l->locked);
    8000c706:	00081517          	auipc	a0,0x81
    8000c70a:	3b250513          	addi	a0,a0,946 # 8008dab8 <sched_spinlock>
    8000c70e:	e38ff0ef          	jal	ra,8000bd46 <atomic_clear>
	__asm__ volatile ("csrs mstatus, %0"
    8000c712:	30042073          	csrs	mstatus,s0
}
    8000c716:	6402                	ld	s0,0(sp)
    8000c718:	60a2                	ld	ra,8(sp)
    8000c71a:	0141                	addi	sp,sp,16
	z_reschedule_unlocked();
    8000c71c:	fa5ff06f          	j	8000c6c0 <z_reschedule_unlocked>

000000008000c720 <z_swap>:
{
    8000c720:	7179                	addi	sp,sp,-48
    8000c722:	f406                	sd	ra,40(sp)
    8000c724:	f022                	sd	s0,32(sp)
    8000c726:	ec26                	sd	s1,24(sp)
    8000c728:	e84a                	sd	s2,16(sp)
    8000c72a:	e44e                	sd	s3,8(sp)
    8000c72c:	892e                	mv	s2,a1
    8000c72e:	e052                	sd	s4,0(sp)
    8000c730:	842a                	mv	s0,a0
	old_thread = _current;
    8000c732:	f5cff0ef          	jal	ra,8000be8e <z_current_get>
    8000c736:	84aa                	mv	s1,a0
	z_check_stack_sentinel();
    8000c738:	85eff0ef          	jal	ra,8000b796 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
    8000c73c:	57d5                	li	a5,-11
    8000c73e:	10f4a023          	sw	a5,256(s1)
	if (is_spinlock && lock != NULL && lock != &sched_spinlock) {
    8000c742:	00081997          	auipc	s3,0x81
    8000c746:	37698993          	addi	s3,s3,886 # 8008dab8 <sched_spinlock>
    8000c74a:	c411                	beqz	s0,8000c756 <z_swap+0x36>
    8000c74c:	03340163          	beq	s0,s3,8000c76e <z_swap+0x4e>
	atomic_clear(&l->locked);
    8000c750:	8522                	mv	a0,s0
    8000c752:	df4ff0ef          	jal	ra,8000bd46 <atomic_clear>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c756:	300477f3          	csrrci	a5,mstatus,8
    8000c75a:	4705                	li	a4,1
    8000c75c:	0f50000f          	fence	iorw,ow
    8000c760:	1409b7af          	lr.d.aq	a5,(s3)
    8000c764:	e781                	bnez	a5,8000c76c <z_swap+0x4c>
    8000c766:	1ce9b6af          	sc.d.aq	a3,a4,(s3)
    8000c76a:	fafd                	bnez	a3,8000c760 <z_swap+0x40>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c76c:	fbe5                	bnez	a5,8000c75c <z_swap+0x3c>
	new_thread = z_swap_next_thread();
    8000c76e:	d0fff0ef          	jal	ra,8000c47c <z_swap_next_thread>
    8000c772:	842a                	mv	s0,a0
	if (new_thread != old_thread) {
    8000c774:	08a48963          	beq	s1,a0,8000c806 <z_swap+0xe6>
    8000c778:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = 0;
    8000c77c:	1782                	slli	a5,a5,0x20
    8000c77e:	02800a13          	li	s4,40
    8000c782:	9381                	srli	a5,a5,0x20
    8000c784:	034787b3          	mul	a5,a5,s4
    8000c788:	0009b997          	auipc	s3,0x9b
    8000c78c:	9e898993          	addi	s3,s3,-1560 # 800a7170 <_kernel>
    8000c790:	97ce                	add	a5,a5,s3
    8000c792:	020782a3          	sb	zero,37(a5)
    8000c796:	f14027f3          	csrr	a5,mhartid
		new_thread->base.cpu = arch_curr_cpu()->id;
    8000c79a:	1782                	slli	a5,a5,0x20
    8000c79c:	9381                	srli	a5,a5,0x20
    8000c79e:	034787b3          	mul	a5,a5,s4
    8000c7a2:	97ce                	add	a5,a5,s3
    8000c7a4:	0247c783          	lbu	a5,36(a5)
    8000c7a8:	02f500a3          	sb	a5,33(a0)
		wait_for_switch(new_thread);
    8000c7ac:	d7cff0ef          	jal	ra,8000bd28 <wait_for_switch>
    8000c7b0:	f14027f3          	csrr	a5,mhartid
		_current_cpu->current = new_thread;
    8000c7b4:	1782                	slli	a5,a5,0x20
    8000c7b6:	9381                	srli	a5,a5,0x20
    8000c7b8:	034787b3          	mul	a5,a5,s4
		z_reset_time_slice(new_thread);
    8000c7bc:	8522                	mv	a0,s0
		_current_cpu->current = new_thread;
    8000c7be:	99be                	add	s3,s3,a5
    8000c7c0:	0089b823          	sd	s0,16(s3)
		z_reset_time_slice(new_thread);
    8000c7c4:	de6ff0ef          	jal	ra,8000bdaa <z_reset_time_slice>
		z_requeue_current(old_thread);
    8000c7c8:	8526                	mv	a0,s1
    8000c7ca:	d8aff0ef          	jal	ra,8000bd54 <z_requeue_current>
		void *newsh = new_thread->switch_handle;
    8000c7ce:	10843983          	ld	s3,264(s0)
	atomic_clear(&l->locked);
    8000c7d2:	00081517          	auipc	a0,0x81
    8000c7d6:	2e650513          	addi	a0,a0,742 # 8008dab8 <sched_spinlock>
			new_thread->switch_handle = NULL;
    8000c7da:	10043423          	sd	zero,264(s0)
    8000c7de:	d68ff0ef          	jal	ra,8000bd46 <atomic_clear>
    8000c7e2:	85a6                	mv	a1,s1
    8000c7e4:	854e                	mv	a0,s3
    8000c7e6:	ee2f50ef          	jal	ra,80001ec8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
    8000c7ea:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c7ee:	30092073          	csrs	mstatus,s2
}
    8000c7f2:	70a2                	ld	ra,40(sp)
    8000c7f4:	7402                	ld	s0,32(sp)
    8000c7f6:	1004a503          	lw	a0,256(s1)
    8000c7fa:	6942                	ld	s2,16(sp)
    8000c7fc:	64e2                	ld	s1,24(sp)
    8000c7fe:	69a2                	ld	s3,8(sp)
    8000c800:	6a02                	ld	s4,0(sp)
    8000c802:	6145                	addi	sp,sp,48
    8000c804:	8082                	ret
    8000c806:	00081517          	auipc	a0,0x81
    8000c80a:	2b250513          	addi	a0,a0,690 # 8008dab8 <sched_spinlock>
    8000c80e:	d38ff0ef          	jal	ra,8000bd46 <atomic_clear>
}
    8000c812:	bfe1                	j	8000c7ea <z_swap+0xca>

000000008000c814 <z_reschedule>:
{
    8000c814:	1101                	addi	sp,sp,-32
    8000c816:	e426                	sd	s1,8(sp)
    8000c818:	84aa                	mv	s1,a0
	if (resched(key.key) && need_swap()) {
    8000c81a:	0005851b          	sext.w	a0,a1
{
    8000c81e:	e822                	sd	s0,16(sp)
    8000c820:	ec06                	sd	ra,24(sp)
    8000c822:	842e                	mv	s0,a1
	if (resched(key.key) && need_swap()) {
    8000c824:	cacff0ef          	jal	ra,8000bcd0 <resched>
    8000c828:	c909                	beqz	a0,8000c83a <z_reschedule+0x26>
		z_swap(lock, key);
    8000c82a:	85a2                	mv	a1,s0
}
    8000c82c:	6442                	ld	s0,16(sp)
    8000c82e:	60e2                	ld	ra,24(sp)
		z_swap(lock, key);
    8000c830:	8526                	mv	a0,s1
}
    8000c832:	64a2                	ld	s1,8(sp)
    8000c834:	6105                	addi	sp,sp,32
		z_swap(lock, key);
    8000c836:	eebff06f          	j	8000c720 <z_swap>
	atomic_clear(&l->locked);
    8000c83a:	8526                	mv	a0,s1
    8000c83c:	d0aff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c840:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c842:	30042073          	csrs	mstatus,s0
}
    8000c846:	6442                	ld	s0,16(sp)
    8000c848:	60e2                	ld	ra,24(sp)
    8000c84a:	64a2                	ld	s1,8(sp)
    8000c84c:	6105                	addi	sp,sp,32
		signal_pending_ipi();
    8000c84e:	cc2ff06f          	j	8000bd10 <signal_pending_ipi>

000000008000c852 <z_sched_start>:
{
    8000c852:	1141                	addi	sp,sp,-16
    8000c854:	e406                	sd	ra,8(sp)
    8000c856:	e022                	sd	s0,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c858:	30047473          	csrrci	s0,mstatus,8
    8000c85c:	00081797          	auipc	a5,0x81
    8000c860:	25c78793          	addi	a5,a5,604 # 8008dab8 <sched_spinlock>
    8000c864:	4685                	li	a3,1
    8000c866:	0f50000f          	fence	iorw,ow
    8000c86a:	1407b72f          	lr.d.aq	a4,(a5)
    8000c86e:	e701                	bnez	a4,8000c876 <z_sched_start+0x24>
    8000c870:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c874:	fa7d                	bnez	a2,8000c86a <z_sched_start+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c876:	fb65                	bnez	a4,8000c866 <z_sched_start+0x14>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8000c878:	01954783          	lbu	a5,25(a0)
	if (z_has_thread_started(thread)) {
    8000c87c:	0047f713          	andi	a4,a5,4
    8000c880:	ef11                	bnez	a4,8000c89c <z_sched_start+0x4a>
	atomic_clear(&l->locked);
    8000c882:	00081517          	auipc	a0,0x81
    8000c886:	23650513          	addi	a0,a0,566 # 8008dab8 <sched_spinlock>
    8000c88a:	cbcff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000c88e:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    8000c890:	30042073          	csrs	mstatus,s0
}
    8000c894:	60a2                	ld	ra,8(sp)
    8000c896:	6402                	ld	s0,0(sp)
    8000c898:	0141                	addi	sp,sp,16
    8000c89a:	8082                	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8000c89c:	9bed                	andi	a5,a5,-5
    8000c89e:	00f50ca3          	sb	a5,25(a0)
	ready_thread(thread);
    8000c8a2:	9d3ff0ef          	jal	ra,8000c274 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8000c8a6:	85a2                	mv	a1,s0
}
    8000c8a8:	6402                	ld	s0,0(sp)
    8000c8aa:	60a2                	ld	ra,8(sp)
	z_reschedule(&sched_spinlock, key);
    8000c8ac:	00081517          	auipc	a0,0x81
    8000c8b0:	20c50513          	addi	a0,a0,524 # 8008dab8 <sched_spinlock>
}
    8000c8b4:	0141                	addi	sp,sp,16
	z_reschedule(&sched_spinlock, key);
    8000c8b6:	f5fff06f          	j	8000c814 <z_reschedule>

000000008000c8ba <z_pend_curr>:
{
    8000c8ba:	7179                	addi	sp,sp,-48
    8000c8bc:	f406                	sd	ra,40(sp)
    8000c8be:	f022                	sd	s0,32(sp)
    8000c8c0:	ec26                	sd	s1,24(sp)
    8000c8c2:	842a                	mv	s0,a0
    8000c8c4:	84ae                	mv	s1,a1
    8000c8c6:	e432                	sd	a2,8(sp)
    8000c8c8:	e036                	sd	a3,0(sp)
	pend(_current, wait_q, timeout);
    8000c8ca:	dc4ff0ef          	jal	ra,8000be8e <z_current_get>
    8000c8ce:	65a2                	ld	a1,8(sp)
    8000c8d0:	6602                	ld	a2,0(sp)
    8000c8d2:	f42ff0ef          	jal	ra,8000c014 <pend>
	return z_swap(lock, key);
    8000c8d6:	8522                	mv	a0,s0
}
    8000c8d8:	7402                	ld	s0,32(sp)
    8000c8da:	70a2                	ld	ra,40(sp)
	return z_swap(lock, key);
    8000c8dc:	85a6                	mv	a1,s1
}
    8000c8de:	64e2                	ld	s1,24(sp)
    8000c8e0:	6145                	addi	sp,sp,48
	return z_swap(lock, key);
    8000c8e2:	e3fff06f          	j	8000c720 <z_swap>

000000008000c8e6 <z_get_next_switch_handle>:
{
    8000c8e6:	7139                	addi	sp,sp,-64
    8000c8e8:	ec4e                	sd	s3,24(sp)
    8000c8ea:	fc06                	sd	ra,56(sp)
    8000c8ec:	f822                	sd	s0,48(sp)
    8000c8ee:	f426                	sd	s1,40(sp)
    8000c8f0:	f04a                	sd	s2,32(sp)
    8000c8f2:	e852                	sd	s4,16(sp)
    8000c8f4:	e456                	sd	s5,8(sp)
    8000c8f6:	89aa                	mv	s3,a0
	z_check_stack_sentinel();
    8000c8f8:	e9ffe0ef          	jal	ra,8000b796 <z_check_stack_sentinel>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000c8fc:	30047a73          	csrrci	s4,mstatus,8
    8000c900:	00081797          	auipc	a5,0x81
    8000c904:	1b878793          	addi	a5,a5,440 # 8008dab8 <sched_spinlock>
    8000c908:	4685                	li	a3,1
    8000c90a:	0f50000f          	fence	iorw,ow
    8000c90e:	1407b72f          	lr.d.aq	a4,(a5)
    8000c912:	e701                	bnez	a4,8000c91a <z_get_next_switch_handle+0x34>
    8000c914:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000c918:	fa7d                	bnez	a2,8000c90e <z_get_next_switch_handle+0x28>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000c91a:	fb65                	bnez	a4,8000c90a <z_get_next_switch_handle+0x24>
		struct k_thread *old_thread = _current, *new_thread;
    8000c91c:	d72ff0ef          	jal	ra,8000be8e <z_current_get>
    8000c920:	842a                	mv	s0,a0
			old_thread->switch_handle = NULL;
    8000c922:	10053423          	sd	zero,264(a0)
	return _priq_run_best(curr_cpu_runq());
    8000c926:	0009b517          	auipc	a0,0x9b
    8000c92a:	89a50513          	addi	a0,a0,-1894 # 800a71c0 <_kernel+0x50>
    8000c92e:	cceff0ef          	jal	ra,8000bdfc <z_priq_dumb_best>
	if (is_aborting(_current)) {
    8000c932:	01944783          	lbu	a5,25(s0)
	return _priq_run_best(curr_cpu_runq());
    8000c936:	84aa                	mv	s1,a0
	if (is_aborting(_current)) {
    8000c938:	0207f793          	andi	a5,a5,32
    8000c93c:	c781                	beqz	a5,8000c944 <z_get_next_switch_handle+0x5e>
		end_thread(_current);
    8000c93e:	8522                	mv	a0,s0
    8000c940:	aa9ff0ef          	jal	ra,8000c3e8 <end_thread>
	return (thread->base.thread_state & state) != 0U;
    8000c944:	01944703          	lbu	a4,25(s0)
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    8000c948:	0009b917          	auipc	s2,0x9b
    8000c94c:	82890913          	addi	s2,s2,-2008 # 800a7170 <_kernel>
    8000c950:	01f77693          	andi	a3,a4,31
	if (thread == NULL) {
    8000c954:	e899                	bnez	s1,8000c96a <z_get_next_switch_handle+0x84>
    8000c956:	f14027f3          	csrr	a5,mhartid
		thread = _current_cpu->idle_thread;
    8000c95a:	1782                	slli	a5,a5,0x20
    8000c95c:	9381                	srli	a5,a5,0x20
    8000c95e:	02800613          	li	a2,40
    8000c962:	02c787b3          	mul	a5,a5,a2
    8000c966:	97ca                	add	a5,a5,s2
    8000c968:	6f84                	ld	s1,24(a5)
	if (active) {
    8000c96a:	eea9                	bnez	a3,8000c9c4 <z_get_next_switch_handle+0xde>
	int32_t b1 = thread_1->base.prio;
    8000c96c:	01a40583          	lb	a1,26(s0)
	int32_t b2 = thread_2->base.prio;
    8000c970:	01a48603          	lb	a2,26(s1)
	if (b1 != b2) {
    8000c974:	00c58763          	beq	a1,a2,8000c982 <z_get_next_switch_handle+0x9c>
		return b2 - b1;
    8000c978:	40b607bb          	subw	a5,a2,a1
		if ((cmp > 0) || ((cmp == 0) && !_current_cpu->swap_ok)) {
    8000c97c:	00f04f63          	bgtz	a5,8000c99a <z_get_next_switch_handle+0xb4>
    8000c980:	ef91                	bnez	a5,8000c99c <z_get_next_switch_handle+0xb6>
    8000c982:	f14027f3          	csrr	a5,mhartid
    8000c986:	1782                	slli	a5,a5,0x20
    8000c988:	9381                	srli	a5,a5,0x20
    8000c98a:	02800693          	li	a3,40
    8000c98e:	02d787b3          	mul	a5,a5,a3
    8000c992:	97ca                	add	a5,a5,s2
    8000c994:	0257c783          	lbu	a5,37(a5)
    8000c998:	e391                	bnez	a5,8000c99c <z_get_next_switch_handle+0xb6>
    8000c99a:	84a2                	mv	s1,s0
    8000c99c:	f14027f3          	csrr	a5,mhartid
		if (!should_preempt(thread, _current_cpu->swap_ok)) {
    8000c9a0:	1782                	slli	a5,a5,0x20
    8000c9a2:	9381                	srli	a5,a5,0x20
    8000c9a4:	02800693          	li	a3,40
    8000c9a8:	02d787b3          	mul	a5,a5,a3
    8000c9ac:	97ca                	add	a5,a5,s2
	if (preempt_ok != 0) {
    8000c9ae:	0257c783          	lbu	a5,37(a5)
    8000c9b2:	10079263          	bnez	a5,8000cab6 <z_get_next_switch_handle+0x1d0>
	if (is_preempt(_current) || is_metairq(thread)) {
    8000c9b6:	01a45683          	lhu	a3,26(s0)
    8000c9ba:	07f00793          	li	a5,127
    8000c9be:	0ed7fc63          	bgeu	a5,a3,8000cab6 <z_get_next_switch_handle+0x1d0>
    8000c9c2:	84a2                	mv	s1,s0
	return (thread->base.thread_state & state) != 0U;
    8000c9c4:	0194c783          	lbu	a5,25(s1)
	if (z_is_thread_queued(thread)) {
    8000c9c8:	0187971b          	slliw	a4,a5,0x18
    8000c9cc:	4187571b          	sraiw	a4,a4,0x18
    8000c9d0:	00075b63          	bgez	a4,8000c9e6 <z_get_next_switch_handle+0x100>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000c9d4:	07f7f793          	andi	a5,a5,127
    8000c9d8:	00f48ca3          	sb	a5,25(s1)
	if (should_queue_thread(thread)) {
    8000c9dc:	00940563          	beq	s0,s1,8000c9e6 <z_get_next_switch_handle+0x100>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000c9e0:	8526                	mv	a0,s1
    8000c9e2:	a2eff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
    8000c9e6:	f1402773          	csrr	a4,mhartid
	_current_cpu->swap_ok = false;
    8000c9ea:	1702                	slli	a4,a4,0x20
    8000c9ec:	9301                	srli	a4,a4,0x20
    8000c9ee:	02800a93          	li	s5,40
    8000c9f2:	03570733          	mul	a4,a4,s5
    8000c9f6:	974a                	add	a4,a4,s2
    8000c9f8:	020702a3          	sb	zero,37(a4)
		if (old_thread != new_thread) {
    8000c9fc:	06940763          	beq	s0,s1,8000ca6a <z_get_next_switch_handle+0x184>
			wait_for_switch(new_thread);
    8000ca00:	8526                	mv	a0,s1
    8000ca02:	b26ff0ef          	jal	ra,8000bd28 <wait_for_switch>
    8000ca06:	f1402773          	csrr	a4,mhartid
			_current_cpu->swap_ok = 0;
    8000ca0a:	1702                	slli	a4,a4,0x20
    8000ca0c:	9301                	srli	a4,a4,0x20
    8000ca0e:	03570733          	mul	a4,a4,s5
    8000ca12:	974a                	add	a4,a4,s2
    8000ca14:	020702a3          	sb	zero,37(a4)
    8000ca18:	f14027f3          	csrr	a5,mhartid
	_current_cpu->current = new_thread;
    8000ca1c:	1782                	slli	a5,a5,0x20
    8000ca1e:	9381                	srli	a5,a5,0x20
    8000ca20:	035787b3          	mul	a5,a5,s5
			z_reset_time_slice(new_thread);
    8000ca24:	8526                	mv	a0,s1
	_current_cpu->current = new_thread;
    8000ca26:	97ca                	add	a5,a5,s2
    8000ca28:	eb84                	sd	s1,16(a5)
			z_reset_time_slice(new_thread);
    8000ca2a:	b80ff0ef          	jal	ra,8000bdaa <z_reset_time_slice>
			if (z_is_thread_queued(old_thread)) {
    8000ca2e:	01940783          	lb	a5,25(s0)
    8000ca32:	0207dc63          	bgez	a5,8000ca6a <z_get_next_switch_handle+0x184>
	return list->head == list;
    8000ca36:	05093783          	ld	a5,80(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000ca3a:	0009a617          	auipc	a2,0x9a
    8000ca3e:	78660613          	addi	a2,a2,1926 # 800a71c0 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
    8000ca42:	05893683          	ld	a3,88(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000ca46:	06c78263          	beq	a5,a2,8000caaa <z_get_next_switch_handle+0x1c4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000ca4a:	c3a5                	beqz	a5,8000caaa <z_get_next_switch_handle+0x1c4>
	int32_t b1 = thread_1->base.prio;
    8000ca4c:	01a40583          	lb	a1,26(s0)
	int32_t b2 = thread_2->base.prio;
    8000ca50:	01a78503          	lb	a0,26(a5)
	if (b1 != b2) {
    8000ca54:	04a58763          	beq	a1,a0,8000caa2 <z_get_next_switch_handle+0x1bc>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000ca58:	40b5073b          	subw	a4,a0,a1
    8000ca5c:	04e05363          	blez	a4,8000caa2 <z_get_next_switch_handle+0x1bc>
	sys_dnode_t *const prev = successor->prev;
    8000ca60:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000ca62:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000ca64:	e418                	sd	a4,8(s0)
	prev->next = node;
    8000ca66:	e300                	sd	s0,0(a4)
	successor->prev = node;
    8000ca68:	e780                	sd	s0,8(a5)
		old_thread->switch_handle = interrupted;
    8000ca6a:	11343423          	sd	s3,264(s0)
		ret = new_thread->switch_handle;
    8000ca6e:	1084b403          	ld	s0,264(s1)
	atomic_clear(&l->locked);
    8000ca72:	00081517          	auipc	a0,0x81
    8000ca76:	04650513          	addi	a0,a0,70 # 8008dab8 <sched_spinlock>
			new_thread->switch_handle = NULL;
    8000ca7a:	1004b423          	sd	zero,264(s1)
    8000ca7e:	ac8ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000ca82:	008a7a13          	andi	s4,s4,8
	__asm__ volatile ("csrs mstatus, %0"
    8000ca86:	300a2073          	csrs	mstatus,s4
	signal_pending_ipi();
    8000ca8a:	a86ff0ef          	jal	ra,8000bd10 <signal_pending_ipi>
}
    8000ca8e:	70e2                	ld	ra,56(sp)
    8000ca90:	8522                	mv	a0,s0
    8000ca92:	7442                	ld	s0,48(sp)
    8000ca94:	74a2                	ld	s1,40(sp)
    8000ca96:	7902                	ld	s2,32(sp)
    8000ca98:	69e2                	ld	s3,24(sp)
    8000ca9a:	6a42                	ld	s4,16(sp)
    8000ca9c:	6aa2                	ld	s5,8(sp)
    8000ca9e:	6121                	addi	sp,sp,64
    8000caa0:	8082                	ret
	return (node == list->tail) ? NULL : node->next;
    8000caa2:	00f68463          	beq	a3,a5,8000caaa <z_get_next_switch_handle+0x1c4>
    8000caa6:	639c                	ld	a5,0(a5)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000caa8:	f7c5                	bnez	a5,8000ca50 <z_get_next_switch_handle+0x16a>
	node->next = list;
    8000caaa:	e010                	sd	a2,0(s0)
	node->prev = tail;
    8000caac:	e414                	sd	a3,8(s0)
	tail->next = node;
    8000caae:	e280                	sd	s0,0(a3)
	list->tail = node;
    8000cab0:	04893c23          	sd	s0,88(s2)
}
    8000cab4:	bf5d                	j	8000ca6a <z_get_next_switch_handle+0x184>
	if (thread != _current && active &&
    8000cab6:	f09407e3          	beq	s0,s1,8000c9c4 <z_get_next_switch_handle+0xde>
    8000caba:	02044783          	lbu	a5,32(s0)
    8000cabe:	f00793e3          	bnez	a5,8000c9c4 <z_get_next_switch_handle+0xde>
		!z_is_idle_thread_object(_current) && !queued) {
    8000cac2:	0187179b          	slliw	a5,a4,0x18
    8000cac6:	4187d79b          	sraiw	a5,a5,0x18
    8000caca:	ee07cde3          	bltz	a5,8000c9c4 <z_get_next_switch_handle+0xde>
	thread->base.thread_state |= _THREAD_QUEUED;
    8000cace:	f8076713          	ori	a4,a4,-128
    8000cad2:	00e40ca3          	sb	a4,25(s0)
    8000cad6:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = true;
    8000cada:	1782                	slli	a5,a5,0x20
    8000cadc:	02800713          	li	a4,40
    8000cae0:	9381                	srli	a5,a5,0x20
    8000cae2:	02e787b3          	mul	a5,a5,a4
    8000cae6:	4705                	li	a4,1
    8000cae8:	97ca                	add	a5,a5,s2
    8000caea:	02e782a3          	sb	a4,37(a5)
}
    8000caee:	bdd9                	j	8000c9c4 <z_get_next_switch_handle+0xde>

000000008000caf0 <z_set_prio>:
{
    8000caf0:	7179                	addi	sp,sp,-48
    8000caf2:	f022                	sd	s0,32(sp)
    8000caf4:	f406                	sd	ra,40(sp)
    8000caf6:	ec26                	sd	s1,24(sp)
    8000caf8:	e84a                	sd	s2,16(sp)
    8000cafa:	e44e                	sd	s3,8(sp)
    8000cafc:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000cafe:	30047973          	csrrci	s2,mstatus,8
    8000cb02:	00081797          	auipc	a5,0x81
    8000cb06:	fb678793          	addi	a5,a5,-74 # 8008dab8 <sched_spinlock>
    8000cb0a:	4685                	li	a3,1
    8000cb0c:	0f50000f          	fence	iorw,ow
    8000cb10:	1407b72f          	lr.d.aq	a4,(a5)
    8000cb14:	e701                	bnez	a4,8000cb1c <z_set_prio+0x2c>
    8000cb16:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000cb1a:	fa7d                	bnez	a2,8000cb10 <z_set_prio+0x20>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000cb1c:	fb65                	bnez	a4,8000cb0c <z_set_prio+0x1c>
	uint8_t state = thread->base.thread_state;
    8000cb1e:	01944783          	lbu	a5,25(s0)
				thread->base.prio = prio;
    8000cb22:	0185949b          	slliw	s1,a1,0x18
    8000cb26:	4184d49b          	sraiw	s1,s1,0x18
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8000cb2a:	01f7f713          	andi	a4,a5,31
    8000cb2e:	c709                	beqz	a4,8000cb38 <z_set_prio+0x48>
			thread->base.prio = prio;
    8000cb30:	00940d23          	sb	s1,26(s0)
    8000cb34:	4401                	li	s0,0
    8000cb36:	a8ad                	j	8000cbb0 <z_set_prio+0xc0>
		if (need_sched) {
    8000cb38:	7818                	ld	a4,48(s0)
    8000cb3a:	fb7d                	bnez	a4,8000cb30 <z_set_prio+0x40>
			if (!IS_ENABLED(CONFIG_SMP) || z_is_thread_queued(thread)) {
    8000cb3c:	0187971b          	slliw	a4,a5,0x18
    8000cb40:	4187571b          	sraiw	a4,a4,0x18
    8000cb44:	0a075163          	bgez	a4,8000cbe6 <z_set_prio+0xf6>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000cb48:	07f7f793          	andi	a5,a5,127
    8000cb4c:	00f40ca3          	sb	a5,25(s0)
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    8000cb50:	b3eff0ef          	jal	ra,8000be8e <z_current_get>
    8000cb54:	89aa                	mv	s3,a0
	if (should_queue_thread(thread)) {
    8000cb56:	00a40563          	beq	s0,a0,8000cb60 <z_set_prio+0x70>
	sys_dlist_remove(&thread->base.qnode_dlist);
    8000cb5a:	8522                	mv	a0,s0
    8000cb5c:	8b4ff0ef          	jal	ra,8000bc10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8000cb60:	01944783          	lbu	a5,25(s0)
				thread->base.prio = prio;
    8000cb64:	00940d23          	sb	s1,26(s0)
	thread->base.thread_state |= _THREAD_QUEUED;
    8000cb68:	0009a717          	auipc	a4,0x9a
    8000cb6c:	60870713          	addi	a4,a4,1544 # 800a7170 <_kernel>
    8000cb70:	f807e793          	ori	a5,a5,-128
    8000cb74:	00f40ca3          	sb	a5,25(s0)
	if (should_queue_thread(thread)) {
    8000cb78:	07340a63          	beq	s0,s3,8000cbec <z_set_prio+0xfc>
	return list->head == list;
    8000cb7c:	6b3c                	ld	a5,80(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000cb7e:	0009a597          	auipc	a1,0x9a
    8000cb82:	64258593          	addi	a1,a1,1602 # 800a71c0 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
    8000cb86:	6f30                	ld	a2,88(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000cb88:	04b78a63          	beq	a5,a1,8000cbdc <z_set_prio+0xec>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000cb8c:	cba1                	beqz	a5,8000cbdc <z_set_prio+0xec>
	int32_t b2 = thread_2->base.prio;
    8000cb8e:	01a78503          	lb	a0,26(a5)
	if (b1 != b2) {
    8000cb92:	04a48163          	beq	s1,a0,8000cbd4 <z_set_prio+0xe4>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8000cb96:	409506bb          	subw	a3,a0,s1
    8000cb9a:	02d05d63          	blez	a3,8000cbd4 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    8000cb9e:	6798                	ld	a4,8(a5)
	node->next = successor;
    8000cba0:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000cba2:	e418                	sd	a4,8(s0)
	prev->next = node;
    8000cba4:	e300                	sd	s0,0(a4)
	successor->prev = node;
    8000cba6:	e780                	sd	s0,8(a5)
			update_cache(1);
    8000cba8:	4505                	li	a0,1
    8000cbaa:	8a6ff0ef          	jal	ra,8000bc50 <update_cache>
    8000cbae:	4405                	li	s0,1
	atomic_clear(&l->locked);
    8000cbb0:	00081517          	auipc	a0,0x81
    8000cbb4:	f0850513          	addi	a0,a0,-248 # 8008dab8 <sched_spinlock>
    8000cbb8:	98eff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000cbbc:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
    8000cbc0:	30092073          	csrs	mstatus,s2
}
    8000cbc4:	70a2                	ld	ra,40(sp)
    8000cbc6:	8522                	mv	a0,s0
    8000cbc8:	7402                	ld	s0,32(sp)
    8000cbca:	64e2                	ld	s1,24(sp)
    8000cbcc:	6942                	ld	s2,16(sp)
    8000cbce:	69a2                	ld	s3,8(sp)
    8000cbd0:	6145                	addi	sp,sp,48
    8000cbd2:	8082                	ret
	return (node == list->tail) ? NULL : node->next;
    8000cbd4:	00f60463          	beq	a2,a5,8000cbdc <z_set_prio+0xec>
    8000cbd8:	639c                	ld	a5,0(a5)
    8000cbda:	bf4d                	j	8000cb8c <z_set_prio+0x9c>
	node->next = list;
    8000cbdc:	e00c                	sd	a1,0(s0)
	node->prev = tail;
    8000cbde:	e410                	sd	a2,8(s0)
	tail->next = node;
    8000cbe0:	e200                	sd	s0,0(a2)
	list->tail = node;
    8000cbe2:	ef20                	sd	s0,88(a4)
}
    8000cbe4:	b7d1                	j	8000cba8 <z_set_prio+0xb8>
				thread->base.prio = prio;
    8000cbe6:	00940d23          	sb	s1,26(s0)
    8000cbea:	bf7d                	j	8000cba8 <z_set_prio+0xb8>
    8000cbec:	f14027f3          	csrr	a5,mhartid
		_current_cpu->swap_ok = true;
    8000cbf0:	1782                	slli	a5,a5,0x20
    8000cbf2:	9381                	srli	a5,a5,0x20
    8000cbf4:	02800693          	li	a3,40
    8000cbf8:	02d787b3          	mul	a5,a5,a3
    8000cbfc:	973e                	add	a4,a4,a5
    8000cbfe:	4785                	li	a5,1
    8000cc00:	02f702a3          	sb	a5,37(a4)
    8000cc04:	b755                	j	8000cba8 <z_set_prio+0xb8>

000000008000cc06 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    8000cc06:	7179                	addi	sp,sp,-48
    8000cc08:	f022                	sd	s0,32(sp)
    8000cc0a:	f406                	sd	ra,40(sp)
    8000cc0c:	ec26                	sd	s1,24(sp)
    8000cc0e:	e84a                	sd	s2,16(sp)
    8000cc10:	e44e                	sd	s3,8(sp)
    8000cc12:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000cc14:	300474f3          	csrrci	s1,mstatus,8
    8000cc18:	00081797          	auipc	a5,0x81
    8000cc1c:	ea078793          	addi	a5,a5,-352 # 8008dab8 <sched_spinlock>
    8000cc20:	4685                	li	a3,1
    8000cc22:	0f50000f          	fence	iorw,ow
    8000cc26:	1407b72f          	lr.d.aq	a4,(a5)
    8000cc2a:	e701                	bnez	a4,8000cc32 <z_thread_abort+0x2c>
    8000cc2c:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000cc30:	fa7d                	bnez	a2,8000cc26 <z_thread_abort+0x20>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000cc32:	fb65                	bnez	a4,8000cc22 <z_thread_abort+0x1c>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    8000cc34:	01844783          	lbu	a5,24(s0)
    8000cc38:	8b85                	andi	a5,a5,1
    8000cc3a:	c78d                	beqz	a5,8000cc64 <z_thread_abort+0x5e>
	atomic_clear(&l->locked);
    8000cc3c:	00081517          	auipc	a0,0x81
    8000cc40:	e7c50513          	addi	a0,a0,-388 # 8008dab8 <sched_spinlock>
    8000cc44:	902ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000cc48:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000cc4a:	3004a073          	csrs	mstatus,s1
	register ulong_t a0 __asm__ ("a0") = arg1;
    8000cc4e:	4511                	li	a0,4
	register ulong_t a7 __asm__ ("a7") = call_id;
    8000cc50:	4881                	li	a7,0
	__asm__ volatile ("ecall"
    8000cc52:	00000073          	ecall
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8000cc56:	70a2                	ld	ra,40(sp)
    8000cc58:	7402                	ld	s0,32(sp)
    8000cc5a:	64e2                	ld	s1,24(sp)
    8000cc5c:	6942                	ld	s2,16(sp)
    8000cc5e:	69a2                	ld	s3,8(sp)
    8000cc60:	6145                	addi	sp,sp,48
    8000cc62:	8082                	ret
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8000cc64:	01944983          	lbu	s3,25(s0)
    8000cc68:	0089f793          	andi	a5,s3,8
    8000cc6c:	cb99                	beqz	a5,8000cc82 <z_thread_abort+0x7c>
    8000cc6e:	00081517          	auipc	a0,0x81
    8000cc72:	e4a50513          	addi	a0,a0,-438 # 8008dab8 <sched_spinlock>
    8000cc76:	8d0ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000cc7a:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000cc7c:	3004a073          	csrs	mstatus,s1
    8000cc80:	bfd9                	j	8000cc56 <z_thread_abort+0x50>
	if (is_aborting(thread) && thread == _current && arch_is_in_isr()) {
    8000cc82:	a0cff0ef          	jal	ra,8000be8e <z_current_get>
    8000cc86:	0209f993          	andi	s3,s3,32
    8000cc8a:	892a                	mv	s2,a0
    8000cc8c:	00098a63          	beqz	s3,8000cca0 <z_thread_abort+0x9a>
    8000cc90:	00a41863          	bne	s0,a0,8000cca0 <z_thread_abort+0x9a>
    8000cc94:	f8ffe0ef          	jal	ra,8000bc22 <arch_is_in_isr>
    8000cc98:	c501                	beqz	a0,8000cca0 <z_thread_abort+0x9a>
		end_thread(thread);
    8000cc9a:	8522                	mv	a0,s0
    8000cc9c:	f4cff0ef          	jal	ra,8000c3e8 <end_thread>
	bool active = thread_active_elsewhere(thread);
    8000cca0:	8522                	mv	a0,s0
    8000cca2:	fcffe0ef          	jal	ra,8000bc70 <thread_active_elsewhere>
    8000cca6:	89aa                	mv	s3,a0
	if (active) {
    8000cca8:	c909                	beqz	a0,8000ccba <z_thread_abort+0xb4>
		thread->base.thread_state |= _THREAD_ABORTING;
    8000ccaa:	01944783          	lbu	a5,25(s0)
    8000ccae:	0207e793          	ori	a5,a5,32
    8000ccb2:	00f40ca3          	sb	a5,25(s0)
		arch_sched_ipi();
    8000ccb6:	dcaf60ef          	jal	ra,80003280 <arch_sched_ipi>
	if (is_aborting(thread) && thread != _current) {
    8000ccba:	01944783          	lbu	a5,25(s0)
    8000ccbe:	0207f793          	andi	a5,a5,32
    8000ccc2:	cba9                	beqz	a5,8000cd14 <z_thread_abort+0x10e>
    8000ccc4:	05240863          	beq	s0,s2,8000cd14 <z_thread_abort+0x10e>
		if (arch_is_in_isr()) {
    8000ccc8:	f5bfe0ef          	jal	ra,8000bc22 <arch_is_in_isr>
    8000cccc:	c105                	beqz	a0,8000ccec <z_thread_abort+0xe6>
    8000ccce:	00081517          	auipc	a0,0x81
    8000ccd2:	dea50513          	addi	a0,a0,-534 # 8008dab8 <sched_spinlock>
    8000ccd6:	870ff0ef          	jal	ra,8000bd46 <atomic_clear>
			  : "r" (key & MSTATUS_IEN)
    8000ccda:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000ccdc:	3004a073          	csrs	mstatus,s1
			while (is_aborting(thread)) {
    8000cce0:	01944783          	lbu	a5,25(s0)
    8000cce4:	0207f793          	andi	a5,a5,32
    8000cce8:	e381                	bnez	a5,8000cce8 <z_thread_abort+0xe2>
    8000ccea:	b7b5                	j	8000cc56 <z_thread_abort+0x50>
		} else if (active) {
    8000ccec:	f60985e3          	beqz	s3,8000cc56 <z_thread_abort+0x50>
			add_to_waitq_locked(_current, &thread->join_queue);
    8000ccf0:	0d040593          	addi	a1,s0,208
    8000ccf4:	854a                	mv	a0,s2
    8000ccf6:	ab8ff0ef          	jal	ra,8000bfae <add_to_waitq_locked>
}
    8000ccfa:	7402                	ld	s0,32(sp)
    8000ccfc:	70a2                	ld	ra,40(sp)
    8000ccfe:	6942                	ld	s2,16(sp)
    8000cd00:	69a2                	ld	s3,8(sp)
			z_swap(&sched_spinlock, key);
    8000cd02:	85a6                	mv	a1,s1
}
    8000cd04:	64e2                	ld	s1,24(sp)
			z_swap(&sched_spinlock, key);
    8000cd06:	00081517          	auipc	a0,0x81
    8000cd0a:	db250513          	addi	a0,a0,-590 # 8008dab8 <sched_spinlock>
}
    8000cd0e:	6145                	addi	sp,sp,48
			z_swap(&sched_spinlock, key);
    8000cd10:	a11ff06f          	j	8000c720 <z_swap>
	end_thread(thread);
    8000cd14:	8522                	mv	a0,s0
    8000cd16:	ed2ff0ef          	jal	ra,8000c3e8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    8000cd1a:	f5241ae3          	bne	s0,s2,8000cc6e <z_thread_abort+0x68>
    8000cd1e:	f05fe0ef          	jal	ra,8000bc22 <arch_is_in_isr>
    8000cd22:	f531                	bnez	a0,8000cc6e <z_thread_abort+0x68>
		z_swap(&sched_spinlock, key);
    8000cd24:	85a6                	mv	a1,s1
    8000cd26:	00081517          	auipc	a0,0x81
    8000cd2a:	d9250513          	addi	a0,a0,-622 # 8008dab8 <sched_spinlock>
    8000cd2e:	9f3ff0ef          	jal	ra,8000c720 <z_swap>
    8000cd32:	bf35                	j	8000cc6e <z_thread_abort+0x68>

000000008000cd34 <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
    8000cd34:	ed3ff06f          	j	8000cc06 <z_thread_abort>

000000008000cd38 <local_delay>:

/* Tiny delay that relaxes bus traffic to avoid spamming a shared
 * memory bus looking at an atomic variable
 */
static inline void local_delay(void)
{
    8000cd38:	1141                	addi	sp,sp,-16
	for (volatile int i = 0; i < 1000; i++) {
    8000cd3a:	c602                	sw	zero,12(sp)
    8000cd3c:	3e700713          	li	a4,999
    8000cd40:	47b2                	lw	a5,12(sp)
    8000cd42:	2781                	sext.w	a5,a5
    8000cd44:	00f75463          	bge	a4,a5,8000cd4c <local_delay+0x14>
	}
}
    8000cd48:	0141                	addi	sp,sp,16
    8000cd4a:	8082                	ret
	for (volatile int i = 0; i < 1000; i++) {
    8000cd4c:	47b2                	lw	a5,12(sp)
    8000cd4e:	2785                	addiw	a5,a5,1
    8000cd50:	c63e                	sw	a5,12(sp)
    8000cd52:	b7fd                	j	8000cd40 <local_delay+0x8>

000000008000cd54 <atomic_clear.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000cd54:	4781                	li	a5,0
    8000cd56:	0f50000f          	fence	iorw,ow
    8000cd5a:	0cf537af          	amoswap.d.aq	a5,a5,(a0)
}
    8000cd5e:	8082                	ret

000000008000cd60 <start_cpu.constprop.0>:
	z_swap_unlocked();

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}

static void start_cpu(int id, atomic_t *start_flag)
    8000cd60:	1141                	addi	sp,sp,-16
    8000cd62:	e406                	sd	ra,8(sp)
    8000cd64:	e022                	sd	s0,0(sp)
    8000cd66:	842a                	mv	s0,a0
{
	z_init_cpu(id);
    8000cd68:	835fe0ef          	jal	ra,8000b59c <z_init_cpu>
	(void)atomic_clear(&ready_flag);
    8000cd6c:	00081517          	auipc	a0,0x81
    8000cd70:	d5c50513          	addi	a0,a0,-676 # 8008dac8 <ready_flag>
    8000cd74:	fe1ff0ef          	jal	ra,8000cd54 <atomic_clear.isra.0>
	arch_start_cpu(id, z_interrupt_stacks[id], CONFIG_ISR_STACK_SIZE,
    8000cd78:	00b41793          	slli	a5,s0,0xb
    8000cd7c:	6605                	lui	a2,0x1
    8000cd7e:	0009d597          	auipc	a1,0x9d
    8000cd82:	77258593          	addi	a1,a1,1906 # 800aa4f0 <z_interrupt_stacks>
    8000cd86:	8522                	mv	a0,s0
    8000cd88:	00081717          	auipc	a4,0x81
    8000cd8c:	d4870713          	addi	a4,a4,-696 # 8008dad0 <start_flag>
    8000cd90:	00000697          	auipc	a3,0x0
    8000cd94:	03468693          	addi	a3,a3,52 # 8000cdc4 <smp_init_top>
    8000cd98:	80060613          	addi	a2,a2,-2048 # 800 <CONFIG_ISR_STACK_SIZE>
    8000cd9c:	95be                	add	a1,a1,a5
    8000cd9e:	c92f60ef          	jal	ra,80003230 <arch_start_cpu>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8000cda2:	00081417          	auipc	s0,0x81
    8000cda6:	d2640413          	addi	s0,s0,-730 # 8008dac8 <ready_flag>
    8000cdaa:	0ff0000f          	fence
    8000cdae:	601c                	ld	a5,0(s0)
    8000cdb0:	0ff0000f          	fence
		       smp_init_top, start_flag);
	while (!atomic_get(&ready_flag)) {
    8000cdb4:	c789                	beqz	a5,8000cdbe <start_cpu.constprop.0+0x5e>
		local_delay();
	}
}
    8000cdb6:	60a2                	ld	ra,8(sp)
    8000cdb8:	6402                	ld	s0,0(sp)
    8000cdba:	0141                	addi	sp,sp,16
    8000cdbc:	8082                	ret
		local_delay();
    8000cdbe:	f7bff0ef          	jal	ra,8000cd38 <local_delay>
    8000cdc2:	b7e5                	j	8000cdaa <start_cpu.constprop.0+0x4a>

000000008000cdc4 <smp_init_top>:
{
    8000cdc4:	714d                	addi	sp,sp,-336
    8000cdc6:	e2a2                	sd	s0,320(sp)
    8000cdc8:	e686                	sd	ra,328(sp)
    8000cdca:	fe26                	sd	s1,312(sp)
    8000cdcc:	fa4a                	sd	s2,304(sp)
    8000cdce:	f64e                	sd	s3,296(sp)
    8000cdd0:	842a                	mv	s0,a0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000cdd2:	00081717          	auipc	a4,0x81
    8000cdd6:	cf670713          	addi	a4,a4,-778 # 8008dac8 <ready_flag>
    8000cdda:	4785                	li	a5,1
    8000cddc:	0f50000f          	fence	iorw,ow
    8000cde0:	0cf737af          	amoswap.d.aq	a5,a5,(a4)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8000cde4:	0ff0000f          	fence
    8000cde8:	601c                	ld	a5,0(s0)
    8000cdea:	0ff0000f          	fence
	while (!atomic_get(cpu_start_flag)) {
    8000cdee:	0e078563          	beqz	a5,8000ced8 <smp_init_top+0x114>
	dummy_thread->base.user_options = K_ESSENTIAL;
    8000cdf2:	10100793          	li	a5,257
    8000cdf6:	02f11023          	sh	a5,32(sp)
	dummy_thread->stack_info.start = 0U;
    8000cdfa:	f982                	sd	zero,240(sp)
	dummy_thread->stack_info.size = 0U;
    8000cdfc:	fd82                	sd	zero,248(sp)
	dummy_thread->resource_pool = NULL;
    8000cdfe:	ee02                	sd	zero,280(sp)
    8000ce00:	f14027f3          	csrr	a5,mhartid
	_current_cpu->current = dummy_thread;
    8000ce04:	1782                	slli	a5,a5,0x20
    8000ce06:	02800713          	li	a4,40
    8000ce0a:	9381                	srli	a5,a5,0x20
    8000ce0c:	02e787b3          	mul	a5,a5,a4
    8000ce10:	0009a917          	auipc	s2,0x9a
    8000ce14:	36090913          	addi	s2,s2,864 # 800a7170 <_kernel>
    8000ce18:	0038                	addi	a4,sp,8
    8000ce1a:	97ca                	add	a5,a5,s2
    8000ce1c:	eb98                	sd	a4,16(a5)
	smp_timer_init();
    8000ce1e:	ccff60ef          	jal	ra,80003aec <smp_timer_init>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000ce22:	300479f3          	csrrci	s3,mstatus,8
    8000ce26:	83eff0ef          	jal	ra,8000be64 <z_impl_z_current_get>
    8000ce2a:	84aa                	mv	s1,a0
	z_check_stack_sentinel();
    8000ce2c:	96bfe0ef          	jal	ra,8000b796 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
    8000ce30:	57d5                	li	a5,-11
    8000ce32:	10f4a023          	sw	a5,256(s1)
    8000ce36:	300477f3          	csrrci	a5,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8000ce3a:	00081797          	auipc	a5,0x81
    8000ce3e:	c7e78793          	addi	a5,a5,-898 # 8008dab8 <sched_spinlock>
    8000ce42:	4685                	li	a3,1
    8000ce44:	0f50000f          	fence	iorw,ow
    8000ce48:	1407b72f          	lr.d.aq	a4,(a5)
    8000ce4c:	e701                	bnez	a4,8000ce54 <smp_init_top+0x90>
    8000ce4e:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000ce52:	fa7d                	bnez	a2,8000ce48 <smp_init_top+0x84>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000ce54:	fb65                	bnez	a4,8000ce44 <smp_init_top+0x80>
	new_thread = z_swap_next_thread();
    8000ce56:	e26ff0ef          	jal	ra,8000c47c <z_swap_next_thread>
    8000ce5a:	842a                	mv	s0,a0
	if (new_thread != old_thread) {
    8000ce5c:	08950563          	beq	a0,s1,8000cee6 <smp_init_top+0x122>
    8000ce60:	f1402773          	csrr	a4,mhartid
		_current_cpu->swap_ok = 0;
    8000ce64:	1702                	slli	a4,a4,0x20
    8000ce66:	02800693          	li	a3,40
    8000ce6a:	9301                	srli	a4,a4,0x20
    8000ce6c:	02d70733          	mul	a4,a4,a3
    8000ce70:	974a                	add	a4,a4,s2
    8000ce72:	020702a3          	sb	zero,37(a4)
    8000ce76:	f14027f3          	csrr	a5,mhartid
		new_thread->base.cpu = arch_curr_cpu()->id;
    8000ce7a:	1782                	slli	a5,a5,0x20
    8000ce7c:	9381                	srli	a5,a5,0x20
    8000ce7e:	02d787b3          	mul	a5,a5,a3
    8000ce82:	97ca                	add	a5,a5,s2
    8000ce84:	0247c783          	lbu	a5,36(a5)
    8000ce88:	02f500a3          	sb	a5,33(a0)
	while (*shp == NULL) {
    8000ce8c:	10843783          	ld	a5,264(s0)
    8000ce90:	c7b9                	beqz	a5,8000cede <smp_init_top+0x11a>
    8000ce92:	f14027f3          	csrr	a5,mhartid
		_current_cpu->current = new_thread;
    8000ce96:	1782                	slli	a5,a5,0x20
    8000ce98:	02800713          	li	a4,40
    8000ce9c:	9381                	srli	a5,a5,0x20
    8000ce9e:	02e787b3          	mul	a5,a5,a4
		z_reset_time_slice(new_thread);
    8000cea2:	8522                	mv	a0,s0
		_current_cpu->current = new_thread;
    8000cea4:	993e                	add	s2,s2,a5
    8000cea6:	00893823          	sd	s0,16(s2)
		z_reset_time_slice(new_thread);
    8000ceaa:	f01fe0ef          	jal	ra,8000bdaa <z_reset_time_slice>
		z_requeue_current(old_thread);
    8000ceae:	8526                	mv	a0,s1
    8000ceb0:	ea5fe0ef          	jal	ra,8000bd54 <z_requeue_current>
		void *newsh = new_thread->switch_handle;
    8000ceb4:	10843903          	ld	s2,264(s0)
	atomic_clear(&l->locked);
    8000ceb8:	00081517          	auipc	a0,0x81
    8000cebc:	c0050513          	addi	a0,a0,-1024 # 8008dab8 <sched_spinlock>
			new_thread->switch_handle = NULL;
    8000cec0:	10043423          	sd	zero,264(s0)
    8000cec4:	e91ff0ef          	jal	ra,8000cd54 <atomic_clear.isra.0>
    8000cec8:	85a6                	mv	a1,s1
    8000ceca:	854a                	mv	a0,s2
    8000cecc:	ffdf40ef          	jal	ra,80001ec8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
    8000ced0:	0089f993          	andi	s3,s3,8
	__asm__ volatile ("csrs mstatus, %0"
    8000ced4:	3009a073          	csrs	mstatus,s3
		local_delay();
    8000ced8:	e61ff0ef          	jal	ra,8000cd38 <local_delay>
    8000cedc:	b721                	j	8000cde4 <smp_init_top+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    8000cede:	4505                	li	a0,1
    8000cee0:	490000ef          	jal	ra,8000d370 <z_impl_k_busy_wait>
}
    8000cee4:	b765                	j	8000ce8c <smp_init_top+0xc8>
    8000cee6:	00081517          	auipc	a0,0x81
    8000ceea:	bd250513          	addi	a0,a0,-1070 # 8008dab8 <sched_spinlock>
    8000ceee:	e67ff0ef          	jal	ra,8000cd54 <atomic_clear.isra.0>
}
    8000cef2:	bff9                	j	8000ced0 <smp_init_top+0x10c>

000000008000cef4 <z_smp_global_lock>:
{
    8000cef4:	1141                	addi	sp,sp,-16
    8000cef6:	e406                	sd	ra,8(sp)
    8000cef8:	e022                	sd	s0,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000cefa:	30047473          	csrrci	s0,mstatus,8
    8000cefe:	2401                	sext.w	s0,s0
	return z_impl_z_current_get();
    8000cf00:	f65fe0ef          	jal	ra,8000be64 <z_impl_z_current_get>
	if (!_current->base.global_lock_count) {
    8000cf04:	02254783          	lbu	a5,34(a0)
    8000cf08:	ef99                	bnez	a5,8000cf26 <z_smp_global_lock+0x32>
    8000cf0a:	00081797          	auipc	a5,0x81
    8000cf0e:	bb678793          	addi	a5,a5,-1098 # 8008dac0 <global_lock>
    8000cf12:	4685                	li	a3,1
    8000cf14:	0f50000f          	fence	iorw,ow
    8000cf18:	1407b72f          	lr.d.aq	a4,(a5)
    8000cf1c:	e701                	bnez	a4,8000cf24 <z_smp_global_lock+0x30>
    8000cf1e:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000cf22:	fa7d                	bnez	a2,8000cf18 <z_smp_global_lock+0x24>
		while (!atomic_cas(&global_lock, 0, 1)) {
    8000cf24:	fb65                	bnez	a4,8000cf14 <z_smp_global_lock+0x20>
	_current->base.global_lock_count++;
    8000cf26:	02254783          	lbu	a5,34(a0)
    8000cf2a:	2785                	addiw	a5,a5,1
    8000cf2c:	02f50123          	sb	a5,34(a0)
}
    8000cf30:	60a2                	ld	ra,8(sp)
    8000cf32:	8522                	mv	a0,s0
    8000cf34:	6402                	ld	s0,0(sp)
    8000cf36:	0141                	addi	sp,sp,16
    8000cf38:	8082                	ret

000000008000cf3a <z_smp_global_unlock>:
{
    8000cf3a:	1141                	addi	sp,sp,-16
    8000cf3c:	e022                	sd	s0,0(sp)
    8000cf3e:	e406                	sd	ra,8(sp)
    8000cf40:	842a                	mv	s0,a0
    8000cf42:	f23fe0ef          	jal	ra,8000be64 <z_impl_z_current_get>
	if (_current->base.global_lock_count) {
    8000cf46:	02254783          	lbu	a5,34(a0)
    8000cf4a:	cf89                	beqz	a5,8000cf64 <z_smp_global_unlock+0x2a>
		_current->base.global_lock_count--;
    8000cf4c:	37fd                	addiw	a5,a5,-1
    8000cf4e:	0ff7f793          	andi	a5,a5,255
    8000cf52:	02f50123          	sb	a5,34(a0)
		if (!_current->base.global_lock_count) {
    8000cf56:	e799                	bnez	a5,8000cf64 <z_smp_global_unlock+0x2a>
			atomic_clear(&global_lock);
    8000cf58:	00081517          	auipc	a0,0x81
    8000cf5c:	b6850513          	addi	a0,a0,-1176 # 8008dac0 <global_lock>
    8000cf60:	df5ff0ef          	jal	ra,8000cd54 <atomic_clear.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000cf64:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
    8000cf66:	30042073          	csrs	mstatus,s0
}
    8000cf6a:	60a2                	ld	ra,8(sp)
    8000cf6c:	6402                	ld	s0,0(sp)
    8000cf6e:	0141                	addi	sp,sp,16
    8000cf70:	8082                	ret

000000008000cf72 <z_smp_release_global_lock>:
	if (!thread->base.global_lock_count) {
    8000cf72:	02254783          	lbu	a5,34(a0)
    8000cf76:	e799                	bnez	a5,8000cf84 <z_smp_release_global_lock+0x12>
		atomic_clear(&global_lock);
    8000cf78:	00081517          	auipc	a0,0x81
    8000cf7c:	b4850513          	addi	a0,a0,-1208 # 8008dac0 <global_lock>
    8000cf80:	dd5ff06f          	j	8000cd54 <atomic_clear.isra.0>
}
    8000cf84:	8082                	ret

000000008000cf86 <z_smp_init>:
	(void)atomic_set(&start_flag, 1); /* async, don't care */
	start_cpu(id, &start_flag);
}

void z_smp_init(void)
{
    8000cf86:	1141                	addi	sp,sp,-16
    8000cf88:	e022                	sd	s0,0(sp)
	(void)atomic_clear(&start_flag);
    8000cf8a:	00081417          	auipc	s0,0x81
    8000cf8e:	b4640413          	addi	s0,s0,-1210 # 8008dad0 <start_flag>
    8000cf92:	8522                	mv	a0,s0
{
    8000cf94:	e406                	sd	ra,8(sp)
	(void)atomic_clear(&start_flag);
    8000cf96:	dbfff0ef          	jal	ra,8000cd54 <atomic_clear.isra.0>
	for (int i = 1; i < CONFIG_MP_NUM_CPUS; i++) {
		start_cpu(i, &start_flag);
    8000cf9a:	4505                	li	a0,1
    8000cf9c:	dc5ff0ef          	jal	ra,8000cd60 <start_cpu.constprop.0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8000cfa0:	4785                	li	a5,1
    8000cfa2:	0f50000f          	fence	iorw,ow
    8000cfa6:	0cf437af          	amoswap.d.aq	a5,a5,(s0)
	}
	(void)atomic_set(&start_flag, 1);
}
    8000cfaa:	60a2                	ld	ra,8(sp)
    8000cfac:	6402                	ld	s0,0(sp)
    8000cfae:	0141                	addi	sp,sp,16
    8000cfb0:	8082                	ret

000000008000cfb2 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8000cfb2:	00081797          	auipc	a5,0x81
    8000cfb6:	b667a783          	lw	a5,-1178(a5) # 8008db18 <announce_remaining>
    8000cfba:	e399                	bnez	a5,8000cfc0 <elapsed+0xe>
    8000cfbc:	acbf606f          	j	80003a86 <sys_clock_elapsed>
}
    8000cfc0:	4501                	li	a0,0
    8000cfc2:	8082                	ret

000000008000cfc4 <next_timeout>:

static int32_t next_timeout(void)
{
    8000cfc4:	1141                	addi	sp,sp,-16
	return list->head == list;
    8000cfc6:	0009e797          	auipc	a5,0x9e
    8000cfca:	54278793          	addi	a5,a5,1346 # 800ab508 <timeout_list>
    8000cfce:	e022                	sd	s0,0(sp)
    8000cfd0:	6380                	ld	s0,0(a5)
    8000cfd2:	e406                	sd	ra,8(sp)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000cfd4:	00f41363          	bne	s0,a5,8000cfda <next_timeout+0x16>
    8000cfd8:	4401                	li	s0,0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8000cfda:	fd9ff0ef          	jal	ra,8000cfb2 <elapsed>
    8000cfde:	80000737          	lui	a4,0x80000
    8000cfe2:	fff74713          	not	a4,a4
    8000cfe6:	86aa                	mv	a3,a0
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8000cfe8:	853a                	mv	a0,a4
	if ((to == NULL) ||
    8000cfea:	c811                	beqz	s0,8000cffe <next_timeout+0x3a>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8000cfec:	6c1c                	ld	a5,24(s0)
    8000cfee:	8f95                	sub	a5,a5,a3
	if ((to == NULL) ||
    8000cff0:	00f74763          	blt	a4,a5,8000cffe <next_timeout+0x3a>
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    8000cff4:	853e                	mv	a0,a5
    8000cff6:	0007d363          	bgez	a5,8000cffc <next_timeout+0x38>
    8000cffa:	4501                	li	a0,0
    8000cffc:	2501                	sext.w	a0,a0
    8000cffe:	f14027f3          	csrr	a5,mhartid
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8000d002:	1782                	slli	a5,a5,0x20
    8000d004:	9381                	srli	a5,a5,0x20
    8000d006:	02800693          	li	a3,40
    8000d00a:	02d787b3          	mul	a5,a5,a3
    8000d00e:	0009a717          	auipc	a4,0x9a
    8000d012:	16270713          	addi	a4,a4,354 # 800a7170 <_kernel>
    8000d016:	97ba                	add	a5,a5,a4
    8000d018:	539c                	lw	a5,32(a5)
    8000d01a:	c39d                	beqz	a5,8000d040 <next_timeout+0x7c>
    8000d01c:	f14027f3          	csrr	a5,mhartid
    8000d020:	1782                	slli	a5,a5,0x20
    8000d022:	9381                	srli	a5,a5,0x20
    8000d024:	02d787b3          	mul	a5,a5,a3
    8000d028:	97ba                	add	a5,a5,a4
    8000d02a:	539c                	lw	a5,32(a5)
    8000d02c:	00a7da63          	bge	a5,a0,8000d040 <next_timeout+0x7c>
    8000d030:	f14027f3          	csrr	a5,mhartid
		ret = _current_cpu->slice_ticks;
    8000d034:	1782                	slli	a5,a5,0x20
    8000d036:	9381                	srli	a5,a5,0x20
    8000d038:	02d787b3          	mul	a5,a5,a3
    8000d03c:	973e                	add	a4,a4,a5
    8000d03e:	5308                	lw	a0,32(a4)
	}
#endif
	return ret;
}
    8000d040:	60a2                	ld	ra,8(sp)
    8000d042:	6402                	ld	s0,0(sp)
    8000d044:	0141                	addi	sp,sp,16
    8000d046:	8082                	ret

000000008000d048 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    8000d048:	611c                	ld	a5,0(a0)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8000d04a:	cd01                	beqz	a0,8000d062 <remove_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    8000d04c:	0009e717          	auipc	a4,0x9e
    8000d050:	4c473703          	ld	a4,1220(a4) # 800ab510 <timeout_list+0x8>
    8000d054:	00e50763          	beq	a0,a4,8000d062 <remove_timeout+0x1a>
	if (next(t) != NULL) {
    8000d058:	c789                	beqz	a5,8000d062 <remove_timeout+0x1a>
		next(t)->dticks += t->dticks;
    8000d05a:	6f98                	ld	a4,24(a5)
    8000d05c:	6d14                	ld	a3,24(a0)
    8000d05e:	9736                	add	a4,a4,a3
    8000d060:	ef98                	sd	a4,24(a5)
	sys_dnode_t *const prev = node->prev;
    8000d062:	6518                	ld	a4,8(a0)
	prev->next = next;
    8000d064:	e31c                	sd	a5,0(a4)
	next->prev = prev;
    8000d066:	e798                	sd	a4,8(a5)
	node->next = NULL;
    8000d068:	00053023          	sd	zero,0(a0)
	node->prev = NULL;
    8000d06c:	00053423          	sd	zero,8(a0)
}
    8000d070:	8082                	ret

000000008000d072 <atomic_clear.constprop.0.isra.0>:
    8000d072:	00081717          	auipc	a4,0x81
    8000d076:	a6e70713          	addi	a4,a4,-1426 # 8008dae0 <timeout_lock>
    8000d07a:	4781                	li	a5,0
    8000d07c:	0f50000f          	fence	iorw,ow
    8000d080:	0cf737af          	amoswap.d.aq	a5,a5,(a4)
}
    8000d084:	8082                	ret

000000008000d086 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8000d086:	57fd                	li	a5,-1
    8000d088:	0ef60663          	beq	a2,a5,8000d174 <z_add_timeout+0xee>
{
    8000d08c:	1101                	addi	sp,sp,-32
    8000d08e:	e822                	sd	s0,16(sp)
    8000d090:	e426                	sd	s1,8(sp)
    8000d092:	ec06                	sd	ra,24(sp)
    8000d094:	e04a                	sd	s2,0(sp)
    8000d096:	842a                	mv	s0,a0
    8000d098:	84b2                	mv	s1,a2
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8000d09a:	e90c                	sd	a1,16(a0)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000d09c:	30047973          	csrrci	s2,mstatus,8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8000d0a0:	00081797          	auipc	a5,0x81
    8000d0a4:	a4078793          	addi	a5,a5,-1472 # 8008dae0 <timeout_lock>
    8000d0a8:	4685                	li	a3,1
    8000d0aa:	0f50000f          	fence	iorw,ow
    8000d0ae:	1407b72f          	lr.d.aq	a4,(a5)
    8000d0b2:	e701                	bnez	a4,8000d0ba <z_add_timeout+0x34>
    8000d0b4:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000d0b8:	fa7d                	bnez	a2,8000d0ae <z_add_timeout+0x28>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000d0ba:	fb65                	bnez	a4,8000d0aa <z_add_timeout+0x24>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8000d0bc:	57f9                	li	a5,-2
    8000d0be:	40978733          	sub	a4,a5,s1
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8000d0c2:	00075763          	bgez	a4,8000d0d0 <z_add_timeout+0x4a>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8000d0c6:	eedff0ef          	jal	ra,8000cfb2 <elapsed>
    8000d0ca:	0485                	addi	s1,s1,1
    8000d0cc:	94aa                	add	s1,s1,a0
    8000d0ce:	a819                	j	8000d0e4 <z_add_timeout+0x5e>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8000d0d0:	00081617          	auipc	a2,0x81
    8000d0d4:	a0863603          	ld	a2,-1528(a2) # 8008dad8 <curr_tick>
    8000d0d8:	8f91                	sub	a5,a5,a2
    8000d0da:	409784b3          	sub	s1,a5,s1
			to->dticks = MAX(1, ticks);
    8000d0de:	00904363          	bgtz	s1,8000d0e4 <z_add_timeout+0x5e>
    8000d0e2:	4485                	li	s1,1
	return list->head == list;
    8000d0e4:	0009e717          	auipc	a4,0x9e
    8000d0e8:	42470713          	addi	a4,a4,1060 # 800ab508 <timeout_list>
    8000d0ec:	631c                	ld	a5,0(a4)
			to->dticks = timeout.ticks + 1 + elapsed();
    8000d0ee:	ec04                	sd	s1,24(s0)
	sys_dnode_t *const tail = list->tail;
    8000d0f0:	670c                	ld	a1,8(a4)
    8000d0f2:	853a                	mv	a0,a4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000d0f4:	00e79c63          	bne	a5,a4,8000d10c <z_add_timeout+0x86>
	node->next = list;
    8000d0f8:	e018                	sd	a4,0(s0)
	node->prev = tail;
    8000d0fa:	e40c                	sd	a1,8(s0)
	tail->next = node;
    8000d0fc:	e180                	sd	s0,0(a1)
	list->tail = node;
    8000d0fe:	e700                	sd	s0,8(a4)
}
    8000d100:	a01d                	j	8000d126 <z_add_timeout+0xa0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8000d102:	8e91                	sub	a3,a3,a2
    8000d104:	ec14                	sd	a3,24(s0)
	return (node == list->tail) ? NULL : node->next;
    8000d106:	fef589e3          	beq	a1,a5,8000d0f8 <z_add_timeout+0x72>
    8000d10a:	639c                	ld	a5,0(a5)
		for (t = first(); t != NULL; t = next(t)) {
    8000d10c:	d7f5                	beqz	a5,8000d0f8 <z_add_timeout+0x72>
			if (t->dticks > to->dticks) {
    8000d10e:	6f90                	ld	a2,24(a5)
    8000d110:	6c14                	ld	a3,24(s0)
    8000d112:	fec6d8e3          	bge	a3,a2,8000d102 <z_add_timeout+0x7c>
				t->dticks -= to->dticks;
    8000d116:	40d606b3          	sub	a3,a2,a3
    8000d11a:	ef94                	sd	a3,24(a5)
	sys_dnode_t *const prev = successor->prev;
    8000d11c:	6794                	ld	a3,8(a5)
	node->next = successor;
    8000d11e:	e01c                	sd	a5,0(s0)
	node->prev = prev;
    8000d120:	e414                	sd	a3,8(s0)
	prev->next = node;
    8000d122:	e280                	sd	s0,0(a3)
	successor->prev = node;
    8000d124:	e780                	sd	s0,8(a5)
	return list->head == list;
    8000d126:	631c                	ld	a5,0(a4)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000d128:	02a78a63          	beq	a5,a0,8000d15c <z_add_timeout+0xd6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8000d12c:	02f41863          	bne	s0,a5,8000d15c <z_add_timeout+0xd6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8000d130:	e95ff0ef          	jal	ra,8000cfc4 <next_timeout>

			if (next_time == 0 ||
    8000d134:	c10d                	beqz	a0,8000d156 <z_add_timeout+0xd0>
    8000d136:	f14027f3          	csrr	a5,mhartid
			    _current_cpu->slice_ticks != next_time) {
    8000d13a:	1782                	slli	a5,a5,0x20
    8000d13c:	02800713          	li	a4,40
    8000d140:	9381                	srli	a5,a5,0x20
    8000d142:	02e787b3          	mul	a5,a5,a4
    8000d146:	0009a717          	auipc	a4,0x9a
    8000d14a:	02a70713          	addi	a4,a4,42 # 800a7170 <_kernel>
    8000d14e:	97ba                	add	a5,a5,a4
			if (next_time == 0 ||
    8000d150:	539c                	lw	a5,32(a5)
    8000d152:	00a78563          	beq	a5,a0,8000d15c <z_add_timeout+0xd6>
				sys_clock_set_timeout(next_time, false);
    8000d156:	4581                	li	a1,0
    8000d158:	861f60ef          	jal	ra,800039b8 <sys_clock_set_timeout>
	atomic_clear(&l->locked);
    8000d15c:	f17ff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000d160:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
    8000d164:	30092073          	csrs	mstatus,s2
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8000d168:	60e2                	ld	ra,24(sp)
    8000d16a:	6442                	ld	s0,16(sp)
    8000d16c:	64a2                	ld	s1,8(sp)
    8000d16e:	6902                	ld	s2,0(sp)
    8000d170:	6105                	addi	sp,sp,32
    8000d172:	8082                	ret
    8000d174:	8082                	ret

000000008000d176 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8000d176:	1101                	addi	sp,sp,-32
    8000d178:	ec06                	sd	ra,24(sp)
    8000d17a:	e822                	sd	s0,16(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000d17c:	30047473          	csrrci	s0,mstatus,8
    8000d180:	00081797          	auipc	a5,0x81
    8000d184:	96078793          	addi	a5,a5,-1696 # 8008dae0 <timeout_lock>
    8000d188:	4685                	li	a3,1
    8000d18a:	0f50000f          	fence	iorw,ow
    8000d18e:	1407b72f          	lr.d.aq	a4,(a5)
    8000d192:	e701                	bnez	a4,8000d19a <z_abort_timeout+0x24>
    8000d194:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000d198:	fa7d                	bnez	a2,8000d18e <z_abort_timeout+0x18>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000d19a:	fb65                	bnez	a4,8000d18a <z_abort_timeout+0x14>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8000d19c:	611c                	ld	a5,0(a0)
    8000d19e:	e399                	bnez	a5,8000d1a4 <z_abort_timeout+0x2e>
	int ret = -EINVAL;
    8000d1a0:	5529                	li	a0,-22
    8000d1a2:	a021                	j	8000d1aa <z_abort_timeout+0x34>
			remove_timeout(to);
    8000d1a4:	ea5ff0ef          	jal	ra,8000d048 <remove_timeout>
			ret = 0;
    8000d1a8:	4501                	li	a0,0
    8000d1aa:	e42a                	sd	a0,8(sp)
			  : "r" (key & MSTATUS_IEN)
    8000d1ac:	8821                	andi	s0,s0,8
	atomic_clear(&l->locked);
    8000d1ae:	ec5ff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
	__asm__ volatile ("csrs mstatus, %0"
    8000d1b2:	30042073          	csrs	mstatus,s0
		}
	}

	return ret;
}
    8000d1b6:	60e2                	ld	ra,24(sp)
    8000d1b8:	6442                	ld	s0,16(sp)
	return ret;
    8000d1ba:	6522                	ld	a0,8(sp)
}
    8000d1bc:	6105                	addi	sp,sp,32
    8000d1be:	8082                	ret

000000008000d1c0 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8000d1c0:	7179                	addi	sp,sp,-48
    8000d1c2:	f022                	sd	s0,32(sp)
    8000d1c4:	f406                	sd	ra,40(sp)
    8000d1c6:	ec26                	sd	s1,24(sp)
    8000d1c8:	e84a                	sd	s2,16(sp)
    8000d1ca:	842a                	mv	s0,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000d1cc:	300474f3          	csrrci	s1,mstatus,8
    8000d1d0:	00081797          	auipc	a5,0x81
    8000d1d4:	91078793          	addi	a5,a5,-1776 # 8008dae0 <timeout_lock>
    8000d1d8:	4905                	li	s2,1
    8000d1da:	0f50000f          	fence	iorw,ow
    8000d1de:	1407b72f          	lr.d.aq	a4,(a5)
    8000d1e2:	e701                	bnez	a4,8000d1ea <z_set_timeout_expiry+0x2a>
    8000d1e4:	1d27b6af          	sc.d.aq	a3,s2,(a5)
    8000d1e8:	fafd                	bnez	a3,8000d1de <z_set_timeout_expiry+0x1e>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000d1ea:	fb65                	bnez	a4,8000d1da <z_set_timeout_expiry+0x1a>
    8000d1ec:	e42e                	sd	a1,8(sp)
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8000d1ee:	dd7ff0ef          	jal	ra,8000cfc4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8000d1f2:	00a95b63          	bge	s2,a0,8000d208 <z_set_timeout_expiry+0x48>
    8000d1f6:	65a2                	ld	a1,8(sp)
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8000d1f8:	87aa                	mv	a5,a0
    8000d1fa:	00a45363          	bge	s0,a0,8000d200 <z_set_timeout_expiry+0x40>
    8000d1fe:	87a2                	mv	a5,s0
    8000d200:	0007851b          	sext.w	a0,a5
    8000d204:	fb4f60ef          	jal	ra,800039b8 <sys_clock_set_timeout>
	atomic_clear(&l->locked);
    8000d208:	e6bff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
			  : "r" (key & MSTATUS_IEN)
    8000d20c:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
    8000d20e:	3004a073          	csrs	mstatus,s1
		}
	}
}
    8000d212:	70a2                	ld	ra,40(sp)
    8000d214:	7402                	ld	s0,32(sp)
    8000d216:	64e2                	ld	s1,24(sp)
    8000d218:	6942                	ld	s2,16(sp)
    8000d21a:	6145                	addi	sp,sp,48
    8000d21c:	8082                	ret

000000008000d21e <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8000d21e:	715d                	addi	sp,sp,-80
    8000d220:	f84a                	sd	s2,48(sp)
    8000d222:	e486                	sd	ra,72(sp)
    8000d224:	e0a2                	sd	s0,64(sp)
    8000d226:	fc26                	sd	s1,56(sp)
    8000d228:	f44e                	sd	s3,40(sp)
    8000d22a:	f052                	sd	s4,32(sp)
    8000d22c:	ec56                	sd	s5,24(sp)
    8000d22e:	892a                	mv	s2,a0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8000d230:	f5ffe0ef          	jal	ra,8000c18e <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000d234:	300479f3          	csrrci	s3,mstatus,8
    8000d238:	00081797          	auipc	a5,0x81
    8000d23c:	8a878793          	addi	a5,a5,-1880 # 8008dae0 <timeout_lock>
	k.key = arch_irq_lock();
    8000d240:	0009841b          	sext.w	s0,s3
    8000d244:	4685                	li	a3,1
    8000d246:	8a3e                	mv	s4,a5
    8000d248:	0f50000f          	fence	iorw,ow
    8000d24c:	1407b72f          	lr.d.aq	a4,(a5)
    8000d250:	e701                	bnez	a4,8000d258 <sys_clock_announce+0x3a>
    8000d252:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000d256:	fa7d                	bnez	a2,8000d24c <sys_clock_announce+0x2e>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000d258:	fb65                	bnez	a4,8000d248 <sys_clock_announce+0x2a>
	 * systems someone might be already running the loop.  Don't
	 * race (which will cause paralllel execution of "sequential"
	 * timeouts and confuse apps), just increment the tick count
	 * and return.
	 */
	if (IS_ENABLED(CONFIG_SMP) && announce_remaining != 0) {
    8000d25a:	00081497          	auipc	s1,0x81
    8000d25e:	8be48493          	addi	s1,s1,-1858 # 8008db18 <announce_remaining>
    8000d262:	4088                	lw	a0,0(s1)
    8000d264:	c11d                	beqz	a0,8000d28a <sys_clock_announce+0x6c>
		announce_remaining += ticks;
    8000d266:	0125053b          	addw	a0,a0,s2
    8000d26a:	c088                	sw	a0,0(s1)
			  : "r" (key & MSTATUS_IEN)
    8000d26c:	0089f993          	andi	s3,s3,8
	atomic_clear(&l->locked);
    8000d270:	e03ff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
	__asm__ volatile ("csrs mstatus, %0"
    8000d274:	3009a073          	csrs	mstatus,s3
	announce_remaining = 0;

	sys_clock_set_timeout(next_timeout(), false);

	k_spin_unlock(&timeout_lock, key);
}
    8000d278:	60a6                	ld	ra,72(sp)
    8000d27a:	6406                	ld	s0,64(sp)
    8000d27c:	74e2                	ld	s1,56(sp)
    8000d27e:	7942                	ld	s2,48(sp)
    8000d280:	79a2                	ld	s3,40(sp)
    8000d282:	7a02                	ld	s4,32(sp)
    8000d284:	6ae2                	ld	s5,24(sp)
    8000d286:	6161                	addi	sp,sp,80
    8000d288:	8082                	ret
	announce_remaining = ticks;
    8000d28a:	0124a023          	sw	s2,0(s1)
	return list->head == list;
    8000d28e:	0009e997          	auipc	s3,0x9e
    8000d292:	27a98993          	addi	s3,s3,634 # 800ab508 <timeout_list>
		curr_tick += dt;
    8000d296:	00081917          	auipc	s2,0x81
    8000d29a:	84290913          	addi	s2,s2,-1982 # 8008dad8 <curr_tick>
    8000d29e:	4a85                	li	s5,1
    8000d2a0:	0009b503          	ld	a0,0(s3)
    8000d2a4:	00093683          	ld	a3,0(s2)
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8000d2a8:	4098                	lw	a4,0(s1)
			  : "r" (key & MSTATUS_IEN)
    8000d2aa:	8821                	andi	s0,s0,8
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8000d2ac:	01350863          	beq	a0,s3,8000d2bc <sys_clock_announce+0x9e>
    8000d2b0:	c511                	beqz	a0,8000d2bc <sys_clock_announce+0x9e>
    8000d2b2:	6d1c                	ld	a5,24(a0)
    8000d2b4:	02f75563          	bge	a4,a5,8000d2de <sys_clock_announce+0xc0>
		first()->dticks -= announce_remaining;
    8000d2b8:	8f99                	sub	a5,a5,a4
    8000d2ba:	ed1c                	sd	a5,24(a0)
	curr_tick += announce_remaining;
    8000d2bc:	9736                	add	a4,a4,a3
    8000d2be:	00e93023          	sd	a4,0(s2)
	announce_remaining = 0;
    8000d2c2:	00081797          	auipc	a5,0x81
    8000d2c6:	8407ab23          	sw	zero,-1962(a5) # 8008db18 <announce_remaining>
	sys_clock_set_timeout(next_timeout(), false);
    8000d2ca:	cfbff0ef          	jal	ra,8000cfc4 <next_timeout>
    8000d2ce:	4581                	li	a1,0
    8000d2d0:	ee8f60ef          	jal	ra,800039b8 <sys_clock_set_timeout>
    8000d2d4:	d9fff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
	__asm__ volatile ("csrs mstatus, %0"
    8000d2d8:	30042073          	csrs	mstatus,s0
    8000d2dc:	bf71                	j	8000d278 <sys_clock_announce+0x5a>
		int dt = t->dticks;
    8000d2de:	2781                	sext.w	a5,a5
		curr_tick += dt;
    8000d2e0:	96be                	add	a3,a3,a5
		t->dticks = 0;
    8000d2e2:	00053c23          	sd	zero,24(a0)
		announce_remaining -= dt;
    8000d2e6:	40f707bb          	subw	a5,a4,a5
		curr_tick += dt;
    8000d2ea:	00d93023          	sd	a3,0(s2)
		announce_remaining -= dt;
    8000d2ee:	c09c                	sw	a5,0(s1)
		remove_timeout(t);
    8000d2f0:	e42a                	sd	a0,8(sp)
    8000d2f2:	d57ff0ef          	jal	ra,8000d048 <remove_timeout>
    8000d2f6:	d7dff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
    8000d2fa:	30042073          	csrs	mstatus,s0
		t->fn(t);
    8000d2fe:	6522                	ld	a0,8(sp)
    8000d300:	691c                	ld	a5,16(a0)
    8000d302:	9782                	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
    8000d304:	30047473          	csrrci	s0,mstatus,8
	k.key = arch_irq_lock();
    8000d308:	2401                	sext.w	s0,s0
    8000d30a:	0f50000f          	fence	iorw,ow
    8000d30e:	140a37af          	lr.d.aq	a5,(s4)
    8000d312:	e781                	bnez	a5,8000d31a <sys_clock_announce+0xfc>
    8000d314:	1d5a372f          	sc.d.aq	a4,s5,(s4)
    8000d318:	fb7d                	bnez	a4,8000d30e <sys_clock_announce+0xf0>
	while (!atomic_cas(&l->locked, 0, 1)) {
    8000d31a:	fbe5                	bnez	a5,8000d30a <sys_clock_announce+0xec>
    8000d31c:	b751                	j	8000d2a0 <sys_clock_announce+0x82>

000000008000d31e <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8000d31e:	1101                	addi	sp,sp,-32
    8000d320:	ec06                	sd	ra,24(sp)
    8000d322:	e822                	sd	s0,16(sp)
    8000d324:	30047473          	csrrci	s0,mstatus,8
    8000d328:	00080797          	auipc	a5,0x80
    8000d32c:	7b878793          	addi	a5,a5,1976 # 8008dae0 <timeout_lock>
    8000d330:	4685                	li	a3,1
    8000d332:	0f50000f          	fence	iorw,ow
    8000d336:	1407b72f          	lr.d.aq	a4,(a5)
    8000d33a:	e701                	bnez	a4,8000d342 <sys_clock_tick_get+0x24>
    8000d33c:	1cd7b62f          	sc.d.aq	a2,a3,(a5)
    8000d340:	fa7d                	bnez	a2,8000d336 <sys_clock_tick_get+0x18>
    8000d342:	fb65                	bnez	a4,8000d332 <sys_clock_tick_get+0x14>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8000d344:	f42f60ef          	jal	ra,80003a86 <sys_clock_elapsed>
    8000d348:	1502                	slli	a0,a0,0x20
    8000d34a:	00080797          	auipc	a5,0x80
    8000d34e:	78e7b783          	ld	a5,1934(a5) # 8008dad8 <curr_tick>
    8000d352:	9101                	srli	a0,a0,0x20
    8000d354:	953e                	add	a0,a0,a5
    8000d356:	e42a                	sd	a0,8(sp)
			  : "r" (key & MSTATUS_IEN)
    8000d358:	8821                	andi	s0,s0,8
	atomic_clear(&l->locked);
    8000d35a:	d19ff0ef          	jal	ra,8000d072 <atomic_clear.constprop.0.isra.0>
	__asm__ volatile ("csrs mstatus, %0"
    8000d35e:	30042073          	csrs	mstatus,s0
	}
	return t;
}
    8000d362:	60e2                	ld	ra,24(sp)
    8000d364:	6442                	ld	s0,16(sp)
    8000d366:	6522                	ld	a0,8(sp)
    8000d368:	6105                	addi	sp,sp,32
    8000d36a:	8082                	ret

000000008000d36c <z_impl_k_uptime_ticks>:
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8000d36c:	fb3ff06f          	j	8000d31e <sys_clock_tick_get>

000000008000d370 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8000d370:	c139                	beqz	a0,8000d3b6 <z_impl_k_busy_wait+0x46>
{
    8000d372:	1101                	addi	sp,sp,-32
    8000d374:	e822                	sd	s0,16(sp)
    8000d376:	e426                	sd	s1,8(sp)
    8000d378:	842a                	mv	s0,a0
    8000d37a:	ec06                	sd	ra,24(sp)

extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8000d37c:	f64f60ef          	jal	ra,80003ae0 <sys_clock_cycle_get_32>
    8000d380:	0005049b          	sext.w	s1,a0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
    8000d384:	1402                	slli	s0,s0,0x20
    8000d386:	00989537          	lui	a0,0x989
    8000d38a:	9001                	srli	s0,s0,0x20
    8000d38c:	68050513          	addi	a0,a0,1664 # 989680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    8000d390:	02a40433          	mul	s0,s0,a0
		(uint64_t)sys_clock_hw_cycles_per_sec() /
    8000d394:	000f47b7          	lui	a5,0xf4
    8000d398:	24078793          	addi	a5,a5,576 # f4240 <__rom_region_size+0x66814>
    8000d39c:	02f45433          	divu	s0,s0,a5
	uint32_t cycles_to_wait = (uint32_t)(
    8000d3a0:	2401                	sext.w	s0,s0
    8000d3a2:	f3ef60ef          	jal	ra,80003ae0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    8000d3a6:	9d05                	subw	a0,a0,s1
    8000d3a8:	fe856de3          	bltu	a0,s0,8000d3a2 <z_impl_k_busy_wait+0x32>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8000d3ac:	60e2                	ld	ra,24(sp)
    8000d3ae:	6442                	ld	s0,16(sp)
    8000d3b0:	64a2                	ld	s1,8(sp)
    8000d3b2:	6105                	addi	sp,sp,32
    8000d3b4:	8082                	ret
    8000d3b6:	8082                	ret

000000008000d3b8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8000d3b8:	0007d617          	auipc	a2,0x7d
    8000d3bc:	1a860613          	addi	a2,a2,424 # 8008a560 <space4_img+0x24d0>
    8000d3c0:	00080597          	auipc	a1,0x80
    8000d3c4:	21858593          	addi	a1,a1,536 # 8008d5d8 <levels.0+0x38>
    8000d3c8:	00080517          	auipc	a0,0x80
    8000d3cc:	23050513          	addi	a0,a0,560 # 8008d5f8 <levels.0+0x58>
    8000d3d0:	c20f506f          	j	800027f0 <printk>

000000008000d3d4 <_ZdlPv>:
    8000d3d4:	ad0d                	j	8000da06 <free>

000000008000d3d6 <_ZdaPv>:
    8000d3d6:	fffff06f          	j	8000d3d4 <_ZdlPv>

000000008000d3da <_Znwm>:
    8000d3da:	1141                	addi	sp,sp,-16
    8000d3dc:	e022                	sd	s0,0(sp)
    8000d3de:	e406                	sd	ra,8(sp)
    8000d3e0:	842a                	mv	s0,a0
    8000d3e2:	e111                	bnez	a0,8000d3e6 <_Znwm+0xc>
    8000d3e4:	4405                	li	s0,1
    8000d3e6:	8522                	mv	a0,s0
    8000d3e8:	616000ef          	jal	ra,8000d9fe <malloc>
    8000d3ec:	e901                	bnez	a0,8000d3fc <_Znwm+0x22>
    8000d3ee:	01a000ef          	jal	ra,8000d408 <_ZSt15get_new_handlerv>
    8000d3f2:	e119                	bnez	a0,8000d3f8 <_Znwm+0x1e>
    8000d3f4:	59a000ef          	jal	ra,8000d98e <abort>
    8000d3f8:	9502                	jalr	a0
    8000d3fa:	b7f5                	j	8000d3e6 <_Znwm+0xc>
    8000d3fc:	60a2                	ld	ra,8(sp)
    8000d3fe:	6402                	ld	s0,0(sp)
    8000d400:	0141                	addi	sp,sp,16
    8000d402:	8082                	ret

000000008000d404 <_Znam>:
    8000d404:	fd7ff06f          	j	8000d3da <_Znwm>

000000008000d408 <_ZSt15get_new_handlerv>:
    8000d408:	00080517          	auipc	a0,0x80
    8000d40c:	6e053503          	ld	a0,1760(a0) # 8008dae8 <_ZN12_GLOBAL__N_113__new_handlerE>
    8000d410:	0ff0000f          	fence
    8000d414:	8082                	ret

000000008000d416 <floor>:
    8000d416:	7139                	addi	sp,sp,-64
    8000d418:	f04a                	sd	s2,32(sp)
    8000d41a:	43455913          	srai	s2,a0,0x34
    8000d41e:	7ff97913          	andi	s2,s2,2047
    8000d422:	f822                	sd	s0,48(sp)
    8000d424:	f426                	sd	s1,40(sp)
    8000d426:	ec4e                	sd	s3,24(sp)
    8000d428:	e456                	sd	s5,8(sp)
    8000d42a:	42055793          	srai	a5,a0,0x20
    8000d42e:	00050a9b          	sext.w	s5,a0
    8000d432:	fc06                	sd	ra,56(sp)
    8000d434:	e852                	sd	s4,16(sp)
    8000d436:	c019099b          	addiw	s3,s2,-1023
    8000d43a:	474d                	li	a4,19
    8000d43c:	85aa                	mv	a1,a0
    8000d43e:	84be                	mv	s1,a5
    8000d440:	8456                	mv	s0,s5
    8000d442:	09374663          	blt	a4,s3,8000d4ce <floor+0xb8>
    8000d446:	0209df63          	bgez	s3,8000d484 <floor+0x6e>
    8000d44a:	00002597          	auipc	a1,0x2
    8000d44e:	dde5b583          	ld	a1,-546(a1) # 8000f228 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x68>
    8000d452:	d83f20ef          	jal	ra,800001d4 <__adddf3>
    8000d456:	00000593          	li	a1,0
    8000d45a:	b50f30ef          	jal	ra,800007aa <__gedf2>
    8000d45e:	00a05d63          	blez	a0,8000d478 <floor+0x62>
    8000d462:	0e04d863          	bgez	s1,8000d552 <floor+0x13c>
    8000d466:	02149793          	slli	a5,s1,0x21
    8000d46a:	9385                	srli	a5,a5,0x21
    8000d46c:	00fae433          	or	s0,s5,a5
    8000d470:	c401                	beqz	s0,8000d478 <floor+0x62>
    8000d472:	4401                	li	s0,0
    8000d474:	bff004b7          	lui	s1,0xbff00
    8000d478:	1402                	slli	s0,s0,0x20
    8000d47a:	9001                	srli	s0,s0,0x20
    8000d47c:	02049593          	slli	a1,s1,0x20
    8000d480:	8dc1                	or	a1,a1,s0
    8000d482:	a08d                	j	8000d4e4 <floor+0xce>
    8000d484:	00100a37          	lui	s4,0x100
    8000d488:	fffa091b          	addiw	s2,s4,-1
    8000d48c:	4139593b          	sraw	s2,s2,s3
    8000d490:	0127f7b3          	and	a5,a5,s2
    8000d494:	0157e7b3          	or	a5,a5,s5
    8000d498:	2781                	sext.w	a5,a5
    8000d49a:	c7a9                	beqz	a5,8000d4e4 <floor+0xce>
    8000d49c:	00002597          	auipc	a1,0x2
    8000d4a0:	d8c5b583          	ld	a1,-628(a1) # 8000f228 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x68>
    8000d4a4:	d31f20ef          	jal	ra,800001d4 <__adddf3>
    8000d4a8:	00000593          	li	a1,0
    8000d4ac:	afef30ef          	jal	ra,800007aa <__gedf2>
    8000d4b0:	fca054e3          	blez	a0,8000d478 <floor+0x62>
    8000d4b4:	0004d663          	bgez	s1,8000d4c0 <floor+0xaa>
    8000d4b8:	413a59bb          	sraw	s3,s4,s3
    8000d4bc:	009984bb          	addw	s1,s3,s1
    8000d4c0:	fff94593          	not	a1,s2
    8000d4c4:	8de5                	and	a1,a1,s1
    8000d4c6:	0005849b          	sext.w	s1,a1
    8000d4ca:	4401                	li	s0,0
    8000d4cc:	b775                	j	8000d478 <floor+0x62>
    8000d4ce:	03300793          	li	a5,51
    8000d4d2:	0337d363          	bge	a5,s3,8000d4f8 <floor+0xe2>
    8000d4d6:	40000793          	li	a5,1024
    8000d4da:	00f99563          	bne	s3,a5,8000d4e4 <floor+0xce>
    8000d4de:	cf7f20ef          	jal	ra,800001d4 <__adddf3>
    8000d4e2:	85aa                	mv	a1,a0
    8000d4e4:	70e2                	ld	ra,56(sp)
    8000d4e6:	7442                	ld	s0,48(sp)
    8000d4e8:	74a2                	ld	s1,40(sp)
    8000d4ea:	7902                	ld	s2,32(sp)
    8000d4ec:	69e2                	ld	s3,24(sp)
    8000d4ee:	6a42                	ld	s4,16(sp)
    8000d4f0:	6aa2                	ld	s5,8(sp)
    8000d4f2:	852e                	mv	a0,a1
    8000d4f4:	6121                	addi	sp,sp,64
    8000d4f6:	8082                	ret
    8000d4f8:	bed9071b          	addiw	a4,s2,-1043
    8000d4fc:	597d                	li	s2,-1
    8000d4fe:	00e9593b          	srlw	s2,s2,a4
    8000d502:	012af6b3          	and	a3,s5,s2
    8000d506:	2681                	sext.w	a3,a3
    8000d508:	def1                	beqz	a3,8000d4e4 <floor+0xce>
    8000d50a:	00002597          	auipc	a1,0x2
    8000d50e:	d1e5b583          	ld	a1,-738(a1) # 8000f228 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x68>
    8000d512:	cc3f20ef          	jal	ra,800001d4 <__adddf3>
    8000d516:	00000593          	li	a1,0
    8000d51a:	a90f30ef          	jal	ra,800007aa <__gedf2>
    8000d51e:	f4a05de3          	blez	a0,8000d478 <floor+0x62>
    8000d522:	0204d263          	bgez	s1,8000d546 <floor+0x130>
    8000d526:	47d1                	li	a5,20
    8000d528:	00f99463          	bne	s3,a5,8000d530 <floor+0x11a>
    8000d52c:	2485                	addiw	s1,s1,1
    8000d52e:	a821                	j	8000d546 <floor+0x130>
    8000d530:	03400793          	li	a5,52
    8000d534:	4137873b          	subw	a4,a5,s3
    8000d538:	4785                	li	a5,1
    8000d53a:	00e797bb          	sllw	a5,a5,a4
    8000d53e:	0157843b          	addw	s0,a5,s5
    8000d542:	ff5465e3          	bltu	s0,s5,8000d52c <floor+0x116>
    8000d546:	fff94913          	not	s2,s2
    8000d54a:	00897433          	and	s0,s2,s0
    8000d54e:	2401                	sext.w	s0,s0
    8000d550:	b725                	j	8000d478 <floor+0x62>
    8000d552:	4401                	li	s0,0
    8000d554:	4481                	li	s1,0
    8000d556:	b70d                	j	8000d478 <floor+0x62>

000000008000d558 <frexp>:
    8000d558:	1101                	addi	sp,sp,-32
    8000d55a:	e426                	sd	s1,8(sp)
    8000d55c:	800004b7          	lui	s1,0x80000
    8000d560:	ec06                	sd	ra,24(sp)
    8000d562:	e822                	sd	s0,16(sp)
    8000d564:	42055713          	srai	a4,a0,0x20
    8000d568:	fff4c493          	not	s1,s1
    8000d56c:	009776b3          	and	a3,a4,s1
    8000d570:	0005a023          	sw	zero,0(a1)
    8000d574:	7ff00637          	lui	a2,0x7ff00
    8000d578:	87aa                	mv	a5,a0
    8000d57a:	04c6dc63          	bge	a3,a2,8000d5d2 <frexp+0x7a>
    8000d57e:	00a6e633          	or	a2,a3,a0
    8000d582:	2601                	sext.w	a2,a2
    8000d584:	c639                	beqz	a2,8000d5d2 <frexp+0x7a>
    8000d586:	7ff00637          	lui	a2,0x7ff00
    8000d58a:	8e79                	and	a2,a2,a4
    8000d58c:	842e                	mv	s0,a1
    8000d58e:	ee19                	bnez	a2,8000d5ac <frexp+0x54>
    8000d590:	00002597          	auipc	a1,0x2
    8000d594:	ca05b583          	ld	a1,-864(a1) # 8000f230 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x70>
    8000d598:	afef30ef          	jal	ra,80000896 <__muldf3>
    8000d59c:	42055713          	srai	a4,a0,0x20
    8000d5a0:	fca00613          	li	a2,-54
    8000d5a4:	87aa                	mv	a5,a0
    8000d5a6:	009776b3          	and	a3,a4,s1
    8000d5aa:	c010                	sw	a2,0(s0)
    8000d5ac:	4010                	lw	a2,0(s0)
    8000d5ae:	4146d69b          	sraiw	a3,a3,0x14
    8000d5b2:	c026869b          	addiw	a3,a3,-1022
    8000d5b6:	9eb1                	addw	a3,a3,a2
    8000d5b8:	c014                	sw	a3,0(s0)
    8000d5ba:	801006b7          	lui	a3,0x80100
    8000d5be:	16fd                	addi	a3,a3,-1
    8000d5c0:	8f75                	and	a4,a4,a3
    8000d5c2:	557d                	li	a0,-1
    8000d5c4:	3fe006b7          	lui	a3,0x3fe00
    8000d5c8:	8f55                	or	a4,a4,a3
    8000d5ca:	9101                	srli	a0,a0,0x20
    8000d5cc:	1702                	slli	a4,a4,0x20
    8000d5ce:	8fe9                	and	a5,a5,a0
    8000d5d0:	8fd9                	or	a5,a5,a4
    8000d5d2:	60e2                	ld	ra,24(sp)
    8000d5d4:	6442                	ld	s0,16(sp)
    8000d5d6:	64a2                	ld	s1,8(sp)
    8000d5d8:	853e                	mv	a0,a5
    8000d5da:	6105                	addi	sp,sp,32
    8000d5dc:	8082                	ret

000000008000d5de <round>:
    8000d5de:	43455713          	srai	a4,a0,0x34
    8000d5e2:	7ff77713          	andi	a4,a4,2047
    8000d5e6:	42055613          	srai	a2,a0,0x20
    8000d5ea:	c017069b          	addiw	a3,a4,-1023
    8000d5ee:	434d                	li	t1,19
    8000d5f0:	85aa                	mv	a1,a0
    8000d5f2:	87b2                	mv	a5,a2
    8000d5f4:	0005081b          	sext.w	a6,a0
    8000d5f8:	04d34a63          	blt	t1,a3,8000d64c <round+0x6e>
    8000d5fc:	0206d363          	bgez	a3,8000d622 <round+0x44>
    8000d600:	80000737          	lui	a4,0x80000
    8000d604:	00e677b3          	and	a5,a2,a4
    8000d608:	577d                	li	a4,-1
    8000d60a:	4581                	li	a1,0
    8000d60c:	00e69563          	bne	a3,a4,8000d616 <round+0x38>
    8000d610:	3ff00737          	lui	a4,0x3ff00
    8000d614:	8fd9                	or	a5,a5,a4
    8000d616:	1582                	slli	a1,a1,0x20
    8000d618:	9181                	srli	a1,a1,0x20
    8000d61a:	1782                	slli	a5,a5,0x20
    8000d61c:	8ddd                	or	a1,a1,a5
    8000d61e:	852e                	mv	a0,a1
    8000d620:	8082                	ret
    8000d622:	00100737          	lui	a4,0x100
    8000d626:	377d                	addiw	a4,a4,-1
    8000d628:	40d7573b          	sraw	a4,a4,a3
    8000d62c:	8e79                	and	a2,a2,a4
    8000d62e:	01066633          	or	a2,a2,a6
    8000d632:	2601                	sext.w	a2,a2
    8000d634:	d66d                	beqz	a2,8000d61e <round+0x40>
    8000d636:	00080637          	lui	a2,0x80
    8000d63a:	40d656bb          	sraw	a3,a2,a3
    8000d63e:	9ebd                	addw	a3,a3,a5
    8000d640:	fff74793          	not	a5,a4
    8000d644:	8ff5                	and	a5,a5,a3
    8000d646:	2781                	sext.w	a5,a5
    8000d648:	4581                	li	a1,0
    8000d64a:	b7f1                	j	8000d616 <round+0x38>
    8000d64c:	03300613          	li	a2,51
    8000d650:	00d65d63          	bge	a2,a3,8000d66a <round+0x8c>
    8000d654:	40000793          	li	a5,1024
    8000d658:	fcf693e3          	bne	a3,a5,8000d61e <round+0x40>
    8000d65c:	1141                	addi	sp,sp,-16
    8000d65e:	e406                	sd	ra,8(sp)
    8000d660:	b75f20ef          	jal	ra,800001d4 <__adddf3>
    8000d664:	60a2                	ld	ra,8(sp)
    8000d666:	0141                	addi	sp,sp,16
    8000d668:	8082                	ret
    8000d66a:	bed7061b          	addiw	a2,a4,-1043
    8000d66e:	577d                	li	a4,-1
    8000d670:	00c7573b          	srlw	a4,a4,a2
    8000d674:	00e87633          	and	a2,a6,a4
    8000d678:	2601                	sext.w	a2,a2
    8000d67a:	d255                	beqz	a2,8000d61e <round+0x40>
    8000d67c:	88b6                	mv	a7,a3
    8000d67e:	03300693          	li	a3,51
    8000d682:	411686bb          	subw	a3,a3,a7
    8000d686:	4585                	li	a1,1
    8000d688:	00d595bb          	sllw	a1,a1,a3
    8000d68c:	010586bb          	addw	a3,a1,a6
    8000d690:	0006861b          	sext.w	a2,a3
    8000d694:	01067363          	bgeu	a2,a6,8000d69a <round+0xbc>
    8000d698:	2785                	addiw	a5,a5,1
    8000d69a:	fff74593          	not	a1,a4
    8000d69e:	8df5                	and	a1,a1,a3
    8000d6a0:	2581                	sext.w	a1,a1
    8000d6a2:	bf95                	j	8000d616 <round+0x38>

000000008000d6a4 <expf>:
    8000d6a4:	1101                	addi	sp,sp,-32
    8000d6a6:	e822                	sd	s0,16(sp)
    8000d6a8:	e426                	sd	s1,8(sp)
    8000d6aa:	ec06                	sd	ra,24(sp)
    8000d6ac:	84aa                	mv	s1,a0
    8000d6ae:	06a000ef          	jal	ra,8000d718 <__ieee754_expf>
    8000d6b2:	8281a703          	lw	a4,-2008(gp) # 800ab5f0 <__fdlib_version>
    8000d6b6:	57fd                	li	a5,-1
    8000d6b8:	842a                	mv	s0,a0
    8000d6ba:	02f70863          	beq	a4,a5,8000d6ea <expf+0x46>
    8000d6be:	8526                	mv	a0,s1
    8000d6c0:	2b8000ef          	jal	ra,8000d978 <finitef>
    8000d6c4:	c11d                	beqz	a0,8000d6ea <expf+0x46>
    8000d6c6:	00002597          	auipc	a1,0x2
    8000d6ca:	c065a583          	lw	a1,-1018(a1) # 8000f2cc <_ZN6tflite20kPoolingOutputTensorE+0x30>
    8000d6ce:	8526                	mv	a0,s1
    8000d6d0:	e9bf30ef          	jal	ra,8000156a <__gesf2>
    8000d6d4:	02a05163          	blez	a0,8000d6f6 <expf+0x52>
    8000d6d8:	d67f50ef          	jal	ra,8000343e <__errno>
    8000d6dc:	02200793          	li	a5,34
    8000d6e0:	c11c                	sw	a5,0(a0)
    8000d6e2:	00002417          	auipc	s0,0x2
    8000d6e6:	be642403          	lw	s0,-1050(s0) # 8000f2c8 <_ZN6tflite20kPoolingOutputTensorE+0x2c>
    8000d6ea:	60e2                	ld	ra,24(sp)
    8000d6ec:	8522                	mv	a0,s0
    8000d6ee:	6442                	ld	s0,16(sp)
    8000d6f0:	64a2                	ld	s1,8(sp)
    8000d6f2:	6105                	addi	sp,sp,32
    8000d6f4:	8082                	ret
    8000d6f6:	00002597          	auipc	a1,0x2
    8000d6fa:	bda5a583          	lw	a1,-1062(a1) # 8000f2d0 <_ZN6tflite20kPoolingOutputTensorE+0x34>
    8000d6fe:	8526                	mv	a0,s1
    8000d700:	eeff30ef          	jal	ra,800015ee <__lesf2>
    8000d704:	fe0553e3          	bgez	a0,8000d6ea <expf+0x46>
    8000d708:	d37f50ef          	jal	ra,8000343e <__errno>
    8000d70c:	02200793          	li	a5,34
    8000d710:	c11c                	sw	a5,0(a0)
    8000d712:	00000413          	li	s0,0
    8000d716:	bfd1                	j	8000d6ea <expf+0x46>

000000008000d718 <__ieee754_expf>:
    8000d718:	7139                	addi	sp,sp,-64
    8000d71a:	f822                	sd	s0,48(sp)
    8000d71c:	842a                	mv	s0,a0
    8000d71e:	02141793          	slli	a5,s0,0x21
    8000d722:	fc06                	sd	ra,56(sp)
    8000d724:	f426                	sd	s1,40(sp)
    8000d726:	f04a                	sd	s2,32(sp)
    8000d728:	ec4e                	sd	s3,24(sp)
    8000d72a:	e852                	sd	s4,16(sp)
    8000d72c:	e456                	sd	s5,8(sp)
    8000d72e:	9385                	srli	a5,a5,0x21
    8000d730:	7f8006b7          	lui	a3,0x7f800
    8000d734:	85aa                	mv	a1,a0
    8000d736:	1cf6eb63          	bltu	a3,a5,8000d90c <__ieee754_expf+0x1f4>
    8000d73a:	0005071b          	sext.w	a4,a0
    8000d73e:	01f75a9b          	srliw	s5,a4,0x1f
    8000d742:	01f7599b          	srliw	s3,a4,0x1f
    8000d746:	00d79e63          	bne	a5,a3,8000d762 <__ieee754_expf+0x4a>
    8000d74a:	22099463          	bnez	s3,8000d972 <__ieee754_expf+0x25a>
    8000d74e:	70e2                	ld	ra,56(sp)
    8000d750:	8522                	mv	a0,s0
    8000d752:	7442                	ld	s0,48(sp)
    8000d754:	74a2                	ld	s1,40(sp)
    8000d756:	7902                	ld	s2,32(sp)
    8000d758:	69e2                	ld	s3,24(sp)
    8000d75a:	6a42                	ld	s4,16(sp)
    8000d75c:	6aa2                	ld	s5,8(sp)
    8000d75e:	6121                	addi	sp,sp,64
    8000d760:	8082                	ret
    8000d762:	42b176b7          	lui	a3,0x42b17
    8000d766:	21768693          	addi	a3,a3,535 # 42b17217 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4218db97>
    8000d76a:	0007061b          	sext.w	a2,a4
    8000d76e:	00e6da63          	bge	a3,a4,8000d782 <__ieee754_expf+0x6a>
    8000d772:	00002597          	auipc	a1,0x2
    8000d776:	b625a583          	lw	a1,-1182(a1) # 8000f2d4 <_ZN6tflite20kPoolingOutputTensorE+0x38>
    8000d77a:	852e                	mv	a0,a1
    8000d77c:	ef7f30ef          	jal	ra,80001672 <__mulsf3>
    8000d780:	aa41                	j	8000d910 <__ieee754_expf+0x1f8>
    8000d782:	00065863          	bgez	a2,8000d792 <__ieee754_expf+0x7a>
    8000d786:	42cff737          	lui	a4,0x42cff
    8000d78a:	1b570713          	addi	a4,a4,437 # 42cff1b5 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42375b35>
    8000d78e:	1ef76263          	bltu	a4,a5,8000d972 <__ieee754_expf+0x25a>
    8000d792:	3eb17737          	lui	a4,0x3eb17
    8000d796:	21870713          	addi	a4,a4,536 # 3eb17218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e18db98>
    8000d79a:	14f77063          	bgeu	a4,a5,8000d8da <__ieee754_expf+0x1c2>
    8000d79e:	3f851737          	lui	a4,0x3f851
    8000d7a2:	59170713          	addi	a4,a4,1425 # 3f851591 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3eec7f11>
    8000d7a6:	098a                	slli	s3,s3,0x2
    8000d7a8:	0cf76d63          	bltu	a4,a5,8000d882 <__ieee754_expf+0x16a>
    8000d7ac:	00002797          	auipc	a5,0x2
    8000d7b0:	a9478793          	addi	a5,a5,-1388 # 8000f240 <ln2HI>
    8000d7b4:	97ce                	add	a5,a5,s3
    8000d7b6:	438c                	lw	a1,0(a5)
    8000d7b8:	8522                	mv	a0,s0
    8000d7ba:	4485                	li	s1,1
    8000d7bc:	8a0f40ef          	jal	ra,8000185c <__subsf3>
    8000d7c0:	00002797          	auipc	a5,0x2
    8000d7c4:	a8878793          	addi	a5,a5,-1400 # 8000f248 <ln2LO>
    8000d7c8:	99be                	add	s3,s3,a5
    8000d7ca:	0009aa03          	lw	s4,0(s3)
    8000d7ce:	415484bb          	subw	s1,s1,s5
    8000d7d2:	892a                	mv	s2,a0
    8000d7d4:	415484bb          	subw	s1,s1,s5
    8000d7d8:	85d2                	mv	a1,s4
    8000d7da:	854a                	mv	a0,s2
    8000d7dc:	880f40ef          	jal	ra,8000185c <__subsf3>
    8000d7e0:	842a                	mv	s0,a0
    8000d7e2:	85a2                	mv	a1,s0
    8000d7e4:	8522                	mv	a0,s0
    8000d7e6:	e8df30ef          	jal	ra,80001672 <__mulsf3>
    8000d7ea:	00002597          	auipc	a1,0x2
    8000d7ee:	afa5a583          	lw	a1,-1286(a1) # 8000f2e4 <_ZN6tflite20kPoolingOutputTensorE+0x48>
    8000d7f2:	89aa                	mv	s3,a0
    8000d7f4:	e7ff30ef          	jal	ra,80001672 <__mulsf3>
    8000d7f8:	00002597          	auipc	a1,0x2
    8000d7fc:	af05a583          	lw	a1,-1296(a1) # 8000f2e8 <_ZN6tflite20kPoolingOutputTensorE+0x4c>
    8000d800:	85cf40ef          	jal	ra,8000185c <__subsf3>
    8000d804:	85ce                	mv	a1,s3
    8000d806:	e6df30ef          	jal	ra,80001672 <__mulsf3>
    8000d80a:	00002597          	auipc	a1,0x2
    8000d80e:	ae25a583          	lw	a1,-1310(a1) # 8000f2ec <_ZN6tflite20kPoolingOutputTensorE+0x50>
    8000d812:	fc0f30ef          	jal	ra,80000fd2 <__addsf3>
    8000d816:	85ce                	mv	a1,s3
    8000d818:	e5bf30ef          	jal	ra,80001672 <__mulsf3>
    8000d81c:	00002597          	auipc	a1,0x2
    8000d820:	ad45a583          	lw	a1,-1324(a1) # 8000f2f0 <_ZN6tflite20kPoolingOutputTensorE+0x54>
    8000d824:	838f40ef          	jal	ra,8000185c <__subsf3>
    8000d828:	85ce                	mv	a1,s3
    8000d82a:	e49f30ef          	jal	ra,80001672 <__mulsf3>
    8000d82e:	00002597          	auipc	a1,0x2
    8000d832:	ac65a583          	lw	a1,-1338(a1) # 8000f2f4 <_ZN6tflite20kPoolingOutputTensorE+0x58>
    8000d836:	f9cf30ef          	jal	ra,80000fd2 <__addsf3>
    8000d83a:	85ce                	mv	a1,s3
    8000d83c:	e37f30ef          	jal	ra,80001672 <__mulsf3>
    8000d840:	85aa                	mv	a1,a0
    8000d842:	8522                	mv	a0,s0
    8000d844:	818f40ef          	jal	ra,8000185c <__subsf3>
    8000d848:	85aa                	mv	a1,a0
    8000d84a:	89aa                	mv	s3,a0
    8000d84c:	8522                	mv	a0,s0
    8000d84e:	e25f30ef          	jal	ra,80001672 <__mulsf3>
    8000d852:	8aaa                	mv	s5,a0
    8000d854:	e0f1                	bnez	s1,8000d918 <__ieee754_expf+0x200>
    8000d856:	00002597          	auipc	a1,0x2
    8000d85a:	aa25a583          	lw	a1,-1374(a1) # 8000f2f8 <_ZN6tflite20kPoolingOutputTensorE+0x5c>
    8000d85e:	854e                	mv	a0,s3
    8000d860:	ffdf30ef          	jal	ra,8000185c <__subsf3>
    8000d864:	85aa                	mv	a1,a0
    8000d866:	8556                	mv	a0,s5
    8000d868:	aadf30ef          	jal	ra,80001314 <__divsf3>
    8000d86c:	85a2                	mv	a1,s0
    8000d86e:	feff30ef          	jal	ra,8000185c <__subsf3>
    8000d872:	85aa                	mv	a1,a0
    8000d874:	00002517          	auipc	a0,0x2
    8000d878:	9f852503          	lw	a0,-1544(a0) # 8000f26c <_global_impure_ptr+0x1c>
    8000d87c:	fe1f30ef          	jal	ra,8000185c <__subsf3>
    8000d880:	a841                	j	8000d910 <__ieee754_expf+0x1f8>
    8000d882:	00002597          	auipc	a1,0x2
    8000d886:	a565a583          	lw	a1,-1450(a1) # 8000f2d8 <_ZN6tflite20kPoolingOutputTensorE+0x3c>
    8000d88a:	8522                	mv	a0,s0
    8000d88c:	de7f30ef          	jal	ra,80001672 <__mulsf3>
    8000d890:	00002797          	auipc	a5,0x2
    8000d894:	9a878793          	addi	a5,a5,-1624 # 8000f238 <halF>
    8000d898:	99be                	add	s3,s3,a5
    8000d89a:	0009a583          	lw	a1,0(s3)
    8000d89e:	f34f30ef          	jal	ra,80000fd2 <__addsf3>
    8000d8a2:	b10f40ef          	jal	ra,80001bb2 <__fixsfsi>
    8000d8a6:	0005049b          	sext.w	s1,a0
    8000d8aa:	8526                	mv	a0,s1
    8000d8ac:	b72f40ef          	jal	ra,80001c1e <__floatsisf>
    8000d8b0:	00002597          	auipc	a1,0x2
    8000d8b4:	a2c5a583          	lw	a1,-1492(a1) # 8000f2dc <_ZN6tflite20kPoolingOutputTensorE+0x40>
    8000d8b8:	89aa                	mv	s3,a0
    8000d8ba:	db9f30ef          	jal	ra,80001672 <__mulsf3>
    8000d8be:	85aa                	mv	a1,a0
    8000d8c0:	8522                	mv	a0,s0
    8000d8c2:	f9bf30ef          	jal	ra,8000185c <__subsf3>
    8000d8c6:	892a                	mv	s2,a0
    8000d8c8:	00002597          	auipc	a1,0x2
    8000d8cc:	a185a583          	lw	a1,-1512(a1) # 8000f2e0 <_ZN6tflite20kPoolingOutputTensorE+0x44>
    8000d8d0:	854e                	mv	a0,s3
    8000d8d2:	da1f30ef          	jal	ra,80001672 <__mulsf3>
    8000d8d6:	8a2a                	mv	s4,a0
    8000d8d8:	b701                	j	8000d7d8 <__ieee754_expf+0xc0>
    8000d8da:	31800737          	lui	a4,0x31800
    8000d8de:	02e7fb63          	bgeu	a5,a4,8000d914 <__ieee754_expf+0x1fc>
    8000d8e2:	00002597          	auipc	a1,0x2
    8000d8e6:	9f25a583          	lw	a1,-1550(a1) # 8000f2d4 <_ZN6tflite20kPoolingOutputTensorE+0x38>
    8000d8ea:	8522                	mv	a0,s0
    8000d8ec:	ee6f30ef          	jal	ra,80000fd2 <__addsf3>
    8000d8f0:	00002597          	auipc	a1,0x2
    8000d8f4:	97c5a583          	lw	a1,-1668(a1) # 8000f26c <_global_impure_ptr+0x1c>
    8000d8f8:	c73f30ef          	jal	ra,8000156a <__gesf2>
    8000d8fc:	00a05c63          	blez	a0,8000d914 <__ieee754_expf+0x1fc>
    8000d900:	00002797          	auipc	a5,0x2
    8000d904:	96c78793          	addi	a5,a5,-1684 # 8000f26c <_global_impure_ptr+0x1c>
    8000d908:	438c                	lw	a1,0(a5)
    8000d90a:	8522                	mv	a0,s0
    8000d90c:	ec6f30ef          	jal	ra,80000fd2 <__addsf3>
    8000d910:	842a                	mv	s0,a0
    8000d912:	bd35                	j	8000d74e <__ieee754_expf+0x36>
    8000d914:	4481                	li	s1,0
    8000d916:	b5f1                	j	8000d7e2 <__ieee754_expf+0xca>
    8000d918:	85ce                	mv	a1,s3
    8000d91a:	00002517          	auipc	a0,0x2
    8000d91e:	9de52503          	lw	a0,-1570(a0) # 8000f2f8 <_ZN6tflite20kPoolingOutputTensorE+0x5c>
    8000d922:	f3bf30ef          	jal	ra,8000185c <__subsf3>
    8000d926:	85aa                	mv	a1,a0
    8000d928:	8556                	mv	a0,s5
    8000d92a:	9ebf30ef          	jal	ra,80001314 <__divsf3>
    8000d92e:	85aa                	mv	a1,a0
    8000d930:	8552                	mv	a0,s4
    8000d932:	f2bf30ef          	jal	ra,8000185c <__subsf3>
    8000d936:	85ca                	mv	a1,s2
    8000d938:	f25f30ef          	jal	ra,8000185c <__subsf3>
    8000d93c:	85aa                	mv	a1,a0
    8000d93e:	00002517          	auipc	a0,0x2
    8000d942:	92e52503          	lw	a0,-1746(a0) # 8000f26c <_global_impure_ptr+0x1c>
    8000d946:	f17f30ef          	jal	ra,8000185c <__subsf3>
    8000d94a:	f8300793          	li	a5,-125
    8000d94e:	2501                	sext.w	a0,a0
    8000d950:	00f4c763          	blt	s1,a5,8000d95e <__ieee754_expf+0x246>
    8000d954:	0174949b          	slliw	s1,s1,0x17
    8000d958:	00a4843b          	addw	s0,s1,a0
    8000d95c:	bbcd                	j	8000d74e <__ieee754_expf+0x36>
    8000d95e:	0644849b          	addiw	s1,s1,100
    8000d962:	0174949b          	slliw	s1,s1,0x17
    8000d966:	00002597          	auipc	a1,0x2
    8000d96a:	9965a583          	lw	a1,-1642(a1) # 8000f2fc <_ZN6tflite20kPoolingOutputTensorE+0x60>
    8000d96e:	9d25                	addw	a0,a0,s1
    8000d970:	b531                	j	8000d77c <__ieee754_expf+0x64>
    8000d972:	00000413          	li	s0,0
    8000d976:	bbe1                	j	8000d74e <__ieee754_expf+0x36>

000000008000d978 <finitef>:
    8000d978:	1506                	slli	a0,a0,0x21
    8000d97a:	7f8007b7          	lui	a5,0x7f800
    8000d97e:	17fd                	addi	a5,a5,-1
    8000d980:	9105                	srli	a0,a0,0x21
    8000d982:	00a7a533          	slt	a0,a5,a0
    8000d986:	00154513          	xori	a0,a0,1
    8000d98a:	2501                	sext.w	a0,a0
    8000d98c:	8082                	ret

000000008000d98e <abort>:
    8000d98e:	1141                	addi	sp,sp,-16
    8000d990:	4519                	li	a0,6
    8000d992:	e406                	sd	ra,8(sp)
    8000d994:	1d7000ef          	jal	ra,8000e36a <raise>
    8000d998:	4505                	li	a0,1
    8000d99a:	a45f50ef          	jal	ra,800033de <_exit>

000000008000d99e <__assert_func>:
    8000d99e:	1141                	addi	sp,sp,-16
    8000d9a0:	8201b783          	ld	a5,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000d9a4:	8832                	mv	a6,a2
    8000d9a6:	e406                	sd	ra,8(sp)
    8000d9a8:	88aa                	mv	a7,a0
    8000d9aa:	872e                	mv	a4,a1
    8000d9ac:	6f88                	ld	a0,24(a5)
    8000d9ae:	8636                	mv	a2,a3
    8000d9b0:	00080797          	auipc	a5,0x80
    8000d9b4:	c7078793          	addi	a5,a5,-912 # 8008d620 <levels.0+0x80>
    8000d9b8:	00081763          	bnez	a6,8000d9c6 <__assert_func+0x28>
    8000d9bc:	0007d797          	auipc	a5,0x7d
    8000d9c0:	ba478793          	addi	a5,a5,-1116 # 8008a560 <space4_img+0x24d0>
    8000d9c4:	883e                	mv	a6,a5
    8000d9c6:	86c6                	mv	a3,a7
    8000d9c8:	00080597          	auipc	a1,0x80
    8000d9cc:	c6858593          	addi	a1,a1,-920 # 8008d630 <levels.0+0x90>
    8000d9d0:	008000ef          	jal	ra,8000d9d8 <fiprintf>
    8000d9d4:	fbbff0ef          	jal	ra,8000d98e <abort>

000000008000d9d8 <fiprintf>:
    8000d9d8:	715d                	addi	sp,sp,-80
    8000d9da:	f032                	sd	a2,32(sp)
    8000d9dc:	f436                	sd	a3,40(sp)
    8000d9de:	862e                	mv	a2,a1
    8000d9e0:	1014                	addi	a3,sp,32
    8000d9e2:	85aa                	mv	a1,a0
    8000d9e4:	8201b503          	ld	a0,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000d9e8:	ec06                	sd	ra,24(sp)
    8000d9ea:	f83a                	sd	a4,48(sp)
    8000d9ec:	fc3e                	sd	a5,56(sp)
    8000d9ee:	e0c2                	sd	a6,64(sp)
    8000d9f0:	e4c6                	sd	a7,72(sp)
    8000d9f2:	e436                	sd	a3,8(sp)
    8000d9f4:	238000ef          	jal	ra,8000dc2c <_vfiprintf_r>
    8000d9f8:	60e2                	ld	ra,24(sp)
    8000d9fa:	6161                	addi	sp,sp,80
    8000d9fc:	8082                	ret

000000008000d9fe <malloc>:
    8000d9fe:	85aa                	mv	a1,a0
    8000da00:	8201b503          	ld	a0,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000da04:	a0e9                	j	8000dace <_malloc_r>

000000008000da06 <free>:
    8000da06:	85aa                	mv	a1,a0
    8000da08:	8201b503          	ld	a0,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000da0c:	a831                	j	8000da28 <_free_r>

000000008000da0e <memchr>:
    8000da0e:	0ff5f593          	andi	a1,a1,255
    8000da12:	962a                	add	a2,a2,a0
    8000da14:	00c51463          	bne	a0,a2,8000da1c <memchr+0xe>
    8000da18:	4501                	li	a0,0
    8000da1a:	8082                	ret
    8000da1c:	00054783          	lbu	a5,0(a0)
    8000da20:	feb78de3          	beq	a5,a1,8000da1a <memchr+0xc>
    8000da24:	0505                	addi	a0,a0,1
    8000da26:	b7fd                	j	8000da14 <memchr+0x6>

000000008000da28 <_free_r>:
    8000da28:	c1d5                	beqz	a1,8000dacc <_free_r+0xa4>
    8000da2a:	ff85b783          	ld	a5,-8(a1)
    8000da2e:	1101                	addi	sp,sp,-32
    8000da30:	e822                	sd	s0,16(sp)
    8000da32:	ec06                	sd	ra,24(sp)
    8000da34:	ff858413          	addi	s0,a1,-8
    8000da38:	0007d363          	bgez	a5,8000da3e <_free_r+0x16>
    8000da3c:	943e                	add	s0,s0,a5
    8000da3e:	e42a                	sd	a0,8(sp)
    8000da40:	0d2010ef          	jal	ra,8000eb12 <__malloc_lock>
    8000da44:	00080717          	auipc	a4,0x80
    8000da48:	0ac70713          	addi	a4,a4,172 # 8008daf0 <__malloc_free_list>
    8000da4c:	631c                	ld	a5,0(a4)
    8000da4e:	6522                	ld	a0,8(sp)
    8000da50:	eb89                	bnez	a5,8000da62 <_free_r+0x3a>
    8000da52:	00043423          	sd	zero,8(s0)
    8000da56:	e300                	sd	s0,0(a4)
    8000da58:	6442                	ld	s0,16(sp)
    8000da5a:	60e2                	ld	ra,24(sp)
    8000da5c:	6105                	addi	sp,sp,32
    8000da5e:	0bc0106f          	j	8000eb1a <__malloc_unlock>
    8000da62:	00f47d63          	bgeu	s0,a5,8000da7c <_free_r+0x54>
    8000da66:	6010                	ld	a2,0(s0)
    8000da68:	00c406b3          	add	a3,s0,a2
    8000da6c:	00d79663          	bne	a5,a3,8000da78 <_free_r+0x50>
    8000da70:	6394                	ld	a3,0(a5)
    8000da72:	679c                	ld	a5,8(a5)
    8000da74:	96b2                	add	a3,a3,a2
    8000da76:	e014                	sd	a3,0(s0)
    8000da78:	e41c                	sd	a5,8(s0)
    8000da7a:	bff1                	j	8000da56 <_free_r+0x2e>
    8000da7c:	873e                	mv	a4,a5
    8000da7e:	679c                	ld	a5,8(a5)
    8000da80:	c399                	beqz	a5,8000da86 <_free_r+0x5e>
    8000da82:	fef47de3          	bgeu	s0,a5,8000da7c <_free_r+0x54>
    8000da86:	6314                	ld	a3,0(a4)
    8000da88:	00d70633          	add	a2,a4,a3
    8000da8c:	00861f63          	bne	a2,s0,8000daaa <_free_r+0x82>
    8000da90:	6010                	ld	a2,0(s0)
    8000da92:	96b2                	add	a3,a3,a2
    8000da94:	e314                	sd	a3,0(a4)
    8000da96:	00d70633          	add	a2,a4,a3
    8000da9a:	fac79fe3          	bne	a5,a2,8000da58 <_free_r+0x30>
    8000da9e:	6390                	ld	a2,0(a5)
    8000daa0:	679c                	ld	a5,8(a5)
    8000daa2:	96b2                	add	a3,a3,a2
    8000daa4:	e314                	sd	a3,0(a4)
    8000daa6:	e71c                	sd	a5,8(a4)
    8000daa8:	bf45                	j	8000da58 <_free_r+0x30>
    8000daaa:	00c47563          	bgeu	s0,a2,8000dab4 <_free_r+0x8c>
    8000daae:	47b1                	li	a5,12
    8000dab0:	c11c                	sw	a5,0(a0)
    8000dab2:	b75d                	j	8000da58 <_free_r+0x30>
    8000dab4:	6010                	ld	a2,0(s0)
    8000dab6:	00c406b3          	add	a3,s0,a2
    8000daba:	00d79663          	bne	a5,a3,8000dac6 <_free_r+0x9e>
    8000dabe:	6394                	ld	a3,0(a5)
    8000dac0:	679c                	ld	a5,8(a5)
    8000dac2:	96b2                	add	a3,a3,a2
    8000dac4:	e014                	sd	a3,0(s0)
    8000dac6:	e41c                	sd	a5,8(s0)
    8000dac8:	e700                	sd	s0,8(a4)
    8000daca:	b779                	j	8000da58 <_free_r+0x30>
    8000dacc:	8082                	ret

000000008000dace <_malloc_r>:
    8000dace:	00758793          	addi	a5,a1,7
    8000dad2:	7179                	addi	sp,sp,-48
    8000dad4:	9be1                	andi	a5,a5,-8
    8000dad6:	ec26                	sd	s1,24(sp)
    8000dad8:	e84a                	sd	s2,16(sp)
    8000dada:	f406                	sd	ra,40(sp)
    8000dadc:	f022                	sd	s0,32(sp)
    8000dade:	e44e                	sd	s3,8(sp)
    8000dae0:	07a1                	addi	a5,a5,8
    8000dae2:	4741                	li	a4,16
    8000dae4:	84aa                	mv	s1,a0
    8000dae6:	4941                	li	s2,16
    8000dae8:	00e7e363          	bltu	a5,a4,8000daee <_malloc_r+0x20>
    8000daec:	893e                	mv	s2,a5
    8000daee:	80000737          	lui	a4,0x80000
    8000daf2:	fff74713          	not	a4,a4
    8000daf6:	00f76463          	bltu	a4,a5,8000dafe <_malloc_r+0x30>
    8000dafa:	00b97c63          	bgeu	s2,a1,8000db12 <_malloc_r+0x44>
    8000dafe:	47b1                	li	a5,12
    8000db00:	c09c                	sw	a5,0(s1)
    8000db02:	4501                	li	a0,0
    8000db04:	70a2                	ld	ra,40(sp)
    8000db06:	7402                	ld	s0,32(sp)
    8000db08:	64e2                	ld	s1,24(sp)
    8000db0a:	6942                	ld	s2,16(sp)
    8000db0c:	69a2                	ld	s3,8(sp)
    8000db0e:	6145                	addi	sp,sp,48
    8000db10:	8082                	ret
    8000db12:	8526                	mv	a0,s1
    8000db14:	7ff000ef          	jal	ra,8000eb12 <__malloc_lock>
    8000db18:	00080697          	auipc	a3,0x80
    8000db1c:	fd868693          	addi	a3,a3,-40 # 8008daf0 <__malloc_free_list>
    8000db20:	6298                	ld	a4,0(a3)
    8000db22:	843a                	mv	s0,a4
    8000db24:	e80d                	bnez	s0,8000db56 <_malloc_r+0x88>
    8000db26:	00080417          	auipc	s0,0x80
    8000db2a:	fd240413          	addi	s0,s0,-46 # 8008daf8 <__malloc_sbrk_start>
    8000db2e:	601c                	ld	a5,0(s0)
    8000db30:	e791                	bnez	a5,8000db3c <_malloc_r+0x6e>
    8000db32:	4581                	li	a1,0
    8000db34:	8526                	mv	a0,s1
    8000db36:	7a0000ef          	jal	ra,8000e2d6 <_sbrk_r>
    8000db3a:	e008                	sd	a0,0(s0)
    8000db3c:	85ca                	mv	a1,s2
    8000db3e:	8526                	mv	a0,s1
    8000db40:	796000ef          	jal	ra,8000e2d6 <_sbrk_r>
    8000db44:	59fd                	li	s3,-1
    8000db46:	05351e63          	bne	a0,s3,8000dba2 <_malloc_r+0xd4>
    8000db4a:	47b1                	li	a5,12
    8000db4c:	c09c                	sw	a5,0(s1)
    8000db4e:	8526                	mv	a0,s1
    8000db50:	7cb000ef          	jal	ra,8000eb1a <__malloc_unlock>
    8000db54:	b77d                	j	8000db02 <_malloc_r+0x34>
    8000db56:	601c                	ld	a5,0(s0)
    8000db58:	412787bb          	subw	a5,a5,s2
    8000db5c:	0407c063          	bltz	a5,8000db9c <_malloc_r+0xce>
    8000db60:	463d                	li	a2,15
    8000db62:	00f65763          	bge	a2,a5,8000db70 <_malloc_r+0xa2>
    8000db66:	e01c                	sd	a5,0(s0)
    8000db68:	943e                	add	s0,s0,a5
    8000db6a:	01243023          	sd	s2,0(s0)
    8000db6e:	a029                	j	8000db78 <_malloc_r+0xaa>
    8000db70:	641c                	ld	a5,8(s0)
    8000db72:	02871363          	bne	a4,s0,8000db98 <_malloc_r+0xca>
    8000db76:	e29c                	sd	a5,0(a3)
    8000db78:	8526                	mv	a0,s1
    8000db7a:	7a1000ef          	jal	ra,8000eb1a <__malloc_unlock>
    8000db7e:	00f40513          	addi	a0,s0,15
    8000db82:	00840793          	addi	a5,s0,8
    8000db86:	9961                	andi	a0,a0,-8
    8000db88:	40f507bb          	subw	a5,a0,a5
    8000db8c:	dfa5                	beqz	a5,8000db04 <_malloc_r+0x36>
    8000db8e:	943e                	add	s0,s0,a5
    8000db90:	40f007bb          	negw	a5,a5
    8000db94:	e01c                	sd	a5,0(s0)
    8000db96:	b7bd                	j	8000db04 <_malloc_r+0x36>
    8000db98:	e71c                	sd	a5,8(a4)
    8000db9a:	bff9                	j	8000db78 <_malloc_r+0xaa>
    8000db9c:	8722                	mv	a4,s0
    8000db9e:	6400                	ld	s0,8(s0)
    8000dba0:	b751                	j	8000db24 <_malloc_r+0x56>
    8000dba2:	00750413          	addi	s0,a0,7
    8000dba6:	9861                	andi	s0,s0,-8
    8000dba8:	fc8501e3          	beq	a0,s0,8000db6a <_malloc_r+0x9c>
    8000dbac:	40a405b3          	sub	a1,s0,a0
    8000dbb0:	8526                	mv	a0,s1
    8000dbb2:	724000ef          	jal	ra,8000e2d6 <_sbrk_r>
    8000dbb6:	fb351ae3          	bne	a0,s3,8000db6a <_malloc_r+0x9c>
    8000dbba:	bf41                	j	8000db4a <_malloc_r+0x7c>

000000008000dbbc <__sfputc_r>:
    8000dbbc:	465c                	lw	a5,12(a2)
    8000dbbe:	fff7871b          	addiw	a4,a5,-1
    8000dbc2:	c658                	sw	a4,12(a2)
    8000dbc4:	00075a63          	bgez	a4,8000dbd8 <__sfputc_r+0x1c>
    8000dbc8:	561c                	lw	a5,40(a2)
    8000dbca:	00f74563          	blt	a4,a5,8000dbd4 <__sfputc_r+0x18>
    8000dbce:	47a9                	li	a5,10
    8000dbd0:	00f59463          	bne	a1,a5,8000dbd8 <__sfputc_r+0x1c>
    8000dbd4:	02f0006f          	j	8000e402 <__swbuf_r>
    8000dbd8:	621c                	ld	a5,0(a2)
    8000dbda:	852e                	mv	a0,a1
    8000dbdc:	00178713          	addi	a4,a5,1
    8000dbe0:	e218                	sd	a4,0(a2)
    8000dbe2:	00b78023          	sb	a1,0(a5)
    8000dbe6:	8082                	ret

000000008000dbe8 <__sfputs_r>:
    8000dbe8:	7179                	addi	sp,sp,-48
    8000dbea:	f022                	sd	s0,32(sp)
    8000dbec:	ec26                	sd	s1,24(sp)
    8000dbee:	e84a                	sd	s2,16(sp)
    8000dbf0:	e44e                	sd	s3,8(sp)
    8000dbf2:	e052                	sd	s4,0(sp)
    8000dbf4:	f406                	sd	ra,40(sp)
    8000dbf6:	892a                	mv	s2,a0
    8000dbf8:	89ae                	mv	s3,a1
    8000dbfa:	8432                	mv	s0,a2
    8000dbfc:	00d604b3          	add	s1,a2,a3
    8000dc00:	5a7d                	li	s4,-1
    8000dc02:	00941463          	bne	s0,s1,8000dc0a <__sfputs_r+0x22>
    8000dc06:	4501                	li	a0,0
    8000dc08:	a811                	j	8000dc1c <__sfputs_r+0x34>
    8000dc0a:	00044583          	lbu	a1,0(s0)
    8000dc0e:	864e                	mv	a2,s3
    8000dc10:	854a                	mv	a0,s2
    8000dc12:	fabff0ef          	jal	ra,8000dbbc <__sfputc_r>
    8000dc16:	0405                	addi	s0,s0,1
    8000dc18:	ff4515e3          	bne	a0,s4,8000dc02 <__sfputs_r+0x1a>
    8000dc1c:	70a2                	ld	ra,40(sp)
    8000dc1e:	7402                	ld	s0,32(sp)
    8000dc20:	64e2                	ld	s1,24(sp)
    8000dc22:	6942                	ld	s2,16(sp)
    8000dc24:	69a2                	ld	s3,8(sp)
    8000dc26:	6a02                	ld	s4,0(sp)
    8000dc28:	6145                	addi	sp,sp,48
    8000dc2a:	8082                	ret

000000008000dc2c <_vfiprintf_r>:
    8000dc2c:	7155                	addi	sp,sp,-208
    8000dc2e:	e1a2                	sd	s0,192(sp)
    8000dc30:	fd26                	sd	s1,184(sp)
    8000dc32:	f94a                	sd	s2,176(sp)
    8000dc34:	f54e                	sd	s3,168(sp)
    8000dc36:	f152                	sd	s4,160(sp)
    8000dc38:	e586                	sd	ra,200(sp)
    8000dc3a:	ed56                	sd	s5,152(sp)
    8000dc3c:	e95a                	sd	s6,144(sp)
    8000dc3e:	e55e                	sd	s7,136(sp)
    8000dc40:	e162                	sd	s8,128(sp)
    8000dc42:	fce6                	sd	s9,120(sp)
    8000dc44:	f8ea                	sd	s10,112(sp)
    8000dc46:	89aa                	mv	s3,a0
    8000dc48:	842e                	mv	s0,a1
    8000dc4a:	8932                	mv	s2,a2
    8000dc4c:	84b6                	mv	s1,a3
    8000dc4e:	4a01                	li	s4,0
    8000dc50:	c509                	beqz	a0,8000dc5a <_vfiprintf_r+0x2e>
    8000dc52:	591c                	lw	a5,48(a0)
    8000dc54:	e399                	bnez	a5,8000dc5a <_vfiprintf_r+0x2e>
    8000dc56:	425000ef          	jal	ra,8000e87a <__sinit>
    8000dc5a:	00080797          	auipc	a5,0x80
    8000dc5e:	b8e78793          	addi	a5,a5,-1138 # 8008d7e8 <__sf_fake_stdin>
    8000dc62:	04f41e63          	bne	s0,a5,8000dcbe <_vfiprintf_r+0x92>
    8000dc66:	0089b403          	ld	s0,8(s3)
    8000dc6a:	0b042783          	lw	a5,176(s0)
    8000dc6e:	8b85                	andi	a5,a5,1
    8000dc70:	eb89                	bnez	a5,8000dc82 <_vfiprintf_r+0x56>
    8000dc72:	01045783          	lhu	a5,16(s0)
    8000dc76:	2007f793          	andi	a5,a5,512
    8000dc7a:	e781                	bnez	a5,8000dc82 <_vfiprintf_r+0x56>
    8000dc7c:	7048                	ld	a0,160(s0)
    8000dc7e:	fb6f50ef          	jal	ra,80003434 <__retarget_lock_acquire_recursive>
    8000dc82:	01045783          	lhu	a5,16(s0)
    8000dc86:	8ba1                	andi	a5,a5,8
    8000dc88:	c399                	beqz	a5,8000dc8e <_vfiprintf_r+0x62>
    8000dc8a:	6c1c                	ld	a5,24(s0)
    8000dc8c:	e7a5                	bnez	a5,8000dcf4 <_vfiprintf_r+0xc8>
    8000dc8e:	85a2                	mv	a1,s0
    8000dc90:	854e                	mv	a0,s3
    8000dc92:	037000ef          	jal	ra,8000e4c8 <__swsetup_r>
    8000dc96:	cd39                	beqz	a0,8000dcf4 <_vfiprintf_r+0xc8>
    8000dc98:	0b042783          	lw	a5,176(s0)
    8000dc9c:	8b85                	andi	a5,a5,1
    8000dc9e:	c3b1                	beqz	a5,8000dce2 <_vfiprintf_r+0xb6>
    8000dca0:	557d                	li	a0,-1
    8000dca2:	60ae                	ld	ra,200(sp)
    8000dca4:	640e                	ld	s0,192(sp)
    8000dca6:	74ea                	ld	s1,184(sp)
    8000dca8:	794a                	ld	s2,176(sp)
    8000dcaa:	79aa                	ld	s3,168(sp)
    8000dcac:	7a0a                	ld	s4,160(sp)
    8000dcae:	6aea                	ld	s5,152(sp)
    8000dcb0:	6b4a                	ld	s6,144(sp)
    8000dcb2:	6baa                	ld	s7,136(sp)
    8000dcb4:	6c0a                	ld	s8,128(sp)
    8000dcb6:	7ce6                	ld	s9,120(sp)
    8000dcb8:	7d46                	ld	s10,112(sp)
    8000dcba:	6169                	addi	sp,sp,208
    8000dcbc:	8082                	ret
    8000dcbe:	00080797          	auipc	a5,0x80
    8000dcc2:	b6278793          	addi	a5,a5,-1182 # 8008d820 <__sf_fake_stdout>
    8000dcc6:	00f41563          	bne	s0,a5,8000dcd0 <_vfiprintf_r+0xa4>
    8000dcca:	0109b403          	ld	s0,16(s3)
    8000dcce:	bf71                	j	8000dc6a <_vfiprintf_r+0x3e>
    8000dcd0:	00080797          	auipc	a5,0x80
    8000dcd4:	ae078793          	addi	a5,a5,-1312 # 8008d7b0 <__sf_fake_stderr>
    8000dcd8:	f8f419e3          	bne	s0,a5,8000dc6a <_vfiprintf_r+0x3e>
    8000dcdc:	0189b403          	ld	s0,24(s3)
    8000dce0:	b769                	j	8000dc6a <_vfiprintf_r+0x3e>
    8000dce2:	01045783          	lhu	a5,16(s0)
    8000dce6:	2007f793          	andi	a5,a5,512
    8000dcea:	fbdd                	bnez	a5,8000dca0 <_vfiprintf_r+0x74>
    8000dcec:	7048                	ld	a0,160(s0)
    8000dcee:	f4cf50ef          	jal	ra,8000343a <__retarget_lock_release_recursive>
    8000dcf2:	b77d                	j	8000dca0 <_vfiprintf_r+0x74>
    8000dcf4:	02000793          	li	a5,32
    8000dcf8:	02f104a3          	sb	a5,41(sp)
    8000dcfc:	5afd                	li	s5,-1
    8000dcfe:	03000793          	li	a5,48
    8000dd02:	d202                	sw	zero,36(sp)
    8000dd04:	02f10523          	sb	a5,42(sp)
    8000dd08:	e426                	sd	s1,8(sp)
    8000dd0a:	02500b93          	li	s7,37
    8000dd0e:	020a9c13          	slli	s8,s5,0x20
    8000dd12:	00080b17          	auipc	s6,0x80
    8000dd16:	a56b0b13          	addi	s6,s6,-1450 # 8008d768 <_ctype_+0x108>
    8000dd1a:	4c85                	li	s9,1
    8000dd1c:	84ca                	mv	s1,s2
    8000dd1e:	0004c783          	lbu	a5,0(s1) # ffffffff80000000 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000001>
    8000dd22:	c399                	beqz	a5,8000dd28 <_vfiprintf_r+0xfc>
    8000dd24:	09779c63          	bne	a5,s7,8000ddbc <_vfiprintf_r+0x190>
    8000dd28:	41248d3b          	subw	s10,s1,s2
    8000dd2c:	000d0e63          	beqz	s10,8000dd48 <_vfiprintf_r+0x11c>
    8000dd30:	86ea                	mv	a3,s10
    8000dd32:	864a                	mv	a2,s2
    8000dd34:	85a2                	mv	a1,s0
    8000dd36:	854e                	mv	a0,s3
    8000dd38:	eb1ff0ef          	jal	ra,8000dbe8 <__sfputs_r>
    8000dd3c:	1b550563          	beq	a0,s5,8000dee6 <_vfiprintf_r+0x2ba>
    8000dd40:	5792                	lw	a5,36(sp)
    8000dd42:	01a787bb          	addw	a5,a5,s10
    8000dd46:	d23e                	sw	a5,36(sp)
    8000dd48:	0004c783          	lbu	a5,0(s1)
    8000dd4c:	18078d63          	beqz	a5,8000dee6 <_vfiprintf_r+0x2ba>
    8000dd50:	00148913          	addi	s2,s1,1
    8000dd54:	e862                	sd	s8,16(sp)
    8000dd56:	ec02                	sd	zero,24(sp)
    8000dd58:	040109a3          	sb	zero,83(sp)
    8000dd5c:	d482                	sw	zero,104(sp)
    8000dd5e:	00094583          	lbu	a1,0(s2)
    8000dd62:	4615                	li	a2,5
    8000dd64:	855a                	mv	a0,s6
    8000dd66:	ca9ff0ef          	jal	ra,8000da0e <memchr>
    8000dd6a:	00190493          	addi	s1,s2,1
    8000dd6e:	e929                	bnez	a0,8000ddc0 <_vfiprintf_r+0x194>
    8000dd70:	47c2                	lw	a5,16(sp)
    8000dd72:	0107f713          	andi	a4,a5,16
    8000dd76:	c709                	beqz	a4,8000dd80 <_vfiprintf_r+0x154>
    8000dd78:	02000713          	li	a4,32
    8000dd7c:	04e109a3          	sb	a4,83(sp)
    8000dd80:	0087f713          	andi	a4,a5,8
    8000dd84:	c709                	beqz	a4,8000dd8e <_vfiprintf_r+0x162>
    8000dd86:	02b00713          	li	a4,43
    8000dd8a:	04e109a3          	sb	a4,83(sp)
    8000dd8e:	00094683          	lbu	a3,0(s2)
    8000dd92:	02a00713          	li	a4,42
    8000dd96:	02e68e63          	beq	a3,a4,8000ddd2 <_vfiprintf_r+0x1a6>
    8000dd9a:	47f2                	lw	a5,28(sp)
    8000dd9c:	84ca                	mv	s1,s2
    8000dd9e:	4681                	li	a3,0
    8000dda0:	4625                	li	a2,9
    8000dda2:	4829                	li	a6,10
    8000dda4:	0004c703          	lbu	a4,0(s1)
    8000dda8:	00148513          	addi	a0,s1,1
    8000ddac:	fd07059b          	addiw	a1,a4,-48
    8000ddb0:	872e                	mv	a4,a1
    8000ddb2:	06b67563          	bgeu	a2,a1,8000de1c <_vfiprintf_r+0x1f0>
    8000ddb6:	c695                	beqz	a3,8000dde2 <_vfiprintf_r+0x1b6>
    8000ddb8:	ce3e                	sw	a5,28(sp)
    8000ddba:	a025                	j	8000dde2 <_vfiprintf_r+0x1b6>
    8000ddbc:	0485                	addi	s1,s1,1
    8000ddbe:	b785                	j	8000dd1e <_vfiprintf_r+0xf2>
    8000ddc0:	47c2                	lw	a5,16(sp)
    8000ddc2:	41650533          	sub	a0,a0,s6
    8000ddc6:	00ac953b          	sllw	a0,s9,a0
    8000ddca:	8d5d                	or	a0,a0,a5
    8000ddcc:	c82a                	sw	a0,16(sp)
    8000ddce:	8926                	mv	s2,s1
    8000ddd0:	b779                	j	8000dd5e <_vfiprintf_r+0x132>
    8000ddd2:	6722                	ld	a4,8(sp)
    8000ddd4:	00870693          	addi	a3,a4,8 # ffffffff80000008 <CONFIG_RISCV_SOC_MCAUSE_EXCEPTION_MASK+0x7fffffff80000009>
    8000ddd8:	4318                	lw	a4,0(a4)
    8000ddda:	e436                	sd	a3,8(sp)
    8000dddc:	02074963          	bltz	a4,8000de0e <_vfiprintf_r+0x1e2>
    8000dde0:	ce3a                	sw	a4,28(sp)
    8000dde2:	0004c703          	lbu	a4,0(s1)
    8000dde6:	02e00793          	li	a5,46
    8000ddea:	04f71063          	bne	a4,a5,8000de2a <_vfiprintf_r+0x1fe>
    8000ddee:	0014c703          	lbu	a4,1(s1)
    8000ddf2:	02a00793          	li	a5,42
    8000ddf6:	0af71063          	bne	a4,a5,8000de96 <_vfiprintf_r+0x26a>
    8000ddfa:	67a2                	ld	a5,8(sp)
    8000ddfc:	0489                	addi	s1,s1,2
    8000ddfe:	00878713          	addi	a4,a5,8
    8000de02:	439c                	lw	a5,0(a5)
    8000de04:	e43a                	sd	a4,8(sp)
    8000de06:	0207c163          	bltz	a5,8000de28 <_vfiprintf_r+0x1fc>
    8000de0a:	ca3e                	sw	a5,20(sp)
    8000de0c:	a839                	j	8000de2a <_vfiprintf_r+0x1fe>
    8000de0e:	40e0073b          	negw	a4,a4
    8000de12:	0027e793          	ori	a5,a5,2
    8000de16:	ce3a                	sw	a4,28(sp)
    8000de18:	c83e                	sw	a5,16(sp)
    8000de1a:	b7e1                	j	8000dde2 <_vfiprintf_r+0x1b6>
    8000de1c:	02f807bb          	mulw	a5,a6,a5
    8000de20:	84aa                	mv	s1,a0
    8000de22:	4685                	li	a3,1
    8000de24:	9fb9                	addw	a5,a5,a4
    8000de26:	bfbd                	j	8000dda4 <_vfiprintf_r+0x178>
    8000de28:	ca56                	sw	s5,20(sp)
    8000de2a:	0004c583          	lbu	a1,0(s1)
    8000de2e:	460d                	li	a2,3
    8000de30:	00080517          	auipc	a0,0x80
    8000de34:	94050513          	addi	a0,a0,-1728 # 8008d770 <_ctype_+0x110>
    8000de38:	bd7ff0ef          	jal	ra,8000da0e <memchr>
    8000de3c:	cd11                	beqz	a0,8000de58 <_vfiprintf_r+0x22c>
    8000de3e:	00080797          	auipc	a5,0x80
    8000de42:	93278793          	addi	a5,a5,-1742 # 8008d770 <_ctype_+0x110>
    8000de46:	8d1d                	sub	a0,a0,a5
    8000de48:	04000793          	li	a5,64
    8000de4c:	00a7953b          	sllw	a0,a5,a0
    8000de50:	47c2                	lw	a5,16(sp)
    8000de52:	0485                	addi	s1,s1,1
    8000de54:	8d5d                	or	a0,a0,a5
    8000de56:	c82a                	sw	a0,16(sp)
    8000de58:	0004c583          	lbu	a1,0(s1)
    8000de5c:	4619                	li	a2,6
    8000de5e:	00080517          	auipc	a0,0x80
    8000de62:	91a50513          	addi	a0,a0,-1766 # 8008d778 <_ctype_+0x118>
    8000de66:	00148913          	addi	s2,s1,1
    8000de6a:	02b10423          	sb	a1,40(sp)
    8000de6e:	ba1ff0ef          	jal	ra,8000da0e <memchr>
    8000de72:	cd51                	beqz	a0,8000df0e <_vfiprintf_r+0x2e2>
    8000de74:	00000793          	li	a5,0
    8000de78:	eba1                	bnez	a5,8000dec8 <_vfiprintf_r+0x29c>
    8000de7a:	4742                	lw	a4,16(sp)
    8000de7c:	67a2                	ld	a5,8(sp)
    8000de7e:	10077713          	andi	a4,a4,256
    8000de82:	c329                	beqz	a4,8000dec4 <_vfiprintf_r+0x298>
    8000de84:	07bd                	addi	a5,a5,15
    8000de86:	9bc1                	andi	a5,a5,-16
    8000de88:	07c1                	addi	a5,a5,16
    8000de8a:	e43e                	sd	a5,8(sp)
    8000de8c:	5792                	lw	a5,36(sp)
    8000de8e:	014787bb          	addw	a5,a5,s4
    8000de92:	d23e                	sw	a5,36(sp)
    8000de94:	b561                	j	8000dd1c <_vfiprintf_r+0xf0>
    8000de96:	0485                	addi	s1,s1,1
    8000de98:	ca02                	sw	zero,20(sp)
    8000de9a:	4681                	li	a3,0
    8000de9c:	4781                	li	a5,0
    8000de9e:	4625                	li	a2,9
    8000dea0:	4829                	li	a6,10
    8000dea2:	0004c703          	lbu	a4,0(s1)
    8000dea6:	00148513          	addi	a0,s1,1
    8000deaa:	fd07059b          	addiw	a1,a4,-48
    8000deae:	872e                	mv	a4,a1
    8000deb0:	00b67463          	bgeu	a2,a1,8000deb8 <_vfiprintf_r+0x28c>
    8000deb4:	fab9                	bnez	a3,8000de0a <_vfiprintf_r+0x1de>
    8000deb6:	bf95                	j	8000de2a <_vfiprintf_r+0x1fe>
    8000deb8:	02f807bb          	mulw	a5,a6,a5
    8000debc:	84aa                	mv	s1,a0
    8000debe:	4685                	li	a3,1
    8000dec0:	9fb9                	addw	a5,a5,a4
    8000dec2:	b7c5                	j	8000dea2 <_vfiprintf_r+0x276>
    8000dec4:	07a1                	addi	a5,a5,8
    8000dec6:	b7d1                	j	8000de8a <_vfiprintf_r+0x25e>
    8000dec8:	0038                	addi	a4,sp,8
    8000deca:	00000697          	auipc	a3,0x0
    8000dece:	d1e68693          	addi	a3,a3,-738 # 8000dbe8 <__sfputs_r>
    8000ded2:	8622                	mv	a2,s0
    8000ded4:	080c                	addi	a1,sp,16
    8000ded6:	854e                	mv	a0,s3
    8000ded8:	00000097          	auipc	ra,0x0
    8000dedc:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
    8000dee0:	8a2a                	mv	s4,a0
    8000dee2:	fb5515e3          	bne	a0,s5,8000de8c <_vfiprintf_r+0x260>
    8000dee6:	0b042783          	lw	a5,176(s0)
    8000deea:	8b85                	andi	a5,a5,1
    8000deec:	eb89                	bnez	a5,8000defe <_vfiprintf_r+0x2d2>
    8000deee:	01045783          	lhu	a5,16(s0)
    8000def2:	2007f793          	andi	a5,a5,512
    8000def6:	e781                	bnez	a5,8000defe <_vfiprintf_r+0x2d2>
    8000def8:	7048                	ld	a0,160(s0)
    8000defa:	d40f50ef          	jal	ra,8000343a <__retarget_lock_release_recursive>
    8000defe:	01045783          	lhu	a5,16(s0)
    8000df02:	0407f793          	andi	a5,a5,64
    8000df06:	d8079de3          	bnez	a5,8000dca0 <_vfiprintf_r+0x74>
    8000df0a:	5512                	lw	a0,36(sp)
    8000df0c:	bb59                	j	8000dca2 <_vfiprintf_r+0x76>
    8000df0e:	0038                	addi	a4,sp,8
    8000df10:	00000697          	auipc	a3,0x0
    8000df14:	cd868693          	addi	a3,a3,-808 # 8000dbe8 <__sfputs_r>
    8000df18:	8622                	mv	a2,s0
    8000df1a:	080c                	addi	a1,sp,16
    8000df1c:	854e                	mv	a0,s3
    8000df1e:	12a000ef          	jal	ra,8000e048 <_printf_i>
    8000df22:	bf7d                	j	8000dee0 <_vfiprintf_r+0x2b4>

000000008000df24 <_printf_common>:
    8000df24:	715d                	addi	sp,sp,-80
    8000df26:	499c                	lw	a5,16(a1)
    8000df28:	f052                	sd	s4,32(sp)
    8000df2a:	8a3a                	mv	s4,a4
    8000df2c:	4598                	lw	a4,8(a1)
    8000df2e:	e0a2                	sd	s0,64(sp)
    8000df30:	f84a                	sd	s2,48(sp)
    8000df32:	f44e                	sd	s3,40(sp)
    8000df34:	ec56                	sd	s5,24(sp)
    8000df36:	8932                	mv	s2,a2
    8000df38:	8ab6                	mv	s5,a3
    8000df3a:	e486                	sd	ra,72(sp)
    8000df3c:	fc26                	sd	s1,56(sp)
    8000df3e:	e85a                	sd	s6,16(sp)
    8000df40:	e45e                	sd	s7,8(sp)
    8000df42:	0007861b          	sext.w	a2,a5
    8000df46:	0007069b          	sext.w	a3,a4
    8000df4a:	89aa                	mv	s3,a0
    8000df4c:	842e                	mv	s0,a1
    8000df4e:	00d65363          	bge	a2,a3,8000df54 <_printf_common+0x30>
    8000df52:	87ba                	mv	a5,a4
    8000df54:	00f92023          	sw	a5,0(s2)
    8000df58:	04344703          	lbu	a4,67(s0)
    8000df5c:	c701                	beqz	a4,8000df64 <_printf_common+0x40>
    8000df5e:	2785                	addiw	a5,a5,1
    8000df60:	00f92023          	sw	a5,0(s2)
    8000df64:	401c                	lw	a5,0(s0)
    8000df66:	0207f793          	andi	a5,a5,32
    8000df6a:	c791                	beqz	a5,8000df76 <_printf_common+0x52>
    8000df6c:	00092783          	lw	a5,0(s2)
    8000df70:	2789                	addiw	a5,a5,2
    8000df72:	00f92023          	sw	a5,0(s2)
    8000df76:	4004                	lw	s1,0(s0)
    8000df78:	8899                	andi	s1,s1,6
    8000df7a:	e891                	bnez	s1,8000df8e <_printf_common+0x6a>
    8000df7c:	01940b13          	addi	s6,s0,25
    8000df80:	5bfd                	li	s7,-1
    8000df82:	445c                	lw	a5,12(s0)
    8000df84:	00092703          	lw	a4,0(s2)
    8000df88:	9f99                	subw	a5,a5,a4
    8000df8a:	06f4c063          	blt	s1,a5,8000dfea <_printf_common+0xc6>
    8000df8e:	04344783          	lbu	a5,67(s0)
    8000df92:	00f03633          	snez	a2,a5
    8000df96:	00f036b3          	snez	a3,a5
    8000df9a:	401c                	lw	a5,0(s0)
    8000df9c:	0207f793          	andi	a5,a5,32
    8000dfa0:	ebb5                	bnez	a5,8000e014 <_printf_common+0xf0>
    8000dfa2:	04340613          	addi	a2,s0,67
    8000dfa6:	85d6                	mv	a1,s5
    8000dfa8:	854e                	mv	a0,s3
    8000dfaa:	9a02                	jalr	s4
    8000dfac:	57fd                	li	a5,-1
    8000dfae:	04f50563          	beq	a0,a5,8000dff8 <_printf_common+0xd4>
    8000dfb2:	401c                	lw	a5,0(s0)
    8000dfb4:	4611                	li	a2,4
    8000dfb6:	4454                	lw	a3,12(s0)
    8000dfb8:	8b99                	andi	a5,a5,6
    8000dfba:	00092703          	lw	a4,0(s2)
    8000dfbe:	4481                	li	s1,0
    8000dfc0:	00c79863          	bne	a5,a2,8000dfd0 <_printf_common+0xac>
    8000dfc4:	40e687bb          	subw	a5,a3,a4
    8000dfc8:	84be                	mv	s1,a5
    8000dfca:	0007d363          	bgez	a5,8000dfd0 <_printf_common+0xac>
    8000dfce:	4481                	li	s1,0
    8000dfd0:	441c                	lw	a5,8(s0)
    8000dfd2:	4818                	lw	a4,16(s0)
    8000dfd4:	00f75463          	bge	a4,a5,8000dfdc <_printf_common+0xb8>
    8000dfd8:	9f99                	subw	a5,a5,a4
    8000dfda:	9cbd                	addw	s1,s1,a5
    8000dfdc:	4901                	li	s2,0
    8000dfde:	0469                	addi	s0,s0,26
    8000dfe0:	5b7d                	li	s6,-1
    8000dfe2:	05249a63          	bne	s1,s2,8000e036 <_printf_common+0x112>
    8000dfe6:	4501                	li	a0,0
    8000dfe8:	a809                	j	8000dffa <_printf_common+0xd6>
    8000dfea:	4685                	li	a3,1
    8000dfec:	865a                	mv	a2,s6
    8000dfee:	85d6                	mv	a1,s5
    8000dff0:	854e                	mv	a0,s3
    8000dff2:	9a02                	jalr	s4
    8000dff4:	01751e63          	bne	a0,s7,8000e010 <_printf_common+0xec>
    8000dff8:	557d                	li	a0,-1
    8000dffa:	60a6                	ld	ra,72(sp)
    8000dffc:	6406                	ld	s0,64(sp)
    8000dffe:	74e2                	ld	s1,56(sp)
    8000e000:	7942                	ld	s2,48(sp)
    8000e002:	79a2                	ld	s3,40(sp)
    8000e004:	7a02                	ld	s4,32(sp)
    8000e006:	6ae2                	ld	s5,24(sp)
    8000e008:	6b42                	ld	s6,16(sp)
    8000e00a:	6ba2                	ld	s7,8(sp)
    8000e00c:	6161                	addi	sp,sp,80
    8000e00e:	8082                	ret
    8000e010:	2485                	addiw	s1,s1,1
    8000e012:	bf85                	j	8000df82 <_printf_common+0x5e>
    8000e014:	00d407b3          	add	a5,s0,a3
    8000e018:	03000693          	li	a3,48
    8000e01c:	04d781a3          	sb	a3,67(a5)
    8000e020:	0016071b          	addiw	a4,a2,1
    8000e024:	0026069b          	addiw	a3,a2,2
    8000e028:	04544603          	lbu	a2,69(s0)
    8000e02c:	00e407b3          	add	a5,s0,a4
    8000e030:	04c781a3          	sb	a2,67(a5)
    8000e034:	b7bd                	j	8000dfa2 <_printf_common+0x7e>
    8000e036:	4685                	li	a3,1
    8000e038:	8622                	mv	a2,s0
    8000e03a:	85d6                	mv	a1,s5
    8000e03c:	854e                	mv	a0,s3
    8000e03e:	9a02                	jalr	s4
    8000e040:	fb650ce3          	beq	a0,s6,8000dff8 <_printf_common+0xd4>
    8000e044:	2905                	addiw	s2,s2,1
    8000e046:	bf71                	j	8000dfe2 <_printf_common+0xbe>

000000008000e048 <_printf_i>:
    8000e048:	715d                	addi	sp,sp,-80
    8000e04a:	e0a2                	sd	s0,64(sp)
    8000e04c:	f84a                	sd	s2,48(sp)
    8000e04e:	f44e                	sd	s3,40(sp)
    8000e050:	f052                	sd	s4,32(sp)
    8000e052:	e486                	sd	ra,72(sp)
    8000e054:	fc26                	sd	s1,56(sp)
    8000e056:	ec56                	sd	s5,24(sp)
    8000e058:	e85a                	sd	s6,16(sp)
    8000e05a:	0185c803          	lbu	a6,24(a1)
    8000e05e:	07800793          	li	a5,120
    8000e062:	892a                	mv	s2,a0
    8000e064:	842e                	mv	s0,a1
    8000e066:	89b2                	mv	s3,a2
    8000e068:	8a36                	mv	s4,a3
    8000e06a:	0107ee63          	bltu	a5,a6,8000e086 <_printf_i+0x3e>
    8000e06e:	06200793          	li	a5,98
    8000e072:	04358693          	addi	a3,a1,67
    8000e076:	0107ed63          	bltu	a5,a6,8000e090 <_printf_i+0x48>
    8000e07a:	1c080663          	beqz	a6,8000e246 <_printf_i+0x1fe>
    8000e07e:	05800793          	li	a5,88
    8000e082:	12f80e63          	beq	a6,a5,8000e1be <_printf_i+0x176>
    8000e086:	04240493          	addi	s1,s0,66
    8000e08a:	05040123          	sb	a6,66(s0)
    8000e08e:	a815                	j	8000e0c2 <_printf_i+0x7a>
    8000e090:	f9d8079b          	addiw	a5,a6,-99
    8000e094:	0ff7f793          	andi	a5,a5,255
    8000e098:	4655                	li	a2,21
    8000e09a:	fef666e3          	bltu	a2,a5,8000e086 <_printf_i+0x3e>
    8000e09e:	00080617          	auipc	a2,0x80
    8000e0a2:	93660613          	addi	a2,a2,-1738 # 8008d9d4 <__sf_fake_stdout+0x1b4>
    8000e0a6:	078a                	slli	a5,a5,0x2
    8000e0a8:	97b2                	add	a5,a5,a2
    8000e0aa:	439c                	lw	a5,0(a5)
    8000e0ac:	97b2                	add	a5,a5,a2
    8000e0ae:	8782                	jr	a5
    8000e0b0:	631c                	ld	a5,0(a4)
    8000e0b2:	04258493          	addi	s1,a1,66
    8000e0b6:	00878693          	addi	a3,a5,8
    8000e0ba:	439c                	lw	a5,0(a5)
    8000e0bc:	e314                	sd	a3,0(a4)
    8000e0be:	04f58123          	sb	a5,66(a1)
    8000e0c2:	4785                	li	a5,1
    8000e0c4:	aa6d                	j	8000e27e <_printf_i+0x236>
    8000e0c6:	4190                	lw	a2,0(a1)
    8000e0c8:	631c                	ld	a5,0(a4)
    8000e0ca:	08067513          	andi	a0,a2,128
    8000e0ce:	00878593          	addi	a1,a5,8
    8000e0d2:	c10d                	beqz	a0,8000e0f4 <_printf_i+0xac>
    8000e0d4:	639c                	ld	a5,0(a5)
    8000e0d6:	e30c                	sd	a1,0(a4)
    8000e0d8:	0007d863          	bgez	a5,8000e0e8 <_printf_i+0xa0>
    8000e0dc:	02d00713          	li	a4,45
    8000e0e0:	40f007b3          	neg	a5,a5
    8000e0e4:	04e401a3          	sb	a4,67(s0)
    8000e0e8:	0007f617          	auipc	a2,0x7f
    8000e0ec:	69860613          	addi	a2,a2,1688 # 8008d780 <_ctype_+0x120>
    8000e0f0:	4829                	li	a6,10
    8000e0f2:	a835                	j	8000e12e <_printf_i+0xe6>
    8000e0f4:	04067613          	andi	a2,a2,64
    8000e0f8:	e30c                	sd	a1,0(a4)
    8000e0fa:	c601                	beqz	a2,8000e102 <_printf_i+0xba>
    8000e0fc:	00079783          	lh	a5,0(a5)
    8000e100:	bfe1                	j	8000e0d8 <_printf_i+0x90>
    8000e102:	439c                	lw	a5,0(a5)
    8000e104:	bfd1                	j	8000e0d8 <_printf_i+0x90>
    8000e106:	4190                	lw	a2,0(a1)
    8000e108:	631c                	ld	a5,0(a4)
    8000e10a:	08067513          	andi	a0,a2,128
    8000e10e:	00878593          	addi	a1,a5,8
    8000e112:	cd41                	beqz	a0,8000e1aa <_printf_i+0x162>
    8000e114:	639c                	ld	a5,0(a5)
    8000e116:	e30c                	sd	a1,0(a4)
    8000e118:	06f00713          	li	a4,111
    8000e11c:	0007f617          	auipc	a2,0x7f
    8000e120:	66460613          	addi	a2,a2,1636 # 8008d780 <_ctype_+0x120>
    8000e124:	10e80363          	beq	a6,a4,8000e22a <_printf_i+0x1e2>
    8000e128:	4829                	li	a6,10
    8000e12a:	040401a3          	sb	zero,67(s0)
    8000e12e:	4058                	lw	a4,4(s0)
    8000e130:	c418                	sw	a4,8(s0)
    8000e132:	00074563          	bltz	a4,8000e13c <_printf_i+0xf4>
    8000e136:	400c                	lw	a1,0(s0)
    8000e138:	99ed                	andi	a1,a1,-5
    8000e13a:	c00c                	sw	a1,0(s0)
    8000e13c:	e399                	bnez	a5,8000e142 <_printf_i+0xfa>
    8000e13e:	84b6                	mv	s1,a3
    8000e140:	cf19                	beqz	a4,8000e15e <_printf_i+0x116>
    8000e142:	84b6                	mv	s1,a3
    8000e144:	0307f733          	remu	a4,a5,a6
    8000e148:	14fd                	addi	s1,s1,-1
    8000e14a:	9732                	add	a4,a4,a2
    8000e14c:	00074703          	lbu	a4,0(a4)
    8000e150:	00e48023          	sb	a4,0(s1)
    8000e154:	873e                	mv	a4,a5
    8000e156:	0307d7b3          	divu	a5,a5,a6
    8000e15a:	ff0775e3          	bgeu	a4,a6,8000e144 <_printf_i+0xfc>
    8000e15e:	47a1                	li	a5,8
    8000e160:	00f81e63          	bne	a6,a5,8000e17c <_printf_i+0x134>
    8000e164:	401c                	lw	a5,0(s0)
    8000e166:	8b85                	andi	a5,a5,1
    8000e168:	cb91                	beqz	a5,8000e17c <_printf_i+0x134>
    8000e16a:	4058                	lw	a4,4(s0)
    8000e16c:	481c                	lw	a5,16(s0)
    8000e16e:	00e7c763          	blt	a5,a4,8000e17c <_printf_i+0x134>
    8000e172:	03000793          	li	a5,48
    8000e176:	fef48fa3          	sb	a5,-1(s1)
    8000e17a:	14fd                	addi	s1,s1,-1
    8000e17c:	8e85                	sub	a3,a3,s1
    8000e17e:	c814                	sw	a3,16(s0)
    8000e180:	8752                	mv	a4,s4
    8000e182:	86ce                	mv	a3,s3
    8000e184:	0070                	addi	a2,sp,12
    8000e186:	85a2                	mv	a1,s0
    8000e188:	854a                	mv	a0,s2
    8000e18a:	d9bff0ef          	jal	ra,8000df24 <_printf_common>
    8000e18e:	5afd                	li	s5,-1
    8000e190:	0f551b63          	bne	a0,s5,8000e286 <_printf_i+0x23e>
    8000e194:	557d                	li	a0,-1
    8000e196:	60a6                	ld	ra,72(sp)
    8000e198:	6406                	ld	s0,64(sp)
    8000e19a:	74e2                	ld	s1,56(sp)
    8000e19c:	7942                	ld	s2,48(sp)
    8000e19e:	79a2                	ld	s3,40(sp)
    8000e1a0:	7a02                	ld	s4,32(sp)
    8000e1a2:	6ae2                	ld	s5,24(sp)
    8000e1a4:	6b42                	ld	s6,16(sp)
    8000e1a6:	6161                	addi	sp,sp,80
    8000e1a8:	8082                	ret
    8000e1aa:	04067613          	andi	a2,a2,64
    8000e1ae:	e30c                	sd	a1,0(a4)
    8000e1b0:	c601                	beqz	a2,8000e1b8 <_printf_i+0x170>
    8000e1b2:	0007d783          	lhu	a5,0(a5)
    8000e1b6:	b78d                	j	8000e118 <_printf_i+0xd0>
    8000e1b8:	0007e783          	lwu	a5,0(a5)
    8000e1bc:	bfb1                	j	8000e118 <_printf_i+0xd0>
    8000e1be:	050582a3          	sb	a6,69(a1)
    8000e1c2:	0007f617          	auipc	a2,0x7f
    8000e1c6:	5be60613          	addi	a2,a2,1470 # 8008d780 <_ctype_+0x120>
    8000e1ca:	400c                	lw	a1,0(s0)
    8000e1cc:	631c                	ld	a5,0(a4)
    8000e1ce:	0805f813          	andi	a6,a1,128
    8000e1d2:	00878513          	addi	a0,a5,8
    8000e1d6:	02080e63          	beqz	a6,8000e212 <_printf_i+0x1ca>
    8000e1da:	639c                	ld	a5,0(a5)
    8000e1dc:	e308                	sd	a0,0(a4)
    8000e1de:	0015f713          	andi	a4,a1,1
    8000e1e2:	c701                	beqz	a4,8000e1ea <_printf_i+0x1a2>
    8000e1e4:	0205e593          	ori	a1,a1,32
    8000e1e8:	c00c                	sw	a1,0(s0)
    8000e1ea:	4841                	li	a6,16
    8000e1ec:	ff9d                	bnez	a5,8000e12a <_printf_i+0xe2>
    8000e1ee:	4018                	lw	a4,0(s0)
    8000e1f0:	fdf77713          	andi	a4,a4,-33
    8000e1f4:	c018                	sw	a4,0(s0)
    8000e1f6:	bf15                	j	8000e12a <_printf_i+0xe2>
    8000e1f8:	419c                	lw	a5,0(a1)
    8000e1fa:	0a07e793          	ori	a5,a5,160
    8000e1fe:	c19c                	sw	a5,0(a1)
    8000e200:	07800793          	li	a5,120
    8000e204:	04f402a3          	sb	a5,69(s0)
    8000e208:	0007f617          	auipc	a2,0x7f
    8000e20c:	59060613          	addi	a2,a2,1424 # 8008d798 <_ctype_+0x138>
    8000e210:	bf6d                	j	8000e1ca <_printf_i+0x182>
    8000e212:	439c                	lw	a5,0(a5)
    8000e214:	0405f813          	andi	a6,a1,64
    8000e218:	e308                	sd	a0,0(a4)
    8000e21a:	00080563          	beqz	a6,8000e224 <_printf_i+0x1dc>
    8000e21e:	17c2                	slli	a5,a5,0x30
    8000e220:	93c1                	srli	a5,a5,0x30
    8000e222:	bf75                	j	8000e1de <_printf_i+0x196>
    8000e224:	1782                	slli	a5,a5,0x20
    8000e226:	9381                	srli	a5,a5,0x20
    8000e228:	bf5d                	j	8000e1de <_printf_i+0x196>
    8000e22a:	4821                	li	a6,8
    8000e22c:	bdfd                	j	8000e12a <_printf_i+0xe2>
    8000e22e:	4190                	lw	a2,0(a1)
    8000e230:	631c                	ld	a5,0(a4)
    8000e232:	49cc                	lw	a1,20(a1)
    8000e234:	08067813          	andi	a6,a2,128
    8000e238:	00878513          	addi	a0,a5,8
    8000e23c:	00080963          	beqz	a6,8000e24e <_printf_i+0x206>
    8000e240:	e308                	sd	a0,0(a4)
    8000e242:	639c                	ld	a5,0(a5)
    8000e244:	e38c                	sd	a1,0(a5)
    8000e246:	00042823          	sw	zero,16(s0)
    8000e24a:	84b6                	mv	s1,a3
    8000e24c:	bf15                	j	8000e180 <_printf_i+0x138>
    8000e24e:	e308                	sd	a0,0(a4)
    8000e250:	04067613          	andi	a2,a2,64
    8000e254:	639c                	ld	a5,0(a5)
    8000e256:	c601                	beqz	a2,8000e25e <_printf_i+0x216>
    8000e258:	00b79023          	sh	a1,0(a5)
    8000e25c:	b7ed                	j	8000e246 <_printf_i+0x1fe>
    8000e25e:	c38c                	sw	a1,0(a5)
    8000e260:	b7dd                	j	8000e246 <_printf_i+0x1fe>
    8000e262:	631c                	ld	a5,0(a4)
    8000e264:	41d0                	lw	a2,4(a1)
    8000e266:	4581                	li	a1,0
    8000e268:	00878693          	addi	a3,a5,8
    8000e26c:	e314                	sd	a3,0(a4)
    8000e26e:	6384                	ld	s1,0(a5)
    8000e270:	8526                	mv	a0,s1
    8000e272:	f9cff0ef          	jal	ra,8000da0e <memchr>
    8000e276:	c119                	beqz	a0,8000e27c <_printf_i+0x234>
    8000e278:	8d05                	sub	a0,a0,s1
    8000e27a:	c048                	sw	a0,4(s0)
    8000e27c:	405c                	lw	a5,4(s0)
    8000e27e:	c81c                	sw	a5,16(s0)
    8000e280:	040401a3          	sb	zero,67(s0)
    8000e284:	bdf5                	j	8000e180 <_printf_i+0x138>
    8000e286:	4814                	lw	a3,16(s0)
    8000e288:	8626                	mv	a2,s1
    8000e28a:	85ce                	mv	a1,s3
    8000e28c:	854a                	mv	a0,s2
    8000e28e:	9a02                	jalr	s4
    8000e290:	f15502e3          	beq	a0,s5,8000e194 <_printf_i+0x14c>
    8000e294:	401c                	lw	a5,0(s0)
    8000e296:	8b89                	andi	a5,a5,2
    8000e298:	eb95                	bnez	a5,8000e2cc <_printf_i+0x284>
    8000e29a:	47b2                	lw	a5,12(sp)
    8000e29c:	4448                	lw	a0,12(s0)
    8000e29e:	0007871b          	sext.w	a4,a5
    8000e2a2:	0005069b          	sext.w	a3,a0
    8000e2a6:	00e6d363          	bge	a3,a4,8000e2ac <_printf_i+0x264>
    8000e2aa:	853e                	mv	a0,a5
    8000e2ac:	2501                	sext.w	a0,a0
    8000e2ae:	b5e5                	j	8000e196 <_printf_i+0x14e>
    8000e2b0:	4685                	li	a3,1
    8000e2b2:	8656                	mv	a2,s5
    8000e2b4:	85ce                	mv	a1,s3
    8000e2b6:	854a                	mv	a0,s2
    8000e2b8:	9a02                	jalr	s4
    8000e2ba:	ed650de3          	beq	a0,s6,8000e194 <_printf_i+0x14c>
    8000e2be:	2485                	addiw	s1,s1,1
    8000e2c0:	445c                	lw	a5,12(s0)
    8000e2c2:	4732                	lw	a4,12(sp)
    8000e2c4:	9f99                	subw	a5,a5,a4
    8000e2c6:	fef4c5e3          	blt	s1,a5,8000e2b0 <_printf_i+0x268>
    8000e2ca:	bfc1                	j	8000e29a <_printf_i+0x252>
    8000e2cc:	4481                	li	s1,0
    8000e2ce:	01940a93          	addi	s5,s0,25
    8000e2d2:	5b7d                	li	s6,-1
    8000e2d4:	b7f5                	j	8000e2c0 <_printf_i+0x278>

000000008000e2d6 <_sbrk_r>:
    8000e2d6:	1141                	addi	sp,sp,-16
    8000e2d8:	e022                	sd	s0,0(sp)
    8000e2da:	842a                	mv	s0,a0
    8000e2dc:	852e                	mv	a0,a1
    8000e2de:	00080797          	auipc	a5,0x80
    8000e2e2:	8207af23          	sw	zero,-1986(a5) # 8008db1c <errno>
    8000e2e6:	e406                	sd	ra,8(sp)
    8000e2e8:	90af50ef          	jal	ra,800033f2 <_sbrk>
    8000e2ec:	57fd                	li	a5,-1
    8000e2ee:	00f51863          	bne	a0,a5,8000e2fe <_sbrk_r+0x28>
    8000e2f2:	00080797          	auipc	a5,0x80
    8000e2f6:	82a7a783          	lw	a5,-2006(a5) # 8008db1c <errno>
    8000e2fa:	c391                	beqz	a5,8000e2fe <_sbrk_r+0x28>
    8000e2fc:	c01c                	sw	a5,0(s0)
    8000e2fe:	60a2                	ld	ra,8(sp)
    8000e300:	6402                	ld	s0,0(sp)
    8000e302:	0141                	addi	sp,sp,16
    8000e304:	8082                	ret

000000008000e306 <_raise_r>:
    8000e306:	1101                	addi	sp,sp,-32
    8000e308:	e822                	sd	s0,16(sp)
    8000e30a:	ec06                	sd	ra,24(sp)
    8000e30c:	47fd                	li	a5,31
    8000e30e:	842a                	mv	s0,a0
    8000e310:	00b7f963          	bgeu	a5,a1,8000e322 <_raise_r+0x1c>
    8000e314:	47d9                	li	a5,22
    8000e316:	c11c                	sw	a5,0(a0)
    8000e318:	557d                	li	a0,-1
    8000e31a:	60e2                	ld	ra,24(sp)
    8000e31c:	6442                	ld	s0,16(sp)
    8000e31e:	6105                	addi	sp,sp,32
    8000e320:	8082                	ret
    8000e322:	7d3c                	ld	a5,120(a0)
    8000e324:	862e                	mv	a2,a1
    8000e326:	c791                	beqz	a5,8000e332 <_raise_r+0x2c>
    8000e328:	00359713          	slli	a4,a1,0x3
    8000e32c:	97ba                	add	a5,a5,a4
    8000e32e:	6398                	ld	a4,0(a5)
    8000e330:	ef01                	bnez	a4,8000e348 <_raise_r+0x42>
    8000e332:	8522                	mv	a0,s0
    8000e334:	e432                	sd	a2,8(sp)
    8000e336:	070000ef          	jal	ra,8000e3a6 <_getpid_r>
    8000e33a:	85aa                	mv	a1,a0
    8000e33c:	8522                	mv	a0,s0
    8000e33e:	6442                	ld	s0,16(sp)
    8000e340:	6622                	ld	a2,8(sp)
    8000e342:	60e2                	ld	ra,24(sp)
    8000e344:	6105                	addi	sp,sp,32
    8000e346:	a03d                	j	8000e374 <_kill_r>
    8000e348:	4685                	li	a3,1
    8000e34a:	4501                	li	a0,0
    8000e34c:	fcd707e3          	beq	a4,a3,8000e31a <_raise_r+0x14>
    8000e350:	56fd                	li	a3,-1
    8000e352:	00d71663          	bne	a4,a3,8000e35e <_raise_r+0x58>
    8000e356:	47d9                	li	a5,22
    8000e358:	c01c                	sw	a5,0(s0)
    8000e35a:	4505                	li	a0,1
    8000e35c:	bf7d                	j	8000e31a <_raise_r+0x14>
    8000e35e:	852e                	mv	a0,a1
    8000e360:	0007b023          	sd	zero,0(a5)
    8000e364:	9702                	jalr	a4
    8000e366:	4501                	li	a0,0
    8000e368:	bf4d                	j	8000e31a <_raise_r+0x14>

000000008000e36a <raise>:
    8000e36a:	85aa                	mv	a1,a0
    8000e36c:	8201b503          	ld	a0,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000e370:	f97ff06f          	j	8000e306 <_raise_r>

000000008000e374 <_kill_r>:
    8000e374:	1141                	addi	sp,sp,-16
    8000e376:	e022                	sd	s0,0(sp)
    8000e378:	842a                	mv	s0,a0
    8000e37a:	852e                	mv	a0,a1
    8000e37c:	85b2                	mv	a1,a2
    8000e37e:	0007f797          	auipc	a5,0x7f
    8000e382:	7807af23          	sw	zero,1950(a5) # 8008db1c <errno>
    8000e386:	e406                	sd	ra,8(sp)
    8000e388:	846f50ef          	jal	ra,800033ce <_kill>
    8000e38c:	57fd                	li	a5,-1
    8000e38e:	00f51863          	bne	a0,a5,8000e39e <_kill_r+0x2a>
    8000e392:	0007f797          	auipc	a5,0x7f
    8000e396:	78a7a783          	lw	a5,1930(a5) # 8008db1c <errno>
    8000e39a:	c391                	beqz	a5,8000e39e <_kill_r+0x2a>
    8000e39c:	c01c                	sw	a5,0(s0)
    8000e39e:	60a2                	ld	ra,8(sp)
    8000e3a0:	6402                	ld	s0,0(sp)
    8000e3a2:	0141                	addi	sp,sp,16
    8000e3a4:	8082                	ret

000000008000e3a6 <_getpid_r>:
    8000e3a6:	82cf506f          	j	800033d2 <_getpid>

000000008000e3aa <strlen>:
    8000e3aa:	87aa                	mv	a5,a0
    8000e3ac:	0007c703          	lbu	a4,0(a5)
    8000e3b0:	0785                	addi	a5,a5,1
    8000e3b2:	ff6d                	bnez	a4,8000e3ac <strlen+0x2>
    8000e3b4:	40a78533          	sub	a0,a5,a0
    8000e3b8:	157d                	addi	a0,a0,-1
    8000e3ba:	8082                	ret

000000008000e3bc <strncmp>:
    8000e3bc:	c60d                	beqz	a2,8000e3e6 <strncmp+0x2a>
    8000e3be:	167d                	addi	a2,a2,-1
    8000e3c0:	4701                	li	a4,0
    8000e3c2:	00e507b3          	add	a5,a0,a4
    8000e3c6:	00e586b3          	add	a3,a1,a4
    8000e3ca:	0007c783          	lbu	a5,0(a5)
    8000e3ce:	0006c683          	lbu	a3,0(a3)
    8000e3d2:	00d79463          	bne	a5,a3,8000e3da <strncmp+0x1e>
    8000e3d6:	00c71563          	bne	a4,a2,8000e3e0 <strncmp+0x24>
    8000e3da:	40d7853b          	subw	a0,a5,a3
    8000e3de:	8082                	ret
    8000e3e0:	0705                	addi	a4,a4,1
    8000e3e2:	f3e5                	bnez	a5,8000e3c2 <strncmp+0x6>
    8000e3e4:	bfdd                	j	8000e3da <strncmp+0x1e>
    8000e3e6:	4501                	li	a0,0
    8000e3e8:	8082                	ret

000000008000e3ea <strnlen>:
    8000e3ea:	95aa                	add	a1,a1,a0
    8000e3ec:	87aa                	mv	a5,a0
    8000e3ee:	00b78563          	beq	a5,a1,8000e3f8 <strnlen+0xe>
    8000e3f2:	0007c703          	lbu	a4,0(a5)
    8000e3f6:	e701                	bnez	a4,8000e3fe <strnlen+0x14>
    8000e3f8:	40a78533          	sub	a0,a5,a0
    8000e3fc:	8082                	ret
    8000e3fe:	0785                	addi	a5,a5,1
    8000e400:	b7fd                	j	8000e3ee <strnlen+0x4>

000000008000e402 <__swbuf_r>:
    8000e402:	7179                	addi	sp,sp,-48
    8000e404:	f022                	sd	s0,32(sp)
    8000e406:	ec26                	sd	s1,24(sp)
    8000e408:	e84a                	sd	s2,16(sp)
    8000e40a:	f406                	sd	ra,40(sp)
    8000e40c:	e44e                	sd	s3,8(sp)
    8000e40e:	84aa                	mv	s1,a0
    8000e410:	892e                	mv	s2,a1
    8000e412:	8432                	mv	s0,a2
    8000e414:	c509                	beqz	a0,8000e41e <__swbuf_r+0x1c>
    8000e416:	591c                	lw	a5,48(a0)
    8000e418:	e399                	bnez	a5,8000e41e <__swbuf_r+0x1c>
    8000e41a:	460000ef          	jal	ra,8000e87a <__sinit>
    8000e41e:	0007f797          	auipc	a5,0x7f
    8000e422:	3ca78793          	addi	a5,a5,970 # 8008d7e8 <__sf_fake_stdin>
    8000e426:	06f41a63          	bne	s0,a5,8000e49a <__swbuf_r+0x98>
    8000e42a:	6480                	ld	s0,8(s1)
    8000e42c:	541c                	lw	a5,40(s0)
    8000e42e:	c45c                	sw	a5,12(s0)
    8000e430:	01045783          	lhu	a5,16(s0)
    8000e434:	8ba1                	andi	a5,a5,8
    8000e436:	c3d1                	beqz	a5,8000e4ba <__swbuf_r+0xb8>
    8000e438:	6c1c                	ld	a5,24(s0)
    8000e43a:	c3c1                	beqz	a5,8000e4ba <__swbuf_r+0xb8>
    8000e43c:	6c1c                	ld	a5,24(s0)
    8000e43e:	6008                	ld	a0,0(s0)
    8000e440:	0ff97993          	andi	s3,s2,255
    8000e444:	894e                	mv	s2,s3
    8000e446:	9d1d                	subw	a0,a0,a5
    8000e448:	501c                	lw	a5,32(s0)
    8000e44a:	00f54763          	blt	a0,a5,8000e458 <__swbuf_r+0x56>
    8000e44e:	85a2                	mv	a1,s0
    8000e450:	8526                	mv	a0,s1
    8000e452:	2bc000ef          	jal	ra,8000e70e <_fflush_r>
    8000e456:	e53d                	bnez	a0,8000e4c4 <__swbuf_r+0xc2>
    8000e458:	445c                	lw	a5,12(s0)
    8000e45a:	2505                	addiw	a0,a0,1
    8000e45c:	37fd                	addiw	a5,a5,-1
    8000e45e:	c45c                	sw	a5,12(s0)
    8000e460:	601c                	ld	a5,0(s0)
    8000e462:	00178713          	addi	a4,a5,1
    8000e466:	e018                	sd	a4,0(s0)
    8000e468:	01378023          	sb	s3,0(a5)
    8000e46c:	501c                	lw	a5,32(s0)
    8000e46e:	00a78963          	beq	a5,a0,8000e480 <__swbuf_r+0x7e>
    8000e472:	01045783          	lhu	a5,16(s0)
    8000e476:	8b85                	andi	a5,a5,1
    8000e478:	cb89                	beqz	a5,8000e48a <__swbuf_r+0x88>
    8000e47a:	47a9                	li	a5,10
    8000e47c:	00f91763          	bne	s2,a5,8000e48a <__swbuf_r+0x88>
    8000e480:	85a2                	mv	a1,s0
    8000e482:	8526                	mv	a0,s1
    8000e484:	28a000ef          	jal	ra,8000e70e <_fflush_r>
    8000e488:	ed15                	bnez	a0,8000e4c4 <__swbuf_r+0xc2>
    8000e48a:	70a2                	ld	ra,40(sp)
    8000e48c:	7402                	ld	s0,32(sp)
    8000e48e:	64e2                	ld	s1,24(sp)
    8000e490:	69a2                	ld	s3,8(sp)
    8000e492:	854a                	mv	a0,s2
    8000e494:	6942                	ld	s2,16(sp)
    8000e496:	6145                	addi	sp,sp,48
    8000e498:	8082                	ret
    8000e49a:	0007f797          	auipc	a5,0x7f
    8000e49e:	38678793          	addi	a5,a5,902 # 8008d820 <__sf_fake_stdout>
    8000e4a2:	00f41463          	bne	s0,a5,8000e4aa <__swbuf_r+0xa8>
    8000e4a6:	6880                	ld	s0,16(s1)
    8000e4a8:	b751                	j	8000e42c <__swbuf_r+0x2a>
    8000e4aa:	0007f797          	auipc	a5,0x7f
    8000e4ae:	30678793          	addi	a5,a5,774 # 8008d7b0 <__sf_fake_stderr>
    8000e4b2:	f6f41de3          	bne	s0,a5,8000e42c <__swbuf_r+0x2a>
    8000e4b6:	6c80                	ld	s0,24(s1)
    8000e4b8:	bf95                	j	8000e42c <__swbuf_r+0x2a>
    8000e4ba:	85a2                	mv	a1,s0
    8000e4bc:	8526                	mv	a0,s1
    8000e4be:	00a000ef          	jal	ra,8000e4c8 <__swsetup_r>
    8000e4c2:	dd2d                	beqz	a0,8000e43c <__swbuf_r+0x3a>
    8000e4c4:	597d                	li	s2,-1
    8000e4c6:	b7d1                	j	8000e48a <__swbuf_r+0x88>

000000008000e4c8 <__swsetup_r>:
    8000e4c8:	1101                	addi	sp,sp,-32
    8000e4ca:	e822                	sd	s0,16(sp)
    8000e4cc:	e426                	sd	s1,8(sp)
    8000e4ce:	e04a                	sd	s2,0(sp)
    8000e4d0:	ec06                	sd	ra,24(sp)
    8000e4d2:	8201b483          	ld	s1,-2016(gp) # 800ab5e8 <_impure_ptr>
    8000e4d6:	892a                	mv	s2,a0
    8000e4d8:	842e                	mv	s0,a1
    8000e4da:	c491                	beqz	s1,8000e4e6 <__swsetup_r+0x1e>
    8000e4dc:	589c                	lw	a5,48(s1)
    8000e4de:	e781                	bnez	a5,8000e4e6 <__swsetup_r+0x1e>
    8000e4e0:	8526                	mv	a0,s1
    8000e4e2:	398000ef          	jal	ra,8000e87a <__sinit>
    8000e4e6:	0007f797          	auipc	a5,0x7f
    8000e4ea:	30278793          	addi	a5,a5,770 # 8008d7e8 <__sf_fake_stdin>
    8000e4ee:	02f41763          	bne	s0,a5,8000e51c <__swsetup_r+0x54>
    8000e4f2:	6480                	ld	s0,8(s1)
    8000e4f4:	01041783          	lh	a5,16(s0)
    8000e4f8:	03079713          	slli	a4,a5,0x30
    8000e4fc:	0087f693          	andi	a3,a5,8
    8000e500:	9341                	srli	a4,a4,0x30
    8000e502:	eab5                	bnez	a3,8000e576 <__swsetup_r+0xae>
    8000e504:	01077693          	andi	a3,a4,16
    8000e508:	ea95                	bnez	a3,8000e53c <__swsetup_r+0x74>
    8000e50a:	4725                	li	a4,9
    8000e50c:	00e92023          	sw	a4,0(s2)
    8000e510:	0407e793          	ori	a5,a5,64
    8000e514:	00f41823          	sh	a5,16(s0)
    8000e518:	557d                	li	a0,-1
    8000e51a:	a045                	j	8000e5ba <__swsetup_r+0xf2>
    8000e51c:	0007f797          	auipc	a5,0x7f
    8000e520:	30478793          	addi	a5,a5,772 # 8008d820 <__sf_fake_stdout>
    8000e524:	00f41463          	bne	s0,a5,8000e52c <__swsetup_r+0x64>
    8000e528:	6880                	ld	s0,16(s1)
    8000e52a:	b7e9                	j	8000e4f4 <__swsetup_r+0x2c>
    8000e52c:	0007f797          	auipc	a5,0x7f
    8000e530:	28478793          	addi	a5,a5,644 # 8008d7b0 <__sf_fake_stderr>
    8000e534:	fcf410e3          	bne	s0,a5,8000e4f4 <__swsetup_r+0x2c>
    8000e538:	6c80                	ld	s0,24(s1)
    8000e53a:	bf6d                	j	8000e4f4 <__swsetup_r+0x2c>
    8000e53c:	8b11                	andi	a4,a4,4
    8000e53e:	c715                	beqz	a4,8000e56a <__swsetup_r+0xa2>
    8000e540:	702c                	ld	a1,96(s0)
    8000e542:	c991                	beqz	a1,8000e556 <__swsetup_r+0x8e>
    8000e544:	07c40793          	addi	a5,s0,124
    8000e548:	00f58563          	beq	a1,a5,8000e552 <__swsetup_r+0x8a>
    8000e54c:	854a                	mv	a0,s2
    8000e54e:	cdaff0ef          	jal	ra,8000da28 <_free_r>
    8000e552:	06043023          	sd	zero,96(s0)
    8000e556:	01045783          	lhu	a5,16(s0)
    8000e55a:	00042423          	sw	zero,8(s0)
    8000e55e:	fdb7f793          	andi	a5,a5,-37
    8000e562:	00f41823          	sh	a5,16(s0)
    8000e566:	6c1c                	ld	a5,24(s0)
    8000e568:	e01c                	sd	a5,0(s0)
    8000e56a:	01045783          	lhu	a5,16(s0)
    8000e56e:	0087e793          	ori	a5,a5,8
    8000e572:	00f41823          	sh	a5,16(s0)
    8000e576:	6c1c                	ld	a5,24(s0)
    8000e578:	ef89                	bnez	a5,8000e592 <__swsetup_r+0xca>
    8000e57a:	01045783          	lhu	a5,16(s0)
    8000e57e:	20000713          	li	a4,512
    8000e582:	2807f793          	andi	a5,a5,640
    8000e586:	00e78663          	beq	a5,a4,8000e592 <__swsetup_r+0xca>
    8000e58a:	85a2                	mv	a1,s0
    8000e58c:	854a                	mv	a0,s2
    8000e58e:	4e2000ef          	jal	ra,8000ea70 <__smakebuf_r>
    8000e592:	01041783          	lh	a5,16(s0)
    8000e596:	03079713          	slli	a4,a5,0x30
    8000e59a:	0017f693          	andi	a3,a5,1
    8000e59e:	9341                	srli	a4,a4,0x30
    8000e5a0:	c29d                	beqz	a3,8000e5c6 <__swsetup_r+0xfe>
    8000e5a2:	5014                	lw	a3,32(s0)
    8000e5a4:	00042623          	sw	zero,12(s0)
    8000e5a8:	40d006bb          	negw	a3,a3
    8000e5ac:	d414                	sw	a3,40(s0)
    8000e5ae:	6c14                	ld	a3,24(s0)
    8000e5b0:	4501                	li	a0,0
    8000e5b2:	e681                	bnez	a3,8000e5ba <__swsetup_r+0xf2>
    8000e5b4:	08077713          	andi	a4,a4,128
    8000e5b8:	ff21                	bnez	a4,8000e510 <__swsetup_r+0x48>
    8000e5ba:	60e2                	ld	ra,24(sp)
    8000e5bc:	6442                	ld	s0,16(sp)
    8000e5be:	64a2                	ld	s1,8(sp)
    8000e5c0:	6902                	ld	s2,0(sp)
    8000e5c2:	6105                	addi	sp,sp,32
    8000e5c4:	8082                	ret
    8000e5c6:	00277693          	andi	a3,a4,2
    8000e5ca:	4601                	li	a2,0
    8000e5cc:	e291                	bnez	a3,8000e5d0 <__swsetup_r+0x108>
    8000e5ce:	5010                	lw	a2,32(s0)
    8000e5d0:	c450                	sw	a2,12(s0)
    8000e5d2:	bff1                	j	8000e5ae <__swsetup_r+0xe6>

000000008000e5d4 <__sflush_r>:
    8000e5d4:	0105d783          	lhu	a5,16(a1)
    8000e5d8:	7179                	addi	sp,sp,-48
    8000e5da:	f022                	sd	s0,32(sp)
    8000e5dc:	ec26                	sd	s1,24(sp)
    8000e5de:	f406                	sd	ra,40(sp)
    8000e5e0:	e84a                	sd	s2,16(sp)
    8000e5e2:	e44e                	sd	s3,8(sp)
    8000e5e4:	0087f713          	andi	a4,a5,8
    8000e5e8:	84aa                	mv	s1,a0
    8000e5ea:	842e                	mv	s0,a1
    8000e5ec:	ef69                	bnez	a4,8000e6c6 <__sflush_r+0xf2>
    8000e5ee:	4598                	lw	a4,8(a1)
    8000e5f0:	00e04d63          	bgtz	a4,8000e60a <__sflush_r+0x36>
    8000e5f4:	5db8                	lw	a4,120(a1)
    8000e5f6:	00e04a63          	bgtz	a4,8000e60a <__sflush_r+0x36>
    8000e5fa:	4501                	li	a0,0
    8000e5fc:	70a2                	ld	ra,40(sp)
    8000e5fe:	7402                	ld	s0,32(sp)
    8000e600:	64e2                	ld	s1,24(sp)
    8000e602:	6942                	ld	s2,16(sp)
    8000e604:	69a2                	ld	s3,8(sp)
    8000e606:	6145                	addi	sp,sp,48
    8000e608:	8082                	ret
    8000e60a:	6838                	ld	a4,80(s0)
    8000e60c:	d77d                	beqz	a4,8000e5fa <__sflush_r+0x26>
    8000e60e:	6685                	lui	a3,0x1
    8000e610:	0004a903          	lw	s2,0(s1)
    8000e614:	8ff5                	and	a5,a5,a3
    8000e616:	0004a023          	sw	zero,0(s1)
    8000e61a:	cfa5                	beqz	a5,8000e692 <__sflush_r+0xbe>
    8000e61c:	6c50                	ld	a2,152(s0)
    8000e61e:	01045783          	lhu	a5,16(s0)
    8000e622:	8b91                	andi	a5,a5,4
    8000e624:	c799                	beqz	a5,8000e632 <__sflush_r+0x5e>
    8000e626:	441c                	lw	a5,8(s0)
    8000e628:	8e1d                	sub	a2,a2,a5
    8000e62a:	703c                	ld	a5,96(s0)
    8000e62c:	c399                	beqz	a5,8000e632 <__sflush_r+0x5e>
    8000e62e:	5c3c                	lw	a5,120(s0)
    8000e630:	8e1d                	sub	a2,a2,a5
    8000e632:	683c                	ld	a5,80(s0)
    8000e634:	7c0c                	ld	a1,56(s0)
    8000e636:	4681                	li	a3,0
    8000e638:	8526                	mv	a0,s1
    8000e63a:	9782                	jalr	a5
    8000e63c:	57fd                	li	a5,-1
    8000e63e:	01045703          	lhu	a4,16(s0)
    8000e642:	00f51d63          	bne	a0,a5,8000e65c <__sflush_r+0x88>
    8000e646:	4094                	lw	a3,0(s1)
    8000e648:	47f5                	li	a5,29
    8000e64a:	06d7e863          	bltu	a5,a3,8000e6ba <__sflush_r+0xe6>
    8000e64e:	204007b7          	lui	a5,0x20400
    8000e652:	0785                	addi	a5,a5,1
    8000e654:	00d7d7b3          	srl	a5,a5,a3
    8000e658:	8b85                	andi	a5,a5,1
    8000e65a:	c3a5                	beqz	a5,8000e6ba <__sflush_r+0xe6>
    8000e65c:	6c1c                	ld	a5,24(s0)
    8000e65e:	00042423          	sw	zero,8(s0)
    8000e662:	e01c                	sd	a5,0(s0)
    8000e664:	6785                	lui	a5,0x1
    8000e666:	8f7d                	and	a4,a4,a5
    8000e668:	c719                	beqz	a4,8000e676 <__sflush_r+0xa2>
    8000e66a:	57fd                	li	a5,-1
    8000e66c:	00f51463          	bne	a0,a5,8000e674 <__sflush_r+0xa0>
    8000e670:	409c                	lw	a5,0(s1)
    8000e672:	e391                	bnez	a5,8000e676 <__sflush_r+0xa2>
    8000e674:	ec48                	sd	a0,152(s0)
    8000e676:	702c                	ld	a1,96(s0)
    8000e678:	0124a023          	sw	s2,0(s1)
    8000e67c:	ddbd                	beqz	a1,8000e5fa <__sflush_r+0x26>
    8000e67e:	07c40793          	addi	a5,s0,124
    8000e682:	00f58563          	beq	a1,a5,8000e68c <__sflush_r+0xb8>
    8000e686:	8526                	mv	a0,s1
    8000e688:	ba0ff0ef          	jal	ra,8000da28 <_free_r>
    8000e68c:	06043023          	sd	zero,96(s0)
    8000e690:	b7ad                	j	8000e5fa <__sflush_r+0x26>
    8000e692:	7c0c                	ld	a1,56(s0)
    8000e694:	4601                	li	a2,0
    8000e696:	4685                	li	a3,1
    8000e698:	8526                	mv	a0,s1
    8000e69a:	9702                	jalr	a4
    8000e69c:	57fd                	li	a5,-1
    8000e69e:	862a                	mv	a2,a0
    8000e6a0:	f6f51fe3          	bne	a0,a5,8000e61e <__sflush_r+0x4a>
    8000e6a4:	409c                	lw	a5,0(s1)
    8000e6a6:	dfa5                	beqz	a5,8000e61e <__sflush_r+0x4a>
    8000e6a8:	4775                	li	a4,29
    8000e6aa:	00e78563          	beq	a5,a4,8000e6b4 <__sflush_r+0xe0>
    8000e6ae:	4759                	li	a4,22
    8000e6b0:	04e79463          	bne	a5,a4,8000e6f8 <__sflush_r+0x124>
    8000e6b4:	0124a023          	sw	s2,0(s1)
    8000e6b8:	b789                	j	8000e5fa <__sflush_r+0x26>
    8000e6ba:	04076713          	ori	a4,a4,64
    8000e6be:	00e41823          	sh	a4,16(s0)
    8000e6c2:	557d                	li	a0,-1
    8000e6c4:	bf25                	j	8000e5fc <__sflush_r+0x28>
    8000e6c6:	0185b983          	ld	s3,24(a1)
    8000e6ca:	f20988e3          	beqz	s3,8000e5fa <__sflush_r+0x26>
    8000e6ce:	0005b903          	ld	s2,0(a1)
    8000e6d2:	8b8d                	andi	a5,a5,3
    8000e6d4:	0135b023          	sd	s3,0(a1)
    8000e6d8:	4139093b          	subw	s2,s2,s3
    8000e6dc:	4701                	li	a4,0
    8000e6de:	e391                	bnez	a5,8000e6e2 <__sflush_r+0x10e>
    8000e6e0:	5198                	lw	a4,32(a1)
    8000e6e2:	c458                	sw	a4,12(s0)
    8000e6e4:	f1205be3          	blez	s2,8000e5fa <__sflush_r+0x26>
    8000e6e8:	643c                	ld	a5,72(s0)
    8000e6ea:	7c0c                	ld	a1,56(s0)
    8000e6ec:	86ca                	mv	a3,s2
    8000e6ee:	864e                	mv	a2,s3
    8000e6f0:	8526                	mv	a0,s1
    8000e6f2:	9782                	jalr	a5
    8000e6f4:	00a04963          	bgtz	a0,8000e706 <__sflush_r+0x132>
    8000e6f8:	01045783          	lhu	a5,16(s0)
    8000e6fc:	0407e793          	ori	a5,a5,64
    8000e700:	00f41823          	sh	a5,16(s0)
    8000e704:	bf7d                	j	8000e6c2 <__sflush_r+0xee>
    8000e706:	99aa                	add	s3,s3,a0
    8000e708:	40a9093b          	subw	s2,s2,a0
    8000e70c:	bfe1                	j	8000e6e4 <__sflush_r+0x110>

000000008000e70e <_fflush_r>:
    8000e70e:	6d9c                	ld	a5,24(a1)
    8000e710:	1101                	addi	sp,sp,-32
    8000e712:	ec06                	sd	ra,24(sp)
    8000e714:	e822                	sd	s0,16(sp)
    8000e716:	e426                	sd	s1,8(sp)
    8000e718:	eb81                	bnez	a5,8000e728 <_fflush_r+0x1a>
    8000e71a:	4481                	li	s1,0
    8000e71c:	60e2                	ld	ra,24(sp)
    8000e71e:	6442                	ld	s0,16(sp)
    8000e720:	8526                	mv	a0,s1
    8000e722:	64a2                	ld	s1,8(sp)
    8000e724:	6105                	addi	sp,sp,32
    8000e726:	8082                	ret
    8000e728:	84aa                	mv	s1,a0
    8000e72a:	842e                	mv	s0,a1
    8000e72c:	c509                	beqz	a0,8000e736 <_fflush_r+0x28>
    8000e72e:	591c                	lw	a5,48(a0)
    8000e730:	e399                	bnez	a5,8000e736 <_fflush_r+0x28>
    8000e732:	148000ef          	jal	ra,8000e87a <__sinit>
    8000e736:	0007f797          	auipc	a5,0x7f
    8000e73a:	0b278793          	addi	a5,a5,178 # 8008d7e8 <__sf_fake_stdin>
    8000e73e:	04f41263          	bne	s0,a5,8000e782 <_fflush_r+0x74>
    8000e742:	6480                	ld	s0,8(s1)
    8000e744:	01041783          	lh	a5,16(s0)
    8000e748:	dbe9                	beqz	a5,8000e71a <_fflush_r+0xc>
    8000e74a:	0b042703          	lw	a4,176(s0)
    8000e74e:	8b05                	andi	a4,a4,1
    8000e750:	e719                	bnez	a4,8000e75e <_fflush_r+0x50>
    8000e752:	2007f793          	andi	a5,a5,512
    8000e756:	e781                	bnez	a5,8000e75e <_fflush_r+0x50>
    8000e758:	7048                	ld	a0,160(s0)
    8000e75a:	cdbf40ef          	jal	ra,80003434 <__retarget_lock_acquire_recursive>
    8000e75e:	8526                	mv	a0,s1
    8000e760:	85a2                	mv	a1,s0
    8000e762:	e73ff0ef          	jal	ra,8000e5d4 <__sflush_r>
    8000e766:	0b042783          	lw	a5,176(s0)
    8000e76a:	84aa                	mv	s1,a0
    8000e76c:	8b85                	andi	a5,a5,1
    8000e76e:	f7dd                	bnez	a5,8000e71c <_fflush_r+0xe>
    8000e770:	01045783          	lhu	a5,16(s0)
    8000e774:	2007f793          	andi	a5,a5,512
    8000e778:	f3d5                	bnez	a5,8000e71c <_fflush_r+0xe>
    8000e77a:	7048                	ld	a0,160(s0)
    8000e77c:	cbff40ef          	jal	ra,8000343a <__retarget_lock_release_recursive>
    8000e780:	bf71                	j	8000e71c <_fflush_r+0xe>
    8000e782:	0007f797          	auipc	a5,0x7f
    8000e786:	09e78793          	addi	a5,a5,158 # 8008d820 <__sf_fake_stdout>
    8000e78a:	00f41463          	bne	s0,a5,8000e792 <_fflush_r+0x84>
    8000e78e:	6880                	ld	s0,16(s1)
    8000e790:	bf55                	j	8000e744 <_fflush_r+0x36>
    8000e792:	0007f797          	auipc	a5,0x7f
    8000e796:	01e78793          	addi	a5,a5,30 # 8008d7b0 <__sf_fake_stderr>
    8000e79a:	faf415e3          	bne	s0,a5,8000e744 <_fflush_r+0x36>
    8000e79e:	6c80                	ld	s0,24(s1)
    8000e7a0:	b755                	j	8000e744 <_fflush_r+0x36>

000000008000e7a2 <std>:
    8000e7a2:	1141                	addi	sp,sp,-16
    8000e7a4:	e022                	sd	s0,0(sp)
    8000e7a6:	e406                	sd	ra,8(sp)
    8000e7a8:	842a                	mv	s0,a0
    8000e7aa:	00b51823          	sh	a1,16(a0)
    8000e7ae:	00c51923          	sh	a2,18(a0)
    8000e7b2:	00053023          	sd	zero,0(a0)
    8000e7b6:	00053423          	sd	zero,8(a0)
    8000e7ba:	0a052823          	sw	zero,176(a0)
    8000e7be:	00053c23          	sd	zero,24(a0)
    8000e7c2:	02052023          	sw	zero,32(a0)
    8000e7c6:	02052423          	sw	zero,40(a0)
    8000e7ca:	4621                	li	a2,8
    8000e7cc:	4581                	li	a1,0
    8000e7ce:	0a850513          	addi	a0,a0,168
    8000e7d2:	e7af30ef          	jal	ra,80001e4c <memset>
    8000e7d6:	00000797          	auipc	a5,0x0
    8000e7da:	34c78793          	addi	a5,a5,844 # 8000eb22 <__sread>
    8000e7de:	e03c                	sd	a5,64(s0)
    8000e7e0:	00000797          	auipc	a5,0x0
    8000e7e4:	37478793          	addi	a5,a5,884 # 8000eb54 <__swrite>
    8000e7e8:	e43c                	sd	a5,72(s0)
    8000e7ea:	00000797          	auipc	a5,0x0
    8000e7ee:	3ba78793          	addi	a5,a5,954 # 8000eba4 <__sseek>
    8000e7f2:	e83c                	sd	a5,80(s0)
    8000e7f4:	00000797          	auipc	a5,0x0
    8000e7f8:	3e878793          	addi	a5,a5,1000 # 8000ebdc <__sclose>
    8000e7fc:	60a2                	ld	ra,8(sp)
    8000e7fe:	fc00                	sd	s0,56(s0)
    8000e800:	ec3c                	sd	a5,88(s0)
    8000e802:	6402                	ld	s0,0(sp)
    8000e804:	0141                	addi	sp,sp,16
    8000e806:	8082                	ret

000000008000e808 <_cleanup_r>:
    8000e808:	00000597          	auipc	a1,0x0
    8000e80c:	f0658593          	addi	a1,a1,-250 # 8000e70e <_fflush_r>
    8000e810:	aa61                	j	8000e9a8 <_fwalk_reent>

000000008000e812 <__sfmoreglue>:
    8000e812:	1101                	addi	sp,sp,-32
    8000e814:	e426                	sd	s1,8(sp)
    8000e816:	0b800613          	li	a2,184
    8000e81a:	fff5849b          	addiw	s1,a1,-1
    8000e81e:	02c484b3          	mul	s1,s1,a2
    8000e822:	e04a                	sd	s2,0(sp)
    8000e824:	892e                	mv	s2,a1
    8000e826:	e822                	sd	s0,16(sp)
    8000e828:	ec06                	sd	ra,24(sp)
    8000e82a:	0d048593          	addi	a1,s1,208
    8000e82e:	aa0ff0ef          	jal	ra,8000dace <_malloc_r>
    8000e832:	842a                	mv	s0,a0
    8000e834:	cd01                	beqz	a0,8000e84c <__sfmoreglue+0x3a>
    8000e836:	00053023          	sd	zero,0(a0)
    8000e83a:	01252423          	sw	s2,8(a0)
    8000e83e:	0561                	addi	a0,a0,24
    8000e840:	e808                	sd	a0,16(s0)
    8000e842:	0b848613          	addi	a2,s1,184
    8000e846:	4581                	li	a1,0
    8000e848:	e04f30ef          	jal	ra,80001e4c <memset>
    8000e84c:	60e2                	ld	ra,24(sp)
    8000e84e:	8522                	mv	a0,s0
    8000e850:	6442                	ld	s0,16(sp)
    8000e852:	64a2                	ld	s1,8(sp)
    8000e854:	6902                	ld	s2,0(sp)
    8000e856:	6105                	addi	sp,sp,32
    8000e858:	8082                	ret

000000008000e85a <__sfp_lock_acquire>:
    8000e85a:	85818513          	addi	a0,gp,-1960 # 800ab620 <__lock___sfp_recursive_mutex>
    8000e85e:	bd7f406f          	j	80003434 <__retarget_lock_acquire_recursive>

000000008000e862 <__sfp_lock_release>:
    8000e862:	85818513          	addi	a0,gp,-1960 # 800ab620 <__lock___sfp_recursive_mutex>
    8000e866:	bd5f406f          	j	8000343a <__retarget_lock_release_recursive>

000000008000e86a <__sinit_lock_acquire>:
    8000e86a:	87818513          	addi	a0,gp,-1928 # 800ab640 <__lock___sinit_recursive_mutex>
    8000e86e:	bc7f406f          	j	80003434 <__retarget_lock_acquire_recursive>

000000008000e872 <__sinit_lock_release>:
    8000e872:	87818513          	addi	a0,gp,-1928 # 800ab640 <__lock___sinit_recursive_mutex>
    8000e876:	bc5f406f          	j	8000343a <__retarget_lock_release_recursive>

000000008000e87a <__sinit>:
    8000e87a:	1141                	addi	sp,sp,-16
    8000e87c:	e022                	sd	s0,0(sp)
    8000e87e:	e406                	sd	ra,8(sp)
    8000e880:	842a                	mv	s0,a0
    8000e882:	fe9ff0ef          	jal	ra,8000e86a <__sinit_lock_acquire>
    8000e886:	581c                	lw	a5,48(s0)
    8000e888:	c791                	beqz	a5,8000e894 <__sinit+0x1a>
    8000e88a:	6402                	ld	s0,0(sp)
    8000e88c:	60a2                	ld	ra,8(sp)
    8000e88e:	0141                	addi	sp,sp,16
    8000e890:	fe3ff06f          	j	8000e872 <__sinit_lock_release>
    8000e894:	00000797          	auipc	a5,0x0
    8000e898:	f7478793          	addi	a5,a5,-140 # 8000e808 <_cleanup_r>
    8000e89c:	e43c                	sd	a5,72(s0)
    8000e89e:	08043023          	sd	zero,128(s0)
    8000e8a2:	08042423          	sw	zero,136(s0)
    8000e8a6:	08043823          	sd	zero,144(s0)
    8000e8aa:	00001797          	auipc	a5,0x1
    8000e8ae:	9a67b783          	ld	a5,-1626(a5) # 8000f250 <_global_impure_ptr>
    8000e8b2:	00879463          	bne	a5,s0,8000e8ba <__sinit+0x40>
    8000e8b6:	4785                	li	a5,1
    8000e8b8:	d81c                	sw	a5,48(s0)
    8000e8ba:	8522                	mv	a0,s0
    8000e8bc:	03a000ef          	jal	ra,8000e8f6 <__sfp>
    8000e8c0:	e408                	sd	a0,8(s0)
    8000e8c2:	8522                	mv	a0,s0
    8000e8c4:	032000ef          	jal	ra,8000e8f6 <__sfp>
    8000e8c8:	e808                	sd	a0,16(s0)
    8000e8ca:	8522                	mv	a0,s0
    8000e8cc:	02a000ef          	jal	ra,8000e8f6 <__sfp>
    8000e8d0:	ec08                	sd	a0,24(s0)
    8000e8d2:	6408                	ld	a0,8(s0)
    8000e8d4:	4601                	li	a2,0
    8000e8d6:	4591                	li	a1,4
    8000e8d8:	ecbff0ef          	jal	ra,8000e7a2 <std>
    8000e8dc:	6808                	ld	a0,16(s0)
    8000e8de:	4605                	li	a2,1
    8000e8e0:	45a5                	li	a1,9
    8000e8e2:	ec1ff0ef          	jal	ra,8000e7a2 <std>
    8000e8e6:	6c08                	ld	a0,24(s0)
    8000e8e8:	4609                	li	a2,2
    8000e8ea:	45c9                	li	a1,18
    8000e8ec:	eb7ff0ef          	jal	ra,8000e7a2 <std>
    8000e8f0:	4785                	li	a5,1
    8000e8f2:	d81c                	sw	a5,48(s0)
    8000e8f4:	bf59                	j	8000e88a <__sinit+0x10>

000000008000e8f6 <__sfp>:
    8000e8f6:	1101                	addi	sp,sp,-32
    8000e8f8:	e426                	sd	s1,8(sp)
    8000e8fa:	e04a                	sd	s2,0(sp)
    8000e8fc:	ec06                	sd	ra,24(sp)
    8000e8fe:	e822                	sd	s0,16(sp)
    8000e900:	892a                	mv	s2,a0
    8000e902:	f59ff0ef          	jal	ra,8000e85a <__sfp_lock_acquire>
    8000e906:	00001497          	auipc	s1,0x1
    8000e90a:	94a4b483          	ld	s1,-1718(s1) # 8000f250 <_global_impure_ptr>
    8000e90e:	589c                	lw	a5,48(s1)
    8000e910:	e781                	bnez	a5,8000e918 <__sfp+0x22>
    8000e912:	8526                	mv	a0,s1
    8000e914:	f67ff0ef          	jal	ra,8000e87a <__sinit>
    8000e918:	08048493          	addi	s1,s1,128
    8000e91c:	6880                	ld	s0,16(s1)
    8000e91e:	449c                	lw	a5,8(s1)
    8000e920:	37fd                	addiw	a5,a5,-1
    8000e922:	0007d663          	bgez	a5,8000e92e <__sfp+0x38>
    8000e926:	609c                	ld	a5,0(s1)
    8000e928:	c3bd                	beqz	a5,8000e98e <__sfp+0x98>
    8000e92a:	6084                	ld	s1,0(s1)
    8000e92c:	bfc5                	j	8000e91c <__sfp+0x26>
    8000e92e:	01041703          	lh	a4,16(s0)
    8000e932:	eb39                	bnez	a4,8000e988 <__sfp+0x92>
    8000e934:	77c1                	lui	a5,0xffff0
    8000e936:	0785                	addi	a5,a5,1
    8000e938:	c81c                	sw	a5,16(s0)
    8000e93a:	0a040513          	addi	a0,s0,160
    8000e93e:	0a042823          	sw	zero,176(s0)
    8000e942:	ad7f40ef          	jal	ra,80003418 <__retarget_lock_init_recursive>
    8000e946:	f1dff0ef          	jal	ra,8000e862 <__sfp_lock_release>
    8000e94a:	4621                	li	a2,8
    8000e94c:	00043023          	sd	zero,0(s0)
    8000e950:	00043423          	sd	zero,8(s0)
    8000e954:	00043c23          	sd	zero,24(s0)
    8000e958:	02042023          	sw	zero,32(s0)
    8000e95c:	02042423          	sw	zero,40(s0)
    8000e960:	4581                	li	a1,0
    8000e962:	0a840513          	addi	a0,s0,168
    8000e966:	ce6f30ef          	jal	ra,80001e4c <memset>
    8000e96a:	06043023          	sd	zero,96(s0)
    8000e96e:	06042423          	sw	zero,104(s0)
    8000e972:	08043023          	sd	zero,128(s0)
    8000e976:	08042423          	sw	zero,136(s0)
    8000e97a:	60e2                	ld	ra,24(sp)
    8000e97c:	8522                	mv	a0,s0
    8000e97e:	6442                	ld	s0,16(sp)
    8000e980:	64a2                	ld	s1,8(sp)
    8000e982:	6902                	ld	s2,0(sp)
    8000e984:	6105                	addi	sp,sp,32
    8000e986:	8082                	ret
    8000e988:	0b840413          	addi	s0,s0,184
    8000e98c:	bf51                	j	8000e920 <__sfp+0x2a>
    8000e98e:	4591                	li	a1,4
    8000e990:	854a                	mv	a0,s2
    8000e992:	e81ff0ef          	jal	ra,8000e812 <__sfmoreglue>
    8000e996:	e088                	sd	a0,0(s1)
    8000e998:	842a                	mv	s0,a0
    8000e99a:	f941                	bnez	a0,8000e92a <__sfp+0x34>
    8000e99c:	ec7ff0ef          	jal	ra,8000e862 <__sfp_lock_release>
    8000e9a0:	47b1                	li	a5,12
    8000e9a2:	00f92023          	sw	a5,0(s2)
    8000e9a6:	bfd1                	j	8000e97a <__sfp+0x84>

000000008000e9a8 <_fwalk_reent>:
    8000e9a8:	715d                	addi	sp,sp,-80
    8000e9aa:	e0a2                	sd	s0,64(sp)
    8000e9ac:	fc26                	sd	s1,56(sp)
    8000e9ae:	f44e                	sd	s3,40(sp)
    8000e9b0:	f052                	sd	s4,32(sp)
    8000e9b2:	e85a                	sd	s6,16(sp)
    8000e9b4:	e45e                	sd	s7,8(sp)
    8000e9b6:	e486                	sd	ra,72(sp)
    8000e9b8:	f84a                	sd	s2,48(sp)
    8000e9ba:	ec56                	sd	s5,24(sp)
    8000e9bc:	89aa                	mv	s3,a0
    8000e9be:	8a2e                	mv	s4,a1
    8000e9c0:	08050493          	addi	s1,a0,128
    8000e9c4:	4401                	li	s0,0
    8000e9c6:	4b05                	li	s6,1
    8000e9c8:	5bfd                	li	s7,-1
    8000e9ca:	0104b903          	ld	s2,16(s1)
    8000e9ce:	0084aa83          	lw	s5,8(s1)
    8000e9d2:	3afd                	addiw	s5,s5,-1
    8000e9d4:	020ad063          	bgez	s5,8000e9f4 <_fwalk_reent+0x4c>
    8000e9d8:	6084                	ld	s1,0(s1)
    8000e9da:	f8e5                	bnez	s1,8000e9ca <_fwalk_reent+0x22>
    8000e9dc:	60a6                	ld	ra,72(sp)
    8000e9de:	8522                	mv	a0,s0
    8000e9e0:	6406                	ld	s0,64(sp)
    8000e9e2:	74e2                	ld	s1,56(sp)
    8000e9e4:	7942                	ld	s2,48(sp)
    8000e9e6:	79a2                	ld	s3,40(sp)
    8000e9e8:	7a02                	ld	s4,32(sp)
    8000e9ea:	6ae2                	ld	s5,24(sp)
    8000e9ec:	6b42                	ld	s6,16(sp)
    8000e9ee:	6ba2                	ld	s7,8(sp)
    8000e9f0:	6161                	addi	sp,sp,80
    8000e9f2:	8082                	ret
    8000e9f4:	01095783          	lhu	a5,16(s2)
    8000e9f8:	00fb7b63          	bgeu	s6,a5,8000ea0e <_fwalk_reent+0x66>
    8000e9fc:	01291783          	lh	a5,18(s2)
    8000ea00:	01778763          	beq	a5,s7,8000ea0e <_fwalk_reent+0x66>
    8000ea04:	85ca                	mv	a1,s2
    8000ea06:	854e                	mv	a0,s3
    8000ea08:	9a02                	jalr	s4
    8000ea0a:	8c49                	or	s0,s0,a0
    8000ea0c:	2401                	sext.w	s0,s0
    8000ea0e:	0b890913          	addi	s2,s2,184
    8000ea12:	b7c1                	j	8000e9d2 <_fwalk_reent+0x2a>

000000008000ea14 <__swhatbuf_r>:
    8000ea14:	7175                	addi	sp,sp,-144
    8000ea16:	f8ca                	sd	s2,112(sp)
    8000ea18:	892e                	mv	s2,a1
    8000ea1a:	01259583          	lh	a1,18(a1)
    8000ea1e:	e122                	sd	s0,128(sp)
    8000ea20:	fca6                	sd	s1,120(sp)
    8000ea22:	e506                	sd	ra,136(sp)
    8000ea24:	8432                	mv	s0,a2
    8000ea26:	84b6                	mv	s1,a3
    8000ea28:	0005dc63          	bgez	a1,8000ea40 <__swhatbuf_r+0x2c>
    8000ea2c:	01091783          	lh	a5,16(s2)
    8000ea30:	0004a023          	sw	zero,0(s1)
    8000ea34:	0807f793          	andi	a5,a5,128
    8000ea38:	e395                	bnez	a5,8000ea5c <__swhatbuf_r+0x48>
    8000ea3a:	40000793          	li	a5,1024
    8000ea3e:	a00d                	j	8000ea60 <__swhatbuf_r+0x4c>
    8000ea40:	0030                	addi	a2,sp,8
    8000ea42:	204000ef          	jal	ra,8000ec46 <_fstat_r>
    8000ea46:	fe0543e3          	bltz	a0,8000ea2c <__swhatbuf_r+0x18>
    8000ea4a:	47b2                	lw	a5,12(sp)
    8000ea4c:	673d                	lui	a4,0xf
    8000ea4e:	8ff9                	and	a5,a5,a4
    8000ea50:	6709                	lui	a4,0x2
    8000ea52:	8f99                	sub	a5,a5,a4
    8000ea54:	0017b793          	seqz	a5,a5
    8000ea58:	c09c                	sw	a5,0(s1)
    8000ea5a:	b7c5                	j	8000ea3a <__swhatbuf_r+0x26>
    8000ea5c:	04000793          	li	a5,64
    8000ea60:	60aa                	ld	ra,136(sp)
    8000ea62:	e01c                	sd	a5,0(s0)
    8000ea64:	640a                	ld	s0,128(sp)
    8000ea66:	74e6                	ld	s1,120(sp)
    8000ea68:	7946                	ld	s2,112(sp)
    8000ea6a:	4501                	li	a0,0
    8000ea6c:	6149                	addi	sp,sp,144
    8000ea6e:	8082                	ret

000000008000ea70 <__smakebuf_r>:
    8000ea70:	0105d783          	lhu	a5,16(a1)
    8000ea74:	7179                	addi	sp,sp,-48
    8000ea76:	f022                	sd	s0,32(sp)
    8000ea78:	f406                	sd	ra,40(sp)
    8000ea7a:	ec26                	sd	s1,24(sp)
    8000ea7c:	e84a                	sd	s2,16(sp)
    8000ea7e:	8b89                	andi	a5,a5,2
    8000ea80:	842e                	mv	s0,a1
    8000ea82:	cf89                	beqz	a5,8000ea9c <__smakebuf_r+0x2c>
    8000ea84:	07f40793          	addi	a5,s0,127
    8000ea88:	e01c                	sd	a5,0(s0)
    8000ea8a:	ec1c                	sd	a5,24(s0)
    8000ea8c:	4785                	li	a5,1
    8000ea8e:	d01c                	sw	a5,32(s0)
    8000ea90:	70a2                	ld	ra,40(sp)
    8000ea92:	7402                	ld	s0,32(sp)
    8000ea94:	64e2                	ld	s1,24(sp)
    8000ea96:	6942                	ld	s2,16(sp)
    8000ea98:	6145                	addi	sp,sp,48
    8000ea9a:	8082                	ret
    8000ea9c:	0054                	addi	a3,sp,4
    8000ea9e:	0030                	addi	a2,sp,8
    8000eaa0:	892a                	mv	s2,a0
    8000eaa2:	f73ff0ef          	jal	ra,8000ea14 <__swhatbuf_r>
    8000eaa6:	65a2                	ld	a1,8(sp)
    8000eaa8:	84aa                	mv	s1,a0
    8000eaaa:	854a                	mv	a0,s2
    8000eaac:	822ff0ef          	jal	ra,8000dace <_malloc_r>
    8000eab0:	ed01                	bnez	a0,8000eac8 <__smakebuf_r+0x58>
    8000eab2:	01041783          	lh	a5,16(s0)
    8000eab6:	2007f713          	andi	a4,a5,512
    8000eaba:	fb79                	bnez	a4,8000ea90 <__smakebuf_r+0x20>
    8000eabc:	9bf1                	andi	a5,a5,-4
    8000eabe:	0027e793          	ori	a5,a5,2
    8000eac2:	00f41823          	sh	a5,16(s0)
    8000eac6:	bf7d                	j	8000ea84 <__smakebuf_r+0x14>
    8000eac8:	00000797          	auipc	a5,0x0
    8000eacc:	d4078793          	addi	a5,a5,-704 # 8000e808 <_cleanup_r>
    8000ead0:	04f93423          	sd	a5,72(s2)
    8000ead4:	01045783          	lhu	a5,16(s0)
    8000ead8:	e008                	sd	a0,0(s0)
    8000eada:	ec08                	sd	a0,24(s0)
    8000eadc:	0807e793          	ori	a5,a5,128
    8000eae0:	00f41823          	sh	a5,16(s0)
    8000eae4:	67a2                	ld	a5,8(sp)
    8000eae6:	d01c                	sw	a5,32(s0)
    8000eae8:	4792                	lw	a5,4(sp)
    8000eaea:	cf91                	beqz	a5,8000eb06 <__smakebuf_r+0x96>
    8000eaec:	01241583          	lh	a1,18(s0)
    8000eaf0:	854a                	mv	a0,s2
    8000eaf2:	186000ef          	jal	ra,8000ec78 <_isatty_r>
    8000eaf6:	c901                	beqz	a0,8000eb06 <__smakebuf_r+0x96>
    8000eaf8:	01045783          	lhu	a5,16(s0)
    8000eafc:	9bf1                	andi	a5,a5,-4
    8000eafe:	0017e793          	ori	a5,a5,1
    8000eb02:	00f41823          	sh	a5,16(s0)
    8000eb06:	01045503          	lhu	a0,16(s0)
    8000eb0a:	8cc9                	or	s1,s1,a0
    8000eb0c:	00941823          	sh	s1,16(s0)
    8000eb10:	b741                	j	8000ea90 <__smakebuf_r+0x20>

000000008000eb12 <__malloc_lock>:
    8000eb12:	83818513          	addi	a0,gp,-1992 # 800ab600 <__lock___malloc_recursive_mutex>
    8000eb16:	91ff406f          	j	80003434 <__retarget_lock_acquire_recursive>

000000008000eb1a <__malloc_unlock>:
    8000eb1a:	83818513          	addi	a0,gp,-1992 # 800ab600 <__lock___malloc_recursive_mutex>
    8000eb1e:	91df406f          	j	8000343a <__retarget_lock_release_recursive>

000000008000eb22 <__sread>:
    8000eb22:	1141                	addi	sp,sp,-16
    8000eb24:	e022                	sd	s0,0(sp)
    8000eb26:	842e                	mv	s0,a1
    8000eb28:	01259583          	lh	a1,18(a1)
    8000eb2c:	e406                	sd	ra,8(sp)
    8000eb2e:	1ae000ef          	jal	ra,8000ecdc <_read_r>
    8000eb32:	00054963          	bltz	a0,8000eb44 <__sread+0x22>
    8000eb36:	6c5c                	ld	a5,152(s0)
    8000eb38:	97aa                	add	a5,a5,a0
    8000eb3a:	ec5c                	sd	a5,152(s0)
    8000eb3c:	60a2                	ld	ra,8(sp)
    8000eb3e:	6402                	ld	s0,0(sp)
    8000eb40:	0141                	addi	sp,sp,16
    8000eb42:	8082                	ret
    8000eb44:	01045783          	lhu	a5,16(s0)
    8000eb48:	777d                	lui	a4,0xfffff
    8000eb4a:	177d                	addi	a4,a4,-1
    8000eb4c:	8ff9                	and	a5,a5,a4
    8000eb4e:	00f41823          	sh	a5,16(s0)
    8000eb52:	b7ed                	j	8000eb3c <__sread+0x1a>

000000008000eb54 <__swrite>:
    8000eb54:	0105d783          	lhu	a5,16(a1)
    8000eb58:	7179                	addi	sp,sp,-48
    8000eb5a:	f022                	sd	s0,32(sp)
    8000eb5c:	ec26                	sd	s1,24(sp)
    8000eb5e:	e84a                	sd	s2,16(sp)
    8000eb60:	e44e                	sd	s3,8(sp)
    8000eb62:	f406                	sd	ra,40(sp)
    8000eb64:	1007f793          	andi	a5,a5,256
    8000eb68:	84aa                	mv	s1,a0
    8000eb6a:	842e                	mv	s0,a1
    8000eb6c:	8932                	mv	s2,a2
    8000eb6e:	89b6                	mv	s3,a3
    8000eb70:	c799                	beqz	a5,8000eb7e <__swrite+0x2a>
    8000eb72:	01259583          	lh	a1,18(a1)
    8000eb76:	4689                	li	a3,2
    8000eb78:	4601                	li	a2,0
    8000eb7a:	12e000ef          	jal	ra,8000eca8 <_lseek_r>
    8000eb7e:	01045783          	lhu	a5,16(s0)
    8000eb82:	777d                	lui	a4,0xfffff
    8000eb84:	177d                	addi	a4,a4,-1
    8000eb86:	8ff9                	and	a5,a5,a4
    8000eb88:	01241583          	lh	a1,18(s0)
    8000eb8c:	00f41823          	sh	a5,16(s0)
    8000eb90:	7402                	ld	s0,32(sp)
    8000eb92:	70a2                	ld	ra,40(sp)
    8000eb94:	86ce                	mv	a3,s3
    8000eb96:	864a                	mv	a2,s2
    8000eb98:	69a2                	ld	s3,8(sp)
    8000eb9a:	6942                	ld	s2,16(sp)
    8000eb9c:	8526                	mv	a0,s1
    8000eb9e:	64e2                	ld	s1,24(sp)
    8000eba0:	6145                	addi	sp,sp,48
    8000eba2:	a081                	j	8000ebe2 <_write_r>

000000008000eba4 <__sseek>:
    8000eba4:	1141                	addi	sp,sp,-16
    8000eba6:	e022                	sd	s0,0(sp)
    8000eba8:	842e                	mv	s0,a1
    8000ebaa:	01259583          	lh	a1,18(a1)
    8000ebae:	e406                	sd	ra,8(sp)
    8000ebb0:	0f8000ef          	jal	ra,8000eca8 <_lseek_r>
    8000ebb4:	57fd                	li	a5,-1
    8000ebb6:	01045703          	lhu	a4,16(s0)
    8000ebba:	00f51b63          	bne	a0,a5,8000ebd0 <__sseek+0x2c>
    8000ebbe:	77fd                	lui	a5,0xfffff
    8000ebc0:	17fd                	addi	a5,a5,-1
    8000ebc2:	8ff9                	and	a5,a5,a4
    8000ebc4:	00f41823          	sh	a5,16(s0)
    8000ebc8:	60a2                	ld	ra,8(sp)
    8000ebca:	6402                	ld	s0,0(sp)
    8000ebcc:	0141                	addi	sp,sp,16
    8000ebce:	8082                	ret
    8000ebd0:	6785                	lui	a5,0x1
    8000ebd2:	8fd9                	or	a5,a5,a4
    8000ebd4:	00f41823          	sh	a5,16(s0)
    8000ebd8:	ec48                	sd	a0,152(s0)
    8000ebda:	b7fd                	j	8000ebc8 <__sseek+0x24>

000000008000ebdc <__sclose>:
    8000ebdc:	01259583          	lh	a1,18(a1)
    8000ebe0:	a81d                	j	8000ec16 <_close_r>

000000008000ebe2 <_write_r>:
    8000ebe2:	1141                	addi	sp,sp,-16
    8000ebe4:	e022                	sd	s0,0(sp)
    8000ebe6:	842a                	mv	s0,a0
    8000ebe8:	852e                	mv	a0,a1
    8000ebea:	85b2                	mv	a1,a2
    8000ebec:	8636                	mv	a2,a3
    8000ebee:	0007f797          	auipc	a5,0x7f
    8000ebf2:	f207a723          	sw	zero,-210(a5) # 8008db1c <errno>
    8000ebf6:	e406                	sd	ra,8(sp)
    8000ebf8:	fc2f40ef          	jal	ra,800033ba <_write>
    8000ebfc:	57fd                	li	a5,-1
    8000ebfe:	00f51863          	bne	a0,a5,8000ec0e <_write_r+0x2c>
    8000ec02:	0007f797          	auipc	a5,0x7f
    8000ec06:	f1a7a783          	lw	a5,-230(a5) # 8008db1c <errno>
    8000ec0a:	c391                	beqz	a5,8000ec0e <_write_r+0x2c>
    8000ec0c:	c01c                	sw	a5,0(s0)
    8000ec0e:	60a2                	ld	ra,8(sp)
    8000ec10:	6402                	ld	s0,0(sp)
    8000ec12:	0141                	addi	sp,sp,16
    8000ec14:	8082                	ret

000000008000ec16 <_close_r>:
    8000ec16:	1141                	addi	sp,sp,-16
    8000ec18:	e022                	sd	s0,0(sp)
    8000ec1a:	842a                	mv	s0,a0
    8000ec1c:	852e                	mv	a0,a1
    8000ec1e:	0007f797          	auipc	a5,0x7f
    8000ec22:	ee07af23          	sw	zero,-258(a5) # 8008db1c <errno>
    8000ec26:	e406                	sd	ra,8(sp)
    8000ec28:	f98f40ef          	jal	ra,800033c0 <_close>
    8000ec2c:	57fd                	li	a5,-1
    8000ec2e:	00f51863          	bne	a0,a5,8000ec3e <_close_r+0x28>
    8000ec32:	0007f797          	auipc	a5,0x7f
    8000ec36:	eea7a783          	lw	a5,-278(a5) # 8008db1c <errno>
    8000ec3a:	c391                	beqz	a5,8000ec3e <_close_r+0x28>
    8000ec3c:	c01c                	sw	a5,0(s0)
    8000ec3e:	60a2                	ld	ra,8(sp)
    8000ec40:	6402                	ld	s0,0(sp)
    8000ec42:	0141                	addi	sp,sp,16
    8000ec44:	8082                	ret

000000008000ec46 <_fstat_r>:
    8000ec46:	1141                	addi	sp,sp,-16
    8000ec48:	e022                	sd	s0,0(sp)
    8000ec4a:	842a                	mv	s0,a0
    8000ec4c:	852e                	mv	a0,a1
    8000ec4e:	85b2                	mv	a1,a2
    8000ec50:	0007f797          	auipc	a5,0x7f
    8000ec54:	ec07a623          	sw	zero,-308(a5) # 8008db1c <errno>
    8000ec58:	e406                	sd	ra,8(sp)
    8000ec5a:	f7cf40ef          	jal	ra,800033d6 <_fstat>
    8000ec5e:	57fd                	li	a5,-1
    8000ec60:	00f51863          	bne	a0,a5,8000ec70 <_fstat_r+0x2a>
    8000ec64:	0007f797          	auipc	a5,0x7f
    8000ec68:	eb87a783          	lw	a5,-328(a5) # 8008db1c <errno>
    8000ec6c:	c391                	beqz	a5,8000ec70 <_fstat_r+0x2a>
    8000ec6e:	c01c                	sw	a5,0(s0)
    8000ec70:	60a2                	ld	ra,8(sp)
    8000ec72:	6402                	ld	s0,0(sp)
    8000ec74:	0141                	addi	sp,sp,16
    8000ec76:	8082                	ret

000000008000ec78 <_isatty_r>:
    8000ec78:	1141                	addi	sp,sp,-16
    8000ec7a:	e022                	sd	s0,0(sp)
    8000ec7c:	842a                	mv	s0,a0
    8000ec7e:	852e                	mv	a0,a1
    8000ec80:	0007f797          	auipc	a5,0x7f
    8000ec84:	e807ae23          	sw	zero,-356(a5) # 8008db1c <errno>
    8000ec88:	e406                	sd	ra,8(sp)
    8000ec8a:	f3ef40ef          	jal	ra,800033c8 <_isatty>
    8000ec8e:	57fd                	li	a5,-1
    8000ec90:	00f51863          	bne	a0,a5,8000eca0 <_isatty_r+0x28>
    8000ec94:	0007f797          	auipc	a5,0x7f
    8000ec98:	e887a783          	lw	a5,-376(a5) # 8008db1c <errno>
    8000ec9c:	c391                	beqz	a5,8000eca0 <_isatty_r+0x28>
    8000ec9e:	c01c                	sw	a5,0(s0)
    8000eca0:	60a2                	ld	ra,8(sp)
    8000eca2:	6402                	ld	s0,0(sp)
    8000eca4:	0141                	addi	sp,sp,16
    8000eca6:	8082                	ret

000000008000eca8 <_lseek_r>:
    8000eca8:	1141                	addi	sp,sp,-16
    8000ecaa:	e022                	sd	s0,0(sp)
    8000ecac:	842a                	mv	s0,a0
    8000ecae:	852e                	mv	a0,a1
    8000ecb0:	85b2                	mv	a1,a2
    8000ecb2:	8636                	mv	a2,a3
    8000ecb4:	0007f797          	auipc	a5,0x7f
    8000ecb8:	e607a423          	sw	zero,-408(a5) # 8008db1c <errno>
    8000ecbc:	e406                	sd	ra,8(sp)
    8000ecbe:	f06f40ef          	jal	ra,800033c4 <_lseek>
    8000ecc2:	57fd                	li	a5,-1
    8000ecc4:	00f51863          	bne	a0,a5,8000ecd4 <_lseek_r+0x2c>
    8000ecc8:	0007f797          	auipc	a5,0x7f
    8000eccc:	e547a783          	lw	a5,-428(a5) # 8008db1c <errno>
    8000ecd0:	c391                	beqz	a5,8000ecd4 <_lseek_r+0x2c>
    8000ecd2:	c01c                	sw	a5,0(s0)
    8000ecd4:	60a2                	ld	ra,8(sp)
    8000ecd6:	6402                	ld	s0,0(sp)
    8000ecd8:	0141                	addi	sp,sp,16
    8000ecda:	8082                	ret

000000008000ecdc <_read_r>:
    8000ecdc:	1141                	addi	sp,sp,-16
    8000ecde:	e022                	sd	s0,0(sp)
    8000ece0:	842a                	mv	s0,a0
    8000ece2:	852e                	mv	a0,a1
    8000ece4:	85b2                	mv	a1,a2
    8000ece6:	8636                	mv	a2,a3
    8000ece8:	0007f797          	auipc	a5,0x7f
    8000ecec:	e207aa23          	sw	zero,-460(a5) # 8008db1c <errno>
    8000ecf0:	e406                	sd	ra,8(sp)
    8000ecf2:	ec2f40ef          	jal	ra,800033b4 <_read>
    8000ecf6:	57fd                	li	a5,-1
    8000ecf8:	00f51863          	bne	a0,a5,8000ed08 <_read_r+0x2c>
    8000ecfc:	0007f797          	auipc	a5,0x7f
    8000ed00:	e207a783          	lw	a5,-480(a5) # 8008db1c <errno>
    8000ed04:	c391                	beqz	a5,8000ed08 <_read_r+0x2c>
    8000ed06:	c01c                	sw	a5,0(s0)
    8000ed08:	60a2                	ld	ra,8(sp)
    8000ed0a:	6402                	ld	s0,0(sp)
    8000ed0c:	0141                	addi	sp,sp,16
    8000ed0e:	8082                	ret
